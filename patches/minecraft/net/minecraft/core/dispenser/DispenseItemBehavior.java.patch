--- a/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -3,29 +_,42 @@
 import com.mojang.logging.LogUtils;
 import java.util.List;
 import java.util.Optional;
-import java.util.function.Consumer;
+import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.component.DataComponents;
+import net.minecraft.core.Position;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.tags.FluidTags;
-import net.minecraft.world.entity.EntitySelector;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Saddleable;
-import net.minecraft.world.entity.animal.armadillo.Armadillo;
 import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
 import net.minecraft.world.entity.animal.horse.AbstractHorse;
 import net.minecraft.world.entity.decoration.ArmorStand;
 import net.minecraft.world.entity.item.PrimedTnt;
+import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.AbstractArrow;
+import net.minecraft.world.entity.projectile.Arrow;
+import net.minecraft.world.entity.projectile.FireworkRocketEntity;
+import net.minecraft.world.entity.projectile.Projectile;
+import net.minecraft.world.entity.projectile.SmallFireball;
+import net.minecraft.world.entity.projectile.Snowball;
+import net.minecraft.world.entity.projectile.SpectralArrow;
+import net.minecraft.world.entity.projectile.ThrownEgg;
+import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
+import net.minecraft.world.entity.projectile.ThrownPotion;
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.ArmorItem;
 import net.minecraft.world.item.BoneMealItem;
+import net.minecraft.world.item.BucketItem;
 import net.minecraft.world.item.DispensibleContainerItem;
 import net.minecraft.world.item.DyeColor;
 import net.minecraft.world.item.HoneycombItem;
@@ -33,12 +_,13 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.SpawnEggItem;
-import net.minecraft.world.item.alchemy.PotionContents;
+import net.minecraft.world.item.alchemy.PotionUtils;
 import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.BaseFireBlock;
 import net.minecraft.world.level.block.BeehiveBlock;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BucketPickup;
 import net.minecraft.world.level.block.CampfireBlock;
@@ -46,513 +_,1011 @@
 import net.minecraft.world.level.block.CandleCakeBlock;
 import net.minecraft.world.level.block.CarvedPumpkinBlock;
 import net.minecraft.world.level.block.DispenserBlock;
+import net.minecraft.world.level.block.LiquidBlockContainer;
 import net.minecraft.world.level.block.RespawnAnchorBlock;
+import net.minecraft.world.level.block.SaplingBlock;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.SkullBlock;
 import net.minecraft.world.level.block.TntBlock;
 import net.minecraft.world.level.block.WitherSkullBlock;
 import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.DispenserBlockEntity;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.block.state.properties.RotationSegment;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.DummyGeneratorAccess;
+import org.bukkit.event.block.BlockDispenseArmorEvent;
+import org.bukkit.event.block.BlockDispenseEvent;
+import org.bukkit.event.block.BlockFertilizeEvent;
+import org.bukkit.event.world.StructureGrowEvent;
 import org.slf4j.Logger;
 
 public interface DispenseItemBehavior {
-    Logger LOGGER = LogUtils.getLogger();
-    DispenseItemBehavior NOOP = (p_123400_, p_123401_) -> p_123401_;
-
-    ItemStack dispense(BlockSource p_123403_, ItemStack p_123404_);
-
-    static void bootStrap() {
-        DispenserBlock.registerProjectileBehavior(Items.ARROW);
-        DispenserBlock.registerProjectileBehavior(Items.TIPPED_ARROW);
-        DispenserBlock.registerProjectileBehavior(Items.SPECTRAL_ARROW);
-        DispenserBlock.registerProjectileBehavior(Items.EGG);
-        DispenserBlock.registerProjectileBehavior(Items.SNOWBALL);
-        DispenserBlock.registerProjectileBehavior(Items.EXPERIENCE_BOTTLE);
-        DispenserBlock.registerProjectileBehavior(Items.SPLASH_POTION);
-        DispenserBlock.registerProjectileBehavior(Items.LINGERING_POTION);
-        DispenserBlock.registerProjectileBehavior(Items.FIREWORK_ROCKET);
-        DispenserBlock.registerProjectileBehavior(Items.FIRE_CHARGE);
-        DispenserBlock.registerProjectileBehavior(Items.WIND_CHARGE);
-        DefaultDispenseItemBehavior defaultdispenseitembehavior = new DefaultDispenseItemBehavior() {
-            @Override
-            public ItemStack execute(BlockSource p_327707_, ItemStack p_329825_) {
-                Direction direction = p_327707_.state().getValue(DispenserBlock.FACING);
-                EntityType<?> entitytype = ((SpawnEggItem)p_329825_.getItem()).getType(p_329825_);
-
-                try {
-                    entitytype.spawn(
-                        p_327707_.level(),
-                        p_329825_,
-                        null,
-                        p_327707_.pos().relative(direction),
-                        MobSpawnType.DISPENSER,
-                        direction != Direction.UP,
-                        false
-                    );
-                } catch (Exception exception) {
-                    LOGGER.error("Error while dispensing spawn egg from dispenser at {}", p_327707_.pos(), exception);
-                    return ItemStack.EMPTY;
-                }
-
-                p_329825_.shrink(1);
-                p_327707_.level().gameEvent(null, GameEvent.ENTITY_PLACE, p_327707_.pos());
-                return p_329825_;
-            }
-        };
-
-        for (SpawnEggItem spawneggitem : SpawnEggItem.eggs()) {
-            DispenserBlock.registerBehavior(spawneggitem, defaultdispenseitembehavior);
-        }
-
-        DispenserBlock.registerBehavior(Items.ARMOR_STAND, new DefaultDispenseItemBehavior() {
-            @Override
-            public ItemStack execute(BlockSource p_334267_, ItemStack p_328475_) {
-                Direction direction = p_334267_.state().getValue(DispenserBlock.FACING);
-                BlockPos blockpos = p_334267_.pos().relative(direction);
-                ServerLevel serverlevel = p_334267_.level();
-                Consumer<ArmorStand> consumer = EntityType.appendDefaultStackConfig(p_332267_ -> p_332267_.setYRot(direction.toYRot()), serverlevel, p_328475_, null);
-                ArmorStand armorstand = EntityType.ARMOR_STAND.spawn(serverlevel, consumer, blockpos, MobSpawnType.DISPENSER, false, false);
-                if (armorstand != null) {
-                    p_328475_.shrink(1);
-                }
-
-                return p_328475_;
-            }
-        });
-        DispenserBlock.registerBehavior(
-            Items.SADDLE,
-            new OptionalDispenseItemBehavior() {
-                @Override
-                public ItemStack execute(BlockSource p_328289_, ItemStack p_334031_) {
-                    BlockPos blockpos = p_328289_.pos().relative(p_328289_.state().getValue(DispenserBlock.FACING));
-                    List<LivingEntity> list = p_328289_.level()
-                        .getEntitiesOfClass(
-                            LivingEntity.class,
-                            new AABB(blockpos),
-                            p_329808_ -> !(p_329808_ instanceof Saddleable saddleable) ? false : !saddleable.isSaddled() && saddleable.isSaddleable()
-                        );
-                    if (!list.isEmpty()) {
-                        ((Saddleable)list.get(0)).equipSaddle(SoundSource.BLOCKS);
-                        p_334031_.shrink(1);
-                        this.setSuccess(true);
-                        return p_334031_;
-                    } else {
-                        return super.execute(p_328289_, p_334031_);
-                    }
-                }
-            }
-        );
-        DefaultDispenseItemBehavior defaultdispenseitembehavior1 = new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_334868_, ItemStack p_334276_) {
-                BlockPos blockpos = p_334868_.pos().relative(p_334868_.state().getValue(DispenserBlock.FACING));
-
-                for (AbstractHorse abstracthorse : p_334868_.level()
-                    .getEntitiesOfClass(AbstractHorse.class, new AABB(blockpos), p_325788_ -> p_325788_.isAlive() && p_325788_.canWearBodyArmor())) {
-                    if (abstracthorse.isBodyArmorItem(p_334276_) && !abstracthorse.isWearingBodyArmor() && abstracthorse.isTamed()) {
-                        abstracthorse.setBodyArmorItem(p_334276_.split(1));
-                        this.setSuccess(true);
-                        return p_334276_;
-                    }
-                }
-
-                return super.execute(p_334868_, p_334276_);
-            }
-        };
-        DispenserBlock.registerBehavior(Items.LEATHER_HORSE_ARMOR, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.IRON_HORSE_ARMOR, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.GOLDEN_HORSE_ARMOR, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.DIAMOND_HORSE_ARMOR, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.WHITE_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.ORANGE_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.CYAN_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.BLUE_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.BROWN_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.BLACK_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.GRAY_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.GREEN_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.LIGHT_BLUE_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.LIGHT_GRAY_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.LIME_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.MAGENTA_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.PINK_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.PURPLE_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.RED_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.YELLOW_CARPET, defaultdispenseitembehavior1);
-        DispenserBlock.registerBehavior(
-            Items.CHEST,
-            new OptionalDispenseItemBehavior() {
-                @Override
-                public ItemStack execute(BlockSource p_335842_, ItemStack p_335219_) {
-                    BlockPos blockpos = p_335842_.pos().relative(p_335842_.state().getValue(DispenserBlock.FACING));
-
-                    for (AbstractChestedHorse abstractchestedhorse : p_335842_.level()
-                        .getEntitiesOfClass(AbstractChestedHorse.class, new AABB(blockpos), p_325789_ -> p_325789_.isAlive() && !p_325789_.hasChest())) {
-                        if (abstractchestedhorse.isTamed() && abstractchestedhorse.getSlot(499).set(p_335219_)) {
-                            p_335219_.shrink(1);
-                            this.setSuccess(true);
-                            return p_335219_;
-                        }
-                    }
-
-                    return super.execute(p_335842_, p_335219_);
-                }
-            }
-        );
-        DispenserBlock.registerBehavior(Items.OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.OAK));
-        DispenserBlock.registerBehavior(Items.SPRUCE_BOAT, new BoatDispenseItemBehavior(Boat.Type.SPRUCE));
-        DispenserBlock.registerBehavior(Items.BIRCH_BOAT, new BoatDispenseItemBehavior(Boat.Type.BIRCH));
-        DispenserBlock.registerBehavior(Items.JUNGLE_BOAT, new BoatDispenseItemBehavior(Boat.Type.JUNGLE));
-        DispenserBlock.registerBehavior(Items.DARK_OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.DARK_OAK));
-        DispenserBlock.registerBehavior(Items.ACACIA_BOAT, new BoatDispenseItemBehavior(Boat.Type.ACACIA));
-        DispenserBlock.registerBehavior(Items.CHERRY_BOAT, new BoatDispenseItemBehavior(Boat.Type.CHERRY));
-        DispenserBlock.registerBehavior(Items.MANGROVE_BOAT, new BoatDispenseItemBehavior(Boat.Type.MANGROVE));
-        DispenserBlock.registerBehavior(Items.BAMBOO_RAFT, new BoatDispenseItemBehavior(Boat.Type.BAMBOO));
-        DispenserBlock.registerBehavior(Items.OAK_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.OAK, true));
-        DispenserBlock.registerBehavior(Items.SPRUCE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.SPRUCE, true));
-        DispenserBlock.registerBehavior(Items.BIRCH_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.BIRCH, true));
-        DispenserBlock.registerBehavior(Items.JUNGLE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.JUNGLE, true));
-        DispenserBlock.registerBehavior(Items.DARK_OAK_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.DARK_OAK, true));
-        DispenserBlock.registerBehavior(Items.ACACIA_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.ACACIA, true));
-        DispenserBlock.registerBehavior(Items.CHERRY_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.CHERRY, true));
-        DispenserBlock.registerBehavior(Items.MANGROVE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.MANGROVE, true));
-        DispenserBlock.registerBehavior(Items.BAMBOO_CHEST_RAFT, new BoatDispenseItemBehavior(Boat.Type.BAMBOO, true));
-        DispenseItemBehavior dispenseitembehavior1 = new DefaultDispenseItemBehavior() {
-            private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-
-            @Override
-            public ItemStack execute(BlockSource p_333645_, ItemStack p_333855_) {
-                DispensibleContainerItem dispensiblecontaineritem = (DispensibleContainerItem)p_333855_.getItem();
-                BlockPos blockpos = p_333645_.pos().relative(p_333645_.state().getValue(DispenserBlock.FACING));
-                Level level = p_333645_.level();
-                if (dispensiblecontaineritem.emptyContents(null, level, blockpos, null)) {
-                    dispensiblecontaineritem.checkExtraContent(null, level, p_333855_, blockpos);
-                    return new ItemStack(Items.BUCKET);
-                } else {
-                    return this.defaultDispenseItemBehavior.dispense(p_333645_, p_333855_);
-                }
-            }
-        };
-        DispenserBlock.registerBehavior(Items.LAVA_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.WATER_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.POWDER_SNOW_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.SALMON_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.COD_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.PUFFERFISH_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.TROPICAL_FISH_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.AXOLOTL_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.TADPOLE_BUCKET, dispenseitembehavior1);
-        DispenserBlock.registerBehavior(Items.BUCKET, new DefaultDispenseItemBehavior() {
-            private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-
-            @Override
-            public ItemStack execute(BlockSource p_332842_, ItemStack p_335191_) {
-                LevelAccessor levelaccessor = p_332842_.level();
-                BlockPos blockpos = p_332842_.pos().relative(p_332842_.state().getValue(DispenserBlock.FACING));
-                BlockState blockstate = levelaccessor.getBlockState(blockpos);
-                if (blockstate.getBlock() instanceof BucketPickup bucketpickup) {
-                    ItemStack itemstack = bucketpickup.pickupBlock(null, levelaccessor, blockpos, blockstate);
-                    if (itemstack.isEmpty()) {
-                        return super.execute(p_332842_, p_335191_);
-                    } else {
-                        levelaccessor.gameEvent(null, GameEvent.FLUID_PICKUP, blockpos);
-                        Item item = itemstack.getItem();
-                        p_335191_.shrink(1);
-                        if (p_335191_.isEmpty()) {
-                            return new ItemStack(item);
-                        } else {
-                            if (p_332842_.blockEntity().addItem(new ItemStack(item)) < 0) {
-                                this.defaultDispenseItemBehavior.dispense(p_332842_, new ItemStack(item));
-                            }
-
-                            return p_335191_;
-                        }
-                    }
-                } else {
-                    return super.execute(p_332842_, p_335191_);
-                }
-            }
-        });
-        DispenserBlock.registerBehavior(Items.FLINT_AND_STEEL, new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_333039_, ItemStack p_335778_) {
-                Level level = p_333039_.level();
-                this.setSuccess(true);
-                Direction direction = p_333039_.state().getValue(DispenserBlock.FACING);
-                BlockPos blockpos = p_333039_.pos().relative(direction);
-                BlockState blockstate = level.getBlockState(blockpos);
-                if (BaseFireBlock.canBePlacedAt(level, blockpos, direction)) {
-                    level.setBlockAndUpdate(blockpos, BaseFireBlock.getState(level, blockpos));
-                    level.gameEvent(null, GameEvent.BLOCK_PLACE, blockpos);
-                } else if (CampfireBlock.canLight(blockstate) || CandleBlock.canLight(blockstate) || CandleCakeBlock.canLight(blockstate)) {
-                    level.setBlockAndUpdate(blockpos, blockstate.setValue(BlockStateProperties.LIT, Boolean.valueOf(true)));
-                    level.gameEvent(null, GameEvent.BLOCK_CHANGE, blockpos);
-                } else if (blockstate.getBlock() instanceof TntBlock) {
-                    TntBlock.explode(level, blockpos);
-                    level.removeBlock(blockpos, false);
-                } else {
-                    this.setSuccess(false);
-                }
-
-                if (this.isSuccess()) {
-                    p_335778_.hurtAndBreak(1, level.getRandom(), null, () -> p_335778_.setCount(0));
-                }
-
-                return p_335778_;
-            }
-        });
-        DispenserBlock.registerBehavior(Items.BONE_MEAL, new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_123523_, ItemStack p_123524_) {
-                this.setSuccess(true);
-                Level level = p_123523_.level();
-                BlockPos blockpos = p_123523_.pos().relative(p_123523_.state().getValue(DispenserBlock.FACING));
-                if (!BoneMealItem.growCrop(p_123524_, level, blockpos) && !BoneMealItem.growWaterPlant(p_123524_, level, blockpos, null)) {
-                    this.setSuccess(false);
-                } else if (!level.isClientSide) {
-                    level.levelEvent(1505, blockpos, 15);
-                }
-
-                return p_123524_;
-            }
-        });
-        DispenserBlock.registerBehavior(
-            Blocks.TNT,
-            new DefaultDispenseItemBehavior() {
-                @Override
-                protected ItemStack execute(BlockSource p_123461_, ItemStack p_123462_) {
-                    Level level = p_123461_.level();
-                    BlockPos blockpos = p_123461_.pos().relative(p_123461_.state().getValue(DispenserBlock.FACING));
-                    PrimedTnt primedtnt = new PrimedTnt(
-                        level, (double)blockpos.getX() + 0.5, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5, null
-                    );
-                    level.addFreshEntity(primedtnt);
-                    level.playSound(null, primedtnt.getX(), primedtnt.getY(), primedtnt.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    level.gameEvent(null, GameEvent.ENTITY_PLACE, blockpos);
-                    p_123462_.shrink(1);
-                    return p_123462_;
-                }
-            }
-        );
-        DispenseItemBehavior dispenseitembehavior = new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_123529_, ItemStack p_123530_) {
-                this.setSuccess(ArmorItem.dispenseArmor(p_123529_, p_123530_));
-                return p_123530_;
-            }
-        };
-        DispenserBlock.registerBehavior(Items.CREEPER_HEAD, dispenseitembehavior);
-        DispenserBlock.registerBehavior(Items.ZOMBIE_HEAD, dispenseitembehavior);
-        DispenserBlock.registerBehavior(Items.DRAGON_HEAD, dispenseitembehavior);
-        DispenserBlock.registerBehavior(Items.SKELETON_SKULL, dispenseitembehavior);
-        DispenserBlock.registerBehavior(Items.PIGLIN_HEAD, dispenseitembehavior);
-        DispenserBlock.registerBehavior(Items.PLAYER_HEAD, dispenseitembehavior);
-        DispenserBlock.registerBehavior(Items.WITHER_SKELETON_SKULL, new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_123535_, ItemStack p_123536_) {
-                Level level = p_123535_.level();
-                Direction direction = p_123535_.state().getValue(DispenserBlock.FACING);
-                BlockPos blockpos = p_123535_.pos().relative(direction);
-                if (level.isEmptyBlock(blockpos) && WitherSkullBlock.canSpawnMob(level, blockpos, p_123536_)) {
-                    level.setBlock(blockpos, Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, Integer.valueOf(RotationSegment.convertToSegment(direction))), 3);
-                    level.gameEvent(null, GameEvent.BLOCK_PLACE, blockpos);
-                    BlockEntity blockentity = level.getBlockEntity(blockpos);
-                    if (blockentity instanceof SkullBlockEntity) {
-                        WitherSkullBlock.checkSpawn(level, blockpos, (SkullBlockEntity)blockentity);
-                    }
-
-                    p_123536_.shrink(1);
-                    this.setSuccess(true);
-                } else {
-                    this.setSuccess(ArmorItem.dispenseArmor(p_123535_, p_123536_));
-                }
-
-                return p_123536_;
-            }
-        });
-        DispenserBlock.registerBehavior(Blocks.CARVED_PUMPKIN, new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_123541_, ItemStack p_123542_) {
-                Level level = p_123541_.level();
-                BlockPos blockpos = p_123541_.pos().relative(p_123541_.state().getValue(DispenserBlock.FACING));
-                CarvedPumpkinBlock carvedpumpkinblock = (CarvedPumpkinBlock)Blocks.CARVED_PUMPKIN;
-                if (level.isEmptyBlock(blockpos) && carvedpumpkinblock.canSpawnGolem(level, blockpos)) {
-                    if (!level.isClientSide) {
-                        level.setBlock(blockpos, carvedpumpkinblock.defaultBlockState(), 3);
-                        level.gameEvent(null, GameEvent.BLOCK_PLACE, blockpos);
-                    }
-
-                    p_123542_.shrink(1);
-                    this.setSuccess(true);
-                } else {
-                    this.setSuccess(ArmorItem.dispenseArmor(p_123541_, p_123542_));
-                }
-
-                return p_123542_;
-            }
-        });
-        DispenserBlock.registerBehavior(Blocks.SHULKER_BOX.asItem(), new ShulkerBoxDispenseBehavior());
-
-        for (DyeColor dyecolor : DyeColor.values()) {
-            DispenserBlock.registerBehavior(ShulkerBoxBlock.getBlockByColor(dyecolor).asItem(), new ShulkerBoxDispenseBehavior());
-        }
-
-        DispenserBlock.registerBehavior(
-            Items.GLASS_BOTTLE.asItem(),
-            new OptionalDispenseItemBehavior() {
-                private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-
-                private ItemStack takeLiquid(BlockSource p_330210_, ItemStack p_334816_, ItemStack p_330695_) {
-                    p_334816_.shrink(1);
-                    if (p_334816_.isEmpty()) {
-                        p_330210_.level().gameEvent(null, GameEvent.FLUID_PICKUP, p_330210_.pos());
-                        return p_330695_.copy();
-                    } else {
-                        if (p_330210_.blockEntity().addItem(p_330695_.copy()) < 0) {
-                            this.defaultDispenseItemBehavior.dispense(p_330210_, p_330695_.copy());
-                        }
-
-                        return p_334816_;
-                    }
-                }
-
-                @Override
-                public ItemStack execute(BlockSource p_123547_, ItemStack p_123548_) {
-                    this.setSuccess(false);
-                    ServerLevel serverlevel = p_123547_.level();
-                    BlockPos blockpos = p_123547_.pos().relative(p_123547_.state().getValue(DispenserBlock.FACING));
-                    BlockState blockstate = serverlevel.getBlockState(blockpos);
-                    if (blockstate.is(
-                            BlockTags.BEEHIVES, p_333210_ -> p_333210_.hasProperty(BeehiveBlock.HONEY_LEVEL) && p_333210_.getBlock() instanceof BeehiveBlock
-                        )
-                        && blockstate.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
-                        ((BeehiveBlock)blockstate.getBlock())
-                            .releaseBeesAndResetHoneyLevel(serverlevel, blockstate, blockpos, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
-                        this.setSuccess(true);
-                        return this.takeLiquid(p_123547_, p_123548_, new ItemStack(Items.HONEY_BOTTLE));
-                    } else if (serverlevel.getFluidState(blockpos).is(FluidTags.WATER)) {
-                        this.setSuccess(true);
-                        return this.takeLiquid(p_123547_, p_123548_, PotionContents.createItemStack(Items.POTION, Potions.WATER));
-                    } else {
-                        return super.execute(p_123547_, p_123548_);
-                    }
-                }
-            }
-        );
-        DispenserBlock.registerBehavior(Items.GLOWSTONE, new OptionalDispenseItemBehavior() {
-            @Override
-            public ItemStack execute(BlockSource p_123556_, ItemStack p_123557_) {
-                Direction direction = p_123556_.state().getValue(DispenserBlock.FACING);
-                BlockPos blockpos = p_123556_.pos().relative(direction);
-                Level level = p_123556_.level();
-                BlockState blockstate = level.getBlockState(blockpos);
-                this.setSuccess(true);
-                if (blockstate.is(Blocks.RESPAWN_ANCHOR)) {
-                    if (blockstate.getValue(RespawnAnchorBlock.CHARGE) != 4) {
-                        RespawnAnchorBlock.charge(null, level, blockpos, blockstate);
-                        p_123557_.shrink(1);
-                    } else {
-                        this.setSuccess(false);
-                    }
-
-                    return p_123557_;
-                } else {
-                    return super.execute(p_123556_, p_123557_);
-                }
-            }
-        });
-        DispenserBlock.registerBehavior(Items.SHEARS.asItem(), new ShearsDispenseItemBehavior());
-        DispenserBlock.registerBehavior(Items.BRUSH.asItem(), new OptionalDispenseItemBehavior() {
-            @Override
-            protected ItemStack execute(BlockSource p_123561_, ItemStack p_123562_) {
-                ServerLevel serverlevel = p_123561_.level();
-                BlockPos blockpos = p_123561_.pos().relative(p_123561_.state().getValue(DispenserBlock.FACING));
-                List<Armadillo> list = serverlevel.getEntitiesOfClass(Armadillo.class, new AABB(blockpos), EntitySelector.NO_SPECTATORS);
-                if (list.isEmpty()) {
-                    this.setSuccess(false);
-                    return p_123562_;
-                } else {
-                    for (Armadillo armadillo : list) {
-                        if (armadillo.brushOffScute()) {
-                            p_123562_.hurtAndBreak(16, serverlevel.getRandom(), null, () -> {
-                                p_123562_.shrink(1);
-                                p_123562_.setDamageValue(0);
-                            });
-                            return p_123562_;
-                        }
-                    }
-
-                    this.setSuccess(false);
-                    return p_123562_;
-                }
-            }
-        });
-        DispenserBlock.registerBehavior(Items.HONEYCOMB, new OptionalDispenseItemBehavior() {
-            @Override
-            public ItemStack execute(BlockSource p_123566_, ItemStack p_123567_) {
-                BlockPos blockpos = p_123566_.pos().relative(p_123566_.state().getValue(DispenserBlock.FACING));
-                Level level = p_123566_.level();
-                BlockState blockstate = level.getBlockState(blockpos);
-                Optional<BlockState> optional = HoneycombItem.getWaxed(blockstate);
-                if (optional.isPresent()) {
-                    level.setBlockAndUpdate(blockpos, optional.get());
-                    level.levelEvent(3003, blockpos, 0);
-                    p_123567_.shrink(1);
-                    this.setSuccess(true);
-                    return p_123567_;
-                } else {
-                    return super.execute(p_123566_, p_123567_);
-                }
-            }
-        });
-        DispenserBlock.registerBehavior(
-            Items.POTION,
-            new DefaultDispenseItemBehavior() {
-                private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
-
-                @Override
-                public ItemStack execute(BlockSource p_123412_, ItemStack p_123413_) {
-                    PotionContents potioncontents = p_123413_.getOrDefault(DataComponents.POTION_CONTENTS, PotionContents.EMPTY);
-                    if (!potioncontents.is(Potions.WATER)) {
-                        return this.defaultDispenseItemBehavior.dispense(p_123412_, p_123413_);
-                    } else {
-                        ServerLevel serverlevel = p_123412_.level();
-                        BlockPos blockpos = p_123412_.pos();
-                        BlockPos blockpos1 = p_123412_.pos().relative(p_123412_.state().getValue(DispenserBlock.FACING));
-                        if (!serverlevel.getBlockState(blockpos1).is(BlockTags.CONVERTABLE_TO_MUD)) {
-                            return this.defaultDispenseItemBehavior.dispense(p_123412_, p_123413_);
-                        } else {
-                            if (!serverlevel.isClientSide) {
-                                for (int i = 0; i < 5; i++) {
-                                    serverlevel.sendParticles(
-                                        ParticleTypes.SPLASH,
-                                        (double)blockpos.getX() + serverlevel.random.nextDouble(),
-                                        (double)(blockpos.getY() + 1),
-                                        (double)blockpos.getZ() + serverlevel.random.nextDouble(),
-                                        1,
-                                        0.0,
-                                        0.0,
-                                        0.0,
-                                        1.0
-                                    );
-                                }
-                            }
-
-                            serverlevel.playSound(null, blockpos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                            serverlevel.gameEvent(null, GameEvent.FLUID_PLACE, blockpos);
-                            serverlevel.setBlockAndUpdate(blockpos1, Blocks.MUD.defaultBlockState());
-                            return new ItemStack(Items.GLASS_BOTTLE);
-                        }
-                    }
-                }
-            }
-        );
-    }
+   Logger LOGGER = LogUtils.getLogger();
+   DispenseItemBehavior NOOP = (p_123400_, p_123401_) -> {
+      return p_123401_;
+   };
+
+   ItemStack dispense(BlockSource p_123403_, ItemStack p_123404_);
+
+   static void bootStrap() {
+      DispenserBlock.registerBehavior(Items.ARROW, new AbstractProjectileDispenseBehavior() {
+         protected Projectile getProjectile(Level p_123407_, Position p_123408_, ItemStack p_123409_) {
+            Arrow arrow = new Arrow(p_123407_, p_123408_.x(), p_123408_.y(), p_123408_.z(), p_123409_.copyWithCount(1));
+            arrow.pickup = AbstractArrow.Pickup.ALLOWED;
+            return arrow;
+         }
+      });
+      DispenserBlock.registerBehavior(Items.TIPPED_ARROW, new AbstractProjectileDispenseBehavior() {
+         protected Projectile getProjectile(Level p_123420_, Position p_123421_, ItemStack p_123422_) {
+            Arrow arrow = new Arrow(p_123420_, p_123421_.x(), p_123421_.y(), p_123421_.z(), p_123422_.copyWithCount(1));
+            arrow.setEffectsFromItem(p_123422_);
+            arrow.pickup = AbstractArrow.Pickup.ALLOWED;
+            return arrow;
+         }
+      });
+      DispenserBlock.registerBehavior(Items.SPECTRAL_ARROW, new AbstractProjectileDispenseBehavior() {
+         protected Projectile getProjectile(Level p_123456_, Position p_123457_, ItemStack p_123458_) {
+            AbstractArrow abstractarrow = new SpectralArrow(p_123456_, p_123457_.x(), p_123457_.y(), p_123457_.z(), p_123458_.copyWithCount(1));
+            abstractarrow.pickup = AbstractArrow.Pickup.ALLOWED;
+            return abstractarrow;
+         }
+      });
+      DispenserBlock.registerBehavior(Items.EGG, new AbstractProjectileDispenseBehavior() {
+         protected Projectile getProjectile(Level p_123468_, Position p_123469_, ItemStack p_123470_) {
+            return Util.make(new ThrownEgg(p_123468_, p_123469_.x(), p_123469_.y(), p_123469_.z()), (p_123466_) -> {
+               p_123466_.setItem(p_123470_);
+            });
+         }
+      });
+      DispenserBlock.registerBehavior(Items.SNOWBALL, new AbstractProjectileDispenseBehavior() {
+         protected Projectile getProjectile(Level p_123476_, Position p_123477_, ItemStack p_123478_) {
+            return Util.make(new Snowball(p_123476_, p_123477_.x(), p_123477_.y(), p_123477_.z()), (p_123474_) -> {
+               p_123474_.setItem(p_123478_);
+            });
+         }
+      });
+      DispenserBlock.registerBehavior(Items.EXPERIENCE_BOTTLE, new AbstractProjectileDispenseBehavior() {
+         protected Projectile getProjectile(Level p_123485_, Position p_123486_, ItemStack p_123487_) {
+            return Util.make(new ThrownExperienceBottle(p_123485_, p_123486_.x(), p_123486_.y(), p_123486_.z()), (p_123483_) -> {
+               p_123483_.setItem(p_123487_);
+            });
+         }
+
+         protected float getUncertainty() {
+            return super.getUncertainty() * 0.5F;
+         }
+
+         protected float getPower() {
+            return super.getPower() * 1.25F;
+         }
+      });
+      DispenserBlock.registerBehavior(Items.SPLASH_POTION, new DispenseItemBehavior() {
+         public ItemStack dispense(BlockSource p_123491_, ItemStack p_123492_) {
+            return (new AbstractProjectileDispenseBehavior() {
+               protected Projectile getProjectile(Level p_123501_, Position p_123502_, ItemStack p_123503_) {
+                  return Util.make(new ThrownPotion(p_123501_, p_123502_.x(), p_123502_.y(), p_123502_.z()), (p_123499_) -> {
+                     p_123499_.setItem(p_123503_);
+                  });
+               }
+
+               protected float getUncertainty() {
+                  return super.getUncertainty() * 0.5F;
+               }
+
+               protected float getPower() {
+                  return super.getPower() * 1.25F;
+               }
+            }).dispense(p_123491_, p_123492_);
+         }
+      });
+      DispenserBlock.registerBehavior(Items.LINGERING_POTION, new DispenseItemBehavior() {
+         public ItemStack dispense(BlockSource p_123507_, ItemStack p_123508_) {
+            return (new AbstractProjectileDispenseBehavior() {
+               protected Projectile getProjectile(Level p_123517_, Position p_123518_, ItemStack p_123519_) {
+                  return Util.make(new ThrownPotion(p_123517_, p_123518_.x(), p_123518_.y(), p_123518_.z()), (p_123515_) -> {
+                     p_123515_.setItem(p_123519_);
+                  });
+               }
+
+               protected float getUncertainty() {
+                  return super.getUncertainty() * 0.5F;
+               }
+
+               protected float getPower() {
+                  return super.getPower() * 1.25F;
+               }
+            }).dispense(p_123507_, p_123508_);
+         }
+      });
+      DefaultDispenseItemBehavior defaultdispenseitembehavior = new DefaultDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123523_, ItemStack p_123524_) {
+            Direction direction = p_123523_.state().getValue(DispenserBlock.FACING);
+            EntityType<?> entitytype = ((SpawnEggItem)p_123524_.getItem()).getType(p_123524_.getTag());
+
+            // CraftBukkit start
+            ServerLevel worldserver = p_123523_.level();
+            ItemStack itemstack1 = p_123524_.split(1);
+            org.bukkit.block.Block block = worldserver.getWorld().getBlockAt(p_123523_.pos().getX(), p_123523_.pos().getY(), p_123523_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+            if (!DispenserBlock.eventFired) {
+               worldserver.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               p_123524_.grow(1);
+               return p_123524_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               p_123524_.grow(1);
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123523_, eventStack);
+                  return p_123524_;
+               }
+            }
+
+            try {
+               entitytype.spawn(p_123523_.level(), p_123524_, (Player)null, p_123523_.pos().relative(direction), MobSpawnType.DISPENSER, direction != Direction.UP, false);
+            } catch (Exception exception) {
+               LOGGER.error("Error while dispensing spawn egg from dispenser at {}", p_123523_.pos(), exception);
+               return ItemStack.EMPTY;
+            }
+
+            p_123523_.level().gameEvent((Entity)null, GameEvent.ENTITY_PLACE, p_123523_.pos());
+            return p_123524_;
+         }
+      };
+
+      for(SpawnEggItem spawneggitem : SpawnEggItem.eggs()) {
+         DispenserBlock.registerBehavior(spawneggitem, defaultdispenseitembehavior);
+      }
+
+      DispenserBlock.registerBehavior(Items.ARMOR_STAND, new DefaultDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123461_, ItemStack p_123462_) {
+            Direction direction = p_123461_.state().getValue(DispenserBlock.FACING);
+            BlockPos blockpos = p_123461_.pos().relative(direction);
+            Level level = p_123461_.level();
+            // CraftBukkit start
+            ItemStack itemstack1 = p_123462_.split(1);
+            org.bukkit.block.Block block = level.getWorld().getBlockAt(p_123461_.pos().getX(), p_123461_.pos().getY(), p_123461_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               p_123462_.grow(1);
+               return p_123462_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               p_123462_.grow(1);
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123461_, eventStack);
+                  return p_123462_;
+               }
+            }
+            // CraftBukkit end
+            ArmorStand armorstand = new ArmorStand(level, (double)blockpos.getX() + 0.5D, (double)blockpos.getY(), (double)blockpos.getZ() + 0.5D);
+            EntityType.updateCustomEntityTag(level, (Player)null, armorstand, p_123462_.getTag());
+            armorstand.setYRot(direction.toYRot());
+            level.addFreshEntity(armorstand);
+            return p_123462_;
+         }
+      });
+      DispenserBlock.registerBehavior(Items.SADDLE, new OptionalDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123529_, ItemStack p_123530_) {
+            BlockPos blockpos = p_123529_.pos().relative(p_123529_.state().getValue(DispenserBlock.FACING));
+            List<LivingEntity> list = p_123529_.level().getEntitiesOfClass(LivingEntity.class, new AABB(blockpos), (p_123527_) -> {
+               if (!(p_123527_ instanceof Saddleable saddleable)) {
+                  return false;
+               } else {
+                  return !saddleable.isSaddled() && saddleable.isSaddleable();
+               }
+            });
+            if (!list.isEmpty()) {
+               // CraftBukkit start
+               ItemStack itemstack1 = p_123530_.split(1);
+               Level world = p_123529_.level();
+               org.bukkit.block.Block block = world.getWorld().getBlockAt(p_123529_.pos().getX(), p_123529_.pos().getY(), p_123529_.pos().getZ());
+               CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+               BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) list.get(0).getBukkitEntity());
+               if (!DispenserBlock.eventFired) {
+                  world.getCraftServer().getPluginManager().callEvent(event);
+               }
+
+               if (event.isCancelled()) {
+                  p_123530_.grow(1);
+                  return p_123530_;
+               }
+
+               if (!event.getItem().equals(craftItem)) {
+                  p_123530_.grow(1);
+                  // Chain to handler for new item
+                  ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                  DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                  if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+                     idispensebehavior.dispense(p_123529_, eventStack);
+                     return p_123530_;
+                  }
+               }
+               // CraftBukkit end
+               ((Saddleable)list.get(0)).equipSaddle(SoundSource.BLOCKS);
+               this.setSuccess(true);
+               return p_123530_;
+            } else {
+               return super.execute(p_123529_, p_123530_);
+            }
+         }
+      });
+      DefaultDispenseItemBehavior defaultdispenseitembehavior1 = new OptionalDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123535_, ItemStack p_123536_) {
+            BlockPos blockpos = p_123535_.pos().relative(p_123535_.state().getValue(DispenserBlock.FACING));
+
+            for(AbstractHorse abstracthorse : p_123535_.level().getEntitiesOfClass(AbstractHorse.class, new AABB(blockpos), (p_308467_) -> {
+               return p_308467_.isAlive() && p_308467_.canWearArmor();
+            })) {
+               if (abstracthorse.isArmor(p_123536_) && !abstracthorse.isWearingArmor() && abstracthorse.isTamed()) {
+                  abstracthorse.getSlot(401).set(p_123536_.split(1));
+                  // CraftBukkit start
+                  ItemStack itemstack1 = p_123536_.split(1);
+                  Level world = p_123535_.level();
+                  org.bukkit.block.Block block = world.getWorld().getBlockAt(p_123535_.pos().getX(), p_123535_.pos().getY(), p_123535_.pos().getZ());
+                  CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+                  BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) abstracthorse.getBukkitEntity());
+                  if (!DispenserBlock.eventFired) {
+                     world.getCraftServer().getPluginManager().callEvent(event);
+                  }
+
+                  if (event.isCancelled()) {
+                     p_123536_.grow(1);
+                     return p_123536_;
+                  }
+
+                  if (!event.getItem().equals(craftItem)) {
+                     p_123536_.grow(1);
+                     // Chain to handler for new item
+                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                     DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+                        idispensebehavior.dispense(p_123535_, eventStack);
+                        return p_123536_;
+                     }
+                  }
+
+                  abstracthorse.getSlot(401).set(CraftItemStack.asNMSCopy(event.getItem()));
+                  // CraftBukkit end
+                  this.setSuccess(true);
+                  return p_123536_;
+               }
+            }
+
+            return super.execute(p_123535_, p_123536_);
+         }
+      };
+      DispenserBlock.registerBehavior(Items.LEATHER_HORSE_ARMOR, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.IRON_HORSE_ARMOR, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.GOLDEN_HORSE_ARMOR, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.DIAMOND_HORSE_ARMOR, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.WHITE_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.ORANGE_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.CYAN_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.BLUE_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.BROWN_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.BLACK_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.GRAY_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.GREEN_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.LIGHT_BLUE_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.LIGHT_GRAY_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.LIME_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.MAGENTA_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.PINK_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.PURPLE_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.RED_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.YELLOW_CARPET, defaultdispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.CHEST, new OptionalDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123541_, ItemStack p_123542_) {
+            BlockPos blockpos = p_123541_.pos().relative(p_123541_.state().getValue(DispenserBlock.FACING));
+
+            for(AbstractChestedHorse abstractchestedhorse : p_123541_.level().getEntitiesOfClass(AbstractChestedHorse.class, new AABB(blockpos), (p_308468_) -> {
+               return p_308468_.isAlive() && !p_308468_.hasChest();
+            })) {
+               if (abstractchestedhorse.isTamed()) {
+                  ItemStack itemstack1 = p_123542_.split(1);
+                  Level world = p_123541_.level();
+                  org.bukkit.block.Block block = world.getWorld().getBlockAt(p_123541_.pos().getX(), p_123541_.pos().getY(), p_123541_.pos().getZ());
+                  CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+                  BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) abstractchestedhorse.getBukkitEntity());
+                  if (!DispenserBlock.eventFired) {
+                     world.getCraftServer().getPluginManager().callEvent(event);
+                  }
+
+                  if (event.isCancelled()) {
+                     return p_123542_;
+                  }
+                  if (!event.getItem().equals(craftItem)) {
+                     // Chain to handler for new item
+                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                     DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+                        idispensebehavior.dispense(p_123541_, eventStack);
+                        return p_123542_;
+                     }
+                  }
+                  abstractchestedhorse.getSlot(499).set(CraftItemStack.asNMSCopy(event.getItem()));
+                  // CraftBukkit end
+                  this.setSuccess(true);
+                  return p_123542_;
+               }
+            }
+
+            return super.execute(p_123541_, p_123542_);
+         }
+      });
+      DispenserBlock.registerBehavior(Items.FIREWORK_ROCKET, new DefaultDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123547_, ItemStack p_123548_) {
+            Direction direction = p_123547_.state().getValue(DispenserBlock.FACING);
+            // CraftBukkit start
+            ServerLevel worldserver = p_123547_.level();
+            ItemStack itemstack1 = p_123548_.split(1);
+            org.bukkit.block.Block block = worldserver.getWorld().getBlockAt(p_123547_.pos().getX(), p_123547_.pos().getY(), p_123547_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(direction.getStepX(), direction.getStepY(), direction.getStepZ()));
+            if (!DispenserBlock.eventFired) {
+               worldserver.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               p_123548_.grow(1);
+               return p_123548_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               p_123548_.grow(1);
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123547_, eventStack);
+                  return p_123548_;
+               }
+            }
+
+            itemstack1 = CraftItemStack.asNMSCopy(event.getItem());
+            Vec3 vec3 = DispenseItemBehavior.getEntityPokingOutOfBlockPos(p_123547_, EntityType.FIREWORK_ROCKET, direction);
+            FireworkRocketEntity fireworkrocketentity = new FireworkRocketEntity(p_123547_.level(), p_123548_, vec3.x(), vec3.y(), vec3.z(), true);
+            fireworkrocketentity.shoot((double)direction.getStepX(), (double)direction.getStepY(), (double)direction.getStepZ(), 0.5F, 1.0F);
+            p_123547_.level().addFreshEntity(fireworkrocketentity);
+            return p_123548_;
+         }
+
+         protected void playSound(BlockSource p_123545_) {
+            p_123545_.level().levelEvent(1004, p_123545_.pos(), 0);
+         }
+      });
+      DispenserBlock.registerBehavior(Items.FIRE_CHARGE, new DefaultDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123556_, ItemStack p_123557_) {
+            Direction direction = p_123556_.state().getValue(DispenserBlock.FACING);
+            Position position = DispenserBlock.getDispensePosition(p_123556_);
+            double d0 = position.x() + (double)((float)direction.getStepX() * 0.3F);
+            double d1 = position.y() + (double)((float)direction.getStepY() * 0.3F);
+            double d2 = position.z() + (double)((float)direction.getStepZ() * 0.3F);
+            Level level = p_123556_.level();
+            RandomSource randomsource = level.random;
+            double d3 = randomsource.triangle((double)direction.getStepX(), 0.11485000000000001D);
+            double d4 = randomsource.triangle((double)direction.getStepY(), 0.11485000000000001D);
+            double d5 = randomsource.triangle((double)direction.getStepZ(), 0.11485000000000001D);
+
+            // CraftBukkit start
+            ItemStack itemstack1 = p_123557_.split(1);
+            org.bukkit.block.Block block = level.getWorld().getBlockAt(p_123556_.pos().getX(), p_123556_.pos().getY(), p_123556_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d3, d4, d5));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               p_123557_.grow(1);
+               return p_123557_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               p_123557_.grow(1);
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123556_, eventStack);
+                  return p_123557_;
+               }
+            }
+
+            SmallFireball entitysmallfireball = new SmallFireball(level, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
+            entitysmallfireball.setItem(itemstack1);
+            entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(p_123556_.blockEntity());
+
+            level.addFreshEntity(entitysmallfireball);
+            return p_123557_;
+         }
+
+         protected void playSound(BlockSource p_123554_) {
+            p_123554_.level().levelEvent(1018, p_123554_.pos(), 0);
+         }
+      });
+      DispenserBlock.registerBehavior(Items.OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.OAK));
+      DispenserBlock.registerBehavior(Items.SPRUCE_BOAT, new BoatDispenseItemBehavior(Boat.Type.SPRUCE));
+      DispenserBlock.registerBehavior(Items.BIRCH_BOAT, new BoatDispenseItemBehavior(Boat.Type.BIRCH));
+      DispenserBlock.registerBehavior(Items.JUNGLE_BOAT, new BoatDispenseItemBehavior(Boat.Type.JUNGLE));
+      DispenserBlock.registerBehavior(Items.DARK_OAK_BOAT, new BoatDispenseItemBehavior(Boat.Type.DARK_OAK));
+      DispenserBlock.registerBehavior(Items.ACACIA_BOAT, new BoatDispenseItemBehavior(Boat.Type.ACACIA));
+      DispenserBlock.registerBehavior(Items.CHERRY_BOAT, new BoatDispenseItemBehavior(Boat.Type.CHERRY));
+      DispenserBlock.registerBehavior(Items.MANGROVE_BOAT, new BoatDispenseItemBehavior(Boat.Type.MANGROVE));
+      DispenserBlock.registerBehavior(Items.BAMBOO_RAFT, new BoatDispenseItemBehavior(Boat.Type.BAMBOO));
+      DispenserBlock.registerBehavior(Items.OAK_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.OAK, true));
+      DispenserBlock.registerBehavior(Items.SPRUCE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.SPRUCE, true));
+      DispenserBlock.registerBehavior(Items.BIRCH_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.BIRCH, true));
+      DispenserBlock.registerBehavior(Items.JUNGLE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.JUNGLE, true));
+      DispenserBlock.registerBehavior(Items.DARK_OAK_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.DARK_OAK, true));
+      DispenserBlock.registerBehavior(Items.ACACIA_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.ACACIA, true));
+      DispenserBlock.registerBehavior(Items.CHERRY_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.CHERRY, true));
+      DispenserBlock.registerBehavior(Items.MANGROVE_CHEST_BOAT, new BoatDispenseItemBehavior(Boat.Type.MANGROVE, true));
+      DispenserBlock.registerBehavior(Items.BAMBOO_CHEST_RAFT, new BoatDispenseItemBehavior(Boat.Type.BAMBOO, true));
+      DispenseItemBehavior dispenseitembehavior1 = new DefaultDispenseItemBehavior() {
+         private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
+
+         public ItemStack execute(BlockSource p_123561_, ItemStack p_123562_) {
+            DispensibleContainerItem dispensiblecontaineritem = (DispensibleContainerItem)p_123562_.getItem();
+            BlockPos blockpos = p_123561_.pos().relative(p_123561_.state().getValue(DispenserBlock.FACING));
+            Level level = p_123561_.level();
+
+            // CraftBukkit start
+            int x = blockpos.getX();
+            int y = blockpos.getY();
+            int z = blockpos.getZ();
+            BlockState iblockdata = level.getBlockState(blockpos);
+            if (iblockdata.isAir() || iblockdata.canBeReplaced() || (dispensiblecontaineritem instanceof BucketItem && iblockdata.getBlock() instanceof LiquidBlockContainer && ((LiquidBlockContainer) iblockdata.getBlock()).canPlaceLiquid(null, level, blockpos, iblockdata, ((BucketItem) dispensiblecontaineritem).getFluid()))) {
+               org.bukkit.block.Block block = level.getWorld().getBlockAt(p_123561_.pos().getX(), p_123561_.pos().getY(), p_123561_.pos().getZ());
+               CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_123562_);
+
+               BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(x, y, z));
+               if (!DispenserBlock.eventFired) {
+                  level.getCraftServer().getPluginManager().callEvent(event);
+               }
+
+               if (event.isCancelled()) {
+                  return p_123562_;
+               }
+
+               if (!event.getItem().equals(craftItem)) {
+                  // Chain to handler for new item
+                  ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                  DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                  if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                     idispensebehavior.dispense(p_123561_, eventStack);
+                     return p_123562_;
+                  }
+               }
+
+               dispensiblecontaineritem = (DispensibleContainerItem) CraftItemStack.asNMSCopy(event.getItem()).getItem();
+            }
+            // CraftBukkit end
+
+            if (dispensiblecontaineritem.emptyContents((Player)null, level, blockpos, (BlockHitResult)null, p_123562_)) {
+               dispensiblecontaineritem.checkExtraContent((Player)null, level, p_123562_, blockpos);
+               // CraftBukkit start - Handle stacked buckets
+               Item item = Items.BUCKET;
+               p_123562_.shrink(1);
+               if (p_123562_.isEmpty()) {
+                  p_123562_.setItem(Items.BUCKET);
+                  p_123562_.setCount(1);
+               } else if (((DispenserBlockEntity) p_123561_.blockEntity()).addItem(new ItemStack(item)) < 0) {
+                  this.defaultDispenseItemBehavior.dispense(p_123561_, new ItemStack(item));
+               }
+               return p_123562_;
+               // CraftBukkit end
+            } else {
+               return this.defaultDispenseItemBehavior.dispense(p_123561_, p_123562_);
+            }
+         }
+      };
+      DispenserBlock.registerBehavior(Items.LAVA_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.WATER_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.POWDER_SNOW_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.SALMON_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.COD_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.PUFFERFISH_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.TROPICAL_FISH_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.AXOLOTL_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.TADPOLE_BUCKET, dispenseitembehavior1);
+      DispenserBlock.registerBehavior(Items.BUCKET, new DefaultDispenseItemBehavior() {
+         private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
+
+         public ItemStack execute(BlockSource p_123566_, ItemStack p_123567_) {
+            LevelAccessor levelaccessor = p_123566_.level();
+            BlockPos blockpos = p_123566_.pos().relative(p_123566_.state().getValue(DispenserBlock.FACING));
+            BlockState blockstate = levelaccessor.getBlockState(blockpos);
+            Block block = blockstate.getBlock();
+            if (block instanceof BucketPickup) {
+               ItemStack itemstack = ((BucketPickup)block).pickupBlock(null, DummyGeneratorAccess.INSTANCE, blockpos, blockstate); // CraftBukkit // Mohist TODO
+               if (itemstack.isEmpty()) {
+                  return super.execute(p_123566_, p_123567_);
+               } else {
+                  levelaccessor.gameEvent((Entity)null, GameEvent.FLUID_PICKUP, blockpos);
+                  Item item = itemstack.getItem();
+
+                  // CraftBukkit start
+                  org.bukkit.block.Block bukkitBlock = levelaccessor.getMinecraftWorld().getWorld().getBlockAt(p_123566_.pos().getX(), p_123566_.pos().getY(), p_123566_.pos().getZ());
+                  CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+                  BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+                  if (!DispenserBlock.eventFired) {
+                     levelaccessor.getMinecraftWorld().getCraftServer().getPluginManager().callEvent(event);
+                  }
+
+                  if (event.isCancelled()) {
+                     return itemstack;
+                  }
+
+                  if (!event.getItem().equals(craftItem)) {
+                     // Chain to handler for new item
+                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+                     DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                        idispensebehavior.dispense(p_123566_, eventStack);
+                        return itemstack;
+                     }
+                  }
+
+                  itemstack = ((BucketPickup) block).pickupBlock(null, levelaccessor, blockpos, blockstate); // From above
+                  // CraftBukkit end
+
+                  p_123567_.shrink(1);
+                  if (p_123567_.isEmpty()) {
+                     return new ItemStack(item);
+                  } else {
+                     if (p_123566_.<DispenserBlockEntity>blockEntity().addItem(new ItemStack(item)) < 0) {
+                        this.defaultDispenseItemBehavior.dispense(p_123566_, new ItemStack(item));
+                     }
+
+                     return p_123567_;
+                  }
+               }
+            } else {
+               return super.execute(p_123566_, p_123567_);
+            }
+         }
+      });
+      DispenserBlock.registerBehavior(Items.FLINT_AND_STEEL, new OptionalDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123412_, ItemStack p_123413_) {
+            Level level = p_123412_.level();
+
+            // CraftBukkit start
+            org.bukkit.block.Block bukkitBlock = level.getWorld().getBlockAt(p_123412_.pos().getX(), p_123412_.pos().getY(), p_123412_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_123413_);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               return p_123413_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123412_, eventStack);
+                  return p_123413_;
+               }
+            }
+            // CraftBukkit end
+
+            this.setSuccess(true);
+            Direction direction = p_123412_.state().getValue(DispenserBlock.FACING);
+            BlockPos blockpos = p_123412_.pos().relative(direction);
+            BlockState blockstate = level.getBlockState(blockpos);
+            if (BaseFireBlock.canBePlacedAt(level, blockpos, direction)) {
+               // CraftBukkit start - Ignition by dispensing flint and steel
+               if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(level, blockpos, p_123412_.pos()).isCancelled()) {
+                  level.setBlockAndUpdate(blockpos, BaseFireBlock.getState(level, blockpos));
+                  level.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockpos);
+               }
+               // CraftBukkit end
+            } else if (!CampfireBlock.canLight(blockstate) && !CandleBlock.canLight(blockstate) && !CandleCakeBlock.canLight(blockstate)) {
+               if (blockstate.isFlammable(level, blockpos, p_123412_.state().getValue(DispenserBlock.FACING).getOpposite())) {
+                  blockstate.onCaughtFire(level, blockpos, p_123412_.state().getValue(DispenserBlock.FACING).getOpposite(), null);
+                  if (blockstate.getBlock() instanceof TntBlock && org.bukkit.craftbukkit.event.CraftEventFactory.callTNTPrimeEvent(level, blockpos, org.bukkit.event.block.TNTPrimeEvent.PrimeCause.DISPENSER, null, p_123412_.pos())) {
+                     level.removeBlock(blockpos, false);
+                  }
+               } else {
+                  this.setSuccess(false);
+               }
+            } else {
+               level.setBlockAndUpdate(blockpos, blockstate.setValue(BlockStateProperties.LIT, Boolean.valueOf(true)));
+               level.gameEvent((Entity)null, GameEvent.BLOCK_CHANGE, blockpos);
+            }
+
+            if (this.isSuccess() && p_123413_.hurt(1, level.random, (ServerPlayer)null)) {
+               p_123413_.setCount(0);
+            }
+
+            return p_123413_;
+         }
+      });
+      DispenserBlock.registerBehavior(Items.BONE_MEAL, new OptionalDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123416_, ItemStack p_123417_) {
+            this.setSuccess(true);
+            Level level = p_123416_.level();
+            BlockPos blockpos = p_123416_.pos().relative(p_123416_.state().getValue(DispenserBlock.FACING));
+
+            // CraftBukkit start
+            org.bukkit.block.Block block = level.getWorld().getBlockAt(p_123416_.pos().getX(), p_123416_.pos().getY(), p_123416_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_123417_);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(0, 0, 0));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               return p_123417_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123416_, eventStack);
+                  return p_123417_;
+               }
+            }
+
+            level.captureTreeGeneration = true;
+            // CraftBukkit end
+
+            if (!BoneMealItem.growCrop(p_123417_, level, blockpos) && !BoneMealItem.growWaterPlant(p_123417_, level, blockpos, (Direction)null)) {
+               this.setSuccess(false);
+            } else if (!level.isClientSide) {
+               level.levelEvent(1505, blockpos, 0);
+            }
+            // CraftBukkit start
+            level.captureTreeGeneration = false;
+            if (level.capturedBlockStates.size() > 0) {
+               TreeType treeType = SaplingBlock.treeType;
+               SaplingBlock.treeType = null;
+               Location location = new Location(level.getWorld(), blockpos.getX(), blockpos.getY(), blockpos.getZ());
+               List<org.bukkit.block.BlockState> blocks = new java.util.ArrayList<>(level.capturedBlockStates.values());
+               level.capturedBlockStates.clear();
+               StructureGrowEvent structureEvent = null;
+               if (treeType != null) {
+                  structureEvent = new StructureGrowEvent(location, treeType, false, null, blocks);
+                  org.bukkit.Bukkit.getPluginManager().callEvent(structureEvent);
+               }
+
+               BlockFertilizeEvent fertilizeEvent = new BlockFertilizeEvent(location.getBlock(), null, blocks);
+               fertilizeEvent.setCancelled(structureEvent != null && structureEvent.isCancelled());
+               org.bukkit.Bukkit.getPluginManager().callEvent(fertilizeEvent);
+
+               if (!fertilizeEvent.isCancelled()) {
+                  for (org.bukkit.block.BlockState blockstate : blocks) {
+                     blockstate.update(true);
+                  }
+               }
+            }
+            // CraftBukkit end
+
+            return p_123417_;
+         }
+      });
+      DispenserBlock.registerBehavior(Blocks.TNT, new DefaultDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123425_, ItemStack p_123426_) {
+            Level level = p_123425_.level();
+            BlockPos blockpos = p_123425_.pos().relative(p_123425_.state().getValue(DispenserBlock.FACING));
+
+            // CraftBukkit start
+            ItemStack itemstack1 = p_123426_.split(1);
+            org.bukkit.block.Block block = level.getWorld().getBlockAt(p_123425_.pos().getX(), p_123425_.pos().getY(), p_123425_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockpos.getX() + 0.5D, (double) blockpos.getY(), (double) blockpos.getZ() + 0.5D));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               p_123426_.grow(1);
+               return p_123426_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               p_123426_.grow(1);
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123425_, eventStack);
+                  return p_123426_;
+               }
+            }
+
+            PrimedTnt primedtnt = new PrimedTnt(level, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (LivingEntity) null);
+            // CraftBukkit end
+
+            level.addFreshEntity(primedtnt);
+            level.playSound((Player)null, primedtnt.getX(), primedtnt.getY(), primedtnt.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+            level.gameEvent((Entity)null, GameEvent.ENTITY_PLACE, blockpos);
+            return p_123426_;
+         }
+      });
+      DispenseItemBehavior dispenseitembehavior = new OptionalDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123429_, ItemStack p_123430_) {
+            this.setSuccess(ArmorItem.dispenseArmor(p_123429_, p_123430_));
+            return p_123430_;
+         }
+      };
+      DispenserBlock.registerBehavior(Items.CREEPER_HEAD, dispenseitembehavior);
+      DispenserBlock.registerBehavior(Items.ZOMBIE_HEAD, dispenseitembehavior);
+      DispenserBlock.registerBehavior(Items.DRAGON_HEAD, dispenseitembehavior);
+      DispenserBlock.registerBehavior(Items.SKELETON_SKULL, dispenseitembehavior);
+      DispenserBlock.registerBehavior(Items.PIGLIN_HEAD, dispenseitembehavior);
+      DispenserBlock.registerBehavior(Items.PLAYER_HEAD, dispenseitembehavior);
+      DispenserBlock.registerBehavior(Items.WITHER_SKELETON_SKULL, new OptionalDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123433_, ItemStack p_123434_) {
+            Level level = p_123433_.level();
+            Direction direction = p_123433_.state().getValue(DispenserBlock.FACING);
+            BlockPos blockpos = p_123433_.pos().relative(direction);
+
+            // CraftBukkit start
+            org.bukkit.block.Block bukkitBlock = level.getWorld().getBlockAt(p_123433_.pos().getX(), p_123433_.pos().getY(), p_123433_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_123434_);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               return p_123434_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123433_, eventStack);
+                  return p_123434_;
+               }
+            }
+            // CraftBukkit end
+
+            if (level.isEmptyBlock(blockpos) && WitherSkullBlock.canSpawnMob(level, blockpos, p_123434_)) {
+               level.setBlock(blockpos, Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, Integer.valueOf(RotationSegment.convertToSegment(direction))), 3);
+               level.gameEvent((Entity)null, GameEvent.BLOCK_PLACE, blockpos);
+               BlockEntity blockentity = level.getBlockEntity(blockpos);
+               if (blockentity instanceof SkullBlockEntity) {
+                  WitherSkullBlock.checkSpawn(level, blockpos, (SkullBlockEntity)blockentity);
+               }
+
+               p_123434_.shrink(1);
+               this.setSuccess(true);
+            } else {
+               this.setSuccess(ArmorItem.dispenseArmor(p_123433_, p_123434_));
+            }
+
+            return p_123434_;
+         }
+      });
+      DispenserBlock.registerBehavior(Blocks.CARVED_PUMPKIN, new OptionalDispenseItemBehavior() {
+         protected ItemStack execute(BlockSource p_123437_, ItemStack p_123438_) {
+            Level level = p_123437_.level();
+            BlockPos blockpos = p_123437_.pos().relative(p_123437_.state().getValue(DispenserBlock.FACING));
+            CarvedPumpkinBlock carvedpumpkinblock = (CarvedPumpkinBlock)Blocks.CARVED_PUMPKIN;
+
+            // CraftBukkit start
+            org.bukkit.block.Block bukkitBlock = level.getWorld().getBlockAt(p_123437_.pos().getX(), p_123437_.pos().getY(), p_123437_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_123438_);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+            if (!DispenserBlock.eventFired) {
+               level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               return p_123438_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123437_, eventStack);
+                  return p_123438_;
+               }
+            }
+            // CraftBukkit end
+
+            if (level.isEmptyBlock(blockpos) && carvedpumpkinblock.canSpawnGolem(level, blockpos)) {
+               if (!level.isClientSide) {
+                  level.setBlock(blockpos, carvedpumpkinblock.defaultBlockState(), 3);
+                  level.gameEvent((Entity)null, GameEvent.BLOCK_PLACE, blockpos);
+               }
+
+               p_123438_.shrink(1);
+               this.setSuccess(true);
+            } else {
+               this.setSuccess(ArmorItem.dispenseArmor(p_123437_, p_123438_));
+            }
+
+            return p_123438_;
+         }
+      });
+      DispenserBlock.registerBehavior(Blocks.SHULKER_BOX.asItem(), new ShulkerBoxDispenseBehavior());
+
+      for(DyeColor dyecolor : DyeColor.values()) {
+         DispenserBlock.registerBehavior(ShulkerBoxBlock.getBlockByColor(dyecolor).asItem(), new ShulkerBoxDispenseBehavior());
+      }
+
+      DispenserBlock.registerBehavior(Items.GLASS_BOTTLE.asItem(), new OptionalDispenseItemBehavior() {
+         private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
+
+         private ItemStack takeLiquid(BlockSource p_123447_, ItemStack p_123448_, ItemStack p_123449_) {
+            p_123448_.shrink(1);
+            if (p_123448_.isEmpty()) {
+               p_123447_.level().gameEvent((Entity)null, GameEvent.FLUID_PICKUP, p_123447_.pos());
+               return p_123449_.copy();
+            } else {
+               if (p_123447_.<DispenserBlockEntity>blockEntity().addItem(p_123449_.copy()) < 0) {
+                  this.defaultDispenseItemBehavior.dispense(p_123447_, p_123449_.copy());
+               }
+
+               return p_123448_;
+            }
+         }
+
+         public ItemStack execute(BlockSource p_123444_, ItemStack p_123445_) {
+            this.setSuccess(false);
+            ServerLevel serverlevel = p_123444_.level();
+            BlockPos blockpos = p_123444_.pos().relative(p_123444_.state().getValue(DispenserBlock.FACING));
+            BlockState blockstate = serverlevel.getBlockState(blockpos);
+
+            // CraftBukkit start
+            org.bukkit.block.Block bukkitBlock = serverlevel.getWorld().getBlockAt(p_123444_.pos().getX(), p_123444_.pos().getY(), p_123444_.pos().getZ());
+            CraftItemStack craftItem = CraftItemStack.asCraftMirror(p_123445_);
+
+            BlockDispenseEvent event = new BlockDispenseEvent(bukkitBlock, craftItem.clone(), new org.bukkit.util.Vector(blockpos.getX(), blockpos.getY(), blockpos.getZ()));
+            if (!DispenserBlock.eventFired) {
+               serverlevel.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (event.isCancelled()) {
+               return p_123445_;
+            }
+
+            if (!event.getItem().equals(craftItem)) {
+               // Chain to handler for new item
+               ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+               DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+               if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
+                  idispensebehavior.dispense(p_123444_, eventStack);
+                  return p_123445_;
+               }
+            }
+            // CraftBukkit end
+
+            if (blockstate.is(BlockTags.BEEHIVES, (p_123442_) -> {
+               return p_123442_.hasProperty(BeehiveBlock.HONEY_LEVEL) && p_123442_.getBlock() instanceof BeehiveBlock;
+            }) && blockstate.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
+               ((BeehiveBlock)blockstate.getBlock()).releaseBeesAndResetHoneyLevel(serverlevel, blockstate, blockpos, (Player)null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
+               this.setSuccess(true);
+               return this.takeLiquid(p_123444_, p_123445_, new ItemStack(Items.HONEY_BOTTLE));
+            } else if (serverlevel.getFluidState(blockpos).is(FluidTags.WATER)) {
+               this.setSuccess(true);
+               return this.takeLiquid(p_123444_, p_123445_, PotionUtils.setPotion(new ItemStack(Items.POTION), Potions.WATER));
+            } else {
+               return super.execute(p_123444_, p_123445_);
+            }
+         }
+      });
+      DispenserBlock.registerBehavior(Items.GLOWSTONE, new OptionalDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_123452_, ItemStack p_123453_) {
+            Direction direction = p_123452_.state().getValue(DispenserBlock.FACING);
+            BlockPos blockpos = p_123452_.pos().relative(direction);
+            Level level = p_123452_.level();
+            BlockState blockstate = level.getBlockState(blockpos);
+            this.setSuccess(true);
+            if (blockstate.is(Blocks.RESPAWN_ANCHOR)) {
+               if (blockstate.getValue(RespawnAnchorBlock.CHARGE) != 4) {
+                  RespawnAnchorBlock.charge((Entity)null, level, blockpos, blockstate);
+                  p_123453_.shrink(1);
+               } else {
+                  this.setSuccess(false);
+               }
+
+               return p_123453_;
+            } else {
+               return super.execute(p_123452_, p_123453_);
+            }
+         }
+      });
+      DispenserBlock.registerBehavior(Items.SHEARS.asItem(), new ShearsDispenseItemBehavior());
+      DispenserBlock.registerBehavior(Items.HONEYCOMB, new OptionalDispenseItemBehavior() {
+         public ItemStack execute(BlockSource p_175747_, ItemStack p_175748_) {
+            BlockPos blockpos = p_175747_.pos().relative(p_175747_.state().getValue(DispenserBlock.FACING));
+            Level level = p_175747_.level();
+            BlockState blockstate = level.getBlockState(blockpos);
+            Optional<BlockState> optional = HoneycombItem.getWaxed(blockstate);
+            if (optional.isPresent()) {
+               level.setBlockAndUpdate(blockpos, optional.get());
+               level.levelEvent(3003, blockpos, 0);
+               p_175748_.shrink(1);
+               this.setSuccess(true);
+               return p_175748_;
+            } else {
+               return super.execute(p_175747_, p_175748_);
+            }
+         }
+      });
+      DispenserBlock.registerBehavior(Items.POTION, new DefaultDispenseItemBehavior() {
+         private final DefaultDispenseItemBehavior defaultDispenseItemBehavior = new DefaultDispenseItemBehavior();
+
+         public ItemStack execute(BlockSource p_235896_, ItemStack p_235897_) {
+            if (PotionUtils.getPotion(p_235897_) != Potions.WATER) {
+               return this.defaultDispenseItemBehavior.dispense(p_235896_, p_235897_);
+            } else {
+               ServerLevel serverlevel = p_235896_.level();
+               BlockPos blockpos = p_235896_.pos();
+               BlockPos blockpos1 = p_235896_.pos().relative(p_235896_.state().getValue(DispenserBlock.FACING));
+               if (!serverlevel.getBlockState(blockpos1).is(BlockTags.CONVERTABLE_TO_MUD)) {
+                  return this.defaultDispenseItemBehavior.dispense(p_235896_, p_235897_);
+               } else {
+                  if (!serverlevel.isClientSide) {
+                     for(int i = 0; i < 5; ++i) {
+                        serverlevel.sendParticles(ParticleTypes.SPLASH, (double)blockpos.getX() + serverlevel.random.nextDouble(), (double)(blockpos.getY() + 1), (double)blockpos.getZ() + serverlevel.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
+                     }
+                  }
+
+                  serverlevel.playSound((Player)null, blockpos, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                  serverlevel.gameEvent((Entity)null, GameEvent.FLUID_PLACE, blockpos);
+                  serverlevel.setBlockAndUpdate(blockpos1, Blocks.MUD.defaultBlockState());
+                  return new ItemStack(Items.GLASS_BOTTLE);
+               }
+            }
+         }
+      });
+   }
+
+   static Vec3 getEntityPokingOutOfBlockPos(BlockSource p_301823_, EntityType<?> p_301844_, Direction p_301805_) {
+      return p_301823_.center().add((double)p_301805_.getStepX() * (0.5000099999997474D - (double)p_301844_.getWidth() / 2.0D), (double)p_301805_.getStepY() * (0.5000099999997474D - (double)p_301844_.getHeight() / 2.0D) - (double)p_301844_.getHeight() / 2.0D, (double)p_301805_.getStepZ() * (0.5000099999997474D - (double)p_301844_.getWidth() / 2.0D));
+   }
 }
