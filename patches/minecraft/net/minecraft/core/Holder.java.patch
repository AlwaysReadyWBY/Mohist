--- a/net/minecraft/core/Holder.java
+++ b/net/minecraft/core/Holder.java
@@ -11,7 +_,22 @@
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.tags.TagKey;
 
-public interface Holder<T> {
+public interface Holder<T> extends java.util.function.Supplier<T>, net.minecraftforge.registries.tags.IReverseTag<T> {
+   @Override
+   default boolean containsTag(TagKey<T> key) {
+      return this.m_203656_(key);
+   }
+
+   @Override
+   default Stream<TagKey<T>> getTagKeys() {
+      return this.m_203616_();
+   }
+
+   @Override
+   default T get() {
+      return this.m_203334_();
+   }
+
    T m_203334_();
 
    boolean m_203633_();
@@ -171,7 +_,7 @@
          return this.f_205751_ != null && this.f_205752_ != null;
       }
 
-      void m_246870_(ResourceKey<T> p_251943_) {
+      public void m_246870_(ResourceKey<T> p_251943_) {
          if (this.f_205751_ != null && p_251943_ != this.f_205751_) {
             throw new IllegalStateException("Can't change holder key: existing=" + this.f_205751_ + ", new=" + p_251943_);
          } else {
@@ -179,7 +_,7 @@
          }
       }
 
-      void m_247654_(T p_249418_) {
+      public void m_247654_(T p_249418_) {
          if (this.f_205750_ == Holder.Reference.Type.INTRUSIVE && this.f_205752_ != p_249418_) {
             throw new IllegalStateException("Can't change holder " + this.f_205751_ + " value: existing=" + this.f_205752_ + ", new=" + p_249418_);
          } else {
@@ -193,6 +_,10 @@
 
       public Stream<TagKey<T>> m_203616_() {
          return this.f_205749_.stream();
+      }
+
+      public Type getType() {
+         return this.f_205750_;
       }
 
       public String toString() {
