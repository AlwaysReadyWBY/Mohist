--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -1,5 +_,6 @@
 package net.minecraft.commands;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
@@ -8,7 +_,6 @@
 import com.mojang.brigadier.builder.ArgumentBuilder;
 import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
-import com.mojang.brigadier.context.CommandContext;
 import com.mojang.brigadier.context.CommandContextBuilder;
 import com.mojang.brigadier.context.ContextChain;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
@@ -16,14 +_,15 @@
 import com.mojang.brigadier.tree.RootCommandNode;
 import com.mojang.logging.LogUtils;
 import java.util.Collection;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.UnaryOperator;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.SharedConstants;
@@ -43,7 +_,6 @@
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.Style;
 import net.minecraft.network.protocol.game.ClientboundCommandsPacket;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.MinecraftServer;
@@ -126,7 +_,6 @@
 import net.minecraft.server.commands.TickCommand;
 import net.minecraft.server.commands.TimeCommand;
 import net.minecraft.server.commands.TitleCommand;
-import net.minecraft.server.commands.TransferCommand;
 import net.minecraft.server.commands.TriggerCommand;
 import net.minecraft.server.commands.WardenSpawnTrackerCommand;
 import net.minecraft.server.commands.WeatherCommand;
@@ -137,97 +_,99 @@
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import net.minecraft.world.level.GameRules;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 import org.slf4j.Logger;
 
 public class Commands {
-    private static final ThreadLocal<ExecutionContext<CommandSourceStack>> CURRENT_EXECUTION_CONTEXT = new ThreadLocal<>();
-    private static final Logger LOGGER = LogUtils.getLogger();
-    public static final int LEVEL_ALL = 0;
-    public static final int LEVEL_MODERATORS = 1;
-    public static final int LEVEL_GAMEMASTERS = 2;
-    public static final int LEVEL_ADMINS = 3;
-    public static final int LEVEL_OWNERS = 4;
-    private final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();
-
-    public Commands(Commands.CommandSelection p_230943_, CommandBuildContext p_230944_) {
-        AdvancementCommands.register(this.dispatcher);
-        AttributeCommand.register(this.dispatcher, p_230944_);
-        ExecuteCommand.register(this.dispatcher, p_230944_);
-        BossBarCommands.register(this.dispatcher, p_230944_);
-        ClearInventoryCommands.register(this.dispatcher, p_230944_);
-        CloneCommands.register(this.dispatcher, p_230944_);
-        DamageCommand.register(this.dispatcher, p_230944_);
-        DataCommands.register(this.dispatcher);
-        DataPackCommand.register(this.dispatcher);
-        DebugCommand.register(this.dispatcher);
-        DefaultGameModeCommands.register(this.dispatcher);
-        DifficultyCommand.register(this.dispatcher);
-        EffectCommands.register(this.dispatcher, p_230944_);
-        EmoteCommands.register(this.dispatcher);
-        EnchantCommand.register(this.dispatcher, p_230944_);
-        ExperienceCommand.register(this.dispatcher);
-        FillCommand.register(this.dispatcher, p_230944_);
-        FillBiomeCommand.register(this.dispatcher, p_230944_);
-        ForceLoadCommand.register(this.dispatcher);
-        FunctionCommand.register(this.dispatcher);
-        GameModeCommand.register(this.dispatcher);
-        GameRuleCommand.register(this.dispatcher);
-        GiveCommand.register(this.dispatcher, p_230944_);
-        HelpCommand.register(this.dispatcher);
-        ItemCommands.register(this.dispatcher, p_230944_);
-        KickCommand.register(this.dispatcher);
-        KillCommand.register(this.dispatcher);
-        ListPlayersCommand.register(this.dispatcher);
-        LocateCommand.register(this.dispatcher, p_230944_);
-        LootCommand.register(this.dispatcher, p_230944_);
-        MsgCommand.register(this.dispatcher);
-        ParticleCommand.register(this.dispatcher, p_230944_);
-        PlaceCommand.register(this.dispatcher);
-        PlaySoundCommand.register(this.dispatcher);
-        RandomCommand.register(this.dispatcher);
-        ReloadCommand.register(this.dispatcher);
-        RecipeCommand.register(this.dispatcher);
-        ReturnCommand.register(this.dispatcher);
-        RideCommand.register(this.dispatcher);
-        SayCommand.register(this.dispatcher);
-        ScheduleCommand.register(this.dispatcher);
-        ScoreboardCommand.register(this.dispatcher, p_230944_);
-        SeedCommand.register(this.dispatcher, p_230943_ != Commands.CommandSelection.INTEGRATED);
-        SetBlockCommand.register(this.dispatcher, p_230944_);
-        SetSpawnCommand.register(this.dispatcher);
-        SetWorldSpawnCommand.register(this.dispatcher);
-        SpectateCommand.register(this.dispatcher);
-        SpreadPlayersCommand.register(this.dispatcher);
-        StopSoundCommand.register(this.dispatcher);
-        SummonCommand.register(this.dispatcher, p_230944_);
-        TagCommand.register(this.dispatcher);
-        TeamCommand.register(this.dispatcher, p_230944_);
-        TeamMsgCommand.register(this.dispatcher);
-        TeleportCommand.register(this.dispatcher);
-        TellRawCommand.register(this.dispatcher, p_230944_);
-        TickCommand.register(this.dispatcher);
-        TimeCommand.register(this.dispatcher);
-        TitleCommand.register(this.dispatcher, p_230944_);
-        TriggerCommand.register(this.dispatcher);
-        WeatherCommand.register(this.dispatcher);
-        WorldBorderCommand.register(this.dispatcher);
-        if (JvmProfiler.INSTANCE.isAvailable()) {
-            JfrCommand.register(this.dispatcher);
-        }
-
-        if (SharedConstants.IS_RUNNING_IN_IDE) {
-            TestCommand.register(this.dispatcher);
-            ResetChunksCommand.register(this.dispatcher);
-            RaidCommand.register(this.dispatcher, p_230944_);
-            DebugPathCommand.register(this.dispatcher);
-            DebugMobSpawningCommand.register(this.dispatcher);
-            WardenSpawnTrackerCommand.register(this.dispatcher);
-            SpawnArmorTrimsCommand.register(this.dispatcher);
-            ServerPackCommand.register(this.dispatcher);
-            if (p_230943_.includeDedicated) {
-                DebugConfigCommand.register(this.dispatcher);
-            }
-        }
+   private static final ThreadLocal<ExecutionContext<CommandSourceStack>> CURRENT_EXECUTION_CONTEXT = new ThreadLocal<>();
+   private static final Logger LOGGER = LogUtils.getLogger();
+   public static final int LEVEL_ALL = 0;
+   public static final int LEVEL_MODERATORS = 1;
+   public static final int LEVEL_GAMEMASTERS = 2;
+   public static final int LEVEL_ADMINS = 3;
+   public static final int LEVEL_OWNERS = 4;
+   private final CommandDispatcher<CommandSourceStack> dispatcher = new CommandDispatcher<>();
+
+   public Commands(Commands.CommandSelection p_230943_, CommandBuildContext p_230944_) {
+      AdvancementCommands.register(this.dispatcher);
+      AttributeCommand.register(this.dispatcher, p_230944_);
+      ExecuteCommand.register(this.dispatcher, p_230944_);
+      BossBarCommands.register(this.dispatcher);
+      ClearInventoryCommands.register(this.dispatcher, p_230944_);
+      CloneCommands.register(this.dispatcher, p_230944_);
+      DamageCommand.register(this.dispatcher, p_230944_);
+      DataCommands.register(this.dispatcher);
+      DataPackCommand.register(this.dispatcher);
+      DebugCommand.register(this.dispatcher);
+      DefaultGameModeCommands.register(this.dispatcher);
+      DifficultyCommand.register(this.dispatcher);
+      EffectCommands.register(this.dispatcher, p_230944_);
+      EmoteCommands.register(this.dispatcher);
+      EnchantCommand.register(this.dispatcher, p_230944_);
+      ExperienceCommand.register(this.dispatcher);
+      FillCommand.register(this.dispatcher, p_230944_);
+      FillBiomeCommand.register(this.dispatcher, p_230944_);
+      ForceLoadCommand.register(this.dispatcher);
+      FunctionCommand.register(this.dispatcher);
+      GameModeCommand.register(this.dispatcher);
+      GameRuleCommand.register(this.dispatcher);
+      GiveCommand.register(this.dispatcher, p_230944_);
+      HelpCommand.register(this.dispatcher);
+      ItemCommands.register(this.dispatcher, p_230944_);
+      KickCommand.register(this.dispatcher);
+      KillCommand.register(this.dispatcher);
+      ListPlayersCommand.register(this.dispatcher);
+      LocateCommand.register(this.dispatcher, p_230944_);
+      LootCommand.register(this.dispatcher, p_230944_);
+      MsgCommand.register(this.dispatcher);
+      ParticleCommand.register(this.dispatcher, p_230944_);
+      PlaceCommand.register(this.dispatcher);
+      PlaySoundCommand.register(this.dispatcher);
+      RandomCommand.register(this.dispatcher);
+      ReloadCommand.register(this.dispatcher);
+      RecipeCommand.register(this.dispatcher);
+      ReturnCommand.register(this.dispatcher);
+      RideCommand.register(this.dispatcher);
+      SayCommand.register(this.dispatcher);
+      ScheduleCommand.register(this.dispatcher);
+      ScoreboardCommand.register(this.dispatcher);
+      SeedCommand.register(this.dispatcher, p_230943_ != Commands.CommandSelection.INTEGRATED);
+      SetBlockCommand.register(this.dispatcher, p_230944_);
+      SetSpawnCommand.register(this.dispatcher);
+      SetWorldSpawnCommand.register(this.dispatcher);
+      SpectateCommand.register(this.dispatcher);
+      SpreadPlayersCommand.register(this.dispatcher);
+      StopSoundCommand.register(this.dispatcher);
+      SummonCommand.register(this.dispatcher, p_230944_);
+      TagCommand.register(this.dispatcher);
+      TeamCommand.register(this.dispatcher);
+      TeamMsgCommand.register(this.dispatcher);
+      TeleportCommand.register(this.dispatcher);
+      TellRawCommand.register(this.dispatcher);
+      TickCommand.register(this.dispatcher);
+      TimeCommand.register(this.dispatcher);
+      TitleCommand.register(this.dispatcher);
+      TriggerCommand.register(this.dispatcher);
+      WeatherCommand.register(this.dispatcher);
+      WorldBorderCommand.register(this.dispatcher);
+      if (JvmProfiler.INSTANCE.isAvailable()) {
+         JfrCommand.register(this.dispatcher);
+      }
+
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
+         TestCommand.register(this.dispatcher);
+         ResetChunksCommand.register(this.dispatcher);
+         RaidCommand.register(this.dispatcher);
+         DebugPathCommand.register(this.dispatcher);
+         DebugMobSpawningCommand.register(this.dispatcher);
+         WardenSpawnTrackerCommand.register(this.dispatcher);
+         SpawnArmorTrimsCommand.register(this.dispatcher);
+         ServerPackCommand.register(this.dispatcher);
+         if (p_230943_.includeDedicated) {
+            DebugConfigCommand.register(this.dispatcher);
+         }
+      }
 
         if (p_230943_.includeDedicated) {
             BanIpCommands.register(this.dispatcher);
@@ -250,61 +_,126 @@
         if (p_230943_.includeIntegrated) {
             PublishCommand.register(this.dispatcher);
         }
+        net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.dispatcher, p_230943_, p_230944_);
 
         this.dispatcher.setConsumer(ExecutionCommandSource.resultConsumer());
     }
 
+   	public Commands() {
+      	this.dispatcher.setConsumer(ExecutionCommandSource.resultConsumer());
+   	}
+
     public static <S> ParseResults<S> mapSource(ParseResults<S> p_242928_, UnaryOperator<S> p_242890_) {
         CommandContextBuilder<S> commandcontextbuilder = p_242928_.getContext();
         CommandContextBuilder<S> commandcontextbuilder1 = commandcontextbuilder.withSource(p_242890_.apply(commandcontextbuilder.getSource()));
         return new ParseResults<>(commandcontextbuilder1, p_242928_.getReader(), p_242928_.getExceptions());
     }
 
-    public void performPrefixedCommand(CommandSourceStack p_230958_, String p_230959_) {
-        p_230959_ = p_230959_.startsWith("/") ? p_230959_.substring(1) : p_230959_;
-        this.performCommand(this.dispatcher.parse(p_230959_, p_230958_), p_230959_);
-    }
-
-    public void performCommand(ParseResults<CommandSourceStack> p_242844_, String p_242841_) {
-        CommandSourceStack commandsourcestack = p_242844_.getContext().getSource();
-        commandsourcestack.getServer().getProfiler().push(() -> "/" + p_242841_);
-        ContextChain<CommandSourceStack> contextchain = finishParsing(p_242844_, p_242841_, commandsourcestack);
-
-        try {
-            if (contextchain != null) {
-                executeCommandInContext(
-                    commandsourcestack,
-                    p_308343_ -> ExecutionContext.queueInitialCommandExecution(p_308343_, p_242841_, contextchain, commandsourcestack, CommandResultCallback.EMPTY)
-                );
-            }
-        } catch (Exception exception) {
-            MutableComponent mutablecomponent = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
-            if (LOGGER.isDebugEnabled()) {
-                LOGGER.error("Command exception: /{}", p_242841_, exception);
-                StackTraceElement[] astacktraceelement = exception.getStackTrace();
-
-                for (int i = 0; i < Math.min(astacktraceelement.length, 3); i++) {
-                    mutablecomponent.append("\n\n")
-                        .append(astacktraceelement[i].getMethodName())
-                        .append("\n ")
-                        .append(astacktraceelement[i].getFileName())
-                        .append(":")
-                        .append(String.valueOf(astacktraceelement[i].getLineNumber()));
-                }
-            }
-
-            commandsourcestack.sendFailure(
-                Component.translatable("command.failed").withStyle(p_82137_ -> p_82137_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, mutablecomponent)))
-            );
-            if (SharedConstants.IS_RUNNING_IN_IDE) {
-                commandsourcestack.sendFailure(Component.literal(Util.describeError(exception)));
-                LOGGER.error("'/{}' threw an exception", p_242841_, exception);
-            }
-        } finally {
-            commandsourcestack.getServer().getProfiler().pop();
-        }
-    }
-
+   // CraftBukkit start
+   public void  dispatchServerCommand(CommandSourceStack sender, String command) {
+      Joiner joiner = Joiner.on(" ");
+      if (command.startsWith("/")) {
+         command = command.substring(1);
+      }
+
+      ServerCommandEvent event = new ServerCommandEvent(sender.getBukkitSender(), command);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      command = event.getCommand();
+
+      String[] args = command.split(" ");
+
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+              || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+              || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         return;
+      }
+
+      // Handle vanilla commands;
+      if (sender.getLevel().getCraftServer().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+
+      String newCommand = joiner.join(args);
+      this.performPrefixedCommand(sender, newCommand, newCommand);
+   }
+   // CraftBukkit end
+
+   public void performPrefixedCommand(CommandSourceStack p_230958_, String p_230959_) {
+      // CraftBukkit start
+      this.performPrefixedCommand(p_230958_, p_230959_, p_230959_);
+   }
+
+   public void performPrefixedCommand(CommandSourceStack commandlistenerwrapper, String s, String label) {
+      s = s.startsWith("/") ? s.substring(1) : s;
+      this.performCommand(this.dispatcher.parse(s, commandlistenerwrapper), s, label);
+      // CraftBukkit end
+   }
+
+   // Mohist start - add field to compat with mods
+   private AtomicReference<String> mohist$label = new AtomicReference<>();
+
+   public void performCommand(ParseResults<CommandSourceStack> p_242844_, String p_242841_) {
+      var label = mohist$label.get();
+      label = label == null ? "/" + p_242841_ : label;
+      String finalLabel = label;
+      // Mohist end
+      CommandSourceStack commandsourcestack = p_242844_.getContext().getSource();
+      commandsourcestack.getServer().getProfiler().push(() -> {
+         return "/" + p_242841_;
+      });
+
+      try {
+         var event = new net.minecraftforge.event.CommandEvent(p_242844_);
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+            if (event.getException() instanceof Exception exception)
+               throw exception;
+            else if (event.getException() != null)
+               com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+            return;
+         }
+         ContextChain<CommandSourceStack> contextchain = finishParsing(event.getParseResults(), p_242841_, commandsourcestack);
+         if (contextchain != null) {
+            executeCommandInContext(commandsourcestack, (p_308343_) -> {
+               ExecutionContext.queueInitialCommandExecution(p_308343_, p_242841_, contextchain, commandsourcestack, CommandResultCallback.EMPTY);
+            });
+         }
+      } catch (Exception exception) {
+         MutableComponent mutablecomponent = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
+         if (LOGGER.isDebugEnabled()) {
+            LOGGER.error("Command exception: /{}", p_242841_, exception);
+            StackTraceElement[] astacktraceelement = exception.getStackTrace();
+
+            for(int i = 0; i < Math.min(astacktraceelement.length, 3); ++i) {
+               mutablecomponent.append("\n\n").append(astacktraceelement[i].getMethodName()).append("\n ").append(astacktraceelement[i].getFileName()).append(":").append(String.valueOf(astacktraceelement[i].getLineNumber()));
+            }
+         }
+
+         commandsourcestack.sendFailure(Component.translatable("command.failed").withStyle((p_82137_) -> {
+            return p_82137_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT, mutablecomponent));
+         }));
+         if (SharedConstants.IS_RUNNING_IN_IDE) {
+            commandsourcestack.sendFailure(Component.literal(Util.describeError(exception)));
+            LOGGER.error("'/{}' threw an exception", p_242841_, exception);
+         }
+      } finally {
+         commandsourcestack.getServer().getProfiler().pop();
+      }
+
+   }
+
+   public void performCommand(ParseResults<CommandSourceStack> pParseResults, String pCommand, String label) { // CraftBukkit
+      mohist$label.set(label);
+      this.performCommand(pParseResults, pCommand);
+   }
+   
     @Nullable
     private static ContextChain<CommandSourceStack> finishParsing(ParseResults<CommandSourceStack> p_311671_, String p_312044_, CommandSourceStack p_310074_) {
         try {
@@ -357,13 +_,42 @@
         }
     }
 
-    public void sendCommands(ServerPlayer p_82096_) {
-        Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newHashMap();
-        RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
-        map.put(this.dispatcher.getRoot(), rootcommandnode);
-        this.fillUsableCommands(this.dispatcher.getRoot(), rootcommandnode, p_82096_.createCommandSourceStack(), map);
-        p_82096_.connection.send(new ClientboundCommandsPacket(rootcommandnode));
-    }
+   public void sendCommands(ServerPlayer p_82096_) {
+      if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+      RootCommandNode vanillaRoot = new RootCommandNode();
+
+      RootCommandNode<CommandSourceStack> vanilla = p_82096_.server.vanillaCommandDispatcher.getDispatcher().getRoot();
+      map.put(vanilla, vanillaRoot);
+      this.fillUsableCommands(vanilla, vanillaRoot, p_82096_.createCommandSourceStack(), (Map) map);
+
+      // Now build the global commands in a second pass
+      RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
+
+      map.put(this.dispatcher.getRoot(), rootcommandnode);
+      // FORGE: Use our own command node merging method to handle redirect nodes properly, see issue #7551
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(this.dispatcher.getRoot(), rootcommandnode, map, p_82096_.createCommandSourceStack(), ctx -> 0, suggest -> SuggestionProviders.safelySwap((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      Collection<String> bukkit = new LinkedHashSet<>();
+      for (CommandNode node : rootcommandnode.getChildren()) {
+         bukkit.add(node.getName());
+      }
+
+      PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_82096_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+      // Remove labels that were removed during the event
+      for (String orig : bukkit) {
+         if (!event.getCommands().contains(orig)) {
+            // rootcommandnode.removeCommand(orig); // Mohist TODO
+         }
+      }
+      // CraftBukkit end
+
+      p_82096_.connection.send(new ClientboundCommandsPacket(rootcommandnode));
+   }
 
     private void fillUsableCommands(
         CommandNode<CommandSourceStack> p_82113_,
@@ -372,6 +_,7 @@
         Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> p_82116_
     ) {
         for (CommandNode<CommandSourceStack> commandnode : p_82113_.getChildren()) {
+         if (!org.spigotmc.SpigotConfig.sendNamespaced && commandnode.getName().contains( ":" ) ) continue; // Spigot
             if (commandnode.canUse(p_82115_)) {
                 ArgumentBuilder<SharedSuggestionProvider, ?> argumentbuilder = (ArgumentBuilder)commandnode.createBuilder();
                 argumentbuilder.requires(p_82126_ -> true);
