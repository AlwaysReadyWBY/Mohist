--- a/net/minecraft/commands/Commands.java
+++ b/net/minecraft/commands/Commands.java
@@ -1,5 +_,6 @@
 package net.minecraft.commands;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
@@ -14,9 +_,12 @@
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
 import com.mojang.logging.LogUtils;
+import java.util.Collection;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.UnaryOperator;
@@ -132,6 +_,8 @@
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.profiling.jfr.JvmProfiler;
 import net.minecraft.world.level.GameRules;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 import org.slf4j.Logger;
 
 public class Commands {
@@ -210,7 +_,7 @@
          JfrCommand.register(this.dispatcher);
       }
 
-      if (SharedConstants.IS_RUNNING_IN_IDE) {
+      if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled()) {
          TestCommand.register(this.dispatcher);
          ResetChunksCommand.register(this.dispatcher);
          RaidCommand.register(this.dispatcher);
@@ -244,7 +_,12 @@
       if (p_230943_.includeIntegrated) {
          PublishCommand.register(this.dispatcher);
       }
-
+      net.minecraftforge.event.ForgeEventFactory.onCommandRegister(this.dispatcher, p_230943_, p_230944_);
+
+      this.dispatcher.setConsumer(ExecutionCommandSource.resultConsumer());
+   }
+
+   public Commands() {
       this.dispatcher.setConsumer(ExecutionCommandSource.resultConsumer());
    }
 
@@ -254,19 +_,77 @@
       return new ParseResults<>(commandcontextbuilder1, p_242928_.getReader(), p_242928_.getExceptions());
    }
 
+   // CraftBukkit start
+   public void  dispatchServerCommand(CommandSourceStack sender, String command) {
+      Joiner joiner = Joiner.on(" ");
+      if (command.startsWith("/")) {
+         command = command.substring(1);
+      }
+
+      ServerCommandEvent event = new ServerCommandEvent(sender.getBukkitSender(), command);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      command = event.getCommand();
+
+      String[] args = command.split(" ");
+
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+              || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+              || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         return;
+      }
+
+      // Handle vanilla commands;
+      if (sender.getLevel().getCraftServer().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+
+      String newCommand = joiner.join(args);
+      this.performPrefixedCommand(sender, newCommand, newCommand);
+   }
+   // CraftBukkit end
+
    public void performPrefixedCommand(CommandSourceStack p_230958_, String p_230959_) {
-      p_230959_ = p_230959_.startsWith("/") ? p_230959_.substring(1) : p_230959_;
-      this.performCommand(this.dispatcher.parse(p_230959_, p_230958_), p_230959_);
-   }
+      // CraftBukkit start
+      this.performPrefixedCommand(p_230958_, p_230959_, p_230959_);
+   }
+
+   public void performPrefixedCommand(CommandSourceStack commandlistenerwrapper, String s, String label) {
+      s = s.startsWith("/") ? s.substring(1) : s;
+      this.performCommand(this.dispatcher.parse(s, commandlistenerwrapper), s, label);
+      // CraftBukkit end
+   }
+
+   // Mohist start - add field to compat with mods
+   private AtomicReference<String> mohist$label = new AtomicReference<>();
 
    public void performCommand(ParseResults<CommandSourceStack> p_242844_, String p_242841_) {
+      var label = mohist$label.get();
+      label = label == null ? "/" + p_242841_ : label;
+      String finalLabel = label;
+      // Mohist end
       CommandSourceStack commandsourcestack = p_242844_.getContext().getSource();
       commandsourcestack.getServer().getProfiler().push(() -> {
          return "/" + p_242841_;
       });
-      ContextChain<CommandSourceStack> contextchain = finishParsing(p_242844_, p_242841_, commandsourcestack);
 
       try {
+         var event = new net.minecraftforge.event.CommandEvent(p_242844_);
+         if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+            if (event.getException() instanceof Exception exception)
+               throw exception;
+            else if (event.getException() != null)
+               com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+            return;
+         }
+         ContextChain<CommandSourceStack> contextchain = finishParsing(event.getParseResults(), p_242841_, commandsourcestack);
          if (contextchain != null) {
             executeCommandInContext(commandsourcestack, (p_308343_) -> {
                ExecutionContext.queueInitialCommandExecution(p_308343_, p_242841_, contextchain, commandsourcestack, CommandResultCallback.EMPTY);
@@ -296,6 +_,11 @@
 
    }
 
+   public void performCommand(ParseResults<CommandSourceStack> pParseResults, String pCommand, String label) { // CraftBukkit
+      mohist$label.set(label);
+      this.performCommand(pParseResults, pCommand);
+   }
+   
    @Nullable
    private static ContextChain<CommandSourceStack> finishParsing(ParseResults<CommandSourceStack> p_311671_, String p_312044_, CommandSourceStack p_310074_) {
       try {
@@ -350,15 +_,45 @@
    }
 
    public void sendCommands(ServerPlayer p_82096_) {
-      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newHashMap();
+      if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
+      // CraftBukkit start
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+      RootCommandNode vanillaRoot = new RootCommandNode();
+
+      RootCommandNode<CommandSourceStack> vanilla = p_82096_.server.vanillaCommandDispatcher.getDispatcher().getRoot();
+      map.put(vanilla, vanillaRoot);
+      this.fillUsableCommands(vanilla, vanillaRoot, p_82096_.createCommandSourceStack(), (Map) map);
+
+      // Now build the global commands in a second pass
       RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode<>();
+
       map.put(this.dispatcher.getRoot(), rootcommandnode);
-      this.fillUsableCommands(this.dispatcher.getRoot(), rootcommandnode, p_82096_.createCommandSourceStack(), map);
+      // FORGE: Use our own command node merging method to handle redirect nodes properly, see issue #7551
+      net.minecraftforge.server.command.CommandHelper.mergeCommandNode(this.dispatcher.getRoot(), rootcommandnode, map, p_82096_.createCommandSourceStack(), ctx -> 0, suggest -> SuggestionProviders.safelySwap((com.mojang.brigadier.suggestion.SuggestionProvider<SharedSuggestionProvider>) (com.mojang.brigadier.suggestion.SuggestionProvider<?>) suggest));
+
+      Collection<String> bukkit = new LinkedHashSet<>();
+      for (CommandNode node : rootcommandnode.getChildren()) {
+         bukkit.add(node.getName());
+      }
+
+      PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_82096_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+      // Remove labels that were removed during the event
+      for (String orig : bukkit) {
+         if (!event.getCommands().contains(orig)) {
+            // rootcommandnode.removeCommand(orig); // Mohist TODO
+         }
+      }
+      // CraftBukkit end
+
       p_82096_.connection.send(new ClientboundCommandsPacket(rootcommandnode));
    }
 
    private void fillUsableCommands(CommandNode<CommandSourceStack> p_82113_, CommandNode<SharedSuggestionProvider> p_82114_, CommandSourceStack p_82115_, Map<CommandNode<CommandSourceStack>, CommandNode<SharedSuggestionProvider>> p_82116_) {
       for(CommandNode<CommandSourceStack> commandnode : p_82113_.getChildren()) {
+         if (!org.spigotmc.SpigotConfig.sendNamespaced && commandnode.getName().contains( ":" ) ) continue; // Spigot
          if (commandnode.canUse(p_82115_)) {
             ArgumentBuilder<SharedSuggestionProvider, ?> argumentbuilder = (ArgumentBuilder)commandnode.createBuilder();
             argumentbuilder.requires((p_82126_) -> {
