--- a/net/minecraft/commands/CommandSourceStack.java
+++ b/net/minecraft/commands/CommandSourceStack.java
@@ -1,6 +_,7 @@
 package net.minecraft.commands;
 
 import com.google.common.collect.Lists;
+import com.mohistmc.mohist.api.PlayerAPI;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.Message;
 import com.mojang.brigadier.context.CommandContext;
@@ -9,10 +_,12 @@
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.brigadier.suggestion.SuggestionsBuilder;
+import com.mojang.brigadier.tree.CommandNode;
 import java.util.Collection;
 import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BinaryOperator;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
@@ -42,8 +_,9 @@
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
 
-public class CommandSourceStack implements ExecutionCommandSource<CommandSourceStack>, SharedSuggestionProvider {
+public class CommandSourceStack implements ExecutionCommandSource<CommandSourceStack>, SharedSuggestionProvider, net.minecraftforge.common.extensions.IForgeCommandSourceStack {
     public static final SimpleCommandExceptionType ERROR_NOT_PLAYER = new SimpleCommandExceptionType(Component.translatable("permissions.requires.player"));
     public static final SimpleCommandExceptionType ERROR_NOT_ENTITY = new SimpleCommandExceptionType(Component.translatable("permissions.requires.entity"));
     public final CommandSource source;
@@ -61,6 +_,7 @@
     private final Vec2 rotation;
     private final CommandSigningContext signingContext;
     private final TaskChainer chatMessageChainer;
+   	public volatile CommandNode currentCommand; // CraftBukkit
 
     public CommandSourceStack(
         CommandSource p_81302_,
@@ -386,11 +_,36 @@
         return this.textName;
     }
 
+    // Mohist start
+    private AtomicReference<String> bukkitPermission = new AtomicReference<>(null);
+
+    public void setBukkitPermission(String permission) {
+        this.bukkitPermission.set(permission);
+    }
+
     @Override
     public boolean hasPermission(int p_81370_) {
+        if (bukkitPermission.get() != null) {
+            return hasPermission(p_81370_, bukkitPermission.getAndSet(null));
+        }
+        // Mohist end
+      	// CraftBukkit start
+      	CommandNode currentCommand = this.currentCommand;
+      	if (currentCommand != null) {
+         	return hasPermission(p_81370_, VanillaCommandWrapper.getPermission(currentCommand));
+      	}
+      	// CraftBukkit end
+
         return this.permissionLevel >= p_81370_;
     }
 
+   	// CraftBukkit start
+   	public boolean hasPermission(int i, String bukkitPermission) {
+      	// World is null when loading functions
+      	return ((getLevel() == null || !getLevel().getCraftServer().ignoreVanillaPermissions) && this.permissionLevel >= i) || getBukkitSender().hasPermission(bukkitPermission);
+   	}
+   	// CraftBukkit end
+
     public Vec3 getPosition() {
         return this.worldPosition;
     }
@@ -496,13 +_,13 @@
         Component component = Component.translatable("chat.type.admin", this.getDisplayName(), p_81367_).withStyle(ChatFormatting.GRAY, ChatFormatting.ITALIC);
         if (this.server.getGameRules().getBoolean(GameRules.RULE_SENDCOMMANDFEEDBACK)) {
             for (ServerPlayer serverplayer : this.server.getPlayerList().getPlayers()) {
-                if (serverplayer != this.source && this.server.getPlayerList().isOp(serverplayer.getGameProfile())) {
+            	if (serverplayer != this.source && serverplayer.getBukkitEntity().hasPermission("minecraft.admin.command_feedback")) {
                     serverplayer.sendSystemMessage(component);
                 }
             }
         }
 
-        if (this.source != this.server && this.server.getGameRules().getBoolean(GameRules.RULE_LOGADMINCOMMANDS)) {
+      	if (this.source != this.server && this.server.getGameRules().getBoolean(GameRules.RULE_LOGADMINCOMMANDS) && !org.spigotmc.SpigotConfig.silentCommandBlocks) { // Spigot
             this.server.sendSystemMessage(component);
         }
     }
@@ -591,4 +_,10 @@
     public boolean isSilent() {
         return this.silent;
     }
+
+   	// CraftBukkit start
+   	public org.bukkit.command.CommandSender getBukkitSender() {
+      	return source.getBukkitSender(this);
+   	}
+   	// CraftBukkit end
 }
