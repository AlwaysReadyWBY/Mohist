--- a/net/minecraft/resources/ResourceKey.java
+++ b/net/minecraft/resources/ResourceKey.java
@@ -5,9 +_,9 @@
 import java.util.Optional;
 import java.util.concurrent.ConcurrentMap;
 import net.minecraft.core.Registry;
-import net.minecraft.core.registries.Registries;
+import net.minecraft.core.registries.BuiltInRegistries;
 
-public class ResourceKey<T> {
+public class ResourceKey<T> implements Comparable<ResourceKey<?>> {
    private static final ConcurrentMap<ResourceKey.InternKey, ResourceKey<?>> VALUES = (new MapMaker()).weakValues().makeMap();
    private final ResourceLocation registryName;
    private final ResourceLocation location;
@@ -23,7 +_,7 @@
    }
 
    public static <T> ResourceKey<Registry<T>> createRegistryKey(ResourceLocation p_135789_) {
-      return create(Registries.ROOT_REGISTRY_NAME, p_135789_);
+      return create(BuiltInRegistries.ROOT_REGISTRY_NAME, p_135789_);
    }
 
    private static <T> ResourceKey<T> create(ResourceLocation p_135791_, ResourceLocation p_135792_) {
@@ -55,6 +_,19 @@
 
    public ResourceLocation registry() {
       return this.registryName;
+   }
+
+   public boolean equals(Object o) {
+      if (this == o) return true;
+      if (o == null || getClass() != o.getClass()) return false;
+      return location.equals(((ResourceKey<?>) o).location) && registryName.equals(((ResourceKey<?>) o).registryName);
+   }
+
+   @Override
+   public int compareTo(ResourceKey<?> o) {
+      int ret = this.registry().compareTo(o.registry());
+      if (ret == 0) ret = this.location().compareTo(o.location());
+      return ret;
    }
 
    static record InternKey(ResourceLocation registry, ResourceLocation location) {
