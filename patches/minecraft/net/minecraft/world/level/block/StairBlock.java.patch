--- a/net/minecraft/world/level/block/StairBlock.java
+++ b/net/minecraft/world/level/block/StairBlock.java
@@ -5,8 +_,16 @@
 import java.util.stream.IntStream;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.InteractionHand;
+import net.minecraft.world.InteractionResult;
+import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.context.BlockPlaceContext;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.Explosion;
+import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
@@ -20,6 +_,7 @@
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.pathfinder.PathComputationType;
+import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
@@ -83,11 +_,21 @@
       return voxelshape;
    }
 
+   @Deprecated // Forge: Use the other constructor that takes a Supplier
    public StairBlock(BlockState p_56862_, BlockBehaviour.Properties p_56863_) {
       super(p_56863_);
       this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(HALF, Half.BOTTOM).setValue(SHAPE, StairsShape.STRAIGHT).setValue(WATERLOGGED, Boolean.valueOf(false)));
       this.base = p_56862_.getBlock();
       this.baseState = p_56862_;
+      this.stateSupplier = () -> p_56862_;
+   }
+
+   public StairBlock(java.util.function.Supplier<BlockState> state, BlockBehaviour.Properties properties) {
+      super(properties);
+      this.registerDefaultState(this.stateDefinition.any().setValue(FACING, Direction.NORTH).setValue(HALF, Half.BOTTOM).setValue(SHAPE, StairsShape.STRAIGHT).setValue(WATERLOGGED, Boolean.valueOf(false)));
+      this.base = Blocks.AIR; // These are unused, fields are redirected
+      this.baseState = Blocks.AIR.defaultBlockState();
+      this.stateSupplier = state;
    }
 
    public boolean useShapeForLightOcclusion(BlockState p_56967_) {
@@ -102,10 +_,59 @@
       return p_56983_.getValue(SHAPE).ordinal() * 4 + p_56983_.getValue(FACING).get2DDataValue();
    }
 
+   public void animateTick(BlockState p_222518_, Level p_222519_, BlockPos p_222520_, RandomSource p_222521_) {
+      this.base.animateTick(p_222518_, p_222519_, p_222520_, p_222521_);
+   }
+
+   public void attack(BlockState p_56896_, Level p_56897_, BlockPos p_56898_, Player p_56899_) {
+      this.baseState.attack(p_56897_, p_56898_, p_56899_);
+   }
+
+   public void destroy(LevelAccessor p_56882_, BlockPos p_56883_, BlockState p_56884_) {
+      this.base.destroy(p_56882_, p_56883_, p_56884_);
+   }
+
    public float getExplosionResistance() {
       return this.base.getExplosionResistance();
    }
 
+   public void onPlace(BlockState p_56961_, Level p_56962_, BlockPos p_56963_, BlockState p_56964_, boolean p_56965_) {
+      if (!p_56961_.is(p_56961_.getBlock())) {
+         p_56962_.neighborChanged(this.baseState, p_56963_, Blocks.AIR, p_56963_, false);
+         this.base.onPlace(this.baseState, p_56962_, p_56963_, p_56964_, false);
+      }
+   }
+
+   public void onRemove(BlockState p_56908_, Level p_56909_, BlockPos p_56910_, BlockState p_56911_, boolean p_56912_) {
+      if (!p_56908_.is(p_56911_.getBlock())) {
+         this.baseState.onRemove(p_56909_, p_56910_, p_56911_, p_56912_);
+      }
+   }
+
+   public void stepOn(Level p_154720_, BlockPos p_154721_, BlockState p_154722_, Entity p_154723_) {
+      this.base.stepOn(p_154720_, p_154721_, p_154722_, p_154723_);
+   }
+
+   public boolean isRandomlyTicking(BlockState p_56947_) {
+      return this.base.isRandomlyTicking(p_56947_);
+   }
+
+   public void randomTick(BlockState p_222523_, ServerLevel p_222524_, BlockPos p_222525_, RandomSource p_222526_) {
+      this.base.randomTick(p_222523_, p_222524_, p_222525_, p_222526_);
+   }
+
+   public void tick(BlockState p_222513_, ServerLevel p_222514_, BlockPos p_222515_, RandomSource p_222516_) {
+      this.base.tick(p_222513_, p_222514_, p_222515_, p_222516_);
+   }
+
+   public InteractionResult use(BlockState p_56901_, Level p_56902_, BlockPos p_56903_, Player p_56904_, InteractionHand p_56905_, BlockHitResult p_56906_) {
+      return this.baseState.use(p_56902_, p_56904_, p_56905_, p_56906_);
+   }
+
+   public void wasExploded(Level p_56878_, BlockPos p_56879_, Explosion p_56880_) {
+      this.base.wasExploded(p_56878_, p_56879_, p_56880_);
+   }
+
    public BlockState getStateForPlacement(BlockPlaceContext p_56872_) {
       Direction direction = p_56872_.getClickedFace();
       BlockPos blockpos = p_56872_.getClickedPos();
@@ -215,4 +_,14 @@
    public boolean isPathfindable(BlockState p_56891_, BlockGetter p_56892_, BlockPos p_56893_, PathComputationType p_56894_) {
       return false;
    }
+
+   // Forge Start
+   private final java.util.function.Supplier<BlockState> stateSupplier;
+   private Block getModelBlock() {
+       return getModelState().getBlock();
+   }
+   private BlockState getModelState() {
+       return stateSupplier.get();
+   }
+   // Forge end
 }
