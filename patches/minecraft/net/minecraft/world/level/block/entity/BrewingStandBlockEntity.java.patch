--- a/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -1,17 +_,22 @@
 package net.minecraft.world.level.block.entity;
 
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.HolderLookup;
 import net.minecraft.core.NonNullList;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.Containers;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.BrewingStandMenu;
 import net.minecraft.world.inventory.ContainerData;
@@ -22,6 +_,17 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.BrewingStandBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraftforge.common.brewing.BrewingRecipeRegistry;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.block.BrewingStartEvent;
+import org.bukkit.event.inventory.BrewEvent;
+import org.bukkit.event.inventory.BrewingStandFuelEvent;
+import org.bukkit.inventory.BrewerInventory;
+import org.bukkit.inventory.InventoryHolder;
 
 public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer {
     private static final int INGREDIENT_SLOT = 3;
@@ -34,10 +_,10 @@
     public static final int DATA_FUEL_USES = 1;
     public static final int NUM_DATA_VALUES = 2;
     private NonNullList<ItemStack> items = NonNullList.withSize(5, ItemStack.EMPTY);
-    public int brewTime;
+    int brewTime;
     private boolean[] lastPotionCount;
     private Item ingredient;
-    public int fuel;
+    int fuel;
     protected final ContainerData dataAccess = new ContainerData() {
         @Override
         public int get(int p_59038_) {
@@ -65,6 +_,37 @@
         }
     };
 
+   // CraftBukkit start - add fields and methods
+   private int lastTick = MinecraftServer.currentTick;
+   public List<HumanEntity> transaction = new java.util.ArrayList<>();
+   private int maxStack = MAX_STACK;
+
+   public void onOpen(CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+   // CraftBukkit end
+
     public BrewingStandBlockEntity(BlockPos p_155283_, BlockState p_155284_) {
         super(BlockEntityType.BREWING_STAND, p_155283_, p_155284_);
     }
@@ -92,30 +_,52 @@
     public static void serverTick(Level p_155286_, BlockPos p_155287_, BlockState p_155288_, BrewingStandBlockEntity p_155289_) {
         ItemStack itemstack = p_155289_.items.get(4);
         if (p_155289_.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
-            p_155289_.fuel = 20;
+         // CraftBukkit start
+         BrewingStandFuelEvent event = new BrewingStandFuelEvent(CraftBlock.at(p_155286_, p_155287_), CraftItemStack.asCraftMirror(itemstack), 20);
+         p_155286_.getCraftServer().getPluginManager().callEvent(event);
+
+         if (event.isCancelled()) {
+            return;
+         }
+
+         p_155289_.fuel = event.getFuelPower();
+         if (p_155289_.fuel > 0 && event.isConsuming()) {
             itemstack.shrink(1);
-            setChanged(p_155286_, p_155287_, p_155288_);
-        }
-
-        boolean flag = isBrewable(p_155286_.potionBrewing(), p_155289_.items);
-        boolean flag1 = p_155289_.brewTime > 0;
-        ItemStack itemstack1 = p_155289_.items.get(3);
-        if (flag1) {
-            p_155289_.brewTime--;
-            boolean flag2 = p_155289_.brewTime == 0;
-            if (flag2 && flag) {
-                doBrew(p_155286_, p_155287_, p_155289_.items);
-                setChanged(p_155286_, p_155287_, p_155288_);
-            } else if (!flag || !itemstack1.is(p_155289_.ingredient)) {
-                p_155289_.brewTime = 0;
-                setChanged(p_155286_, p_155287_, p_155288_);
-            }
-        } else if (flag && p_155289_.fuel > 0) {
-            p_155289_.fuel--;
-            p_155289_.brewTime = 400;
-            p_155289_.ingredient = itemstack1.getItem();
-            setChanged(p_155286_, p_155287_, p_155288_);
-        }
+         }
+         // CraftBukkit end
+         setChanged(p_155286_, p_155287_, p_155288_);
+      }
+
+      boolean flag = isBrewable(p_155289_.items);
+      boolean flag1 = p_155289_.brewTime > 0;
+      ItemStack itemstack1 = p_155289_.items.get(3);
+
+      // CraftBukkit start - Use wall time instead of ticks for brewing
+      int elapsedTicks = MinecraftServer.currentTick - p_155289_.lastTick;
+      p_155289_.lastTick = MinecraftServer.currentTick;
+      if (flag1) {
+         p_155289_.brewTime -= elapsedTicks;
+         boolean flag2 = p_155289_.brewTime <= 0; // == -> <=
+         // CraftBukkit end
+
+         if (flag2 && flag) {
+            brewingStandBlock = p_155289_;
+            doBrew(p_155286_, p_155287_, p_155289_.items);
+            setChanged(p_155286_, p_155287_, p_155288_);
+         } else if (!flag || !itemstack1.is(p_155289_.ingredient)) {
+            p_155289_.brewTime = 0;
+            setChanged(p_155286_, p_155287_, p_155288_);
+         }
+      } else if (flag && p_155289_.fuel > 0) {
+         --p_155289_.fuel;
+         // CraftBukkit start
+         BrewingStartEvent event = new BrewingStartEvent(CraftBlock.at(p_155286_, p_155287_), CraftItemStack.asCraftMirror(itemstack1), 400);
+         p_155286_.getCraftServer().getPluginManager().callEvent(event);
+         p_155289_.brewTime = event.getTotalBrewTime(); // 400 -> event.getTotalBrewTime()
+         // CraftBukkit end
+         p_155289_.ingredient = itemstack1.getItem();
+         setChanged(p_155286_, p_155287_, p_155288_);
+      }
 
         boolean[] aboolean = p_155289_.getPotionBits();
         if (!Arrays.equals(aboolean, p_155289_.lastPotionCount)) {
@@ -163,22 +_,49 @@
         }
     }
 
-    private static void doBrew(Level p_155291_, BlockPos p_155292_, NonNullList<ItemStack> p_155293_) {
-        ItemStack itemstack = p_155293_.get(3);
-        PotionBrewing potionbrewing = p_155291_.potionBrewing();
-
-        for (int i = 0; i < 3; i++) {
-            p_155293_.set(i, potionbrewing.mix(itemstack, p_155293_.get(i)));
-        }
-
-        itemstack.shrink(1);
-        if (itemstack.getItem().hasCraftingRemainingItem()) {
-            ItemStack itemstack1 = new ItemStack(itemstack.getItem().getCraftingRemainingItem());
+   private static BrewingStandBlockEntity brewingStandBlock;
+   private static void doBrew(Level p_155291_, BlockPos p_155292_, NonNullList<ItemStack> p_155293_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onPotionAttemptBrew(p_155293_)) return;
+      ItemStack itemstack = p_155293_.get(3);
+
+      // CraftBukkit start
+      List<org.bukkit.inventory.ItemStack> brewResults = new ArrayList<>(3);
+      for (int i = 0; i < 3; ++i) {
+         ItemStack input = p_155293_.get(i);
+         ItemStack output = BrewingRecipeRegistry.getOutput(input, itemstack);
+         brewResults.add(i, CraftItemStack.asCraftMirror(output.isEmpty() ? input : output));
+      }
+      BrewingStandBlockEntity brewingStandBlockEntity = brewingStandBlock;
+      InventoryHolder owner = brewingStandBlockEntity == null ? null : brewingStandBlockEntity.getOwner();
+      if (owner != null) {
+         BrewEvent event = new BrewEvent(CraftBlock.at(p_155291_, p_155292_), (BrewerInventory) owner.getInventory(), brewResults, brewingStandBlockEntity.fuel);
+         Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         } else {
+            for (int i = 0; i < 3; ++i) {
+               if (i < brewResults.size()) {
+                  p_155293_.set(i, CraftItemStack.asNMSCopy(brewResults.get(i)));
+               } else {
+                  p_155293_.set(i, ItemStack.EMPTY);
+               }
+            }
+         }
+      }
+      // CraftBukkit end
+
+        net.minecraftforge.event.ForgeEventFactory.onPotionBrewed(p_155293_);
+
+        if (itemstack.hasCraftingRemainingItem()) {
+            ItemStack itemstack1 = itemstack.getCraftingRemainingItem();
+            itemstack.shrink(1);
             if (itemstack.isEmpty()) {
                 itemstack = itemstack1;
             } else {
                 Containers.dropItemStack(p_155291_, (double)p_155292_.getX(), (double)p_155292_.getY(), (double)p_155292_.getZ(), itemstack1);
             }
+        } else {
+            itemstack.shrink(1);
         }
 
         p_155293_.set(3, itemstack);
@@ -207,6 +_,9 @@
         if (p_59017_ == 3) {
             PotionBrewing potionbrewing = this.level != null ? this.level.potionBrewing() : PotionBrewing.EMPTY;
             return potionbrewing.isIngredient(p_59018_);
+        } else if (p_59017_ != 4) {
+            PotionBrewing potionbrewing = this.level != null ? this.level.potionBrewing() : PotionBrewing.EMPTY;
+            return this.getItem(p_59017_).isEmpty() && potionbrewing.isValidInput(p_59018_);
         } else {
             return p_59017_ == 4
                 ? p_59018_.is(Items.BLAZE_POWDER)
@@ -242,5 +_,34 @@
     @Override
     protected AbstractContainerMenu createMenu(int p_58990_, Inventory p_58991_) {
         return new BrewingStandMenu(p_58990_, p_58991_, this, this.dataAccess);
+    }
+
+    net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+        net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+        if (capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && facing != null && !this.remove) {
+            return switch (facing) {
+                case UP -> handlers[0].cast();
+                case DOWN -> handlers[1].cast();
+                default -> handlers[2].cast();
+            };
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        super.invalidateCaps();
+        for (int x = 0; x < handlers.length; x++) {
+            handlers[x].invalidate();
+        }
+    }
+
+    @Override
+    public void reviveCaps() {
+        super.reviveCaps();
+        this.handlers = net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
     }
 }
