--- a/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
@@ -1,26 +_,16 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.Lists;
-import com.mojang.logging.LogUtils;
-import com.mojang.serialization.Codec;
-import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
-import io.netty.buffer.ByteBuf;
+import com.mohistmc.mohist.MohistConfig;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
-import net.minecraft.core.HolderLookup;
-import net.minecraft.core.component.DataComponentMap;
-import net.minecraft.core.component.DataComponents;
-import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
-import net.minecraft.nbt.NbtOps;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtUtils;
-import net.minecraft.network.codec.ByteBufCodecs;
-import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.network.protocol.game.DebugPackets;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
@@ -31,409 +_,379 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.animal.Bee;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.component.CustomData;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.BeehiveBlock;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.FireBlock;
-import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
-import org.slf4j.Logger;
 
 public class BeehiveBlockEntity extends BlockEntity {
-    private static final Logger LOGGER = LogUtils.getLogger();
-    private static final String TAG_FLOWER_POS = "flower_pos";
-    private static final String BEES = "bees";
-    static final List<String> IGNORED_BEE_TAGS = Arrays.asList(
-        "Air",
-        "ArmorDropChances",
-        "ArmorItems",
-        "Brain",
-        "CanPickUpLoot",
-        "DeathTime",
-        "FallDistance",
-        "FallFlying",
-        "Fire",
-        "HandDropChances",
-        "HandItems",
-        "HurtByTimestamp",
-        "HurtTime",
-        "LeftHanded",
-        "Motion",
-        "NoGravity",
-        "OnGround",
-        "PortalCooldown",
-        "Pos",
-        "Rotation",
-        "SleepingX",
-        "SleepingY",
-        "SleepingZ",
-        "CannotEnterHiveTicks",
-        "TicksSincePollination",
-        "CropsGrownSincePollination",
-        "hive_pos",
-        "Passengers",
-        "leash",
-        "UUID"
-    );
-    public static final int MAX_OCCUPANTS = 3;
-    private static final int MIN_TICKS_BEFORE_REENTERING_HIVE = 400;
-    private static final int MIN_OCCUPATION_TICKS_NECTAR = 2400;
-    public static final int MIN_OCCUPATION_TICKS_NECTARLESS = 600;
-    private final List<BeehiveBlockEntity.BeeData> stored = Lists.newArrayList();
-    @Nullable
-    public BlockPos savedFlowerPos;
-
-    public BeehiveBlockEntity(BlockPos p_155134_, BlockState p_155135_) {
-        super(BlockEntityType.BEEHIVE, p_155134_, p_155135_);
-    }
-
-    @Override
-    public void setChanged() {
-        if (this.isFireNearby()) {
-            this.emptyAllLivingFromHive(null, this.level.getBlockState(this.getBlockPos()), BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
-        }
-
-        super.setChanged();
-    }
-
-    public boolean isFireNearby() {
-        if (this.level == null) {
-            return false;
-        } else {
-            for (BlockPos blockpos : BlockPos.betweenClosed(this.worldPosition.offset(-1, -1, -1), this.worldPosition.offset(1, 1, 1))) {
-                if (this.level.getBlockState(blockpos).getBlock() instanceof FireBlock) {
-                    return true;
-                }
-            }
-
-            return false;
-        }
-    }
-
-    public boolean isEmpty() {
-        return this.stored.isEmpty();
-    }
-
-    public boolean isFull() {
-        return this.stored.size() == 3;
-    }
-
-    public void emptyAllLivingFromHive(@Nullable Player p_58749_, BlockState p_58750_, BeehiveBlockEntity.BeeReleaseStatus p_58751_) {
-        List<Entity> list = this.releaseAllOccupants(p_58750_, p_58751_);
-        if (p_58749_ != null) {
-            for (Entity entity : list) {
-                if (entity instanceof Bee) {
-                    Bee bee = (Bee)entity;
-                    if (p_58749_.position().distanceToSqr(entity.position()) <= 16.0) {
-                        if (!this.isSedated()) {
-                            bee.setTarget(p_58749_);
-                        } else {
-                            bee.setStayOutOfHiveCountdown(400);
-                        }
-                    }
-                }
-            }
-        }
-    }
-
-    private List<Entity> releaseAllOccupants(BlockState p_58760_, BeehiveBlockEntity.BeeReleaseStatus p_58761_) {
-        List<Entity> list = Lists.newArrayList();
-        this.stored.removeIf(p_327282_ -> releaseOccupant(this.level, this.worldPosition, p_58760_, p_327282_.toOccupant(), list, p_58761_, this.savedFlowerPos));
-        if (!list.isEmpty()) {
-            super.setChanged();
-        }
-
-        return list;
-    }
-
-    @VisibleForDebug
-    public int getOccupantCount() {
-        return this.stored.size();
-    }
-
-    public static int getHoneyLevel(BlockState p_58753_) {
-        return p_58753_.getValue(BeehiveBlock.HONEY_LEVEL);
-    }
-
-    @VisibleForDebug
-    public boolean isSedated() {
-        return CampfireBlock.isSmokeyPos(this.level, this.getBlockPos());
-    }
-
-    public void addOccupant(Entity p_58742_) {
-        if (this.stored.size() < 3) {
-            p_58742_.stopRiding();
-            p_58742_.ejectPassengers();
-            this.storeBee(BeehiveBlockEntity.Occupant.of(p_58742_));
-            if (this.level != null) {
-                if (p_58742_ instanceof Bee bee && bee.hasSavedFlowerPos() && (!this.hasSavedFlowerPos() || this.level.random.nextBoolean())) {
-                    this.savedFlowerPos = bee.getSavedFlowerPos();
-                }
-
-                BlockPos blockpos = this.getBlockPos();
-                this.level
-                    .playSound(
-                        null,
-                        (double)blockpos.getX(),
-                        (double)blockpos.getY(),
-                        (double)blockpos.getZ(),
-                        SoundEvents.BEEHIVE_ENTER,
-                        SoundSource.BLOCKS,
-                        1.0F,
-                        1.0F
-                    );
-                this.level.gameEvent(GameEvent.BLOCK_CHANGE, blockpos, GameEvent.Context.of(p_58742_, this.getBlockState()));
-            }
-
-            p_58742_.discard();
-            super.setChanged();
-        }
-    }
-
-    public void storeBee(BeehiveBlockEntity.Occupant p_329282_) {
-        this.stored.add(new BeehiveBlockEntity.BeeData(p_329282_));
-    }
-
-    private static boolean releaseOccupant(
-        Level p_155137_,
-        BlockPos p_155138_,
-        BlockState p_155139_,
-        BeehiveBlockEntity.Occupant p_335681_,
-        @Nullable List<Entity> p_155141_,
-        BeehiveBlockEntity.BeeReleaseStatus p_155142_,
-        @Nullable BlockPos p_155143_
-    ) {
-        if ((p_155137_.isNight() || p_155137_.isRaining()) && p_155142_ != BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY) {
-            return false;
-        } else {
-            Direction direction = p_155139_.getValue(BeehiveBlock.FACING);
-            BlockPos blockpos = p_155138_.relative(direction);
-            boolean flag = !p_155137_.getBlockState(blockpos).getCollisionShape(p_155137_, blockpos).isEmpty();
-            if (flag && p_155142_ != BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY) {
-                return false;
-            } else {
-                Entity entity = p_335681_.createEntity(p_155137_, p_155138_);
-                if (entity != null) {
-                    if (entity instanceof Bee bee) {
-                        if (p_155143_ != null && !bee.hasSavedFlowerPos() && p_155137_.random.nextFloat() < 0.9F) {
-                            bee.setSavedFlowerPos(p_155143_);
-                        }
-
-                        if (p_155142_ == BeehiveBlockEntity.BeeReleaseStatus.HONEY_DELIVERED) {
-                            bee.dropOffNectar();
-                            if (p_155139_.is(BlockTags.BEEHIVES, p_202037_ -> p_202037_.hasProperty(BeehiveBlock.HONEY_LEVEL))) {
-                                int i = getHoneyLevel(p_155139_);
-                                if (i < 5) {
-                                    int j = p_155137_.random.nextInt(100) == 0 ? 2 : 1;
-                                    if (i + j > 5) {
-                                        j--;
-                                    }
-
-                                    p_155137_.setBlockAndUpdate(p_155138_, p_155139_.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(i + j)));
-                                }
-                            }
-                        }
-
-                        if (p_155141_ != null) {
-                            p_155141_.add(bee);
-                        }
-
-                        float f = entity.getBbWidth();
-                        double d3 = flag ? 0.0 : 0.55 + (double)(f / 2.0F);
-                        double d0 = (double)p_155138_.getX() + 0.5 + d3 * (double)direction.getStepX();
-                        double d1 = (double)p_155138_.getY() + 0.5 - (double)(entity.getBbHeight() / 2.0F);
-                        double d2 = (double)p_155138_.getZ() + 0.5 + d3 * (double)direction.getStepZ();
-                        entity.moveTo(d0, d1, d2, entity.getYRot(), entity.getXRot());
-                    }
-
-                    p_155137_.playSound(null, p_155138_, SoundEvents.BEEHIVE_EXIT, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    p_155137_.gameEvent(GameEvent.BLOCK_CHANGE, p_155138_, GameEvent.Context.of(entity, p_155137_.getBlockState(p_155138_)));
-                    return p_155137_.addFreshEntity(entity);
-                } else {
-                    return false;
-                }
-            }
-        }
-    }
-
-    private boolean hasSavedFlowerPos() {
-        return this.savedFlowerPos != null;
-    }
-
-    private static void tickOccupants(
-        Level p_155150_, BlockPos p_155151_, BlockState p_155152_, List<BeehiveBlockEntity.BeeData> p_155153_, @Nullable BlockPos p_155154_
-    ) {
-        boolean flag = false;
-        Iterator<BeehiveBlockEntity.BeeData> iterator = p_155153_.iterator();
-
-        while (iterator.hasNext()) {
-            BeehiveBlockEntity.BeeData beehiveblockentity$beedata = iterator.next();
-            if (beehiveblockentity$beedata.tick()) {
-                BeehiveBlockEntity.BeeReleaseStatus beehiveblockentity$beereleasestatus = beehiveblockentity$beedata.hasNectar()
-                    ? BeehiveBlockEntity.BeeReleaseStatus.HONEY_DELIVERED
-                    : BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED;
-                if (releaseOccupant(p_155150_, p_155151_, p_155152_, beehiveblockentity$beedata.toOccupant(), null, beehiveblockentity$beereleasestatus, p_155154_)) {
-                    flag = true;
-                    iterator.remove();
-                }
-            }
-        }
-
-        if (flag) {
-            setChanged(p_155150_, p_155151_, p_155152_);
-        }
-    }
-
-    public static void serverTick(Level p_155145_, BlockPos p_155146_, BlockState p_155147_, BeehiveBlockEntity p_155148_) {
-        tickOccupants(p_155145_, p_155146_, p_155147_, p_155148_.stored, p_155148_.savedFlowerPos);
-        if (!p_155148_.stored.isEmpty() && p_155145_.getRandom().nextDouble() < 0.005) {
-            double d0 = (double)p_155146_.getX() + 0.5;
-            double d1 = (double)p_155146_.getY();
-            double d2 = (double)p_155146_.getZ() + 0.5;
-            p_155145_.playSound(null, d0, d1, d2, SoundEvents.BEEHIVE_WORK, SoundSource.BLOCKS, 1.0F, 1.0F);
-        }
-
-        DebugPackets.sendHiveInfo(p_155145_, p_155146_, p_155147_, p_155148_);
-    }
-
-    @Override
-    protected void loadAdditional(CompoundTag p_333420_, HolderLookup.Provider p_335311_) {
-        super.loadAdditional(p_333420_, p_335311_);
-        this.stored.clear();
-        if (p_333420_.contains("bees")) {
-            BeehiveBlockEntity.Occupant.LIST_CODEC
-                .parse(NbtOps.INSTANCE, p_333420_.get("bees"))
-                .resultOrPartial(p_327283_ -> LOGGER.error("Failed to parse bees: '{}'", p_327283_))
-                .ifPresent(p_327284_ -> p_327284_.forEach(this::storeBee));
-        }
-
-        this.savedFlowerPos = NbtUtils.readBlockPos(p_333420_, "flower_pos").orElse(null);
-    }
-
-    @Override
-    protected void saveAdditional(CompoundTag p_187467_, HolderLookup.Provider p_332762_) {
-        super.saveAdditional(p_187467_, p_332762_);
-        p_187467_.put("bees", BeehiveBlockEntity.Occupant.LIST_CODEC.encodeStart(NbtOps.INSTANCE, this.getBees()).getOrThrow());
-        if (this.hasSavedFlowerPos()) {
-            p_187467_.put("flower_pos", NbtUtils.writeBlockPos(this.savedFlowerPos));
-        }
-    }
-
-    @Override
-    protected void applyImplicitComponents(BlockEntity.DataComponentInput p_333166_) {
-        super.applyImplicitComponents(p_333166_);
-        this.stored.clear();
-        List<BeehiveBlockEntity.Occupant> list = p_333166_.getOrDefault(DataComponents.BEES, List.of());
-        list.forEach(this::storeBee);
-    }
-
-    @Override
-    protected void collectImplicitComponents(DataComponentMap.Builder p_328977_) {
-        super.collectImplicitComponents(p_328977_);
-        p_328977_.set(DataComponents.BEES, this.getBees());
-    }
-
-    @Override
-    public void removeComponentsFromTag(CompoundTag p_329874_) {
-        super.removeComponentsFromTag(p_329874_);
-        p_329874_.remove("bees");
-    }
-
-    private List<BeehiveBlockEntity.Occupant> getBees() {
-        return this.stored.stream().map(BeehiveBlockEntity.BeeData::toOccupant).toList();
-    }
-
-    static class BeeData {
-        private final BeehiveBlockEntity.Occupant occupant;
-        private int ticksInHive;
-
-        BeeData(BeehiveBlockEntity.Occupant p_336059_) {
-            this.occupant = p_336059_;
-            this.ticksInHive = p_336059_.ticksInHive();
-        }
-
-        public boolean tick() {
-            return this.ticksInHive++ > this.occupant.minTicksInHive;
-        }
-
-        public BeehiveBlockEntity.Occupant toOccupant() {
-            return new BeehiveBlockEntity.Occupant(this.occupant.entityData, this.ticksInHive, this.occupant.minTicksInHive);
-        }
-
-        public boolean hasNectar() {
-            return this.occupant.entityData.getUnsafe().getBoolean("HasNectar");
-        }
-    }
-
-    public static enum BeeReleaseStatus {
-        HONEY_DELIVERED,
-        BEE_RELEASED,
-        EMERGENCY;
-    }
-
-    public static record Occupant(CustomData entityData, int ticksInHive, int minTicksInHive) {
-        public static final Codec<BeehiveBlockEntity.Occupant> CODEC = RecordCodecBuilder.create(
-            p_330401_ -> p_330401_.group(
-                        CustomData.CODEC.optionalFieldOf("entity_data", CustomData.EMPTY).forGetter(BeehiveBlockEntity.Occupant::entityData),
-                        Codec.INT.fieldOf("ticks_in_hive").forGetter(BeehiveBlockEntity.Occupant::ticksInHive),
-                        Codec.INT.fieldOf("min_ticks_in_hive").forGetter(BeehiveBlockEntity.Occupant::minTicksInHive)
-                    )
-                    .apply(p_330401_, BeehiveBlockEntity.Occupant::new)
-        );
-        public static final Codec<List<BeehiveBlockEntity.Occupant>> LIST_CODEC = CODEC.listOf();
-        public static final StreamCodec<ByteBuf, BeehiveBlockEntity.Occupant> STREAM_CODEC = StreamCodec.composite(
-            CustomData.STREAM_CODEC,
-            BeehiveBlockEntity.Occupant::entityData,
-            ByteBufCodecs.VAR_INT,
-            BeehiveBlockEntity.Occupant::ticksInHive,
-            ByteBufCodecs.VAR_INT,
-            BeehiveBlockEntity.Occupant::minTicksInHive,
-            BeehiveBlockEntity.Occupant::new
-        );
-
-        public static BeehiveBlockEntity.Occupant of(Entity p_331052_) {
-            CompoundTag compoundtag = new CompoundTag();
-            p_331052_.save(compoundtag);
-            BeehiveBlockEntity.IGNORED_BEE_TAGS.forEach(compoundtag::remove);
-            boolean flag = compoundtag.getBoolean("HasNectar");
-            return new BeehiveBlockEntity.Occupant(CustomData.of(compoundtag), 0, flag ? 2400 : 600);
-        }
-
-        public static BeehiveBlockEntity.Occupant create(int p_330047_) {
-            CompoundTag compoundtag = new CompoundTag();
-            compoundtag.putString("id", BuiltInRegistries.ENTITY_TYPE.getKey(EntityType.BEE).toString());
-            return new BeehiveBlockEntity.Occupant(CustomData.of(compoundtag), p_330047_, 600);
-        }
-
-        @Nullable
-        public Entity createEntity(Level p_328931_, BlockPos p_336164_) {
-            CompoundTag compoundtag = this.entityData.copyTag();
-            BeehiveBlockEntity.IGNORED_BEE_TAGS.forEach(compoundtag::remove);
-            Entity entity = EntityType.loadEntityRecursive(compoundtag, p_328931_, p_334152_ -> p_334152_);
-            if (entity != null && entity.getType().is(EntityTypeTags.BEEHIVE_INHABITORS)) {
-                entity.setNoGravity(true);
-                if (entity instanceof Bee bee) {
-                    bee.setHivePos(p_336164_);
-                    setBeeReleaseData(this.ticksInHive, bee);
-                }
-
-                return entity;
-            } else {
-                return null;
-            }
-        }
-
-        private static void setBeeReleaseData(int p_330253_, Bee p_331091_) {
-            int i = p_331091_.getAge();
-            if (i < 0) {
-                p_331091_.setAge(Math.min(0, i + p_330253_));
-            } else if (i > 0) {
-                p_331091_.setAge(Math.max(0, i - p_330253_));
-            }
-
-            p_331091_.setInLoveTime(Math.max(0, p_331091_.getInLoveTime() - p_330253_));
-        }
-    }
+   public static final String TAG_FLOWER_POS = "FlowerPos";
+   public static final String MIN_OCCUPATION_TICKS = "MinOccupationTicks";
+   public static final String ENTITY_DATA = "EntityData";
+   public static final String TICKS_IN_HIVE = "TicksInHive";
+   public static final String HAS_NECTAR = "HasNectar";
+   public static final String BEES = "Bees";
+   private static final List<String> IGNORED_BEE_TAGS = Arrays.asList("Air", "ArmorDropChances", "ArmorItems", "Brain", "CanPickUpLoot", "DeathTime", "FallDistance", "FallFlying", "Fire", "HandDropChances", "HandItems", "HurtByTimestamp", "HurtTime", "LeftHanded", "Motion", "NoGravity", "OnGround", "PortalCooldown", "Pos", "Rotation", "CannotEnterHiveTicks", "TicksSincePollination", "CropsGrownSincePollination", "HivePos", "Passengers", "Leash", "UUID");
+   public static final int MAX_OCCUPANTS = 3;
+   private static final int MIN_TICKS_BEFORE_REENTERING_HIVE = 400;
+   private static final int MIN_OCCUPATION_TICKS_NECTAR = 2400;
+   public static final int MIN_OCCUPATION_TICKS_NECTARLESS = 600;
+   private final List<BeehiveBlockEntity.BeeData> stored = Lists.newArrayList();
+   @Nullable
+   public BlockPos savedFlowerPos;
+
+   public int maxBees = MohistConfig.maxBees; // CraftBukkit - allow setting max amount of bees a hive can hold
+
+   public BeehiveBlockEntity(BlockPos p_155134_, BlockState p_155135_) {
+      super(BlockEntityType.BEEHIVE, p_155134_, p_155135_);
+   }
+
+   public void setChanged() {
+      if (this.isFireNearby()) {
+         this.emptyAllLivingFromHive((Player)null, this.level.getBlockState(this.getBlockPos()), BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+      }
+
+      super.setChanged();
+   }
+
+   public boolean isFireNearby() {
+      if (this.level == null) {
+         return false;
+      } else {
+         for(BlockPos blockpos : BlockPos.betweenClosed(this.worldPosition.offset(-1, -1, -1), this.worldPosition.offset(1, 1, 1))) {
+            if (this.level.getBlockState(blockpos).getBlock() instanceof FireBlock) {
+               return true;
+            }
+         }
+
+         return false;
+      }
+   }
+
+   public boolean isEmpty() {
+      return this.stored.isEmpty();
+   }
+
+   public boolean isFull() {
+      return this.stored.size() == this.maxBees; // CraftBukkit
+   }
+
+   public void emptyAllLivingFromHive(@Nullable Player p_58749_, BlockState p_58750_, BeehiveBlockEntity.BeeReleaseStatus p_58751_) {
+      List<Entity> list = this.releaseAllOccupants(p_58750_, p_58751_);
+      if (p_58749_ != null) {
+         for(Entity entity : list) {
+            if (entity instanceof Bee) {
+               Bee bee = (Bee)entity;
+               if (p_58749_.position().distanceToSqr(entity.position()) <= 16.0D) {
+                  if (!this.isSedated()) {
+                     bee.setTarget(p_58749_, org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit
+                  } else {
+                     bee.setStayOutOfHiveCountdown(400);
+                  }
+               }
+            }
+         }
+      }
+
+   }
+
+   private List<Entity> releaseAllOccupants(BlockState p_58760_, BeehiveBlockEntity.BeeReleaseStatus p_58761_) {
+      List<Entity> list = Lists.newArrayList();
+      this.stored.removeIf((p_272556_) -> {
+         return releaseOccupant(this.level, this.worldPosition, p_58760_, p_272556_, list, p_58761_, this.savedFlowerPos);
+      });
+      if (!list.isEmpty()) {
+         super.setChanged();
+      }
+
+      return list;
+   }
+
+   public void addOccupant(Entity p_58742_, boolean p_58743_) {
+      this.addOccupantWithPresetTicks(p_58742_, p_58743_, 0);
+   }
+
+   @VisibleForDebug
+   public int getOccupantCount() {
+      return this.stored.size();
+   }
+
+   public static int getHoneyLevel(BlockState p_58753_) {
+      return p_58753_.getValue(BeehiveBlock.HONEY_LEVEL);
+   }
+
+   @VisibleForDebug
+   public boolean isSedated() {
+      return CampfireBlock.isSmokeyPos(this.level, this.getBlockPos());
+   }
+
+   public void addOccupantWithPresetTicks(Entity p_58745_, boolean p_58746_, int p_58747_) {
+      if (this.stored.size() < this.maxBees) { // CraftBukkit
+         // CraftBukkit start
+         if (this.level != null) {
+            org.bukkit.event.entity.EntityEnterBlockEvent event = new org.bukkit.event.entity.EntityEnterBlockEvent(p_58745_.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(level, getBlockPos()));
+            org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+               if (p_58745_ instanceof Bee) {
+                  ((Bee) p_58745_).setStayOutOfHiveCountdown(400);
+               }
+               return;
+            }
+         }
+         // CraftBukkit end
+         p_58745_.stopRiding();
+         p_58745_.ejectPassengers();
+         CompoundTag compoundtag = new CompoundTag();
+         p_58745_.save(compoundtag);
+         this.storeBee(compoundtag, p_58747_, p_58746_);
+         if (this.level != null) {
+            if (p_58745_ instanceof Bee) {
+               Bee bee = (Bee)p_58745_;
+               if (bee.hasSavedFlowerPos() && (!this.hasSavedFlowerPos() || this.level.random.nextBoolean())) {
+                  this.savedFlowerPos = bee.getSavedFlowerPos();
+               }
+            }
+
+            BlockPos blockpos = this.getBlockPos();
+            this.level.playSound((Player)null, (double)blockpos.getX(), (double)blockpos.getY(), (double)blockpos.getZ(), SoundEvents.BEEHIVE_ENTER, SoundSource.BLOCKS, 1.0F, 1.0F);
+            this.level.gameEvent(GameEvent.BLOCK_CHANGE, blockpos, GameEvent.Context.of(p_58745_, this.getBlockState()));
+         }
+
+         p_58745_.discard();
+         super.setChanged();
+      }
+   }
+
+   public void storeBee(CompoundTag p_155158_, int p_155159_, boolean p_155160_) {
+      this.stored.add(new BeehiveBlockEntity.BeeData(p_155158_, p_155159_, p_155160_ ? 2400 : 600));
+   }
+
+   private static boolean releaseOccupant(Level p_155137_, BlockPos p_155138_, BlockState p_155139_, BeehiveBlockEntity.BeeData p_155140_, @Nullable List<Entity> p_155141_, BeehiveBlockEntity.BeeReleaseStatus p_155142_, @Nullable BlockPos p_155143_) {
+      // CraftBukkit start - This allows us to bypass the night/rain/emergency check
+      return releaseBee(p_155137_, p_155138_, p_155139_, p_155140_, p_155141_, p_155142_, p_155143_, false);
+   }
+
+   private static boolean releaseBee(Level pLevel, BlockPos pPos, BlockState pState, BeehiveBlockEntity.BeeData pData, @Nullable List<Entity> pStoredInHives, BeehiveBlockEntity.BeeReleaseStatus pReleaseStatus, @Nullable BlockPos pSavedFlowerPos, boolean force) {
+      if (!force && (pLevel.isNight() || pLevel.isRaining()) && pReleaseStatus != BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY) {
+         // CraftBukkit end
+         return false;
+      } else {
+         CompoundTag compoundtag = pData.entityData.copy();
+         removeIgnoredBeeTags(compoundtag);
+         compoundtag.put("HivePos", NbtUtils.writeBlockPos(pPos));
+         compoundtag.putBoolean("NoGravity", true);
+         Direction direction = pState.getValue(BeehiveBlock.FACING);
+         BlockPos blockpos = pPos.relative(direction);
+         boolean flag = !pLevel.getBlockState(blockpos).getCollisionShape(pLevel, blockpos).isEmpty();
+         if (flag && pReleaseStatus != BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY) {
+            return false;
+         } else {
+            Entity entity = EntityType.loadEntityRecursive(compoundtag, pLevel, (p_58740_) -> {
+               return p_58740_;
+            });
+            if (entity != null) {
+               if (!entity.getType().is(EntityTypeTags.BEEHIVE_INHABITORS)) {
+                  return false;
+               } else {
+                  // CraftBukkit start
+                  if (entity instanceof Bee) {
+                     float f = entity.getBbWidth();
+                     double d0 = flag ? 0.0D : 0.55D + (double) (f / 2.0F);
+                     double d1 = (double) pPos.getX() + 0.5D + d0 * (double) direction.getStepX();
+                     double d2 = (double) pPos.getY() + 0.5D - (double) (entity.getBbHeight() / 2.0F);
+                     double d3 = (double) pPos.getZ() + 0.5D + d0 * (double) direction.getStepZ();
+
+                     entity.moveTo(d1, d2, d3, entity.getYRot(), entity.getXRot());
+                  }
+                  if (!pLevel.addFreshEntity(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BEEHIVE)) return false; // CraftBukkit - SpawnReason, moved from below
+                  // CraftBukkit end
+                  if (entity instanceof Bee) {
+                     Bee bee = (Bee)entity;
+                     if (pSavedFlowerPos != null && !bee.hasSavedFlowerPos() && pLevel.random.nextFloat() < 0.9F) {
+                        bee.setSavedFlowerPos(pSavedFlowerPos);
+                     }
+
+                     if (pReleaseStatus == BeehiveBlockEntity.BeeReleaseStatus.HONEY_DELIVERED) {
+                        bee.dropOffNectar();
+                        if (pState.is(BlockTags.BEEHIVES, (p_202037_) -> {
+                           return p_202037_.hasProperty(BeehiveBlock.HONEY_LEVEL);
+                        })) {
+                           int i = getHoneyLevel(pState);
+                           if (i < 5) {
+                              int j = pLevel.random.nextInt(100) == 0 ? 2 : 1;
+                              if (i + j > 5) {
+                                 --j;
+                              }
+
+                              pLevel.setBlockAndUpdate(pPos, pState.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(i + j)));
+                           }
+                        }
+                     }
+
+                     setBeeReleaseData(pData.ticksInHive, bee);
+                     if (pStoredInHives != null) {
+                        pStoredInHives.add(bee);
+                     }
+
+                     /* // CraftBukkit start
+                     float f = entity.getBbWidth();
+                     double d3 = flag ? 0.0D : 0.55D + (double)(f / 2.0F);
+                     double d0 = (double)pPos.getX() + 0.5D + d3 * (double)direction.getStepX();
+                     double d1 = (double)pPos.getY() + 0.5D - (double)(entity.getBbHeight() / 2.0F);
+                     double d2 = (double)pPos.getZ() + 0.5D + d3 * (double)direction.getStepZ();
+                     entity.moveTo(d0, d1, d2, entity.getYRot(), entity.getXRot());
+                     */ // CraftBukkit end
+                  }
+
+                  pLevel.playSound((Player)null, pPos, SoundEvents.BEEHIVE_EXIT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                  pLevel.gameEvent(GameEvent.BLOCK_CHANGE, pPos, GameEvent.Context.of(entity, pLevel.getBlockState(pPos)));
+                  return true; // return pLevel.addFreshEntity(entity); // CraftBukkit - moved up
+               }
+            } else {
+               return false;
+            }
+         }
+      }
+   }
+
+   static void removeIgnoredBeeTags(CompoundTag p_155162_) {
+      for(String s : IGNORED_BEE_TAGS) {
+         p_155162_.remove(s);
+      }
+
+   }
+
+   private static void setBeeReleaseData(int p_58737_, Bee p_58738_) {
+      int i = p_58738_.getAge();
+      if (i < 0) {
+         p_58738_.setAge(Math.min(0, i + p_58737_));
+      } else if (i > 0) {
+         p_58738_.setAge(Math.max(0, i - p_58737_));
+      }
+
+      p_58738_.setInLoveTime(Math.max(0, p_58738_.getInLoveTime() - p_58737_));
+   }
+
+   private boolean hasSavedFlowerPos() {
+      return this.savedFlowerPos != null;
+   }
+
+   private static void tickOccupants(Level p_155150_, BlockPos p_155151_, BlockState p_155152_, List<BeehiveBlockEntity.BeeData> p_155153_, @Nullable BlockPos p_155154_) {
+      boolean flag = false;
+
+      BeehiveBlockEntity.BeeData beehiveblockentity$beedata;
+      for(Iterator<BeehiveBlockEntity.BeeData> iterator = p_155153_.iterator(); iterator.hasNext(); ++beehiveblockentity$beedata.ticksInHive) {
+         beehiveblockentity$beedata = iterator.next();
+         if (beehiveblockentity$beedata.ticksInHive > beehiveblockentity$beedata.minOccupationTicks) {
+            BeehiveBlockEntity.BeeReleaseStatus beehiveblockentity$beereleasestatus = beehiveblockentity$beedata.entityData.getBoolean("HasNectar") ? BeehiveBlockEntity.BeeReleaseStatus.HONEY_DELIVERED : BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED;
+            if (releaseOccupant(p_155150_, p_155151_, p_155152_, beehiveblockentity$beedata, (List<Entity>)null, beehiveblockentity$beereleasestatus, p_155154_)) {
+               flag = true;
+               iterator.remove();
+               // CraftBukkit start
+            } else {
+               beehiveblockentity$beedata.ticksInHive = beehiveblockentity$beedata.minOccupationTicks / 2; // Not strictly Vanilla behaviour in cases where bees cannot spawn but still reasonable
+               // CraftBukkit end
+            }
+         }
+      }
+
+      if (flag) {
+         setChanged(p_155150_, p_155151_, p_155152_);
+      }
+
+   }
+
+   public static void serverTick(Level p_155145_, BlockPos p_155146_, BlockState p_155147_, BeehiveBlockEntity p_155148_) {
+      tickOccupants(p_155145_, p_155146_, p_155147_, p_155148_.stored, p_155148_.savedFlowerPos);
+      if (!p_155148_.stored.isEmpty() && p_155145_.getRandom().nextDouble() < 0.005D) {
+         double d0 = (double)p_155146_.getX() + 0.5D;
+         double d1 = (double)p_155146_.getY();
+         double d2 = (double)p_155146_.getZ() + 0.5D;
+         p_155145_.playSound((Player)null, d0, d1, d2, SoundEvents.BEEHIVE_WORK, SoundSource.BLOCKS, 1.0F, 1.0F);
+      }
+
+      DebugPackets.sendHiveInfo(p_155145_, p_155146_, p_155147_, p_155148_);
+   }
+
+   public void load(CompoundTag p_155156_) {
+      super.load(p_155156_);
+      this.stored.clear();
+      ListTag listtag = p_155156_.getList("Bees", 10);
+
+      for(int i = 0; i < listtag.size(); ++i) {
+         CompoundTag compoundtag = listtag.getCompound(i);
+         BeehiveBlockEntity.BeeData beehiveblockentity$beedata = new BeehiveBlockEntity.BeeData(compoundtag.getCompound("EntityData").copy(), compoundtag.getInt("TicksInHive"), compoundtag.getInt("MinOccupationTicks"));
+         this.stored.add(beehiveblockentity$beedata);
+      }
+
+      this.savedFlowerPos = null;
+      if (p_155156_.contains("FlowerPos")) {
+         this.savedFlowerPos = NbtUtils.readBlockPos(p_155156_.getCompound("FlowerPos"));
+      }
+
+      // CraftBukkit start
+      if (p_155156_.contains("Bukkit.MaxEntities")) {
+         this.maxBees = p_155156_.getInt("Bukkit.MaxEntities");
+      }
+      // CraftBukkit end
+   }
+
+   protected void saveAdditional(CompoundTag p_187467_) {
+      super.saveAdditional(p_187467_);
+      p_187467_.put("Bees", this.writeBees());
+      if (this.hasSavedFlowerPos()) {
+         p_187467_.put("FlowerPos", NbtUtils.writeBlockPos(this.savedFlowerPos));
+      }
+      p_187467_.putInt("Bukkit.MaxEntities", this.maxBees); // CraftBukkit
+   }
+
+   public ListTag writeBees() {
+      ListTag listtag = new ListTag();
+
+      for(BeehiveBlockEntity.BeeData beehiveblockentity$beedata : this.stored) {
+         CompoundTag compoundtag = beehiveblockentity$beedata.entityData.copy();
+         compoundtag.remove("UUID");
+         CompoundTag compoundtag1 = new CompoundTag();
+         compoundtag1.put("EntityData", compoundtag);
+         compoundtag1.putInt("TicksInHive", beehiveblockentity$beedata.ticksInHive);
+         compoundtag1.putInt("MinOccupationTicks", beehiveblockentity$beedata.minOccupationTicks);
+         listtag.add(compoundtag1);
+      }
+
+      return listtag;
+   }
+
+   static class BeeData {
+      final CompoundTag entityData;
+      int ticksInHive;
+      final int minOccupationTicks;
+
+      BeeData(CompoundTag p_58786_, int p_58787_, int p_58788_) {
+         BeehiveBlockEntity.removeIgnoredBeeTags(p_58786_);
+         this.entityData = p_58786_;
+         this.ticksInHive = p_58787_;
+         this.minOccupationTicks = p_58788_;
+      }
+   }
+
+   public static enum BeeReleaseStatus {
+      HONEY_DELIVERED,
+      BEE_RELEASED,
+      EMERGENCY;
+   }
+
+   public List<Entity> releaseBees(BlockState pState, BeehiveBlockEntity.BeeReleaseStatus pReleaseStatus, boolean force) {
+      List<Entity> list = Lists.newArrayList();
+      this.stored.removeIf((p_58766_) -> {
+         return releaseBee(this.level, this.worldPosition, pState, p_58766_, list, pReleaseStatus, this.savedFlowerPos, force);
+         // CraftBukkit end
+      });
+      if (!list.isEmpty()) {
+         super.setChanged();
+      }
+
+      return list;
+   }
 }
