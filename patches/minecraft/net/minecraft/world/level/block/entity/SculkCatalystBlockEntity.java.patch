--- a/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/SculkCatalystBlockEntity.java
@@ -1,7 +_,6 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.annotations.VisibleForTesting;
-import net.minecraft.Optionull;
 import net.minecraft.advancements.CriteriaTriggers;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -15,7 +_,9 @@
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.SculkCatalystBlock;
 import net.minecraft.world.level.block.SculkSpreader;
@@ -29,14 +_,15 @@
 public class SculkCatalystBlockEntity extends BlockEntity implements GameEventListener.Provider<SculkCatalystBlockEntity.CatalystListener> {
     private final SculkCatalystBlockEntity.CatalystListener catalystListener;
 
-    public SculkCatalystBlockEntity(BlockPos p_222774_, BlockState p_222775_) {
-        super(BlockEntityType.SCULK_CATALYST, p_222774_, p_222775_);
-        this.catalystListener = new SculkCatalystBlockEntity.CatalystListener(p_222775_, new BlockPositionSource(p_222774_));
-    }
+   public SculkCatalystBlockEntity(BlockPos p_222774_, BlockState p_222775_) {
+      super(BlockEntityType.SCULK_CATALYST, p_222774_, p_222775_);
+      this.catalystListener = new SculkCatalystBlockEntity.CatalystListener(p_222775_, new BlockPositionSource(p_222774_));
+      catalystListener.level = level; // CraftBukkit
+   }
 
-    public static void serverTick(Level p_222780_, BlockPos p_222781_, BlockState p_222782_, SculkCatalystBlockEntity p_222783_) {
-        p_222783_.catalystListener.getSculkSpreader().updateCursors(p_222780_, p_222781_, p_222780_.getRandom(), true);
-    }
+   public static void serverTick(Level p_222780_, BlockPos p_222781_, BlockState p_222782_, SculkCatalystBlockEntity p_222783_) {
+      p_222783_.catalystListener.getSculkSpreader().updateCursors(p_222780_, p_222781_, p_222780_.getRandom(), true);
+   }
 
     @Override
     protected void loadAdditional(CompoundTag p_334885_, HolderLookup.Provider p_332157_) {
@@ -59,12 +_,14 @@
         final SculkSpreader sculkSpreader;
         private final BlockState blockState;
         private final PositionSource positionSource;
+      private Level level; // CraftBukkit
 
-        public CatalystListener(BlockState p_283224_, PositionSource p_283095_) {
-            this.blockState = p_283224_;
-            this.positionSource = p_283095_;
-            this.sculkSpreader = SculkSpreader.createLevelSpreader();
-        }
+      public CatalystListener(BlockState p_283224_, PositionSource p_283095_) {
+         this.blockState = p_283224_;
+         this.positionSource = p_283095_;
+         this.sculkSpreader = SculkSpreader.createLevelSpreader();
+         this.sculkSpreader.level = level; // CraftBukkit
+      }
 
         @Override
         public PositionSource getListenerSource() {
@@ -85,8 +_,7 @@
         public boolean handleGameEvent(ServerLevel p_283470_, Holder<GameEvent> p_332335_, GameEvent.Context p_283014_, Vec3 p_282350_) {
             if (p_332335_.is(GameEvent.ENTITY_DIE) && p_283014_.sourceEntity() instanceof LivingEntity livingentity) {
                 if (!livingentity.wasExperienceConsumed()) {
-                    DamageSource damagesource = livingentity.getLastDamageSource();
-                    int i = livingentity.getExperienceReward(p_283470_, Optionull.map(damagesource, DamageSource::getEntity));
+                    int i = livingentity.getExperienceReward();
                     if (livingentity.shouldDropExperience() && i > 0) {
                         this.sculkSpreader.addCursors(BlockPos.containing(p_282350_.relative(Direction.UP, 0.5)), i);
                         this.tryAwardItSpreadsAdvancement(p_283470_, livingentity);
@@ -109,7 +_,7 @@
             return this.sculkSpreader;
         }
 
-        private void bloom(ServerLevel p_281501_, BlockPos p_281448_, BlockState p_281966_, RandomSource p_283606_) {
+        public void bloom(ServerLevel p_281501_, BlockPos p_281448_, BlockState p_281966_, RandomSource p_283606_) {
             p_281501_.setBlock(p_281448_, p_281966_.setValue(SculkCatalystBlock.PULSE, Boolean.valueOf(true)), 3);
             p_281501_.scheduleTick(p_281448_, p_281966_.getBlock(), 8);
             p_281501_.sendParticles(
