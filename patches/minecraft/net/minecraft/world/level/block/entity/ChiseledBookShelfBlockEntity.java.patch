--- a/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChiseledBookShelfBlockEntity.java
@@ -19,13 +_,19 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.gameevent.GameEvent;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 import org.slf4j.Logger;
 
 public class ChiseledBookShelfBlockEntity extends BlockEntity implements Container {
-    public static final int MAX_BOOKS_IN_STORAGE = 6;
-    private static final Logger LOGGER = LogUtils.getLogger();
-    private final NonNullList<ItemStack> items = NonNullList.withSize(6, ItemStack.EMPTY);
-    private int lastInteractedSlot = -1;
+   public static final int MAX_BOOKS_IN_STORAGE = 6;
+   private static final Logger LOGGER = LogUtils.getLogger();
+   private final NonNullList<ItemStack> items = NonNullList.withSize(6, ItemStack.EMPTY);
+   public int lastInteractedSlot = -1;
+   // CraftBukkit start - add fields and methods
+   public List<HumanEntity> transaction = new java.util.ArrayList<>();
+   private int maxStack = 1;
 
     public ChiseledBookShelfBlockEntity(BlockPos p_249541_, BlockState p_251752_) {
         super(BlockEntityType.CHISELED_BOOKSHELF, p_249541_, p_251752_);
@@ -138,6 +_,38 @@
         return p_255922_.is(ItemTags.BOOKSHELF_BOOKS) && this.getItem(p_256567_).isEmpty() && p_255922_.getCount() == this.getMaxStackSize();
     }
 
+   @Override
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   @Override
+   public void onOpen(CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   @Override
+   public void onClose(CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   @Override
+   public List<HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+
+   @Override
+   public Location getLocation() {
+      if (level == null) return null;
+      return new org.bukkit.Location(level.getWorld(), worldPosition.getX(), worldPosition.getY(), worldPosition.getZ());
+   }
+   // CraftBukkit end
+
     public int getLastInteractedSlot() {
         return this.lastInteractedSlot;
     }
@@ -157,5 +_,29 @@
     @Override
     public void removeComponentsFromTag(CompoundTag p_329882_) {
         p_329882_.remove("Items");
+    }
+
+    private net.minecraftforge.common.util.LazyOptional<?> itemHandler = net.minecraftforge.common.util.LazyOptional.of(this::createUnSidedHandler);
+    protected net.minecraftforge.items.IItemHandler createUnSidedHandler() {
+        return new net.minecraftforge.items.wrapper.InvWrapper(this);
+    }
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side) {
+        if (cap == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && !this.remove)
+            return itemHandler.cast();
+        return super.getCapability(cap, side);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        super.invalidateCaps();
+        itemHandler.invalidate();
+    }
+
+    @Override
+    public void reviveCaps() {
+        super.reviveCaps();
+        itemHandler = net.minecraftforge.common.util.LazyOptional.of(this::createUnSidedHandler);
     }
 }
