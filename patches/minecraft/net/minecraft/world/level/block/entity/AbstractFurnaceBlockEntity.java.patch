--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -2,10 +_,13 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
@@ -23,6 +_,7 @@
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
+import net.minecraft.world.Container;
 import net.minecraft.world.ContainerHelper;
 import net.minecraft.world.WorldlyContainer;
 import net.minecraft.world.entity.ExperienceOrb;
@@ -45,6 +_,18 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.block.BlockExpEvent;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
     protected static final int SLOT_INPUT = 0;
@@ -60,11 +_,12 @@
     public static final int NUM_DATA_VALUES = 4;
     public static final int BURN_TIME_STANDARD = 200;
     public static final int BURN_COOL_SPEED = 2;
+    private final RecipeType<? extends AbstractCookingRecipe> recipeType;
     protected NonNullList<ItemStack> items = NonNullList.withSize(3, ItemStack.EMPTY);
-    public int litTime;
-    int litDuration;
-    public int cookingProgress;
-    public int cookingTotalTime;
+   	public int litTime;
+   	int litDuration;
+   	public int cookingProgress;
+   	public int cookingTotalTime;
     @Nullable
     private static volatile Map<Item, Integer> fuelCache;
     protected final ContainerData dataAccess = new ContainerData() {
@@ -108,18 +_,23 @@
     };
     private final Object2IntOpenHashMap<ResourceLocation> recipesUsed = new Object2IntOpenHashMap<>();
     private final RecipeManager.CachedCheck<SingleRecipeInput, ? extends AbstractCookingRecipe> quickCheck;
+    protected static BlockPos worldPosition$mohist;
 
     protected AbstractFurnaceBlockEntity(
         BlockEntityType<?> p_154991_, BlockPos p_154992_, BlockState p_154993_, RecipeType<? extends AbstractCookingRecipe> p_154994_
     ) {
         super(p_154991_, p_154992_, p_154993_);
         this.quickCheck = RecipeManager.createCheck((RecipeType)p_154994_);
+        this.recipeType = p_154994_;
+      	worldPosition$mohist = p_154992_;
     }
 
     public static void invalidateCache() {
         fuelCache = null;
     }
 
+    /**@deprecated Forge: get burn times by calling ForgeHooks#getBurnTime(ItemStack)*/
+    @Deprecated
     public static Map<Item, Integer> getFuel() {
         Map<Item, Integer> map = fuelCache;
         if (map != null) {
@@ -226,9 +_,9 @@
         super.loadAdditional(p_335441_, p_330623_);
         this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
         ContainerHelper.loadAllItems(p_335441_, this.items, p_330623_);
-        this.litTime = p_335441_.getShort("BurnTime");
-        this.cookingProgress = p_335441_.getShort("CookTime");
-        this.cookingTotalTime = p_335441_.getShort("CookTimeTotal");
+        this.litTime = p_335441_.getInt("BurnTime");
+        this.cookingProgress = p_335441_.getInt("CookTime");
+        this.cookingTotalTime = p_335441_.getInt("CookTimeTotal");
         this.litDuration = this.getBurnDuration(this.items.get(1));
         CompoundTag compoundtag = p_335441_.getCompound("RecipesUsed");
 
@@ -240,9 +_,9 @@
     @Override
     protected void saveAdditional(CompoundTag p_187452_, HolderLookup.Provider p_330192_) {
         super.saveAdditional(p_187452_, p_330192_);
-        p_187452_.putShort("BurnTime", (short)this.litTime);
-        p_187452_.putShort("CookTime", (short)this.cookingProgress);
-        p_187452_.putShort("CookTimeTotal", (short)this.cookingTotalTime);
+        p_187452_.putInt("BurnTime", this.litTime);
+        p_187452_.putInt("CookTime", this.cookingProgress);
+        p_187452_.putInt("CookTimeTotal", this.cookingTotalTime);
         ContainerHelper.saveAllItems(p_187452_, this.items, p_330192_);
         CompoundTag compoundtag = new CompoundTag();
         this.recipesUsed.forEach((p_187449_, p_187450_) -> compoundtag.putInt(p_187449_.toString(), p_187450_));
@@ -269,30 +_,55 @@
             }
 
             int i = p_155017_.getMaxStackSize();
-            if (!p_155017_.isLit() && canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
-                p_155017_.litTime = p_155017_.getBurnDuration(itemstack);
-                p_155017_.litDuration = p_155017_.litTime;
-                if (p_155017_.isLit()) {
-                    flag1 = true;
-                    if (flag3) {
-                        Item item = itemstack.getItem();
-                        itemstack.shrink(1);
-                        if (itemstack.isEmpty()) {
-                            Item item1 = item.getCraftingRemainingItem();
-                            p_155017_.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
-                        }
-                    }
-                }
-            }
-
-            if (p_155017_.isLit() && canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
-                p_155017_.cookingProgress++;
-                if (p_155017_.cookingProgress == p_155017_.cookingTotalTime) {
-                    p_155017_.cookingProgress = 0;
-                    p_155017_.cookingTotalTime = getTotalCookTime(p_155014_, p_155017_);
-                    if (burn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
-                        p_155017_.setRecipeUsed(recipeholder);
-                    }
+            if (!p_155017_.isLit() && p_155017_.canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+            // CraftBukkit start
+            CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+            FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(p_155014_, p_155015_), fuel, p_155017_.getBurnDuration(itemstack));
+            p_155014_.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+            if (furnaceBurnEvent.isCancelled()) {
+               return;
+            }
+
+            p_155017_.litTime = furnaceBurnEvent.getBurnTime();
+            p_155017_.litDuration = p_155017_.litTime;
+            if (p_155017_.isLit() && furnaceBurnEvent.isBurning()) {
+               // CraftBukkit end
+               flag1 = true;
+               if (itemstack.hasCraftingRemainingItem())
+                  p_155017_.items.set(1, itemstack.getCraftingRemainingItem());
+               else
+               if (flag3) {
+                  Item item = itemstack.getItem();
+                  itemstack.shrink(1);
+                  if (itemstack.isEmpty()) {
+                     p_155017_.items.set(1, itemstack.getCraftingRemainingItem());
+                  }
+               }
+            }
+         }
+
+         if (p_155017_.isLit() && p_155017_.canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+            // CraftBukkit start
+            if (recipeholder != null && p_155017_.cookingProgress == 0) {
+               CraftItemStack source = CraftItemStack.asCraftMirror(p_155017_.items.get(0));
+               CookingRecipe<?> recipeCB = (CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+               FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(p_155014_, p_155015_), source, recipeCB);
+               p_155014_.getCraftServer().getPluginManager().callEvent(event);
+               p_155017_.cookingTotalTime = event.getTotalCookTime();
+            }
+            // CraftBukkit end
+            ++p_155017_.cookingProgress;
+            if (p_155017_.cookingProgress == p_155017_.cookingTotalTime) {
+               p_155017_.cookingProgress = 0;
+               p_155017_.cookingTotalTime = getTotalCookTime(p_155014_, p_155017_);
+               burn$world.set(p_155017_.level);
+               burn$blockposition.set(p_155017_.worldPosition);
+               if (p_155017_.burn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) { // CraftBukkit
+                  p_155017_.setRecipeUsed(recipeholder);
+               }
 
                     flag1 = true;
                 }
@@ -314,9 +_,9 @@
         }
     }
 
-    private static boolean canBurn(RegistryAccess p_266924_, @Nullable RecipeHolder<?> p_299207_, NonNullList<ItemStack> p_155007_, int p_155008_) {
+    private boolean canBurn(RegistryAccess p_266924_, @Nullable RecipeHolder<?> p_299207_, NonNullList<ItemStack> p_155007_, int p_155008_) {
         if (!p_155007_.get(0).isEmpty() && p_299207_ != null) {
-            ItemStack itemstack = p_299207_.value().getResultItem(p_266924_);
+            ItemStack itemstack = ((RecipeHolder<net.minecraft.world.item.crafting.Recipe<SingleRecipeInput>>)p_299207_).value().assemble(new SingleRecipeInput(this.getItem(0)), p_266924_);
             if (itemstack.isEmpty()) {
                 return false;
             } else {
@@ -326,9 +_,9 @@
                 } else if (!ItemStack.isSameItemSameComponents(itemstack1, itemstack)) {
                     return false;
                 } else {
-                    return itemstack1.getCount() < p_155008_ && itemstack1.getCount() < itemstack1.getMaxStackSize()
+                    return (itemstack1.getCount() + itemstack.getCount() <= p_155008_ && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize()) // Forge fix: make furnace respect stack sizes in furnace recipes
                         ? true
-                        : itemstack1.getCount() < itemstack.getMaxStackSize();
+                        : itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize(); // Forge fix: make furnace respect stack sizes in furnace recipes
                 }
             }
         } else {
@@ -336,16 +_,41 @@
         }
     }
 
-    private static boolean burn(RegistryAccess p_266740_, @Nullable RecipeHolder<?> p_299450_, NonNullList<ItemStack> p_267073_, int p_267157_) {
+   	// Mohist start - Fix compatibility with ImprovableSkills mod
+   	public static AtomicReference<Level> burn$world  = new AtomicReference<>(null);
+   	public static AtomicReference<BlockPos> burn$blockposition  = new AtomicReference<>(null);
+   	// Mohist end
+
+   	private boolean burn(RegistryAccess p_266740_, @Nullable RecipeHolder<?> p_299450_, NonNullList<ItemStack> p_267073_, int p_267157_) {
         if (p_299450_ != null && canBurn(p_266740_, p_299450_, p_267073_, p_267157_)) {
             ItemStack itemstack = p_267073_.get(0);
-            ItemStack itemstack1 = p_299450_.value().getResultItem(p_266740_);
+            ItemStack itemstack1 = ((RecipeHolder<net.minecraft.world.item.crafting.Recipe<SingleRecipeInput>>)p_299450_).value().assemble(new SingleRecipeInput(this.getItem(0)), p_266740_);
             ItemStack itemstack2 = p_267073_.get(2);
+
+         // CraftBukkit start - fire FurnaceSmeltEvent
+         CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+         org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+         if (burn$world.get() != null && burn$blockposition.get() != null) {
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(burn$world.getAndSet(null), burn$blockposition.getAndSet(null)), source, result);
+            Bukkit.getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+               return false;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+         }
+         itemstack1 = CraftItemStack.asNMSCopy(result);
+
+         if (!itemstack1.isEmpty()) {
             if (itemstack2.isEmpty()) {
-                p_267073_.set(2, itemstack1.copy());
-            } else if (ItemStack.isSameItemSameComponents(itemstack2, itemstack1)) {
-                itemstack2.grow(1);
+               p_267073_.set(2, itemstack1.copy());
+            } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+               itemstack2.grow(itemstack1.getCount());
+            } else {
+               return false;
             }
+         }
 
             if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !p_267073_.get(1).isEmpty() && p_267073_.get(1).is(Items.BUCKET)) {
                 p_267073_.set(1, new ItemStack(Items.WATER_BUCKET));
@@ -363,7 +_,7 @@
             return 0;
         } else {
             Item item = p_58343_.getItem();
-            return getFuel().getOrDefault(item, 0);
+            return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58343_, this.recipeType);
         }
     }
 
@@ -373,7 +_,7 @@
     }
 
     public static boolean isFuel(ItemStack p_58400_) {
-        return getFuel().containsKey(p_58400_.getItem());
+        return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58400_, null) > 0;
     }
 
     @Override
@@ -431,7 +_,7 @@
             return true;
         } else {
             ItemStack itemstack = this.items.get(1);
-            return isFuel(p_58390_) || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
+            return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58390_, this.recipeType) > 0 || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
         }
     }
 
@@ -453,18 +_,24 @@
     public void awardUsedRecipes(Player p_58396_, List<ItemStack> p_282202_) {
     }
 
-    public void awardUsedRecipesAndPopExperience(ServerPlayer p_155004_) {
-        List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(p_155004_.serverLevel(), p_155004_.position());
-        p_155004_.awardRecipes(list);
-
-        for (RecipeHolder<?> recipeholder : list) {
-            if (recipeholder != null) {
-                p_155004_.triggerRecipeCrafted(recipeholder, this.items);
-            }
-        }
-
-        this.recipesUsed.clear();
-    }
+   // Mohist start - Fix Minecraft Comes Alive mod mixin (MixinAbstractFurnaceBlockEntity)
+   public static AtomicReference<ItemStack> stackAtomicReference = new AtomicReference<>(null);
+   public static AtomicReference<ServerPlayer> createExperience$entityhuman = new AtomicReference<>(null);
+   public static AtomicInteger amount = new AtomicInteger(0);
+   public void awardUsedRecipesAndPopExperience(ServerPlayer p_155004_) {
+      createExperience$entityhuman.set(p_155004_);
+      List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(p_155004_.serverLevel(), p_155004_.position());
+      p_155004_.awardRecipes(list);
+
+      for(RecipeHolder<?> recipeholder : list) {
+         if (recipeholder != null) {
+            p_155004_.triggerRecipeCrafted(recipeholder, this.items);
+         }
+      }
+
+      this.recipesUsed.clear();
+   }
+   // Mohist end
 
     public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel p_154996_, Vec3 p_154997_) {
         List<RecipeHolder<?>> list = Lists.newArrayList();
@@ -486,6 +_,17 @@
             i++;
         }
 
+      // CraftBukkit start - fire FurnaceExtractEvent / BlockExpEvent
+      BlockExpEvent event;
+      if (amount.getAndSet(0) != 0) {
+         event = new FurnaceExtractEvent((org.bukkit.entity.Player) createExperience$entityhuman.getAndSet(null).getBukkitEntity(), CraftBlock.at(p_154999_, worldPosition$mohist), CraftItemType.minecraftToBukkit(stackAtomicReference.getAndSet(null).getItem()), amount.getAndSet(0), i);
+      } else {
+         event = new BlockExpEvent(CraftBlock.at(p_154999_, worldPosition$mohist), i);
+      }
+      p_154999_.getCraftServer().getPluginManager().callEvent(event);
+      i = event.getExpToDrop();
+      // CraftBukkit end
+
         ExperienceOrb.award(p_154999_, p_155000_, i);
     }
 
@@ -495,4 +_,67 @@
             p_58342_.accountStack(itemstack);
         }
     }
+
+    net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+        net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+        if (capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && facing != null && !this.remove) {
+            return switch (facing) {
+                case UP -> handlers[0].cast();
+                case DOWN -> handlers[1].cast();
+                default -> handlers[2].cast();
+            };
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        super.invalidateCaps();
+        for (int x = 0; x < handlers.length; x++) {
+            handlers[x].invalidate();
+        }
+    }
+
+    @Override
+    public void reviveCaps() {
+        super.reviveCaps();
+        this.handlers = net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+    }
+
+   // CraftBukkit start - add fields and methods
+   private int maxStack = MAX_STACK;
+   public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+
+   public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+      return this.recipesUsed; // PAIL private -> public
+   }
+   // CraftBukkit end
 }
