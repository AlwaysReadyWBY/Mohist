--- a/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -6,6 +_,8 @@
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
@@ -44,6 +_,17 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.block.BlockExpEvent;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceExtractEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
    protected static final int SLOT_INPUT = 0;
@@ -59,6 +_,7 @@
    public static final int NUM_DATA_VALUES = 4;
    public static final int BURN_TIME_STANDARD = 200;
    public static final int BURN_COOL_SPEED = 2;
+   private final RecipeType<? extends AbstractCookingRecipe> recipeType;
    protected NonNullList<ItemStack> items = NonNullList.withSize(3, ItemStack.EMPTY);
    public int litTime;
    int litDuration;
@@ -103,12 +_,17 @@
    };
    private final Object2IntOpenHashMap<ResourceLocation> recipesUsed = new Object2IntOpenHashMap<>();
    private final RecipeManager.CachedCheck<Container, ? extends AbstractCookingRecipe> quickCheck;
+   protected static BlockPos worldPosition$mohist;
 
    protected AbstractFurnaceBlockEntity(BlockEntityType<?> p_154991_, BlockPos p_154992_, BlockState p_154993_, RecipeType<? extends AbstractCookingRecipe> p_154994_) {
       super(p_154991_, p_154992_, p_154993_);
       this.quickCheck = RecipeManager.createCheck((RecipeType)p_154994_);
+      this.recipeType = p_154994_;
+      worldPosition$mohist = p_154992_;
    }
 
+   /**@deprecated Forge: get burn times by calling ForgeHooks#getBurnTime(ItemStack)*/
+   @Deprecated
    public static Map<Item, Integer> getFuel() {
       Map<Item, Integer> map = Maps.newLinkedHashMap();
       add(map, Items.LAVA_BUCKET, 20000);
@@ -205,9 +_,9 @@
       super.load(p_155025_);
       this.items = NonNullList.withSize(this.getContainerSize(), ItemStack.EMPTY);
       ContainerHelper.loadAllItems(p_155025_, this.items);
-      this.litTime = p_155025_.getShort("BurnTime");
-      this.cookingProgress = p_155025_.getShort("CookTime");
-      this.cookingTotalTime = p_155025_.getShort("CookTimeTotal");
+      this.litTime = p_155025_.getInt("BurnTime");
+      this.cookingProgress = p_155025_.getInt("CookTime");
+      this.cookingTotalTime = p_155025_.getInt("CookTimeTotal");
       this.litDuration = this.getBurnDuration(this.items.get(1));
       CompoundTag compoundtag = p_155025_.getCompound("RecipesUsed");
 
@@ -219,9 +_,9 @@
 
    protected void saveAdditional(CompoundTag p_187452_) {
       super.saveAdditional(p_187452_);
-      p_187452_.putShort("BurnTime", (short)this.litTime);
-      p_187452_.putShort("CookTime", (short)this.cookingProgress);
-      p_187452_.putShort("CookTimeTotal", (short)this.cookingTotalTime);
+      p_187452_.putInt("BurnTime", this.litTime);
+      p_187452_.putInt("CookTime", this.cookingProgress);
+      p_187452_.putInt("CookTimeTotal", this.cookingTotalTime);
       ContainerHelper.saveAllItems(p_187452_, this.items);
       CompoundTag compoundtag = new CompoundTag();
       this.recipesUsed.forEach((p_187449_, p_187450_) -> {
@@ -249,28 +_,53 @@
          }
 
          int i = p_155017_.getMaxStackSize();
-         if (!p_155017_.isLit() && canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
-            p_155017_.litTime = p_155017_.getBurnDuration(itemstack);
+         if (!p_155017_.isLit() && p_155017_.canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+            // CraftBukkit start
+            CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+            FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(CraftBlock.at(p_155014_, p_155015_), fuel, p_155017_.getBurnDuration(itemstack));
+            p_155014_.getCraftServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+            if (furnaceBurnEvent.isCancelled()) {
+               return;
+            }
+
+            p_155017_.litTime = furnaceBurnEvent.getBurnTime();
             p_155017_.litDuration = p_155017_.litTime;
-            if (p_155017_.isLit()) {
+            if (p_155017_.isLit() && furnaceBurnEvent.isBurning()) {
+               // CraftBukkit end
                flag1 = true;
+               if (itemstack.hasCraftingRemainingItem())
+                  p_155017_.items.set(1, itemstack.getCraftingRemainingItem());
+               else
                if (flag3) {
                   Item item = itemstack.getItem();
                   itemstack.shrink(1);
                   if (itemstack.isEmpty()) {
-                     Item item1 = item.getCraftingRemainingItem();
-                     p_155017_.items.set(1, item1 == null ? ItemStack.EMPTY : new ItemStack(item1));
+                     p_155017_.items.set(1, itemstack.getCraftingRemainingItem());
                   }
                }
             }
          }
 
-         if (p_155017_.isLit() && canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+         if (p_155017_.isLit() && p_155017_.canBurn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+            // CraftBukkit start
+            if (recipeholder != null && p_155017_.cookingProgress == 0) {
+               CraftItemStack source = CraftItemStack.asCraftMirror(p_155017_.items.get(0));
+               CookingRecipe<?> recipeCB = (CookingRecipe<?>) recipeholder.toBukkitRecipe();
+
+               FurnaceStartSmeltEvent event = new FurnaceStartSmeltEvent(CraftBlock.at(p_155014_, p_155015_), source, recipeCB);
+               p_155014_.getCraftServer().getPluginManager().callEvent(event);
+               p_155017_.cookingTotalTime = event.getTotalCookTime();
+            }
+            // CraftBukkit end
             ++p_155017_.cookingProgress;
             if (p_155017_.cookingProgress == p_155017_.cookingTotalTime) {
                p_155017_.cookingProgress = 0;
                p_155017_.cookingTotalTime = getTotalCookTime(p_155014_, p_155017_);
-               if (burn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) {
+               burn$world.set(p_155017_.level);
+               burn$blockposition.set(p_155017_.worldPosition);
+               if (p_155017_.burn(p_155014_.registryAccess(), recipeholder, p_155017_.items, i)) { // CraftBukkit
                   p_155017_.setRecipeUsed(recipeholder);
                }
 
@@ -295,9 +_,9 @@
 
    }
 
-   private static boolean canBurn(RegistryAccess p_266924_, @Nullable RecipeHolder<?> p_299207_, NonNullList<ItemStack> p_155007_, int p_155008_) {
+   private boolean canBurn(RegistryAccess p_266924_, @Nullable RecipeHolder<?> p_299207_, NonNullList<ItemStack> p_155007_, int p_155008_) {
       if (!p_155007_.get(0).isEmpty() && p_299207_ != null) {
-         ItemStack itemstack = p_299207_.value().getResultItem(p_266924_);
+         ItemStack itemstack = ((RecipeHolder<net.minecraft.world.item.crafting.Recipe<WorldlyContainer>>)p_299207_).value().assemble(this, p_266924_);
          if (itemstack.isEmpty()) {
             return false;
          } else {
@@ -306,10 +_,10 @@
                return true;
             } else if (!ItemStack.isSameItem(itemstack1, itemstack)) {
                return false;
-            } else if (itemstack1.getCount() < p_155008_ && itemstack1.getCount() < itemstack1.getMaxStackSize()) {
+            } else if (itemstack1.getCount() + itemstack.getCount() <= p_155008_ && itemstack1.getCount() + itemstack.getCount() <= itemstack1.getMaxStackSize()) { // Forge fix: make furnace respect stack sizes in furnace recipes
                return true;
             } else {
-               return itemstack1.getCount() < itemstack.getMaxStackSize();
+               return itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize(); // Forge fix: make furnace respect stack sizes in furnace recipes
             }
          }
       } else {
@@ -317,15 +_,40 @@
       }
    }
 
-   private static boolean burn(RegistryAccess p_266740_, @Nullable RecipeHolder<?> p_299450_, NonNullList<ItemStack> p_267073_, int p_267157_) {
-      if (p_299450_ != null && canBurn(p_266740_, p_299450_, p_267073_, p_267157_)) {
+   // Mohist start - Fix compatibility with ImprovableSkills mod
+   public static AtomicReference<Level> burn$world  = new AtomicReference<>(null);
+   public static AtomicReference<BlockPos> burn$blockposition  = new AtomicReference<>(null);
+   // Mohist end
+
+   private boolean burn(RegistryAccess p_266740_, @Nullable RecipeHolder<?> p_299450_, NonNullList<ItemStack> p_267073_, int p_267157_) {
+      if (p_299450_ != null && this.canBurn(p_266740_, p_299450_, p_267073_, p_267157_)) {
          ItemStack itemstack = p_267073_.get(0);
-         ItemStack itemstack1 = p_299450_.value().getResultItem(p_266740_);
+         ItemStack itemstack1 = ((RecipeHolder<net.minecraft.world.item.crafting.Recipe<WorldlyContainer>>)p_299450_).value().assemble(this, p_266740_);
          ItemStack itemstack2 = p_267073_.get(2);
-         if (itemstack2.isEmpty()) {
-            p_267073_.set(2, itemstack1.copy());
-         } else if (itemstack2.is(itemstack1.getItem())) {
-            itemstack2.grow(1);
+
+         // CraftBukkit start - fire FurnaceSmeltEvent
+         CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+         org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+         if (burn$world.get() != null && burn$blockposition.get() != null) {
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(CraftBlock.at(burn$world.getAndSet(null), burn$blockposition.getAndSet(null)), source, result);
+            Bukkit.getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+               return false;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+         }
+         itemstack1 = CraftItemStack.asNMSCopy(result);
+
+         if (!itemstack1.isEmpty()) {
+            if (itemstack2.isEmpty()) {
+               p_267073_.set(2, itemstack1.copy());
+            } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+               itemstack2.grow(itemstack1.getCount());
+            } else {
+               return false;
+            }
          }
 
          if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !p_267073_.get(1).isEmpty() && p_267073_.get(1).is(Items.BUCKET)) {
@@ -344,18 +_,19 @@
          return 0;
       } else {
          Item item = p_58343_.getItem();
-         return getFuel().getOrDefault(item, 0);
+         return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58343_, this.recipeType);
       }
    }
 
    private static int getTotalCookTime(Level p_222693_, AbstractFurnaceBlockEntity p_222694_) {
+      if (p_222693_ == null) return 200; // CraftBukkit - SPIGOT-4302
       return p_222694_.quickCheck.getRecipeFor(p_222694_, p_222693_).map((p_296950_) -> {
          return p_296950_.value().getCookingTime();
       }).orElse(200);
    }
 
    public static boolean isFuel(ItemStack p_58400_) {
-      return getFuel().containsKey(p_58400_.getItem());
+      return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58400_, null) > 0;
    }
 
    public int[] getSlotsForFace(Direction p_58363_) {
@@ -431,7 +_,7 @@
          return true;
       } else {
          ItemStack itemstack = this.items.get(1);
-         return isFuel(p_58390_) || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
+         return net.minecraftforge.common.ForgeHooks.getBurnTime(p_58390_, this.recipeType) > 0 || p_58390_.is(Items.BUCKET) && !itemstack.is(Items.BUCKET);
       }
    }
 
@@ -455,7 +_,12 @@
    public void awardUsedRecipes(Player p_58396_, List<ItemStack> p_282202_) {
    }
 
+   // Mohist start - Fix Minecraft Comes Alive mod mixin (MixinAbstractFurnaceBlockEntity)
+   public static AtomicReference<ItemStack> stackAtomicReference = new AtomicReference<>(null);
+   public static AtomicReference<ServerPlayer> createExperience$entityhuman = new AtomicReference<>(null);
+   public static AtomicInteger amount = new AtomicInteger(0);
    public void awardUsedRecipesAndPopExperience(ServerPlayer p_155004_) {
+      createExperience$entityhuman.set(p_155004_);
       List<RecipeHolder<?>> list = this.getRecipesToAwardAndPopExperience(p_155004_.serverLevel(), p_155004_.position());
       p_155004_.awardRecipes(list);
 
@@ -467,6 +_,7 @@
 
       this.recipesUsed.clear();
    }
+   // Mohist end
 
    public List<RecipeHolder<?>> getRecipesToAwardAndPopExperience(ServerLevel p_154996_, Vec3 p_154997_) {
       List<RecipeHolder<?>> list = Lists.newArrayList();
@@ -488,6 +_,17 @@
          ++i;
       }
 
+      // CraftBukkit start - fire FurnaceExtractEvent / BlockExpEvent
+      BlockExpEvent event;
+      if (amount.getAndSet(0) != 0) {
+         event = new FurnaceExtractEvent((org.bukkit.entity.Player) createExperience$entityhuman.getAndSet(null).getBukkitEntity(), CraftBlock.at(p_154999_, worldPosition$mohist), org.bukkit.craftbukkit.v1_20_R3.util.CraftMagicNumbers.getMaterial(stackAtomicReference.getAndSet(null).getItem()), amount.getAndSet(0), i);
+      } else {
+         event = new BlockExpEvent(CraftBlock.at(p_154999_, worldPosition$mohist), i);
+      }
+      p_154999_.getCraftServer().getPluginManager().callEvent(event);
+      i = event.getExpToDrop();
+      // CraftBukkit end
+
       ExperienceOrb.award(p_154999_, p_155000_, i);
    }
 
@@ -497,4 +_,67 @@
       }
 
    }
+
+   net.minecraftforge.common.util.LazyOptional<? extends net.minecraftforge.items.IItemHandler>[] handlers =
+           net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+      if (!this.remove && facing != null && capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER) {
+         if (facing == Direction.UP)
+            return handlers[0].cast();
+         else if (facing == Direction.DOWN)
+            return handlers[1].cast();
+         else
+            return handlers[2].cast();
+      }
+      return super.getCapability(capability, facing);
+   }
+
+   @Override
+   public void invalidateCaps() {
+      super.invalidateCaps();
+      for (int x = 0; x < handlers.length; x++)
+        handlers[x].invalidate();
+   }
+
+   @Override
+   public void reviveCaps() {
+      super.reviveCaps();
+      this.handlers = net.minecraftforge.items.wrapper.SidedInvWrapper.create(this, Direction.UP, Direction.DOWN, Direction.NORTH);
+   }
+
+   // CraftBukkit start - add fields and methods
+   private int maxStack = MAX_STACK;
+   public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+
+   public Object2IntOpenHashMap<ResourceLocation> getRecipesUsed() {
+      return this.recipesUsed; // PAIL private -> public
+   }
+   // CraftBukkit end
 }
