--- a/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.level.block.entity;
 
+import java.util.List;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.HolderLookup;
@@ -23,6 +_,8 @@
 import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.ChestType;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
 public class ChestBlockEntity extends RandomizableContainerBlockEntity implements LidBlockEntity {
     private static final int EVENT_SET_OPEN_COUNT = 1;
@@ -56,6 +_,35 @@
     };
     private final ChestLidController chestLidController = new ChestLidController();
 
+   // CraftBukkit start - add fields and methods
+   public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+   private int maxStack = MAX_STACK;
+
+   public List<ItemStack> getContents() {
+      return this.items;
+   }
+
+   public void onOpen(CraftHumanEntity who) {
+      transaction.add(who);
+   }
+
+   public void onClose(CraftHumanEntity who) {
+      transaction.remove(who);
+   }
+
+   public List<HumanEntity> getViewers() {
+      return transaction;
+   }
+
+   @Override
+   public int getMaxStackSize() {
+      return maxStack;
+   }
+
+   public void setMaxStackSize(int size) {
+      maxStack = size;
+   }
+   // CraftBukkit end
     protected ChestBlockEntity(BlockEntityType<?> p_155327_, BlockPos p_155328_, BlockState p_155329_) {
         super(p_155327_, p_155328_, p_155329_);
     }
@@ -182,5 +_,44 @@
     protected void signalOpenCount(Level p_155333_, BlockPos p_155334_, BlockState p_155335_, int p_155336_, int p_155337_) {
         Block block = p_155335_.getBlock();
         p_155333_.blockEvent(p_155334_, block, 1, p_155337_);
+    }
+
+    private net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandlerModifiable> chestHandler;
+    @Override
+    public void setBlockState(BlockState p_155251_) {
+        super.setBlockState(p_155251_);
+        if (this.chestHandler != null) {
+            var oldHandler = this.chestHandler;
+            this.chestHandler = null;
+            oldHandler.invalidate();
+        }
+    }
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> cap, Direction side) {
+        if (cap == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && !this.remove) {
+            if (this.chestHandler == null)
+               this.chestHandler = net.minecraftforge.common.util.LazyOptional.of(this::createHandler);
+            return this.chestHandler.cast();
+        }
+        return super.getCapability(cap, side);
+    }
+
+    private net.minecraftforge.items.IItemHandlerModifiable createHandler() {
+        BlockState state = this.getBlockState();
+        if (!(state.getBlock() instanceof ChestBlock chestBlock)) {
+            return new net.minecraftforge.items.wrapper.InvWrapper(this);
+        }
+        Container inv = ChestBlock.getContainer(chestBlock, state, getLevel(), getBlockPos(), true);
+        return new net.minecraftforge.items.wrapper.InvWrapper(inv == null ? this : inv);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        super.invalidateCaps();
+        if (chestHandler != null) {
+            chestHandler.invalidate();
+            chestHandler = null;
+        }
     }
 }
