--- a/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.level.block.entity;
 
+import com.mohistmc.mohist.bukkit.inventory.InventoryOwner;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
 import java.util.HashSet;
@@ -25,9 +_,12 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.inventory.InventoryHolder;
 import org.slf4j.Logger;
 
-public abstract class BlockEntity {
+public abstract class BlockEntity extends net.minecraftforge.common.capabilities.CapabilityProvider<BlockEntity> implements net.minecraftforge.common.extensions.IForgeBlockEntity {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final BlockEntityType<?> type;
     @Nullable
@@ -37,10 +_,17 @@
     private BlockState blockState;
     private DataComponentMap components = DataComponentMap.EMPTY;
 
+   // CraftBukkit start - data containers
+   private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+   public CraftPersistentDataContainer persistentDataContainer;
+   // CraftBukkit end
+
     public BlockEntity(BlockEntityType<?> p_155228_, BlockPos p_155229_, BlockState p_155230_) {
+        super(BlockEntity.class);
         this.type = p_155228_;
         this.worldPosition = p_155229_.immutable();
         this.blockState = p_155230_;
+        this.gatherCapabilities();
     }
 
     public static BlockPos getPosFromTag(CompoundTag p_187473_) {
@@ -61,6 +_,7 @@
     }
 
     protected void loadAdditional(CompoundTag p_331149_, HolderLookup.Provider p_333170_) {
+        if (getCapabilities() != null && p_331149_.contains("ForgeCaps")) deserializeCaps(p_331149_.getCompound("ForgeCaps"));
     }
 
     public final void loadWithComponents(CompoundTag p_331756_, HolderLookup.Provider p_335164_) {
@@ -76,6 +_,7 @@
     }
 
     protected void saveAdditional(CompoundTag p_187471_, HolderLookup.Provider p_327783_) {
+        if (getCapabilities() != null) p_187471_.put("ForgeCaps", serializeCaps());
     }
 
     public final CompoundTag saveWithFullMetadata(HolderLookup.Provider p_331193_) {
@@ -205,6 +_,13 @@
 
     public void setRemoved() {
         this.remove = true;
+        this.invalidateCaps();
+        requestModelDataUpdate();
+    }
+
+    @Override
+    public void onChunkUnloaded() {
+        this.invalidateCaps();
     }
 
     public void clearRemoved() {
