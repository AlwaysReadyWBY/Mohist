--- a/net/minecraft/world/level/block/FireBlock.java
+++ b/net/minecraft/world/level/block/FireBlock.java
@@ -1,11 +_,12 @@
 package net.minecraft.world.level.block;
 
 import com.google.common.collect.ImmutableMap;
+import com.mohistmc.mohist.plugins.ban.bans.BanEvents;
 import com.mojang.serialization.MapCodec;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.Map;
-import java.util.Map.Entry;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import net.minecraft.Util;
@@ -29,6 +_,12 @@
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.block.CraftBlockStates;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockBurnEvent;
+import org.bukkit.event.block.BlockFadeEvent;
 
 public class FireBlock extends BaseFireBlock {
     public static final MapCodec<FireBlock> CODEC = simpleCodec(FireBlock::new);
@@ -114,7 +_,24 @@
 
     @Override
     protected BlockState updateShape(BlockState p_53458_, Direction p_53459_, BlockState p_53460_, LevelAccessor p_53461_, BlockPos p_53462_, BlockPos p_53463_) {
-        return this.canSurvive(p_53458_, p_53461_, p_53462_) ? this.getStateWithAge(p_53461_, p_53462_, p_53458_.getValue(AGE)) : Blocks.AIR.defaultBlockState();
+      // CraftBukkit start
+      if (!this.canSurvive(p_53458_, p_53461_, p_53462_)) {
+         // Suppress during worldgen
+         if (!(p_53461_ instanceof Level)) {
+            return Blocks.AIR.defaultBlockState();
+         }
+         CraftBlockState blockState = CraftBlockStates.getBlockState(p_53461_, p_53462_);
+         blockState.setData(Blocks.AIR.defaultBlockState());
+
+         BlockFadeEvent event = new BlockFadeEvent(blockState.getBlock(), blockState);
+         ((Level) p_53461_).getCraftServer().getPluginManager().callEvent(event);
+
+         if (!event.isCancelled()) {
+            return blockState.getHandle();
+         }
+      }
+      return this.getStateWithAge(p_53461_, p_53462_, p_53458_.getValue(AGE));
+      // CraftBukkit end
     }
 
     @Override
@@ -130,13 +_,13 @@
     protected BlockState getStateForPlacement(BlockGetter p_53471_, BlockPos p_53472_) {
         BlockPos blockpos = p_53472_.below();
         BlockState blockstate = p_53471_.getBlockState(blockpos);
-        if (!this.canBurn(blockstate) && !blockstate.isFaceSturdy(p_53471_, blockpos, Direction.UP)) {
+        if (!this.canCatchFire(p_53471_, p_53472_, Direction.UP) && !blockstate.isFaceSturdy(p_53471_, blockpos, Direction.UP)) {
             BlockState blockstate1 = this.defaultBlockState();
 
             for (Direction direction : Direction.values()) {
                 BooleanProperty booleanproperty = PROPERTY_BY_DIRECTION.get(direction);
                 if (booleanproperty != null) {
-                    blockstate1 = blockstate1.setValue(booleanproperty, Boolean.valueOf(this.canBurn(p_53471_.getBlockState(p_53472_.relative(direction)))));
+                    blockstate1 = blockstate1.setValue(booleanproperty, Boolean.valueOf(this.canCatchFire(p_53471_, p_53472_.relative(direction), direction.getOpposite())));
                 }
             }
 
@@ -152,83 +_,97 @@
         return p_53455_.getBlockState(blockpos).isFaceSturdy(p_53455_, blockpos, Direction.UP) || this.isValidFireLocation(p_53455_, p_53456_);
     }
 
-    @Override
-    protected void tick(BlockState p_221160_, ServerLevel p_221161_, BlockPos p_221162_, RandomSource p_221163_) {
-        p_221161_.scheduleTick(p_221162_, this, getFireTickDelay(p_221161_.random));
-        if (p_221161_.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
-            if (!p_221160_.canSurvive(p_221161_, p_221162_)) {
-                p_221161_.removeBlock(p_221162_, false);
-            }
-
-            BlockState blockstate = p_221161_.getBlockState(p_221162_.below());
-            boolean flag = blockstate.is(p_221161_.dimensionType().infiniburn());
-            int i = p_221160_.getValue(AGE);
-            if (!flag && p_221161_.isRaining() && this.isNearRain(p_221161_, p_221162_) && p_221163_.nextFloat() < 0.2F + (float)i * 0.03F) {
-                p_221161_.removeBlock(p_221162_, false);
-            } else {
-                int j = Math.min(15, i + p_221163_.nextInt(3) / 2);
-                if (i != j) {
-                    p_221160_ = p_221160_.setValue(AGE, Integer.valueOf(j));
-                    p_221161_.setBlock(p_221162_, p_221160_, 4);
-                }
-
-                if (!flag) {
-                    if (!this.isValidFireLocation(p_221161_, p_221162_)) {
-                        BlockPos blockpos = p_221162_.below();
-                        if (!p_221161_.getBlockState(blockpos).isFaceSturdy(p_221161_, blockpos, Direction.UP) || i > 3) {
-                            p_221161_.removeBlock(p_221162_, false);
-                        }
-
-                        return;
-                    }
-
-                    if (i == 15 && p_221163_.nextInt(4) == 0 && !this.canBurn(p_221161_.getBlockState(p_221162_.below()))) {
-                        p_221161_.removeBlock(p_221162_, false);
-                        return;
-                    }
-                }
-
-                boolean flag1 = p_221161_.getBiome(p_221162_).is(BiomeTags.INCREASED_FIRE_BURNOUT);
-                int k = flag1 ? -50 : 0;
-                this.checkBurnOut(p_221161_, p_221162_.east(), 300 + k, p_221163_, i);
-                this.checkBurnOut(p_221161_, p_221162_.west(), 300 + k, p_221163_, i);
-                this.checkBurnOut(p_221161_, p_221162_.below(), 250 + k, p_221163_, i);
-                this.checkBurnOut(p_221161_, p_221162_.above(), 250 + k, p_221163_, i);
-                this.checkBurnOut(p_221161_, p_221162_.north(), 300 + k, p_221163_, i);
-                this.checkBurnOut(p_221161_, p_221162_.south(), 300 + k, p_221163_, i);
-                BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
-
-                for (int l = -1; l <= 1; l++) {
-                    for (int i1 = -1; i1 <= 1; i1++) {
-                        for (int j1 = -1; j1 <= 4; j1++) {
-                            if (l != 0 || j1 != 0 || i1 != 0) {
-                                int k1 = 100;
-                                if (j1 > 1) {
-                                    k1 += (j1 - 1) * 100;
-                                }
-
-                                blockpos$mutableblockpos.setWithOffset(p_221162_, l, j1, i1);
-                                int l1 = this.getIgniteOdds(p_221161_, blockpos$mutableblockpos);
-                                if (l1 > 0) {
-                                    int i2 = (l1 + 40 + p_221161_.getDifficulty().getId() * 7) / (i + 30);
-                                    if (flag1) {
-                                        i2 /= 2;
-                                    }
-
-                                    if (i2 > 0
-                                        && p_221163_.nextInt(k1) <= i2
-                                        && (!p_221161_.isRaining() || !this.isNearRain(p_221161_, blockpos$mutableblockpos))) {
-                                        int j2 = Math.min(15, i + p_221163_.nextInt(5) / 4);
-                                        p_221161_.setBlock(blockpos$mutableblockpos, this.getStateWithAge(p_221161_, blockpos$mutableblockpos, j2), 3);
-                                    }
-                                }
-                            }
-                        }
-                    }
-                }
-            }
-        }
-    }
+   // Mohist start
+   private AtomicReference<BlockPos> sourceposition = new AtomicReference(BlockPos.ZERO);
+   public void tick(BlockState p_221160_, ServerLevel p_221161_, BlockPos p_221162_, RandomSource p_221163_) {
+      p_221161_.scheduleTick(p_221162_, this, getFireTickDelay(p_221161_.random));
+      if (BanEvents.banFireTick()) return;
+      if (p_221161_.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
+         if (!p_221160_.canSurvive(p_221161_, p_221162_)) {
+            fireExtinguished(p_221161_, p_221162_); // CraftBukkit - invalid place location
+         }
+
+         BlockState blockstate = p_221161_.getBlockState(p_221162_.below());
+         boolean flag = blockstate.isFireSource(p_221161_, p_221162_, Direction.UP);
+         int i = p_221160_.getValue(AGE);
+         if (!flag && p_221161_.isRaining() && this.isNearRain(p_221161_, p_221162_) && p_221163_.nextFloat() < 0.2F + (float)i * 0.03F) {
+            fireExtinguished(p_221161_, p_221162_); // CraftBukkit - extinguished by rain
+         } else {
+            int j = Math.min(15, i + p_221163_.nextInt(3) / 2);
+            if (i != j) {
+               p_221160_ = p_221160_.setValue(AGE, Integer.valueOf(j));
+               p_221161_.setBlock(p_221162_, p_221160_, 4);
+            }
+
+            if (!flag) {
+               if (!this.isValidFireLocation(p_221161_, p_221162_)) {
+                  BlockPos blockpos = p_221162_.below();
+                  if (!p_221161_.getBlockState(blockpos).isFaceSturdy(p_221161_, blockpos, Direction.UP) || i > 3) {
+                     fireExtinguished(p_221161_, p_221162_); // CraftBukkit
+                  }
+
+                  return;
+               }
+
+               if (i == 15 && p_221163_.nextInt(4) == 0 && !this.canCatchFire(p_221161_, p_221162_.below(), Direction.UP)) {
+                  fireExtinguished(p_221161_, p_221162_); // CraftBukkit
+                  return;
+               }
+            }
+
+            boolean flag1 = p_221161_.getBiome(p_221162_).is(BiomeTags.INCREASED_FIRE_BURNOUT);
+            int k = flag1 ? -50 : 0;
+            sourceposition.set(p_221162_);
+            this.checkBurnOut(p_221161_, p_221162_.east(), 300 + k, p_221163_, i, Direction.WEST);
+            sourceposition.set(p_221162_);
+            this.checkBurnOut(p_221161_, p_221162_.west(), 300 + k, p_221163_, i, Direction.EAST);
+            sourceposition.set(p_221162_);
+            this.checkBurnOut(p_221161_, p_221162_.below(), 250 + k, p_221163_, i, Direction.UP);
+            sourceposition.set(p_221162_);
+            this.checkBurnOut(p_221161_, p_221162_.above(), 250 + k, p_221163_, i, Direction.DOWN);
+            sourceposition.set(p_221162_);
+            this.checkBurnOut(p_221161_, p_221162_.north(), 300 + k, p_221163_, i, Direction.SOUTH);
+            sourceposition.set(p_221162_);
+            this.checkBurnOut(p_221161_, p_221162_.south(), 300 + k, p_221163_, i, Direction.NORTH);
+            BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+
+            for(int l = -1; l <= 1; ++l) {
+               for(int i1 = -1; i1 <= 1; ++i1) {
+                  for(int j1 = -1; j1 <= 4; ++j1) {
+                     if (l != 0 || j1 != 0 || i1 != 0) {
+                        int k1 = 100;
+                        if (j1 > 1) {
+                           k1 += (j1 - 1) * 100;
+                        }
+
+                        blockpos$mutableblockpos.setWithOffset(p_221162_, l, j1, i1);
+                        int l1 = this.getIgniteOdds(p_221161_, blockpos$mutableblockpos);
+                        if (l1 > 0) {
+                           int i2 = (l1 + 40 + p_221161_.getDifficulty().getId() * 7) / (i + 30);
+                           if (flag1) {
+                              i2 /= 2;
+                           }
+
+                           if (i2 > 0 && p_221163_.nextInt(k1) <= i2 && (!p_221161_.isRaining() || !this.isNearRain(p_221161_, blockpos$mutableblockpos))) {
+                              int j2 = Math.min(15, i + p_221163_.nextInt(5) / 4);
+                              // CraftBukkit start - Call to stop the spread of fire
+                              if (p_221161_.getBlockState(blockpos$mutableblockpos).getBlock() != Blocks.FIRE) {
+                                 if (CraftEventFactory.callBlockIgniteEvent(p_221161_, blockpos$mutableblockpos, p_221162_).isCancelled()) {
+                                    continue;
+                                 }
+                                 CraftEventFactory.handleBlockSpreadEvent(p_221161_, p_221162_, blockpos$mutableblockpos, this.getStateWithAge(p_221161_, blockpos$mutableblockpos, j2), 3); // CraftBukkit
+                              }
+                              // CraftBukkit end
+                           }
+                        }
+                     }
+                  }
+               }
+            }
+
+         }
+      }
+   }
 
     protected boolean isNearRain(Level p_53429_, BlockPos p_53430_) {
         return p_53429_.isRainingAt(p_53430_)
@@ -238,33 +_,31 @@
             || p_53429_.isRainingAt(p_53430_.south());
     }
 
+    @Deprecated //Forge: Use IForgeBlockState.getFlammability, Public for default implementation only.
     public int getBurnOdds(BlockState p_221165_) {
         return p_221165_.hasProperty(BlockStateProperties.WATERLOGGED) && p_221165_.getValue(BlockStateProperties.WATERLOGGED)
             ? 0
             : this.burnOdds.getInt(p_221165_.getBlock());
     }
 
+    @Deprecated //Forge: Use IForgeBlockState.getFireSpreadSpeed
     public int getIgniteOdds(BlockState p_221167_) {
         return p_221167_.hasProperty(BlockStateProperties.WATERLOGGED) && p_221167_.getValue(BlockStateProperties.WATERLOGGED)
             ? 0
             : this.igniteOdds.getInt(p_221167_.getBlock());
     }
 
-    private void checkBurnOut(Level p_221151_, BlockPos p_221152_, int p_221153_, RandomSource p_221154_, int p_221155_) {
-        int i = this.getBurnOdds(p_221151_.getBlockState(p_221152_));
+    private void checkBurnOut(Level p_221151_, BlockPos p_221152_, int p_221153_, RandomSource p_221154_, int p_221155_, Direction face) {
+        int i = p_221151_.getBlockState(p_221152_).getFlammability(p_221151_, p_221152_, face);
         if (p_221154_.nextInt(p_221153_) < i) {
             BlockState blockstate = p_221151_.getBlockState(p_221152_);
+            blockstate.onCaughtFire(p_221151_, p_221152_, face, null);
             if (p_221154_.nextInt(p_221155_ + 10) < 5 && !p_221151_.isRainingAt(p_221152_)) {
                 int j = Math.min(p_221155_ + p_221154_.nextInt(5) / 4, 15);
                 p_221151_.setBlock(p_221152_, this.getStateWithAge(p_221151_, p_221152_, j), 3);
             } else {
                 p_221151_.removeBlock(p_221152_, false);
             }
-
-            Block block = blockstate.getBlock();
-            if (block instanceof TntBlock) {
-                TntBlock.explode(p_221151_, p_221152_);
-            }
         }
     }
 
@@ -275,7 +_,7 @@
 
     private boolean isValidFireLocation(BlockGetter p_53486_, BlockPos p_53487_) {
         for (Direction direction : Direction.values()) {
-            if (this.canBurn(p_53486_.getBlockState(p_53487_.relative(direction)))) {
+            if (this.canCatchFire(p_53486_, p_53487_.relative(direction), direction.getOpposite())) {
                 return true;
             }
         }
@@ -291,20 +_,21 @@
 
             for (Direction direction : Direction.values()) {
                 BlockState blockstate = p_221157_.getBlockState(p_221158_.relative(direction));
-                i = Math.max(this.getIgniteOdds(blockstate), i);
+                i = Math.max(blockstate.getFireSpreadSpeed(p_221157_, p_221158_.relative(direction), direction.getOpposite()), i);
             }
 
             return i;
         }
     }
 
+    @Deprecated //Forge: Use canCatchFire with more context
     @Override
     protected boolean canBurn(BlockState p_53489_) {
         return this.getIgniteOdds(p_53489_) > 0;
     }
 
     @Override
-    protected void onPlace(BlockState p_53479_, Level p_53480_, BlockPos p_53481_, BlockState p_53482_, boolean p_53483_) {
+    public void onPlace(BlockState p_53479_, Level p_53480_, BlockPos p_53481_, BlockState p_53482_, boolean p_53483_) {
         super.onPlace(p_53479_, p_53480_, p_53481_, p_53482_, p_53483_);
         p_53480_.scheduleTick(p_53481_, this, getFireTickDelay(p_53480_.random));
     }
@@ -319,8 +_,21 @@
     }
 
     public void setFlammable(Block p_53445_, int p_53446_, int p_53447_) {
+        if (p_53445_ == Blocks.AIR) throw new IllegalArgumentException("Tried to set air on fire... This is bad.");
         this.igniteOdds.put(p_53445_, p_53446_);
         this.burnOdds.put(p_53445_, p_53447_);
+    }
+
+    /**
+     * Side sensitive version that calls the block function.
+     *
+     * @param world The current world
+     * @param pos Block position
+     * @param face The side the fire is coming from
+     * @return True if the face can catch fire.
+     */
+    public boolean canCatchFire(BlockGetter world, BlockPos pos, Direction face) {
+        return world.getBlockState(pos).isFlammable(world, pos, face);
     }
 
     public static void bootStrap() {
