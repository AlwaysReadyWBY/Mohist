--- a/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/net/minecraft/world/level/block/CoralFanBlock.java
@@ -2,7 +_,6 @@
 
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.server.level.ServerLevel;
@@ -14,44 +_,48 @@
 import net.minecraft.world.level.material.Fluids;
 
 public class CoralFanBlock extends BaseCoralFanBlock {
-    public static final MapCodec<CoralFanBlock> CODEC = RecordCodecBuilder.mapCodec(
-        p_312088_ -> p_312088_.group(CoralBlock.DEAD_CORAL_FIELD.forGetter(p_311032_ -> p_311032_.deadBlock), propertiesCodec()).apply(p_312088_, CoralFanBlock::new)
-    );
-    private final Block deadBlock;
-
-    @Override
-    public MapCodec<CoralFanBlock> codec() {
-        return CODEC;
-    }
-
-    public CoralFanBlock(Block p_52151_, BlockBehaviour.Properties p_52152_) {
-        super(p_52152_);
-        this.deadBlock = p_52151_;
-    }
-
-    @Override
-    protected void onPlace(BlockState p_52166_, Level p_52167_, BlockPos p_52168_, BlockState p_52169_, boolean p_52170_) {
-        this.tryScheduleDieTick(p_52166_, p_52167_, p_52168_);
-    }
-
-    @Override
-    protected void tick(BlockState p_221025_, ServerLevel p_221026_, BlockPos p_221027_, RandomSource p_221028_) {
-        if (!scanForWater(p_221025_, p_221026_, p_221027_)) {
-            p_221026_.setBlock(p_221027_, this.deadBlock.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(false)), 2);
-        }
-    }
-
-    @Override
-    protected BlockState updateShape(BlockState p_52159_, Direction p_52160_, BlockState p_52161_, LevelAccessor p_52162_, BlockPos p_52163_, BlockPos p_52164_) {
-        if (p_52160_ == Direction.DOWN && !p_52159_.canSurvive(p_52162_, p_52163_)) {
-            return Blocks.AIR.defaultBlockState();
-        } else {
-            this.tryScheduleDieTick(p_52159_, p_52162_, p_52163_);
-            if (p_52159_.getValue(WATERLOGGED)) {
-                p_52162_.scheduleTick(p_52163_, Fluids.WATER, Fluids.WATER.getTickDelay(p_52162_));
-            }
-
-            return super.updateShape(p_52159_, p_52160_, p_52161_, p_52162_, p_52163_, p_52164_);
-        }
-    }
+   public static final MapCodec<CoralFanBlock> CODEC = RecordCodecBuilder.mapCodec((p_312088_) -> {
+      return p_312088_.group(CoralBlock.DEAD_CORAL_FIELD.forGetter((p_311032_) -> {
+         return p_311032_.deadBlock;
+      }), propertiesCodec()).apply(p_312088_, CoralFanBlock::new);
+   });
+   private final Block deadBlock;
+
+   public MapCodec<CoralFanBlock> codec() {
+      return CODEC;
+   }
+
+   public CoralFanBlock(Block p_52151_, BlockBehaviour.Properties p_52152_) {
+      super(p_52152_);
+      this.deadBlock = p_52151_;
+   }
+
+   public void onPlace(BlockState p_52166_, Level p_52167_, BlockPos p_52168_, BlockState p_52169_, boolean p_52170_) {
+      this.tryScheduleDieTick(p_52166_, p_52167_, p_52168_);
+   }
+
+   public void tick(BlockState p_221025_, ServerLevel p_221026_, BlockPos p_221027_, RandomSource p_221028_) {
+      if (!scanForWater(p_221025_, p_221026_, p_221027_)) {
+         // CraftBukkit start
+         if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(p_221026_, p_221027_, this.deadBlock.defaultBlockState().setValue(WATERLOGGED, false)).isCancelled()) {
+            return;
+         }
+         // CraftBukkit end
+         p_221026_.setBlock(p_221027_, this.deadBlock.defaultBlockState().setValue(WATERLOGGED, Boolean.valueOf(false)), 2);
+      }
+
+   }
+
+   public BlockState updateShape(BlockState p_52159_, Direction p_52160_, BlockState p_52161_, LevelAccessor p_52162_, BlockPos p_52163_, BlockPos p_52164_) {
+      if (p_52160_ == Direction.DOWN && !p_52159_.canSurvive(p_52162_, p_52163_)) {
+         return Blocks.AIR.defaultBlockState();
+      } else {
+         this.tryScheduleDieTick(p_52159_, p_52162_, p_52163_);
+         if (p_52159_.getValue(WATERLOGGED)) {
+            p_52162_.scheduleTick(p_52163_, Fluids.WATER, Fluids.WATER.getTickDelay(p_52162_));
+         }
+
+         return super.updateShape(p_52159_, p_52160_, p_52161_, p_52162_, p_52163_, p_52164_);
+      }
+   }
 }
