--- a/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -18,6 +_,7 @@
 import java.util.Set;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -76,12 +_,15 @@
 import net.minecraft.world.level.levelgen.structure.placement.StructurePlacement;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.bukkit.craftbukkit.generator.CraftLimitedRegion;
+import org.bukkit.craftbukkit.util.RandomSourceWrapper;
+import org.bukkit.generator.BlockPopulator;
 
 public abstract class ChunkGenerator {
     public static final Codec<ChunkGenerator> CODEC = BuiltInRegistries.CHUNK_GENERATOR.byNameCodec().dispatchStable(ChunkGenerator::codec, Function.identity());
     protected final BiomeSource biomeSource;
-    private final Supplier<List<FeatureSorter.StepFeatureData>> featuresPerStep;
-    private final Function<Holder<Biome>, BiomeGenerationSettings> generationSettingsGetter;
+    private final net.minecraftforge.common.util.ClearableLazy<List<FeatureSorter.StepFeatureData>> featuresPerStep;
+    public final Function<Holder<Biome>, BiomeGenerationSettings> generationSettingsGetter;
 
     public ChunkGenerator(BiomeSource p_256133_) {
         this(p_256133_, p_223234_ -> p_223234_.value().getGenerationSettings());
@@ -90,11 +_,16 @@
     public ChunkGenerator(BiomeSource p_255838_, Function<Holder<Biome>, BiomeGenerationSettings> p_256216_) {
         this.biomeSource = p_255838_;
         this.generationSettingsGetter = p_256216_;
-        this.featuresPerStep = Suppliers.memoize(
+        this.featuresPerStep = net.minecraftforge.common.util.ClearableLazy.concurrentOf(
             () -> FeatureSorter.buildFeaturesPerStep(List.copyOf(p_255838_.possibleBiomes()), p_223216_ -> p_256216_.apply(p_223216_).features(), true)
         );
     }
 
+    @org.jetbrains.annotations.ApiStatus.Internal
+    public void refreshFeaturesPerStep() {
+        featuresPerStep.invalidate();
+    }
+
     public void validate() {
         this.featuresPerStep.get();
     }
@@ -311,6 +_,31 @@
         }
     }
 
+   public void addVanillaDecorations(WorldGenLevel pLevel, ChunkAccess pChunk, StructureManager pStructureManager) { // CraftBukkit
+      this.applyBiomeDecoration(pLevel, pChunk, pStructureManager);
+   }
+
+   public void applyBiomeDecoration(WorldGenLevel pLevel, ChunkAccess pChunk, StructureManager pStructureManager, boolean vanilla) {
+      if (vanilla) {
+         this.addVanillaDecorations(pLevel, pChunk, pStructureManager);
+      }
+      org.bukkit.World world = pLevel.getMinecraftWorld().getWorld();
+      // only call when a populator is present (prevents unnecessary entity conversion)
+      if (!world.getPopulators().isEmpty()) {
+         CraftLimitedRegion limitedRegion = new CraftLimitedRegion(pLevel, pChunk.getPos());
+         int x = pChunk.getPos().x;
+         int z = pChunk.getPos().z;
+         for (BlockPopulator populator : world.getPopulators()) {
+            WorldgenRandom seededrandom = new WorldgenRandom(new LegacyRandomSource(pLevel.getSeed()));
+            seededrandom.setDecorationSeed(pLevel.getSeed(), x, z);
+            populator.populate(world, new RandomSourceWrapper.RandomWrapper(seededrandom), x, z, limitedRegion);
+         }
+         limitedRegion.saveEntities();
+         limitedRegion.breakLink();
+      }
+      // CraftBukkit end
+   }
+
     public void applyBiomeDecoration(WorldGenLevel p_223087_, ChunkAccess p_223088_, StructureManager p_223089_) {
         ChunkPos chunkpos = p_223088_.getPos();
         if (!SharedConstants.debugVoidTerrain(chunkpos)) {
@@ -544,6 +_,14 @@
         Predicate<Holder<Biome>> predicate = holderset::contains;
         StructureStart structurestart = structure.generate(p_223107_, this, this.biomeSource, p_223108_, p_223109_, p_223110_, p_223112_, i, p_223111_, predicate);
         if (structurestart.isValid()) {
+         	// CraftBukkit start
+         	BoundingBox box = structurestart.getBoundingBox();
+         	org.bukkit.event.world.AsyncStructureSpawnEvent event = new org.bukkit.event.world.AsyncStructureSpawnEvent(p_223106_.level.getMinecraftWorld().getWorld(), org.bukkit.craftbukkit.generator.structure.CraftStructure.minecraftToBukkit(structure), new org.bukkit.util.BoundingBox(box.minX(), box.minY(), box.minZ(), box.maxX(), box.maxY(), box.maxZ()), p_223112_.x, p_223112_.z);
+         	org.bukkit.Bukkit.getPluginManager().callEvent(event);
+         	if (event.isCancelled()) {
+            	return true;
+         	}
+         	// CraftBukkit end
             p_223106_.setStartForStructure(p_223113_, structure, structurestart, p_223111_);
             return true;
         } else {
