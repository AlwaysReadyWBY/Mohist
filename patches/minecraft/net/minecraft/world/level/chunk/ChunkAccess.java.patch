--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -47,6 +_,7 @@
 import net.minecraft.world.level.gameevent.GameEventListenerRegistry;
 import net.minecraft.world.level.levelgen.BelowZeroRetrogen;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.Heightmap.Types;
 import net.minecraft.world.level.levelgen.NoiseChunk;
 import net.minecraft.world.level.levelgen.blending.BlendingData;
 import net.minecraft.world.level.levelgen.structure.Structure;
@@ -55,6 +_,8 @@
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.ticks.SerializableTickContainer;
 import net.minecraft.world.ticks.TickContainerAccess;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer;
 import org.slf4j.Logger;
 
 public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiomeSource, LightChunk, StructureAccess {
@@ -74,14 +_,18 @@
     protected final UpgradeData upgradeData;
     @Nullable
     protected BlendingData blendingData;
-    protected final Map<Heightmap.Types, Heightmap> heightmaps = Maps.newEnumMap(Heightmap.Types.class);
+   	public final Map<Heightmap.Types, Heightmap> heightmaps = Maps.newEnumMap(Heightmap.Types.class);
     protected ChunkSkyLightSources skyLightSources;
     private final Map<Structure, StructureStart> structureStarts = Maps.newHashMap();
     private final Map<Structure, LongSet> structuresRefences = Maps.newHashMap();
     protected final Map<BlockPos, CompoundTag> pendingBlockEntities = Maps.newHashMap();
-    protected final Map<BlockPos, BlockEntity> blockEntities = new Object2ObjectOpenHashMap<>();
+   	public final Map<BlockPos, BlockEntity> blockEntities = new Object2ObjectOpenHashMap<>();
     protected final LevelHeightAccessor levelHeightAccessor;
     protected final LevelChunkSection[] sections;
+   	// CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
+   	private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new CraftPersistentDataTypeRegistry();
+   	public DirtyCraftPersistentDataContainer persistentDataContainer = new DirtyCraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+   	// CraftBukkit end
 
     public ChunkAccess(
         ChunkPos p_187621_,
@@ -109,7 +_,11 @@
         }
 
         replaceMissingSections(p_187624_, this.sections);
-    }
+      // CraftBukkit start
+      this.biomeRegistry = p_187624_;
+   }
+   public final Registry<Biome> biomeRegistry;
+   // CraftBukkit end
 
     private static void replaceMissingSections(Registry<Biome> p_281389_, LevelChunkSection[] p_282796_) {
         for (int i = 0; i < p_282796_.length; i++) {
@@ -262,26 +_,23 @@
         return true;
     }
 
-    public boolean isSectionEmpty(int p_342699_) {
-        return this.getSection(this.getSectionIndexFromSectionY(p_342699_)).hasOnlyAir();
-    }
-
     public void setUnsaved(boolean p_62094_) {
         this.unsaved = p_62094_;
+        if (!p_62094_) this.persistentDataContainer.dirty(false); // CraftBukkit - SPIGOT-6814: chunk was saved, pdc is no longer dirty
     }
 
     public boolean isUnsaved() {
-        return this.unsaved;
+      return this.unsaved || this.persistentDataContainer.dirty(); // CraftBukkit - SPIGOT-6814: chunk is unsaved if pdc was mutated
     }
 
-    public abstract ChunkStatus getPersistedStatus();
+    public abstract ChunkStatus getStatus();
 
     public ChunkStatus getHighestGeneratedStatus() {
-        ChunkStatus chunkstatus = this.getPersistedStatus();
+        ChunkStatus chunkstatus = this.getStatus();
         BelowZeroRetrogen belowzeroretrogen = this.getBelowZeroRetrogen();
         if (belowzeroretrogen != null) {
             ChunkStatus chunkstatus1 = belowzeroretrogen.targetStatus();
-            return ChunkStatus.max(chunkstatus1, chunkstatus);
+            return chunkstatus1.isOrAfter(chunkstatus) ? chunkstatus1 : chunkstatus;
         } else {
             return chunkstatus;
         }
@@ -315,23 +_,28 @@
 
     @Override
     public final void findBlockLightSources(BiConsumer<BlockPos, BlockState> p_285269_) {
-        this.findBlocks(p_284897_ -> p_284897_.getLightEmission() != 0, p_285269_);
+        this.findBlocks((p_284897_, pos) -> p_284897_.getLightEmission(this, pos) != 0, p_285269_);
     }
 
     public void findBlocks(Predicate<BlockState> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
+        findBlocks((state, pos) -> p_285343_.test(state), p_285030_);
+    }
+
+    public void findBlocks(java.util.function.BiPredicate<BlockState, BlockPos> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
         for (int i = this.getMinSection(); i < this.getMaxSection(); i++) {
             LevelChunkSection levelchunksection = this.getSection(this.getSectionIndexFromSectionY(i));
-            if (levelchunksection.maybeHas(p_285343_)) {
+            if (levelchunksection.maybeHas(state -> p_285343_.test(state, BlockPos.ZERO))) {
                 BlockPos blockpos = SectionPos.of(this.chunkPos, i).origin();
 
                 for (int j = 0; j < 16; j++) {
                     for (int k = 0; k < 16; k++) {
                         for (int l = 0; l < 16; l++) {
                             BlockState blockstate = levelchunksection.getBlockState(l, j, k);
-                            if (p_285343_.test(blockstate)) {
-                                p_285030_.accept(blockpos$mutableblockpos.setWithOffset(blockpos, l, j, k), blockstate);
+                            blockpos$mutableblockpos.setWithOffset(blockpos, l, j, k);
+                            if (p_285343_.test(blockstate, blockpos$mutableblockpos.immutable())) {
+                                p_285030_.accept(blockpos$mutableblockpos, blockstate);
                             }
                         }
                     }
@@ -476,4 +_,30 @@
 
     public static record TicksToSave(SerializableTickContainer<Block> blocks, SerializableTickContainer<Fluid> fluids) {
     }
+
+    @Nullable
+    public net.minecraft.world.level.LevelAccessor getWorldForge() {
+        return null;
+    }
+
+   // CraftBukkit start
+   public void setBiome(int i, int j, int k, Holder<Biome> biome) {
+      try {
+         int l = QuartPos.fromBlock(this.getMinBuildHeight());
+         int i1 = l + QuartPos.fromBlock(this.getHeight()) - 1;
+         int j1 = Mth.clamp(j, l, i1);
+         int k1 = this.getSectionIndex(QuartPos.toBlock(j1));
+
+         this.sections[k1].setBiome(i & 3, j1 & 3, k & 3, biome);
+      } catch (Throwable throwable) {
+         CrashReport crashreport = CrashReport.forThrowable(throwable, "Setting biome");
+         CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Biome being set");
+
+         crashreportsystemdetails.setDetail("Location", () -> {
+            return CrashReportCategory.formatLocation(this, i, j, k);
+         });
+         throw new ReportedException(crashreport);
+      }
+   }
+   // CraftBukkit end
 }
