--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -7,6 +_,7 @@
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
@@ -41,6 +_,7 @@
 import net.minecraft.world.level.gameevent.GameEventListenerRegistry;
 import net.minecraft.world.level.levelgen.DebugLevelSource;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.Heightmap.Types;
 import net.minecraft.world.level.levelgen.blending.BlendingData;
 import net.minecraft.world.level.lighting.LightEngine;
 import net.minecraft.world.level.material.Fluid;
@@ -48,9 +_,11 @@
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.ticks.LevelChunkTicks;
 import net.minecraft.world.ticks.TickContainerAccess;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.minecraftforge.common.capabilities.ICapabilityProviderImpl<LevelChunk> {
     static final Logger LOGGER = LogUtils.getLogger();
     private static final TickingBlockEntity NULL_TICKER = new TickingBlockEntity() {
         @Override
@@ -73,8 +_,8 @@
         }
     };
     private final Map<BlockPos, LevelChunk.RebindableTickingBlockEntityWrapper> tickersInLevel = Maps.newHashMap();
-    public boolean loaded;
-    public final Level level;
+   	public boolean loaded;
+   	public final Level level;
     @Nullable
     private Supplier<FullChunkStatus> fullStatus;
     @Nullable
@@ -83,6 +_,21 @@
     private final LevelChunkTicks<Block> blockTicks;
     private final LevelChunkTicks<Fluid> fluidTicks;
 
+   	public org.bukkit.Chunk bukkitChunk;
+
+   	public org.bukkit.Chunk getBukkitChunk ( )
+   	{
+      	return bukkitChunk;
+   	}
+
+   	public boolean mustNotSave;
+   	public boolean needsDecoration;
+   	private static final CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
+   	public CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer( DATA_TYPE_REGISTRY );
+   	// CraftBukkit end
+
+   	public ServerLevel r; // Mohist
+
     public LevelChunk(Level p_187945_, ChunkPos p_187946_) {
         this(p_187945_, p_187946_, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, null, null, null);
     }
@@ -100,6 +_,9 @@
     ) {
         super(p_196855_, p_196856_, p_196854_, p_196854_.registryAccess().registryOrThrow(Registries.BIOME), p_196859_, p_196860_, p_196862_);
         this.level = p_196854_;
+      	if (p_196854_ != null && p_196854_.getClass() == ServerLevel.class) {
+         	this.r = ((ServerLevel) p_196854_);
+      	}
         this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap<>();
 
         for (Heightmap.Types heightmap$types : Heightmap.Types.values()) {
@@ -111,7 +_,9 @@
         this.postLoad = p_196861_;
         this.blockTicks = p_196857_;
         this.fluidTicks = p_196858_;
-    }
+        this.capProvider.initInternal();
+      	if (p_196855_ != null) this.bukkitChunk = new org.bukkit.craftbukkit.CraftChunk( this );
+   }
 
     public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
         this(
@@ -148,7 +_,10 @@
         this.skyLightSources = p_196851_.skyLightSources;
         this.setLightCorrect(p_196851_.isLightCorrect());
         this.unsaved = true;
-    }
+      	this.needsDecoration = true; // CraftBukkit
+      	// CraftBukkit start
+      	this.persistentDataContainer = p_196851_.persistentDataContainer; // SPIGOT-6814: copy PDC to account for 1
+   }
 
     @Override
     public TickContainerAccess<Block> getBlockTicks() {
@@ -232,7 +_,10 @@
         }
     }
 
-    @Nullable
+   public AtomicBoolean mohist$doPlace = new AtomicBoolean(true);
+
+   // CraftBukkit start
+   @Nullable
     @Override
     public BlockState setBlockState(BlockPos p_62865_, BlockState p_62866_, boolean p_62867_) {
         int i = p_62865_.getY();
@@ -270,14 +_,15 @@
                 boolean flag2 = blockstate.hasBlockEntity();
                 if (!this.level.isClientSide) {
                     blockstate.onRemove(this.level, p_62865_, p_62866_, p_62867_);
-                } else if (!blockstate.is(block) && flag2) {
+                } else if ((!blockstate.is(block) || !p_62866_.hasBlockEntity()) && flag2) {
                     this.removeBlockEntity(p_62865_);
                 }
 
                 if (!levelchunksection.getBlockState(j, k, l).is(block)) {
                     return null;
                 } else {
-                    if (!this.level.isClientSide) {
+               		// CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+               		if (!this.level.isClientSide && mohist$doPlace.get() && (!this.level.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) {
                         p_62866_.onPlace(this.level, p_62865_, blockstate, p_62867_);
                     }
 
@@ -306,6 +_,16 @@
         }
     }
 
+   @Nullable
+   public BlockState setBlockState(BlockPos pPos, BlockState pState, boolean pIsMoving, boolean doPlace) {
+      mohist$doPlace.set(doPlace);
+      try {
+         return setBlockState(pPos, pState, pIsMoving);
+      } finally {
+         mohist$doPlace.set(true);
+      }
+   }
+
     @Deprecated
     @Override
     public void addEntity(Entity p_62826_) {
@@ -326,6 +_,12 @@
     @Nullable
     public BlockEntity getBlockEntity(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
         BlockEntity blockentity = this.blockEntities.get(p_62868_);
+
+        if (blockentity != null && blockentity.isRemoved()) {
+           blockEntities.remove(p_62868_);
+           blockentity = null;
+        }
+
         if (blockentity == null) {
             CompoundTag compoundtag = this.pendingBlockEntities.remove(p_62868_);
             if (compoundtag != null) {
@@ -343,9 +_,6 @@
                     this.addAndRegisterBlockEntity(blockentity);
                 }
             }
-        } else if (blockentity.isRemoved()) {
-            this.blockEntities.remove(p_62868_);
-            return null;
         }
 
         return blockentity;
@@ -359,6 +_,7 @@
             }
 
             this.updateBlockEntityTicker(p_156391_);
+            p_156391_.onLoad();
         }
     }
 
@@ -411,9 +_,14 @@
     public CompoundTag getBlockEntityNbtForSaving(BlockPos p_62932_, HolderLookup.Provider p_329605_) {
         BlockEntity blockentity = this.getBlockEntity(p_62932_);
         if (blockentity != null && !blockentity.isRemoved()) {
+            try {
             CompoundTag compoundtag1 = blockentity.saveWithFullMetadata(this.level.registryAccess());
             compoundtag1.putBoolean("keepPacked", false);
             return compoundtag1;
+            } catch (Exception e) {
+                LOGGER.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+                return null;
+            }
         } else {
             CompoundTag compoundtag = this.pendingBlockEntities.get(p_62932_);
             if (compoundtag != null) {
@@ -429,6 +_,12 @@
     public void removeBlockEntity(BlockPos p_62919_) {
         if (this.isInLevel()) {
             BlockEntity blockentity = this.blockEntities.remove(p_62919_);
+
+         	// CraftBukkit start - SPIGOT-5561: Also remove from pending map
+         	if (!pendingBlockEntities.isEmpty()) {
+            	pendingBlockEntities.remove(p_62919_);
+         	}
+         	// CraftBukkit end
             if (blockentity != null) {
                 if (this.level instanceof ServerLevel serverlevel) {
                     this.removeGameEventListener(blockentity, serverlevel);
@@ -471,7 +_,61 @@
         }
     }
 
-    public boolean isEmpty() {
+   // CraftBukkit start
+   public void loadCallback() {
+      org.bukkit.Server server = this.level.getCraftServer();
+      if (server != null) {
+         /*
+          * If it's a new world, the first few chunks are generated inside
+          * the World constructor. We can't reliably alter that, so we have
+          * no way of creating a CraftWorld/CraftServer at that point.
+          */
+         org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+         server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, this.needsDecoration));
+
+         if (this.needsDecoration) {
+            this.needsDecoration = false;
+            java.util.Random random = new java.util.Random();
+            if (level instanceof ServerLevel serverLevel) {
+               random.setSeed(serverLevel.getSeed());
+               long xRand = random.nextLong() / 2L * 2L + 1L;
+               long zRand = random.nextLong() / 2L * 2L + 1L;
+               random.setSeed((long) this.chunkPos.x * xRand + (long) this.chunkPos.z * zRand ^ serverLevel.getSeed());
+
+               org.bukkit.World world = this.level.getWorld();
+               if (world != null) {
+                  this.level.populating = true;
+                  try {
+                     for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, bukkitChunk);
+                     }
+                  } finally {
+                     this.level.populating = false;
+                  }
+               }
+               server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+            }
+         }
+      }
+   }
+
+   public void unloadCallback() {
+      org.bukkit.Server server = this.level.getCraftServer();
+      org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+      org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(bukkitChunk, this.isUnsaved());
+      server.getPluginManager().callEvent(unloadEvent);
+      // note: saving can be prevented, but not forced if no saving is actually required
+      this.mustNotSave = !unloadEvent.isSaveChunk();
+   }
+
+   @Override
+   public boolean isUnsaved() {
+      return super.isUnsaved() && !this.mustNotSave;
+   }
+   // CraftBukkit end
+
+
+   public boolean isEmpty() {
         return false;
     }
 
@@ -493,7 +_,7 @@
         p_187974_.accept((p_327409_, p_327410_, p_327411_) -> {
             BlockEntity blockentity = this.getBlockEntity(p_327409_, LevelChunk.EntityCreationType.IMMEDIATE);
             if (blockentity != null && p_327411_ != null && blockentity.getType() == p_327410_) {
-                blockentity.loadWithComponents(p_327411_, this.level.registryAccess());
+                blockentity.handleUpdateTag(p_327411_, this.level.registryAccess());
             }
         });
     }
@@ -601,6 +_,7 @@
     }
 
     public void clearAllBlockEntities() {
+        this.blockEntities.values().forEach(BlockEntity::onChunkUnloaded);
         this.blockEntities.values().forEach(BlockEntity::setRemoved);
         this.blockEntities.clear();
         this.tickersInLevel.values().forEach(p_187966_ -> p_187966_.rebind(NULL_TICKER));
@@ -608,6 +_,7 @@
     }
 
     public void registerAllBlockEntitiesAfterLevelLoad() {
+        this.level.addFreshBlockEntities(this.blockEntities.values());
         this.blockEntities.values().forEach(p_187988_ -> {
             if (this.level instanceof ServerLevel serverlevel) {
                 this.addGameEventListener(p_187988_, serverlevel);
@@ -659,6 +_,24 @@
         return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
     }
 
+    private final net.minecraftforge.common.capabilities.CapabilityProvider.AsField<LevelChunk> capProvider = new net.minecraftforge.common.capabilities.CapabilityProvider.AsField<>(LevelChunk.class, this);
+
+    @org.jetbrains.annotations.NotNull
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side) {
+       return capProvider.getCapability(cap, side);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        capProvider.invalidateCaps();
+    }
+
+    @Override
+    public void reviveCaps() {
+        capProvider.reviveCaps();
+    }
+
     class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
         private final T blockEntity;
         private final BlockEntityTicker<T> ticker;
@@ -676,6 +_,7 @@
                 if (LevelChunk.this.isTicking(blockpos)) {
                     try {
                         ProfilerFiller profilerfiller = LevelChunk.this.level.getProfiler();
+                        net.minecraftforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(blockEntity);
                         profilerfiller.push(this::getType);
                         BlockState blockstate = LevelChunk.this.getBlockState(blockpos);
                         if (this.blockEntity.getType().isValid(blockstate)) {
@@ -697,6 +_,11 @@
                         CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory = crashreport.addCategory("Block entity being ticked");
                         this.blockEntity.fillCrashReportCategory(crashreportcategory);
+                        if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                            LOGGER.error("{}", crashreport.getFriendlyReport(net.minecraft.ReportType.CRASH));
+                            blockEntity.setRemoved();
+                            LevelChunk.this.removeBlockEntity(blockEntity.getBlockPos());
+                        } else
                         throw new ReportedException(crashreport);
                     }
                 }
@@ -770,5 +_,32 @@
         public String toString() {
             return this.ticker + " <wrapped>";
         }
+    }
+
+    /**
+     * <strong>FOR INTERNAL USE ONLY</strong>
+     * <p>
+     * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+     */
+    @java.lang.Deprecated
+    @org.jetbrains.annotations.Nullable
+    public final CompoundTag writeCapsToNBT(HolderLookup.Provider registryAccess) {
+       return capProvider.serializeInternal(registryAccess);
+    }
+
+    /**
+     * <strong>FOR INTERNAL USE ONLY</strong>
+     * <p>
+     * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+     *
+     */
+    @java.lang.Deprecated
+    public final void readCapsFromNBT(HolderLookup.Provider registryAccess, CompoundTag tag) {
+        capProvider.deserializeInternal(registryAccess, tag);
+    }
+
+    @Override
+    public Level getWorldForge() {
+        return getLevel();
     }
 }
