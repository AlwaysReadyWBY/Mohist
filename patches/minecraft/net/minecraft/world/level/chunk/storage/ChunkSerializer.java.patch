--- a/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -63,7 +_,7 @@
 import org.slf4j.Logger;
 
 public class ChunkSerializer {
-   private static final Codec<PalettedContainer<BlockState>> BLOCK_STATE_CODEC = PalettedContainer.codecRW(Block.BLOCK_STATE_REGISTRY, BlockState.CODEC, PalettedContainer.Strategy.SECTION_STATES, Blocks.AIR.defaultBlockState());
+   public static final Codec<PalettedContainer<BlockState>> BLOCK_STATE_CODEC = PalettedContainer.codecRW(Block.BLOCK_STATE_REGISTRY, BlockState.CODEC, PalettedContainer.Strategy.SECTION_STATES, Blocks.AIR.defaultBlockState()); // CraftBukkit - read/write
    private static final Logger LOGGER = LogUtils.getLogger();
    private static final String TAG_UPGRADE_DATA = "UpgradeData";
    private static final String BLOCK_TICKS_TAG = "block_ticks";
@@ -159,6 +_,7 @@
             return BuiltInRegistries.FLUID.getOptional(ResourceLocation.tryParse(p_258990_));
          }, p_188233_);
          chunkaccess = new LevelChunk(p_188231_.getLevel(), p_188233_, upgradedata, levelchunkticks, levelchunkticks1, k1, alevelchunksection, postLoadChunk(p_188231_, p_188234_), blendingdata);
+         if (p_188234_.contains("ForgeCaps")) ((LevelChunk)chunkaccess).readCapsFromNBT(p_188234_.getCompound("ForgeCaps"));
       } else {
          ProtoChunkTicks<Block> protochunkticks = ProtoChunkTicks.load(p_188234_.getList("block_ticks", 10), (p_258992_) -> {
             return BuiltInRegistries.BLOCK.getOptional(ResourceLocation.tryParse(p_258992_));
@@ -180,6 +_,12 @@
          }
       }
 
+      // CraftBukkit start - load chunk persistent data from nbt - SPIGOT-6814: Already load PDC here to account for 1.17 to 1.18 chunk upgrading.
+      net.minecraft.nbt.Tag persistentBase = p_188234_.get("ChunkBukkitValues");
+      if (persistentBase instanceof CompoundTag) {
+         ((ChunkAccess) chunkaccess).persistentDataContainer.putAll((CompoundTag) persistentBase);
+      }
+      // CraftBukkit end
       chunkaccess.setLightCorrect(flag);
       CompoundTag compoundtag2 = p_188234_.getCompound("Heightmaps");
       EnumSet<Heightmap.Types> enumset = EnumSet.noneOf(Heightmap.Types.class);
@@ -212,6 +_,7 @@
       }
 
       if (chunkstatus$chunktype == ChunkStatus.ChunkType.LEVELCHUNK) {
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return new ImposterProtoChunk((LevelChunk)chunkaccess, false);
       } else {
          ProtoChunk protochunk1 = (ProtoChunk)chunkaccess;
@@ -235,6 +_,7 @@
             protochunk1.setCarvingMask(generationstep$carving, new CarvingMask(compoundtag4.getLongArray(s1), chunkaccess.getMinBuildHeight()));
          }
 
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.level.ChunkDataEvent.Load(chunkaccess, p_188234_, chunkstatus$chunktype));
          return protochunk1;
       }
    }
@@ -341,6 +_,14 @@
 
          compoundtag.put("CarvingMasks", compoundtag4);
       }
+      else if (p_63456_ instanceof LevelChunk levelChunk){
+          try {
+              final CompoundTag capTag = levelChunk.writeCapsToNBT();
+              if (capTag != null) compoundtag.put("ForgeCaps", capTag);
+          } catch (Exception exception) {
+              LOGGER.error("A capability provider has thrown an exception trying to write state. It will not persist. Report this to the mod author", exception);
+          }
+      }
 
       saveTicks(p_63455_, compoundtag, p_63456_.getTicksForSerialization());
       compoundtag.put("PostProcessing", packOffsets(p_63456_.getPostProcessing()));
@@ -354,6 +_,11 @@
 
       compoundtag.put("Heightmaps", compoundtag2);
       compoundtag.put("structures", packStructureData(StructurePieceSerializationContext.fromLevel(p_63455_), chunkpos, p_63456_.getAllStarts(), p_63456_.getAllReferences()));
+      // CraftBukkit start - store chunk persistent data in nbt
+      if (!p_63456_.persistentDataContainer.isEmpty()) { // SPIGOT-6814: Always save PDC to account for 1.17 to 1.18 chunk upgrading.
+         compoundtag.put("ChunkBukkitValues", p_63456_.persistentDataContainer.toTagCompound());
+      }
+      // CraftBukkit end
       return compoundtag;
    }
 
@@ -442,6 +_,12 @@
          } else {
             StructureStart structurestart = StructureStart.loadStaticStart(p_188255_, compoundtag.getCompound(s), p_188257_);
             if (structurestart != null) {
+               // CraftBukkit start - load persistent data for structure start
+               net.minecraft.nbt.Tag persistentBase = compoundtag.getCompound(s).get("StructureBukkitValues");
+               if (persistentBase instanceof CompoundTag) {
+                  structurestart.persistentDataContainer.putAll((CompoundTag) persistentBase);
+               }
+               // CraftBukkit end
                map.put(structure, structurestart);
             }
          }
