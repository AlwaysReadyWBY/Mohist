--- a/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -5,6 +_,7 @@
 import java.io.DataOutputStream;
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.concurrent.atomic.AtomicBoolean;
 import javax.annotation.Nullable;
 import net.minecraft.FileUtil;
 import net.minecraft.nbt.CompoundTag;
@@ -17,7 +_,7 @@
 public final class RegionFileStorage implements AutoCloseable {
     public static final String ANVIL_EXTENSION = ".mca";
     private static final int MAX_CACHE_SIZE = 256;
-    public final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap<>();
+   	public final Long2ObjectLinkedOpenHashMap<RegionFile> regionCache = new Long2ObjectLinkedOpenHashMap<>();
     private final RegionStorageInfo info;
     private final Path folder;
     private final boolean sync;
@@ -28,43 +_,52 @@
         this.info = p_330451_;
     }
 
-    private RegionFile getRegionFile(ChunkPos p_63712_) throws IOException {
-        long i = ChunkPos.asLong(p_63712_.getRegionX(), p_63712_.getRegionZ());
-        RegionFile regionfile = this.regionCache.getAndMoveToFirst(i);
-        if (regionfile != null) {
-            return regionfile;
-        } else {
-            if (this.regionCache.size() >= 256) {
-                this.regionCache.removeLast().close();
-            }
-
-            FileUtil.createDirectoriesSafe(this.folder);
-            Path path = this.folder.resolve("r." + p_63712_.getRegionX() + "." + p_63712_.getRegionZ() + ".mca");
-            RegionFile regionfile1 = new RegionFile(this.info, path, this.folder, this.sync);
-            this.regionCache.putAndMoveToFirst(i, regionfile1);
-            return regionfile1;
-        }
-    }
-
-    @Nullable
-    public CompoundTag read(ChunkPos p_63707_) throws IOException {
-        RegionFile regionfile = this.getRegionFile(p_63707_);
-
-        CompoundTag compoundtag;
-        try (DataInputStream datainputstream = regionfile.getChunkDataInputStream(p_63707_)) {
-            if (datainputstream == null) {
-                return null;
-            }
-
-            compoundtag = NbtIo.read(datainputstream);
-        }
-
-        return compoundtag;
-    }
-
-    public void scanChunk(ChunkPos p_196957_, StreamTagVisitor p_196958_) throws IOException {
-        RegionFile regionfile = this.getRegionFile(p_196957_);
-
+   private AtomicBoolean mohist$existingOnly = new AtomicBoolean(true);
+
+   private RegionFile getRegionFile(ChunkPos p_63712_) throws IOException {
+      long i = ChunkPos.asLong(p_63712_.getRegionX(), p_63712_.getRegionZ());
+      RegionFile regionfile = this.regionCache.getAndMoveToFirst(i);
+      if (regionfile != null) {
+         return regionfile;
+      } else {
+         if (this.regionCache.size() >= 256) {
+            this.regionCache.removeLast().close();
+         }
+
+         FileUtil.createDirectoriesSafe(this.folder);
+         Path path = this.folder.resolve("r." + p_63712_.getRegionX() + "." + p_63712_.getRegionZ() + ".mca");
+         if (mohist$existingOnly.get() && !java.nio.file.Files.exists(path)) return null; // CraftBukkit
+         RegionFile regionfile1 = new RegionFile(path, this.folder, this.sync);
+         this.regionCache.putAndMoveToFirst(i, regionfile1);
+         return regionfile1;
+      }
+   }
+
+   private RegionFile getRegionFile(ChunkPos pChunkPos, boolean existingOnly) throws IOException { // CraftBukkit
+      mohist$existingOnly.set(existingOnly);
+      return getRegionFile(pChunkPos);
+   }
+
+   @Nullable
+   public CompoundTag read(ChunkPos p_63707_) throws IOException {
+      // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+      RegionFile regionfile = this.getRegionFile(p_63707_, true);
+      if (regionfile == null) {
+         return null;
+      }
+      // CraftBukkit end
+      try (DataInputStream datainputstream = regionfile.getChunkDataInputStream(p_63707_)) {
+         return datainputstream == null ? null : NbtIo.read(datainputstream);
+      }
+   }
+
+   public void scanChunk(ChunkPos p_196957_, StreamTagVisitor p_196958_) throws IOException {
+      // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
+      RegionFile regionfile = this.getRegionFile(p_196957_, true);
+      if (regionfile == null) {
+         return;
+      }
+      // CraftBukkit end
         try (DataInputStream datainputstream = regionfile.getChunkDataInputStream(p_196957_)) {
             if (datainputstream != null) {
                 NbtIo.parse(datainputstream, p_196958_, NbtAccounter.unlimitedHeap());
