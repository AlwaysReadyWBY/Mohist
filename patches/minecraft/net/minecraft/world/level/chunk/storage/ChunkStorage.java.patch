--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -6,16 +_,19 @@
 import java.nio.file.Path;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 
@@ -33,6 +_,37 @@
 
    public boolean isOldChunkAround(ChunkPos p_223452_, int p_223453_) {
       return this.worker.isOldChunkAround(p_223452_, p_223453_);
+   }
+
+   // CraftBukkit start
+   private boolean check(ServerChunkCache cps, int x, int z) {
+      ChunkPos pos = new ChunkPos(x, z);
+      if (cps != null) {
+         com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread");
+         if (cps.hasChunk(x, z)) {
+            return true;
+         }
+      }
+
+      CompoundTag nbt;
+      try {
+         nbt = read(pos).get().orElse(null);
+      } catch (InterruptedException | ExecutionException ex) {
+         throw new RuntimeException(ex);
+      }
+      if (nbt != null) {
+         CompoundTag level = nbt.getCompound("Level");
+         if (level.getBoolean("TerrainPopulated")) {
+            return true;
+         }
+
+         ChunkStatus status = ChunkStatus.byName(level.getString("Status"));
+         if (status != null && status.isOrAfter(ChunkStatus.FEATURES)) {
+            return true;
+         }
+      }
+
+      return false;
    }
 
    public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_) {
