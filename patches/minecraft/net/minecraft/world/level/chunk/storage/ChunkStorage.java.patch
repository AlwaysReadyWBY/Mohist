--- a/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -6,16 +_,21 @@
 import java.nio.file.Path;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtUtils;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ServerChunkCache;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.levelgen.structure.LegacyStructureDataHandler;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 
@@ -35,8 +_,64 @@
       return this.worker.isOldChunkAround(p_223452_, p_223453_);
    }
 
+   // CraftBukkit start
+   private boolean check(ServerChunkCache cps, int x, int z) {
+      ChunkPos pos = new ChunkPos(x, z);
+      if (cps != null) {
+         com.google.common.base.Preconditions.checkState(org.bukkit.Bukkit.isPrimaryThread(), "primary thread");
+         if (cps.hasChunk(x, z)) {
+            return true;
+         }
+      }
+
+      CompoundTag nbt;
+      try {
+         nbt = read(pos).get().orElse(null);
+      } catch (InterruptedException | ExecutionException ex) {
+         throw new RuntimeException(ex);
+      }
+      if (nbt != null) {
+         CompoundTag level = nbt.getCompound("Level");
+         if (level.getBoolean("TerrainPopulated")) {
+            return true;
+         }
+
+         ChunkStatus status = ChunkStatus.byName(level.getString("Status"));
+         if (status != null && status.isOrAfter(ChunkStatus.FEATURES)) {
+            return true;
+         }
+      }
+
+      return false;
+   }
+
+   // Mohist start
+   public ChunkPos pos;
+   @Nullable
+   LevelAccessor generatoraccess;
+
+   public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_, ChunkPos pos, @Nullable LevelAccessor generatoraccess) {
+      this.pos = pos;
+      this.generatoraccess = generatoraccess;
+      return upgradeChunkTag(p_188289_, p_188290_, p_188291_, p_188292_);
+   }
+   // Mohist end
+
    public CompoundTag upgradeChunkTag(ResourceKey<Level> p_188289_, Supplier<DimensionDataStorage> p_188290_, CompoundTag p_188291_, Optional<ResourceKey<Codec<? extends ChunkGenerator>>> p_188292_) {
       int i = getVersion(p_188291_);
+
+      // CraftBukkit start
+      if (pos != null && i < 1466) {
+         CompoundTag level = p_188291_.getCompound("Level");
+         if (level.getBoolean("TerrainPopulated") && !level.getBoolean("LightPopulated")) {
+            ServerChunkCache cps = (generatoraccess == null) ? null : ((ServerLevel) generatoraccess).getChunkSource();
+            if (check(cps, pos.x - 1, pos.z) && check(cps, pos.x - 1, pos.z - 1) && check(cps, pos.x, pos.z - 1)) {
+               level.putBoolean("LightPopulated", true);
+            }
+         }
+      }
+      // CraftBukkit end
+
       if (i < 1493) {
          p_188291_ = DataFixTypes.CHUNK.update(this.fixerUpper, p_188291_, i, 1493);
          if (p_188291_.getCompound("Level").getBoolean("hasLegacyStructureData")) {
