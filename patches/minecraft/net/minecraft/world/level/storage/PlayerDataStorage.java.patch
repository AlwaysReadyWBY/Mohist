--- a/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -4,6 +_,7 @@
 import com.mojang.logging.LogUtils;
 import java.io.File;
 import java.nio.file.Files;
+import java.nio.file.LinkOption;
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
 import java.time.LocalDateTime;
@@ -14,8 +_,10 @@
 import net.minecraft.nbt.NbtAccounter;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtUtils;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.entity.player.Player;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.slf4j.Logger;
 
 public class PlayerDataStorage {
@@ -31,6 +_,7 @@
     }
 
     public void save(Player p_78434_) {
+        if (org.spigotmc.SpigotConfig.disablePlayerDataSaving) return; // Spigot
         try {
             CompoundTag compoundtag = p_78434_.saveWithoutId(new CompoundTag());
             Path path = this.playerDir.toPath();
@@ -39,6 +_,7 @@
             Path path2 = path.resolve(p_78434_.getStringUUID() + ".dat");
             Path path3 = path.resolve(p_78434_.getStringUUID() + ".dat_old");
             Util.safeReplaceFile(path2, path1, path3);
+            net.minecraftforge.event.ForgeEventFactory.firePlayerSavingEvent(p_78434_, playerDir, p_78434_.getStringUUID());
         } catch (Exception exception) {
             LOGGER.warn("Failed to save player data for {}", p_78434_.getName().getString());
         }
@@ -57,11 +_,31 @@
         }
     }
 
-    private Optional<CompoundTag> load(Player p_329651_, String p_330353_) {
+    private void backup(String name, String s1, String s) { // name, uuid, extension
+        Path path = this.playerDir.toPath();
+        // String s1 = entityhuman.getStringUUID(); // CraftBukkit - used above
+        Path path1 = path.resolve(s1 + s);
+
+        // s1 = entityhuman.getStringUUID(); // CraftBukkit - used above
+        Path path2 = path.resolve(s1 + "_corrupted_" + LocalDateTime.now().format(PlayerDataStorage.FORMATTER) + s);
+
+        if (Files.isRegularFile(path1, new LinkOption[0])) {
+            try {
+                Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
+            } catch (Exception exception) {
+                PlayerDataStorage.LOGGER.warn("Failed to copy the player.dat file for {}", name, exception); // CraftBukkit
+            }
+
+        }
+    }
+
+    public Optional<CompoundTag> load(Player p_329651_, String p_330353_) {
         File file1 = new File(this.playerDir, p_329651_.getStringUUID() + p_330353_);
         if (file1.exists() && file1.isFile()) {
             try {
-                return Optional.of(NbtIo.readCompressed(file1.toPath(), NbtAccounter.unlimitedHeap()));
+                var ret = Optional.of(NbtIo.readCompressed(file1.toPath(), NbtAccounter.unlimitedHeap()));
+                net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(p_329651_, playerDir, p_329651_.getStringUUID());
+                return ret;
             } catch (Exception exception) {
                 LOGGER.warn("Failed to load player data for {}", p_329651_.getName().getString());
             }
@@ -83,4 +_,66 @@
             return p_328937_;
         });
     }
+
+    public File getPlayerDataFolder() {
+        return playerDir;
+    }
+
+    // CraftBukkit start
+    private Optional<CompoundTag> load(String name, String s1, String s) { // name, uuid, extension
+        // CraftBukkit end
+        File file = this.playerDir;
+        // String s1 = entityhuman.getStringUUID(); // CraftBukkit - used above
+        File file1 = new File(file, s1 + s);
+        // Spigot Start
+        boolean usingWrongFile = false;
+        if (!file1.exists()) {
+            file1 = new File(file, java.util.UUID.nameUUIDFromBytes(("OfflinePlayer:" + name).getBytes(java.nio.charset.StandardCharsets.UTF_8)).toString() + s);
+            if (file1.exists()) {
+                usingWrongFile = true;
+                org.bukkit.Bukkit.getServer().getLogger().warning("Using offline mode UUID file for player " + name + " as it is the only copy we can find.");
+            }
+        }
+        // Spigot End
+
+        if (file1.exists() && file1.isFile()) {
+            try {
+                // Spigot Start
+                Optional<CompoundTag> optional = Optional.of(NbtIo.readCompressed(file1.toPath(), NbtAccounter.unlimitedHeap()));
+                if (usingWrongFile) {
+                    file1.renameTo(new File(file1.getPath() + ".offline-read"));
+                }
+                return optional;
+                // Spigot End
+            } catch (Exception exception) {
+                PlayerDataStorage.LOGGER.warn("Failed to load player data for {}", name); // CraftBukkit
+            }
+        }
+
+        return Optional.empty();
+    }
+
+    public Optional<CompoundTag> load(String name, String uuid) {
+        // CraftBukkit end
+        Optional<CompoundTag> optional = this.load(name, uuid, ".dat"); // CraftBukkit
+
+        if (optional.isEmpty()) {
+            this.backup(name, uuid, ".dat"); // CraftBukkit
+        }
+
+        return optional.or(() -> {
+            return this.load(name, uuid, ".dat_old"); // CraftBukkit
+        }).map((nbttagcompound) -> {
+            int i = NbtUtils.getDataVersion(nbttagcompound, -1);
+
+            nbttagcompound = DataFixTypes.PLAYER.updateToCurrentVersion(this.fixerUpper, nbttagcompound, i);
+            // entityhuman.load(nbttagcompound); // CraftBukkit - handled above
+            return nbttagcompound;
+        });
+    }
+
+    public File getPlayerDir() {
+        return getPlayerDataFolder();
+    }
+    // CraftBukkit end
 }
