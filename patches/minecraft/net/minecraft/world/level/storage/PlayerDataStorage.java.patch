--- a/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -5,17 +_,16 @@
 import java.io.File;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.nio.file.StandardCopyOption;
-import java.time.LocalDateTime;
-import java.time.format.DateTimeFormatter;
-import java.util.Optional;
+import javax.annotation.Nullable;
 import net.minecraft.Util;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtAccounter;
 import net.minecraft.nbt.NbtIo;
 import net.minecraft.nbt.NbtUtils;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.world.entity.player.Player;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.slf4j.Logger;
 
 public class PlayerDataStorage {
@@ -31,6 +_,7 @@
     }
 
     public void save(Player p_78434_) {
+      	if (org.spigotmc.SpigotConfig.disablePlayerDataSaving) return; // Spigot
         try {
             CompoundTag compoundtag = p_78434_.saveWithoutId(new CompoundTag());
             Path path = this.playerDir.toPath();
@@ -39,48 +_,97 @@
             Path path2 = path.resolve(p_78434_.getStringUUID() + ".dat");
             Path path3 = path.resolve(p_78434_.getStringUUID() + ".dat_old");
             Util.safeReplaceFile(path2, path1, path3);
+            net.minecraftforge.event.ForgeEventFactory.firePlayerSavingEvent(p_78434_, playerDir, p_78434_.getStringUUID());
         } catch (Exception exception) {
             LOGGER.warn("Failed to save player data for {}", p_78434_.getName().getString());
         }
     }
 
-    private void backup(Player p_331737_, String p_336359_) {
-        Path path = this.playerDir.toPath();
-        Path path1 = path.resolve(p_331737_.getStringUUID() + p_336359_);
-        Path path2 = path.resolve(p_331737_.getStringUUID() + "_corrupted_" + LocalDateTime.now().format(FORMATTER) + p_336359_);
-        if (Files.isRegularFile(path1)) {
-            try {
-                Files.copy(path1, path2, StandardCopyOption.REPLACE_EXISTING, StandardCopyOption.COPY_ATTRIBUTES);
-            } catch (Exception exception) {
-                LOGGER.warn("Failed to copy the player.dat file for {}", p_331737_.getName().getString(), exception);
-            }
-        }
-    }
-
-    private Optional<CompoundTag> load(Player p_329651_, String p_330353_) {
-        File file1 = new File(this.playerDir, p_329651_.getStringUUID() + p_330353_);
-        if (file1.exists() && file1.isFile()) {
-            try {
-                return Optional.of(NbtIo.readCompressed(file1.toPath(), NbtAccounter.unlimitedHeap()));
-            } catch (Exception exception) {
-                LOGGER.warn("Failed to load player data for {}", p_329651_.getName().getString());
-            }
-        }
-
-        return Optional.empty();
-    }
-
-    public Optional<CompoundTag> load(Player p_78436_) {
-        Optional<CompoundTag> optional = this.load(p_78436_, ".dat");
-        if (optional.isEmpty()) {
-            this.backup(p_78436_, ".dat");
-        }
-
-        return optional.or(() -> this.load(p_78436_, ".dat_old")).map(p_328937_ -> {
-            int i = NbtUtils.getDataVersion(p_328937_, -1);
-            p_328937_ = DataFixTypes.PLAYER.updateToCurrentVersion(this.fixerUpper, p_328937_, i);
-            p_78436_.load(p_328937_);
-            return p_328937_;
-        });
-    }
+   @Nullable
+   public CompoundTag load(Player p_78436_) {
+      CompoundTag compoundtag = null;
+
+      try {
+         File file1 = new File(this.playerDir, p_78436_.getStringUUID() + ".dat");
+         // Spigot Start
+         boolean usingWrongFile = false;
+         if ( !file1.exists() )
+         {
+            file1 = new File( this.playerDir, java.util.UUID.nameUUIDFromBytes( ( "OfflinePlayer:" + p_78436_.getScoreboardName() ).getBytes( "UTF-8" ) ).toString() + ".dat");
+            if ( file1.exists() )
+            {
+               usingWrongFile = true;
+               org.bukkit.Bukkit.getServer().getLogger().warning( "Using offline mode UUID file for player " + p_78436_.getScoreboardName() + " as it is the only copy we can find." );
+            }
+         }
+         // Spigot End
+         if (file1.exists() && file1.isFile()) {
+            compoundtag = NbtIo.readCompressed(file1.toPath(), NbtAccounter.unlimitedHeap());
+         }
+         // Spigot Start
+         if ( usingWrongFile )
+         {
+            file1.renameTo( new File( file1.getPath() + ".offline-read" ) );
+         }
+         // Spigot End
+      } catch (Exception exception) {
+         LOGGER.warn("Failed to load player data for {}", (Object)p_78436_.getName().getString());
+      }
+
+      if (compoundtag != null) {
+         // CraftBukkit start
+         if (p_78436_ instanceof ServerPlayer) {
+            CraftPlayer player = (CraftPlayer) p_78436_.getBukkitEntity();
+            // Only update first played if it is older than the one we have
+            long modified = new File(this.playerDir, p_78436_.getUUID().toString() + ".dat").lastModified();
+            if (modified < player.getFirstPlayed()) {
+               player.setFirstPlayed(modified);
+            }
+         }
+         // CraftBukkit end
+         int i = NbtUtils.getDataVersion(compoundtag, -1);
+         compoundtag = DataFixTypes.PLAYER.updateToCurrentVersion(this.fixerUpper, compoundtag, i);
+         p_78436_.load(compoundtag);
+      }
+      net.minecraftforge.event.ForgeEventFactory.firePlayerLoadingEvent(p_78436_, playerDir, p_78436_.getStringUUID());
+
+      return compoundtag;
+   }
+
+   public String[] getSeenPlayers() {
+      String[] astring = this.playerDir.list();
+      if (astring == null) {
+         astring = new String[0];
+      }
+
+      for(int i = 0; i < astring.length; ++i) {
+         if (astring[i].endsWith(".dat")) {
+            astring[i] = astring[i].substring(0, astring[i].length() - 4);
+         }
+      }
+
+      return astring;
+   }
+
+   public File getPlayerDataFolder() {
+      return playerDir;
+   }
+
+   // CraftBukkit start
+   public CompoundTag getPlayerData(String s) {
+      try {
+         File file1 = new File(this.playerDir, s + ".dat");
+         if (file1.exists()) {
+            return NbtIo.readCompressed(file1.toPath(), NbtAccounter.unlimitedHeap());
+         }
+      } catch (Exception exception) {
+         LOGGER.warn("Failed to load player data for " + s);
+      }
+      return null;
+   }
+
+   public File getPlayerDir() {
+      return getPlayerDataFolder();
+   }
+   // CraftBukkit end
 }
