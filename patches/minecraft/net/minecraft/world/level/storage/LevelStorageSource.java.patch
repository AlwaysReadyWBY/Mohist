--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -20,6 +_,9 @@
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeFormatterBuilder;
+import java.time.format.SignStyle;
+import java.time.temporal.ChronoField;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -83,7 +_,7 @@
     public static final String ALLOWED_SYMLINKS_CONFIG_NAME = "allowed_symlinks.txt";
     private static final int UNCOMPRESSED_NBT_QUOTA = 104857600;
     private static final int DISK_SPACE_WARNING_THRESHOLD = 67108864;
-    public final Path baseDir;
+    private final Path baseDir;
     private final Path backupDir;
     final DataFixer fixerUpper;
     private final DirectoryValidator worldDirValidator;
@@ -144,6 +_,8 @@
         PrimaryLevelData primaryleveldata = PrimaryLevelData.parse(
             dynamic, levelsettings, worlddimensions$complete.specialWorldProperty(), worldgensettings.options(), lifecycle
         );
+      	primaryleveldata.pdc = ((Dynamic<Tag>) dynamic1).getElement("BukkitValues", null); // CraftBukkit - Add PDC to world
+
         return new LevelDataAndDimensions(primaryleveldata, worlddimensions$complete);
     }
 
@@ -351,15 +_,46 @@
         }
     }
 
+    public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException { // CraftBukkit
+        Path path = this.getLevelPath(s);
+        List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
+
+        if (!list.isEmpty()) {
+            throw new ContentValidationException(path, list);
+        } else {
+            return new LevelStorageSource.LevelStorageAccess(s, path, dimensionType); // CraftBukkit
+        }
+    }
+
     public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
         Path path = this.getLevelPath(p_78261_);
         return new LevelStorageSource.LevelStorageAccess(p_78261_, path);
     }
 
+    public LevelStorageSource.LevelStorageAccess createAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException { // CraftBukkit
+        Path path = this.getLevelPath(s);
+
+        return new LevelStorageSource.LevelStorageAccess(s, path, dimensionType); // CraftBukkit
+    }
+
     public DirectoryValidator getWorldDirValidator() {
         return this.worldDirValidator;
     }
 
+    // CraftBukkit start
+    public static Path getStorageFolder(Path path, ResourceKey<LevelStem> dimensionType) {
+        if (dimensionType == LevelStem.OVERWORLD) {
+            return path;
+        } else if (dimensionType == LevelStem.NETHER) {
+            return path.resolve("DIM-1");
+        } else if (dimensionType == LevelStem.END) {
+            return path.resolve("DIM1");
+        } else {
+            return path.resolve("dimensions").resolve(dimensionType.location().getNamespace()).resolve(dimensionType.location().getPath());
+        }
+    }
+    // CraftBukkit end
+
     public static record LevelCandidates(List<LevelStorageSource.LevelDirectory> levels) implements Iterable<LevelStorageSource.LevelDirectory> {
         public boolean isEmpty() {
             return this.levels.isEmpty();
@@ -410,11 +_,22 @@
         final LevelStorageSource.LevelDirectory levelDirectory;
         private final String levelId;
         private final Map<LevelResource, Path> resources = Maps.newHashMap();
+        // CraftBukkit start
+        public final ResourceKey<LevelStem> dimensionType;
 
         LevelStorageAccess(final String p_289967_, final Path p_289988_) throws IOException {
             this.levelId = p_289967_;
             this.levelDirectory = new LevelStorageSource.LevelDirectory(p_289988_);
             this.lock = DirectoryLock.create(p_289988_);
+            this.dimensionType = null;
+        }
+
+        LevelStorageAccess(final String s, final Path path, final ResourceKey<LevelStem> dimensionType) throws IOException {
+            this.dimensionType = dimensionType;
+            // CraftBukkit end
+            this.levelId = s;
+            this.levelDirectory = new LevelStorageSource.LevelDirectory(path);
+            this.lock = DirectoryLock.create(path);
         }
 
         public long estimateDiskSpace() {
@@ -454,7 +_,7 @@
         }
 
         public Path getDimensionPath(ResourceKey<Level> p_197395_) {
-            return DimensionType.getStorageFolder(p_197395_, this.levelDirectory.path());
+            return dimensionType != null ? LevelStorageSource.getStorageFolder(this.levelDirectory.path(), this.dimensionType) : DimensionType.getStorageFolder(p_197395_, this.levelDirectory.path());
         }
 
         private void checkLock() {
@@ -481,6 +_,11 @@
             return this.getDataTag(true);
         }
 
+        public CompoundTag getDataTagRaw(boolean fallback) throws IOException {
+            this.checkLock();
+            return LevelStorageSource.readLevelDataTagRaw(fallback ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile());
+        }
+
         private Dynamic<?> getDataTag(boolean p_310699_) throws IOException {
             this.checkLock();
             return LevelStorageSource.readLevelDataTagFixed(p_310699_ ? this.levelDirectory.oldDataFile() : this.levelDirectory.dataFile(), LevelStorageSource.this.fixerUpper);
@@ -494,6 +_,7 @@
             CompoundTag compoundtag = p_78292_.createTag(p_78291_, p_78293_);
             CompoundTag compoundtag1 = new CompoundTag();
             compoundtag1.put("Data", compoundtag);
+            net.minecraftforge.common.ForgeHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
             this.saveLevelData(compoundtag1);
         }
 
@@ -513,6 +_,10 @@
 
         public Optional<Path> getIconFile() {
             return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+        }
+
+        public Path getWorldDir() {
+            return baseDir;
         }
 
         public void deleteLevel() throws IOException {
