--- a/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -88,7 +_,7 @@
    };
    public static final String ALLOWED_SYMLINKS_CONFIG_NAME = "allowed_symlinks.txt";
    private static final int SUMMARY_UNCOMPRESSED_NBT_QUOTA = 104857600;
-   public final Path baseDir;
+   private final Path baseDir;
    private final Path backupDir;
    final DataFixer fixerUpper;
    private final DirectoryValidator worldDirValidator;
@@ -266,6 +_,7 @@
          WorldDimensions.Complete worlddimensions$complete = worldgensettings.dimensions().bake(p_249363_);
          Lifecycle lifecycle = worlddimensions$complete.lifecycle().add(p_251214_);
          PrimaryLevelData primaryleveldata = PrimaryLevelData.parse(dynamic, p_265021_, i, compoundtag2, levelsettings, levelversion, worlddimensions$complete.specialWorldProperty(), worldgensettings.options(), lifecycle);
+         primaryleveldata.pdc = compoundtag1.get("BukkitValues"); // CraftBukkit - Add PDC to world
          return Pair.of(primaryleveldata, worlddimensions$complete);
       };
    }
@@ -365,11 +_,30 @@
       }
    }
 
+   public LevelStorageSource.LevelStorageAccess validateAndCreateAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException, ContentValidationException { // CraftBukkit
+      Path path = this.getLevelPath(s);
+      List<ForbiddenSymlinkInfo> list = this.worldDirValidator.validateDirectory(path, true);
+
+      if (!list.isEmpty()) {
+         throw new ContentValidationException(path, list);
+      } else {
+         return new LevelStorageSource.LevelStorageAccess(s, path, dimensionType); // CraftBukkit
+      }
+   }
+
    public LevelStorageSource.LevelStorageAccess createAccess(String p_78261_) throws IOException {
       Path path = this.getLevelPath(p_78261_);
       return new LevelStorageSource.LevelStorageAccess(p_78261_, path);
    }
 
+   // CraftBukkit start
+   public LevelStorageSource.LevelStorageAccess createAccess(String s, ResourceKey<LevelStem> dimensionType) throws IOException {
+      Path path = this.getLevelPath(s);
+
+      return new LevelStorageAccess(s, path, dimensionType);
+   }
+   // CraftBukkit end
+
    public DirectoryValidator getWorldDirValidator() {
       return this.worldDirValidator;
    }
@@ -416,15 +_,31 @@
 
    public class LevelStorageAccess implements AutoCloseable {
       final DirectoryLock lock;
-      final LevelStorageSource.LevelDirectory levelDirectory;
+      public final LevelStorageSource.LevelDirectory levelDirectory;
       private final String levelId;
       private final Map<LevelResource, Path> resources = Maps.newHashMap();
+      public ResourceKey<LevelStem> dimensionType;
 
-      LevelStorageAccess(String p_289967_, Path p_289988_) throws IOException {
+      public LevelStorageAccess(String p_289967_, Path p_289988_) throws IOException {
          this.levelId = p_289967_;
          this.levelDirectory = new LevelStorageSource.LevelDirectory(p_289988_);
          this.lock = DirectoryLock.create(p_289988_);
-      }
+         this.dimensionType = null;
+      }
+
+      public LevelStorageAccess(String s, Path path, ResourceKey<LevelStem> dimensionType) throws IOException {
+         this.dimensionType = dimensionType;
+         // CraftBukkit end
+         this.levelId = s;
+         this.levelDirectory = new LevelStorageSource.LevelDirectory(path);
+         this.lock = DirectoryLock.create(path);
+      }
+
+      // Mohist start
+      public void setTypeKey(ResourceKey<LevelStem> dimensionType) {
+         this.dimensionType = dimensionType;
+      }
+      // Mohist end
 
       public LevelStorageSource parent() {
          return LevelStorageSource.this;
@@ -465,6 +_,19 @@
          return LevelStorageSource.this.readLevelData(this.levelDirectory, LevelStorageSource.getLevelData(p_248747_, p_251873_, p_249187_, p_249736_));
       }
 
+      public void readAdditionalLevelSaveData() {
+         checkLock();
+         LevelStorageSource.this.readLevelData(this.levelDirectory, (path, dataFixer) -> {
+            try {
+               CompoundTag compoundTag = NbtIo.readCompressed(path.toFile());
+               net.minecraftforge.common.ForgeHooks.readAdditionalLevelSaveData(compoundTag, this.levelDirectory);
+            } catch (Exception e) {
+                LOGGER.error("Exception reading {}", path, e);
+            }
+            return ""; // Return non-null to prevent level.dat-old inject
+         });
+      }
+
       @Nullable
       public WorldDataConfiguration getDataConfiguration() {
          this.checkLock();
@@ -481,6 +_,8 @@
          CompoundTag compoundtag1 = new CompoundTag();
          compoundtag1.put("Data", compoundtag);
 
+         net.minecraftforge.common.ForgeHooks.writeAdditionalLevelSaveData(p_78292_, compoundtag1);
+
          try {
             File file2 = File.createTempFile("level", ".dat", file1);
             NbtIo.writeCompressed(compoundtag1, file2);
@@ -495,6 +_,10 @@
 
       public Optional<Path> getIconFile() {
          return !this.lock.isValid() ? Optional.empty() : Optional.of(this.levelDirectory.iconFile());
+      }
+
+      public Path getWorldDir() {
+         return baseDir;
       }
 
       public void deleteLevel() throws IOException {
