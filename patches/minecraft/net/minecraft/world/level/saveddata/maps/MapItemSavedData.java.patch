--- a/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -11,6 +_,7 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.UUID;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -41,6 +_,13 @@
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.saveddata.SavedData;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.map.CraftMapView;
+import org.bukkit.craftbukkit.map.RenderData;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.slf4j.Logger;
 
 public class MapItemSavedData extends SavedData {
@@ -49,21 +_,28 @@
     private static final int HALF_MAP_SIZE = 64;
     public static final int MAX_SCALE = 4;
     public static final int TRACKED_DECORATION_LIMIT = 256;
-    public int centerX;
-    public int centerZ;
-    public ResourceKey<Level> dimension;
-    public boolean trackingPosition;
-    public boolean unlimitedTracking;
-    public byte scale;
-    public byte[] colors = new byte[16384];
-    public boolean locked;
-    public final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
-    public final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
-    private final Map<String, MapBanner> bannerMarkers = Maps.newHashMap();
-    public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
+   	public int centerX;
+   	public int centerZ;
+   	public ResourceKey<Level> dimension;
+   	public boolean trackingPosition;
+   	public boolean unlimitedTracking;
+   	public byte scale;
+   	public byte[] colors = new byte[16384];
+   	public boolean locked;
+   	public final List<MapItemSavedData.HoldingPlayer> carriedBy = Lists.newArrayList();
+   	public final Map<Player, MapItemSavedData.HoldingPlayer> carriedByPlayers = Maps.newHashMap();
+   	private final Map<String, MapBanner> bannerMarkers = Maps.newHashMap();
+   	public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
     private final Map<String, MapFrame> frameMarkers = Maps.newHashMap();
     private int trackedDecorationCount;
 
+   // CraftBukkit start
+   public final CraftMapView mapView;
+   private CraftServer server;
+   public UUID uniqueId = null;
+   public MapId id;
+   // CraftBukkit end
+   
     public static SavedData.Factory<MapItemSavedData> factory() {
         return new SavedData.Factory<>(() -> {
             throw new IllegalStateException("Should never create an empty map saved data");
@@ -81,6 +_,11 @@
         this.unlimitedTracking = p_164772_;
         this.locked = p_164773_;
         this.setDirty();
+
+      // CraftBukkit start
+      mapView = new CraftMapView(this);
+      server = (CraftServer) org.bukkit.Bukkit.getServer();
+      // CraftBukkit end
     }
 
     public static MapItemSavedData createFresh(
@@ -377,7 +_,7 @@
         return mapitemsaveddata$holdingplayer == null ? null : mapitemsaveddata$holdingplayer.nextUpdatePacket(p_328547_);
     }
 
-    public void setColorsDirty(int p_164790_, int p_164791_) {
+    private void setColorsDirty(int p_164790_, int p_164791_) {
         this.setDirty();
 
         for (MapItemSavedData.HoldingPlayer mapitemsaveddata$holdingplayer : this.carriedBy) {
@@ -385,7 +_,7 @@
         }
     }
 
-    public void setDecorationsDirty() {
+    private void setDecorationsDirty() {
         this.setDirty();
         this.carriedBy.forEach(MapItemSavedData.HoldingPlayer::markDecorationsDirty);
     }
@@ -547,7 +_,6 @@
             } else {
                 collection = null;
             }
-
             return collection == null && mapitemsaveddata$mappatch == null
                 ? null
                 : new ClientboundMapItemDataPacket(
