--- a/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -17,6 +_,7 @@
 import java.util.Queue;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -27,6 +_,9 @@
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.storage.EntityStorage;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRemoveEvent;
 import org.slf4j.Logger;
 
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
@@ -52,6 +_,16 @@
         this.entityGetter = new LevelEntityGetterAdapter<>(this.visibleEntityStorage, this.sectionStorage);
     }
 
+    // CraftBukkit start - add method to get all entities in chunk
+    public List<Entity> getEntities(ChunkPos chunkPos) {
+        return sectionStorage.getExistingSectionsInChunk(chunkPos.toLong()).flatMap(EntitySection::getEntities).map(entity -> (Entity) entity).collect(Collectors.toList());
+    }
+
+    public boolean isPending(long pair) {
+        return chunkLoadStatuses.get(pair) == ChunkLoadStatus.PENDING;
+    }
+    // CraftBukkit end
+
     void removeSectionIfEmpty(long p_157510_, EntitySection<T> p_157511_) {
         if (p_157511_.isEmpty()) {
             this.sectionStorage.remove(p_157510_);
@@ -71,7 +_,18 @@
         return this.addEntity(p_157534_, false);
     }
 
+    public boolean addNewEntityWithoutEvent(T entity) {
+        return this.addEntityWithoutEvent(entity, false);
+    }
+
     private boolean addEntity(T p_157539_, boolean p_157540_) {
+        if (p_157539_ instanceof Entity entity && net.minecraftforge.event.ForgeEventFactory.onEntityJoinLevel(entity, entity.level(), p_157540_)) {
+            return false;
+        }
+        return addEntityWithoutEvent(p_157539_, p_157540_);
+    }
+
+    private boolean addEntityWithoutEvent(T p_157539_, boolean p_157540_) {
         if (!this.addEntityUuid(p_157539_)) {
             return false;
         } else {
@@ -92,6 +_,10 @@
                 this.startTicking(p_157539_);
             }
 
+            if (p_157539_ instanceof Entity entity) {
+                entity.onAddedToWorld();
+            }
+
             return true;
         }
     }
@@ -101,11 +_,11 @@
     }
 
     public void addLegacyChunkEntities(Stream<T> p_157553_) {
-        p_157553_.forEach(p_157607_ -> this.addEntity((T)p_157607_, true));
+        p_157553_.forEach(p_157607_ -> this.addEntity((T) p_157607_, true));
     }
 
     public void addWorldGenChunkEntities(Stream<T> p_157560_) {
-        p_157560_.forEach(p_157605_ -> this.addEntity((T)p_157605_, false));
+        p_157560_.forEach(p_157605_ -> this.addEntity((T) p_157605_, false));
     }
 
     void startTicking(T p_157565_) {
@@ -171,17 +_,28 @@
         }
     }
 
+    // Mohist start
+    private final AtomicBoolean callEvent = new AtomicBoolean(false);
+
+    private boolean storeChunkSections(long i, Consumer<T> consumer, boolean callEvent) {
+        this.callEvent.set(callEvent);
+        return storeChunkSections(i, consumer);
+    }
+    // Mohist end
+
     private boolean storeChunkSections(long p_157513_, Consumer<T> p_157514_) {
+        boolean callEvent = this.callEvent.getAndSet(false);
         PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157513_);
         if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.PENDING) {
             return false;
         } else {
-            List<T> list = this.sectionStorage
-                .getExistingSectionsInChunk(p_157513_)
-                .flatMap(p_157542_ -> p_157542_.getEntities().filter(EntityAccess::shouldBeSaved))
-                .collect(Collectors.toList());
+            List<T> list = this.sectionStorage.getExistingSectionsInChunk(p_157513_).flatMap((p_157542_) -> {
+                return p_157542_.getEntities().filter(EntityAccess::shouldBeSaved);
+            }).collect(Collectors.toList());
             if (list.isEmpty()) {
                 if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
+                    if (callEvent)
+                        CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), ImmutableList.of()); // CraftBukkit
                     this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), ImmutableList.of()));
                 }
 
@@ -190,6 +_,8 @@
                 this.requestChunkLoad(p_157513_);
                 return false;
             } else {
+                if (callEvent)
+                    CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
                 this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), list));
                 list.forEach(p_157514_);
                 return true;
@@ -207,7 +_,10 @@
     }
 
     private boolean processChunkUnload(long p_157569_) {
-        boolean flag = this.storeChunkSections(p_157569_, p_157595_ -> p_157595_.getPassengersAndSelf().forEach(this::unloadEntity));
+        this.callEvent.set(true); // Mohist
+        boolean flag = this.storeChunkSections(p_157569_, (p_157595_) -> {
+            p_157595_.getPassengersAndSelf().forEach(this::unloadEntity);
+        });
         if (!flag) {
             return false;
         } else {
@@ -217,7 +_,7 @@
     }
 
     private void unloadEntity(EntityAccess p_157586_) {
-        p_157586_.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
+        p_157586_.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK, EntityRemoveEvent.Cause.UNLOAD); // CraftBukkit - add Bukkit remove cause
         p_157586_.setLevelCallback(EntityInLevelCallback.NULL);
     }
 
@@ -228,8 +_,12 @@
     private void processPendingLoads() {
         ChunkEntities<T> chunkentities;
         while ((chunkentities = this.loadingInbox.poll()) != null) {
-            chunkentities.getEntities().forEach(p_157593_ -> this.addEntity((T)p_157593_, true));
+            chunkentities.getEntities().forEach(p_157593_ -> this.addEntity((T) p_157593_, true));
             this.chunkLoadStatuses.put(chunkentities.getPos().toLong(), PersistentEntitySectionManager.ChunkLoadStatus.LOADED);
+            // CraftBukkit start - call entity load event
+            List<Entity> entities = getEntities(chunkentities.getPos());
+            CraftEventFactory.callEntitiesLoadEvent(((EntityStorage) permanentStorage).level, chunkentities.getPos(), entities);
+            // CraftBukkit end
         }
     }
 
@@ -284,6 +_,15 @@
         this.permanentStorage.close();
     }
 
+    // CraftBukkit start - add save boolean
+    public void close(boolean save) throws IOException {
+        if (save) {
+            this.saveAll();
+        }
+        // CraftBukkit end
+        this.permanentStorage.close();
+    }
+
     public boolean isLoaded(UUID p_157551_) {
         return this.knownUuids.contains(p_157551_);
     }
@@ -306,58 +_,58 @@
 
     public void dumpSections(Writer p_157549_) throws IOException {
         CsvOutput csvoutput = CsvOutput.builder()
-            .addColumn("x")
-            .addColumn("y")
-            .addColumn("z")
-            .addColumn("visibility")
-            .addColumn("load_status")
-            .addColumn("entity_count")
-            .build(p_157549_);
+                .addColumn("x")
+                .addColumn("y")
+                .addColumn("z")
+                .addColumn("visibility")
+                .addColumn("load_status")
+                .addColumn("entity_count")
+                .build(p_157549_);
         this.sectionStorage
-            .getAllChunksWithExistingSections()
-            .forEach(
-                (long p_157517_) -> {
-                    PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157517_);
-                    this.sectionStorage
-                        .getExistingSectionPositionsInChunk(p_157517_)
-                        .forEach(
-                            (long p_157521_) -> {
-                                EntitySection<T> entitysection = this.sectionStorage.getSection(p_157521_);
-                                if (entitysection != null) {
-                                    try {
-                                        csvoutput.writeRow(
-                                            SectionPos.x(p_157521_),
-                                            SectionPos.y(p_157521_),
-                                            SectionPos.z(p_157521_),
-                                            entitysection.getStatus(),
-                                            persistententitysectionmanager$chunkloadstatus,
-                                            entitysection.size()
-                                        );
-                                    } catch (IOException ioexception) {
-                                        throw new UncheckedIOException(ioexception);
-                                    }
-                                }
-                            }
-                        );
-                }
-            );
+                .getAllChunksWithExistingSections()
+                .forEach(
+                        (long p_157517_) -> {
+                            PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157517_);
+                            this.sectionStorage
+                                    .getExistingSectionPositionsInChunk(p_157517_)
+                                    .forEach(
+                                            (long p_157521_) -> {
+                                                EntitySection<T> entitysection = this.sectionStorage.getSection(p_157521_);
+                                                if (entitysection != null) {
+                                                    try {
+                                                        csvoutput.writeRow(
+                                                                SectionPos.x(p_157521_),
+                                                                SectionPos.y(p_157521_),
+                                                                SectionPos.z(p_157521_),
+                                                                entitysection.getStatus(),
+                                                                persistententitysectionmanager$chunkloadstatus,
+                                                                entitysection.size()
+                                                        );
+                                                    } catch (IOException ioexception) {
+                                                        throw new UncheckedIOException(ioexception);
+                                                    }
+                                                }
+                                            }
+                                    );
+                        }
+                );
     }
 
     @VisibleForDebug
     public String gatherStats() {
         return this.knownUuids.size()
-            + ","
-            + this.visibleEntityStorage.count()
-            + ","
-            + this.sectionStorage.count()
-            + ","
-            + this.chunkLoadStatuses.size()
-            + ","
-            + this.chunkVisibility.size()
-            + ","
-            + this.loadingInbox.size()
-            + ","
-            + this.chunksToUnload.size();
+                + ","
+                + this.visibleEntityStorage.count()
+                + ","
+                + this.sectionStorage.count()
+                + ","
+                + this.chunkLoadStatuses.size()
+                + ","
+                + this.chunkVisibility.size()
+                + ","
+                + this.loadingInbox.size()
+                + ","
+                + this.chunksToUnload.size();
     }
 
     @VisibleForDebug
@@ -367,11 +_,13 @@
 
     class Callback implements EntityInLevelCallback {
         private final T entity;
+        private final Entity realEntity;
         private long currentSectionKey;
         private EntitySection<T> currentSection;
 
         Callback(final T p_157614_, final long p_157615_, final EntitySection<T> p_157616_) {
             this.entity = p_157614_;
+            this.realEntity = p_157614_ instanceof Entity e ? e : null;
             this.currentSectionKey = p_157615_;
             this.currentSection = p_157616_;
         }
@@ -384,15 +_,19 @@
                 Visibility visibility = this.currentSection.getStatus();
                 if (!this.currentSection.remove(this.entity)) {
                     PersistentEntitySectionManager.LOGGER
-                        .warn("Entity {} wasn't found in section {} (moving to {})", this.entity, SectionPos.of(this.currentSectionKey), i);
+                            .warn("Entity {} wasn't found in section {} (moving to {})", this.entity, SectionPos.of(this.currentSectionKey), i);
                 }
 
                 PersistentEntitySectionManager.this.removeSectionIfEmpty(this.currentSectionKey, this.currentSection);
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.getOrCreateSection(i);
                 entitysection.add(this.entity);
+                long oldSectionKey = currentSectionKey;
                 this.currentSection = entitysection;
                 this.currentSectionKey = i;
                 this.updateStatus(visibility, entitysection.getStatus());
+                if (this.realEntity != null) {
+                    net.minecraftforge.event.ForgeEventFactory.onEntityEnterSection(this.realEntity, oldSectionKey, i);
+                }
             }
         }
 
@@ -430,7 +_,7 @@
         public void onRemove(Entity.RemovalReason p_157619_) {
             if (!this.currentSection.remove(this.entity)) {
                 PersistentEntitySectionManager.LOGGER
-                    .warn("Entity {} wasn't found in section {} (destroying due to {})", this.entity, SectionPos.of(this.currentSectionKey), p_157619_);
+                        .warn("Entity {} wasn't found in section {} (destroying due to {})", this.entity, SectionPos.of(this.currentSectionKey), p_157619_);
             }
 
             Visibility visibility = PersistentEntitySectionManager.getEffectiveStatus(this.entity, this.currentSection.getStatus());
