--- a/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -16,6 +_,7 @@
 import java.util.Queue;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -26,6 +_,8 @@
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.storage.EntityStorage;
+import org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory;
 import org.slf4j.Logger;
 
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
@@ -51,6 +_,16 @@
       this.entityGetter = new LevelEntityGetterAdapter<>(this.visibleEntityStorage, this.sectionStorage);
    }
 
+   // CraftBukkit start - add method to get all entities in chunk
+   public List<Entity> getEntities(ChunkPos chunkPos) {
+      return sectionStorage.getExistingSectionsInChunk(chunkPos.toLong()).flatMap(EntitySection::getEntities).map(entity -> (Entity) entity).collect(Collectors.toList());
+   }
+
+   public boolean isPending(long pair) {
+      return chunkLoadStatuses.get(pair) == ChunkLoadStatus.PENDING;
+   }
+   // CraftBukkit end
+
    void removeSectionIfEmpty(long p_157510_, EntitySection<T> p_157511_) {
       if (p_157511_.isEmpty()) {
          this.sectionStorage.remove(p_157510_);
@@ -71,7 +_,16 @@
       return this.addEntity(p_157534_, false);
    }
 
+   public boolean addNewEntityWithoutEvent(T entity) {
+      return this.addEntityWithoutEvent(entity, false);
+   }
+
    private boolean addEntity(T p_157539_, boolean p_157540_) {
+      if (p_157539_ instanceof Entity entity && net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinLevelEvent(entity, entity.level(), p_157540_))) return false;
+      return addEntityWithoutEvent(p_157539_, p_157540_);
+   }
+
+   private boolean addEntityWithoutEvent(T p_157539_, boolean p_157540_) {
       if (!this.addEntityUuid(p_157539_)) {
          return false;
       } else {
@@ -103,12 +_,14 @@
    public void addLegacyChunkEntities(Stream<T> p_157553_) {
       p_157553_.forEach((p_157607_) -> {
          this.addEntity(p_157607_, true);
+         if (p_157607_ instanceof Entity entity) entity.onAddedToWorld();
       });
    }
 
    public void addWorldGenChunkEntities(Stream<T> p_157560_) {
       p_157560_.forEach((p_157605_) -> {
          this.addEntity(p_157605_, false);
+         if (p_157605_ instanceof Entity entity) entity.onAddedToWorld();
       });
    }
 
@@ -185,7 +_,16 @@
 
    }
 
+   // Mohist start
+   private AtomicBoolean callEvent = new AtomicBoolean(false);
+   private boolean storeChunkSections(long i, Consumer<T> consumer, boolean callEvent) {
+      this.callEvent.set(callEvent);
+      return storeChunkSections(i, consumer);
+   }
+   // Mohist end
+
    private boolean storeChunkSections(long p_157513_, Consumer<T> p_157514_) {
+      boolean callEvent = this.callEvent.getAndSet(false);
       PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157513_);
       if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.PENDING) {
          return false;
@@ -195,6 +_,7 @@
          }).collect(Collectors.toList());
          if (list.isEmpty()) {
             if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
+               if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), ImmutableList.of()); // CraftBukkit
                this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), ImmutableList.of()));
             }
 
@@ -203,6 +_,7 @@
             this.requestChunkLoad(p_157513_);
             return false;
          } else {
+            if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
             this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), list));
             list.forEach(p_157514_);
             return true;
@@ -220,6 +_,7 @@
    }
 
    private boolean processChunkUnload(long p_157569_) {
+      this.callEvent.set(true); // Mohist
       boolean flag = this.storeChunkSections(p_157569_, (p_157595_) -> {
          p_157595_.getPassengersAndSelf().forEach(this::unloadEntity);
       });
@@ -237,9 +_,12 @@
    }
 
    private void processUnloads() {
-      this.chunksToUnload.removeIf((long p_157584_) -> {
-         return this.chunkVisibility.get(p_157584_) != Visibility.HIDDEN ? true : this.processChunkUnload(p_157584_);
-      });
+      try {
+         this.chunksToUnload.removeIf((long p_157584_) -> {
+            return this.chunkVisibility.get(p_157584_) != Visibility.HIDDEN ? true : this.processChunkUnload(p_157584_);
+         });
+      } catch (Exception ignored) {
+      }
    }
 
    private void processPendingLoads() {
@@ -247,8 +_,13 @@
       while((chunkentities = this.loadingInbox.poll()) != null) {
          chunkentities.getEntities().forEach((p_157593_) -> {
             this.addEntity(p_157593_, true);
+            if (p_157593_ instanceof Entity entity) entity.onAddedToWorld();
          });
          this.chunkLoadStatuses.put(chunkentities.getPos().toLong(), PersistentEntitySectionManager.ChunkLoadStatus.LOADED);
+         // CraftBukkit start - call entity load event
+         List<Entity> entities = getEntities(chunkentities.getPos());
+         CraftEventFactory.callEntitiesLoadEvent(((EntityStorage) permanentStorage).level, chunkentities.getPos(), entities);
+         // CraftBukkit end
       }
 
    }
@@ -304,6 +_,15 @@
       this.permanentStorage.close();
    }
 
+   // CraftBukkit start - add save boolean
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.saveAll();
+      }
+      // CraftBukkit end
+      this.permanentStorage.close();
+   }
+
    public boolean isLoaded(UUID p_157551_) {
       return this.knownUuids.contains(p_157551_);
    }
@@ -349,11 +_,13 @@
 
    class Callback implements EntityInLevelCallback {
       private final T entity;
+      private final Entity realEntity;
       private long currentSectionKey;
       private EntitySection<T> currentSection;
 
       Callback(T p_157614_, long p_157615_, EntitySection<T> p_157616_) {
          this.entity = p_157614_;
+         this.realEntity = p_157614_ instanceof Entity ? (Entity) p_157614_ : null;
          this.currentSectionKey = p_157615_;
          this.currentSection = p_157616_;
       }
@@ -370,9 +_,11 @@
             PersistentEntitySectionManager.this.removeSectionIfEmpty(this.currentSectionKey, this.currentSection);
             EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.getOrCreateSection(i);
             entitysection.add(this.entity);
+            long oldSectionKey = currentSectionKey;
             this.currentSection = entitysection;
             this.currentSectionKey = i;
             this.updateStatus(visibility, entitysection.getStatus());
+            if (this.realEntity != null) net.minecraftforge.event.ForgeEventFactory.onEntityEnterSection(this.realEntity, oldSectionKey, i);
          }
 
       }
