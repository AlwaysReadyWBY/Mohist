--- a/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -17,6 +_,7 @@
 import java.util.Queue;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
@@ -27,13 +_,15 @@
 import net.minecraft.util.VisibleForDebug;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.storage.EntityStorage;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.slf4j.Logger;
 
 public class PersistentEntitySectionManager<T extends EntityAccess> implements AutoCloseable {
     static final Logger LOGGER = LogUtils.getLogger();
     final Set<UUID> knownUuids = Sets.newHashSet();
     final LevelCallback<T> callbacks;
-    public final EntityPersistentStorage<T> permanentStorage;
+   	public final EntityPersistentStorage<T> permanentStorage;
     private final EntityLookup<T> visibleEntityStorage;
     final EntitySectionStorage<T> sectionStorage;
     private final LevelEntityGetter<T> entityGetter;
@@ -52,6 +_,16 @@
         this.entityGetter = new LevelEntityGetterAdapter<>(this.visibleEntityStorage, this.sectionStorage);
     }
 
+   // CraftBukkit start - add method to get all entities in chunk
+   public List<Entity> getEntities(ChunkPos chunkPos) {
+      return sectionStorage.getExistingSectionsInChunk(chunkPos.toLong()).flatMap(EntitySection::getEntities).map(entity -> (Entity) entity).collect(Collectors.toList());
+   }
+
+   public boolean isPending(long pair) {
+      return chunkLoadStatuses.get(pair) == ChunkLoadStatus.PENDING;
+   }
+   // CraftBukkit end
+
     void removeSectionIfEmpty(long p_157510_, EntitySection<T> p_157511_) {
         if (p_157511_.isEmpty()) {
             this.sectionStorage.remove(p_157510_);
@@ -71,7 +_,18 @@
         return this.addEntity(p_157534_, false);
     }
 
+    public boolean addNewEntityWithoutEvent(T entity) {
+       return this.addEntityWithoutEvent(entity, false);
+    }
+
     private boolean addEntity(T p_157539_, boolean p_157540_) {
+        if (p_157539_ instanceof Entity entity && net.minecraftforge.event.ForgeEventFactory.onEntityJoinLevel(entity, entity.level(), p_157540_)) {
+            return false;
+        }
+        return addEntityWithoutEvent(p_157539_, p_157540_);
+    }
+
+    private boolean addEntityWithoutEvent(T p_157539_, boolean p_157540_) {
         if (!this.addEntityUuid(p_157539_)) {
             return false;
         } else {
@@ -92,6 +_,10 @@
                 this.startTicking(p_157539_);
             }
 
+            if (p_157539_ instanceof Entity entity) {
+                entity.onAddedToWorld();
+            }
+
             return true;
         }
     }
@@ -164,38 +_,48 @@
         });
     }
 
-    public void ensureChunkQueuedForLoad(long p_157556_) {
+    private void ensureChunkQueuedForLoad(long p_157556_) {
         PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157556_);
         if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.FRESH) {
             this.requestChunkLoad(p_157556_);
         }
     }
 
-    private boolean storeChunkSections(long p_157513_, Consumer<T> p_157514_) {
-        PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157513_);
-        if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.PENDING) {
-            return false;
-        } else {
-            List<T> list = this.sectionStorage
-                .getExistingSectionsInChunk(p_157513_)
-                .flatMap(p_157542_ -> p_157542_.getEntities().filter(EntityAccess::shouldBeSaved))
-                .collect(Collectors.toList());
-            if (list.isEmpty()) {
-                if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
-                    this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), ImmutableList.of()));
-                }
+   // Mohist start
+   private AtomicBoolean callEvent = new AtomicBoolean(false);
+   private boolean storeChunkSections(long i, Consumer<T> consumer, boolean callEvent) {
+      this.callEvent.set(callEvent);
+      return storeChunkSections(i, consumer);
+   }
+   // Mohist end
 
-                return true;
-            } else if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.FRESH) {
-                this.requestChunkLoad(p_157513_);
-                return false;
-            } else {
-                this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), list));
-                list.forEach(p_157514_);
-                return true;
+   private boolean storeChunkSections(long p_157513_, Consumer<T> p_157514_) {
+      boolean callEvent = this.callEvent.getAndSet(false);
+      PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager$chunkloadstatus = this.chunkLoadStatuses.get(p_157513_);
+      if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.PENDING) {
+         return false;
+      } else {
+         List<T> list = this.sectionStorage.getExistingSectionsInChunk(p_157513_).flatMap((p_157542_) -> {
+            return p_157542_.getEntities().filter(EntityAccess::shouldBeSaved);
+         }).collect(Collectors.toList());
+         if (list.isEmpty()) {
+            if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.LOADED) {
+               if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), ImmutableList.of()); // CraftBukkit
+               this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), ImmutableList.of()));
             }
-        }
-    }
+
+            return true;
+         } else if (persistententitysectionmanager$chunkloadstatus == PersistentEntitySectionManager.ChunkLoadStatus.FRESH) {
+            this.requestChunkLoad(p_157513_);
+            return false;
+         } else {
+            if (callEvent) CraftEventFactory.callEntitiesUnloadEvent(((EntityStorage) permanentStorage).level, new ChunkPos(p_157513_), list.stream().map(entity -> (Entity) entity).collect(Collectors.toList())); // CraftBukkit
+            this.permanentStorage.storeEntities(new ChunkEntities<>(new ChunkPos(p_157513_), list));
+            list.forEach(p_157514_);
+            return true;
+         }
+      }
+   }
 
     private void requestChunkLoad(long p_157563_) {
         this.chunkLoadStatuses.put(p_157563_, PersistentEntitySectionManager.ChunkLoadStatus.PENDING);
@@ -206,15 +_,18 @@
         });
     }
 
-    private boolean processChunkUnload(long p_157569_) {
-        boolean flag = this.storeChunkSections(p_157569_, p_157595_ -> p_157595_.getPassengersAndSelf().forEach(this::unloadEntity));
-        if (!flag) {
-            return false;
-        } else {
-            this.chunkLoadStatuses.remove(p_157569_);
-            return true;
-        }
-    }
+   private boolean processChunkUnload(long p_157569_) {
+      this.callEvent.set(true); // Mohist
+      boolean flag = this.storeChunkSections(p_157569_, (p_157595_) -> {
+         p_157595_.getPassengersAndSelf().forEach(this::unloadEntity);
+      });
+      if (!flag) {
+         return false;
+      } else {
+         this.chunkLoadStatuses.remove(p_157569_);
+         return true;
+      }
+   }
 
     private void unloadEntity(EntityAccess p_157586_) {
         p_157586_.setRemoved(Entity.RemovalReason.UNLOADED_TO_CHUNK);
@@ -225,13 +_,17 @@
         this.chunksToUnload.removeIf((long p_157584_) -> this.chunkVisibility.get(p_157584_) != Visibility.HIDDEN ? true : this.processChunkUnload(p_157584_));
     }
 
-    private void processPendingLoads() {
-        ChunkEntities<T> chunkentities;
-        while ((chunkentities = this.loadingInbox.poll()) != null) {
+   private void processPendingLoads() {
+      ChunkEntities<T> chunkentities;
+      while((chunkentities = this.loadingInbox.poll()) != null) {
             chunkentities.getEntities().forEach(p_157593_ -> this.addEntity((T)p_157593_, true));
             this.chunkLoadStatuses.put(chunkentities.getPos().toLong(), PersistentEntitySectionManager.ChunkLoadStatus.LOADED);
-        }
-    }
+         	// CraftBukkit start - call entity load event
+         	List<Entity> entities = getEntities(chunkentities.getPos());
+         	CraftEventFactory.callEntitiesLoadEvent(((EntityStorage) permanentStorage).level, chunkentities.getPos(), entities);
+         	// CraftBukkit end
+      	}
+   }
 
     public void tick() {
         this.processPendingLoads();
@@ -281,6 +_,15 @@
     @Override
     public void close() throws IOException {
         this.saveAll();
+      this.permanentStorage.close();
+   }
+
+   // CraftBukkit start - add save boolean
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.saveAll();
+      }
+      // CraftBukkit end
         this.permanentStorage.close();
     }
 
@@ -367,11 +_,13 @@
 
     class Callback implements EntityInLevelCallback {
         private final T entity;
+        private final Entity realEntity;
         private long currentSectionKey;
         private EntitySection<T> currentSection;
 
         Callback(final T p_157614_, final long p_157615_, final EntitySection<T> p_157616_) {
             this.entity = p_157614_;
+            this.realEntity = p_157614_ instanceof Entity e ? e : null;
             this.currentSectionKey = p_157615_;
             this.currentSection = p_157616_;
         }
@@ -390,9 +_,13 @@
                 PersistentEntitySectionManager.this.removeSectionIfEmpty(this.currentSectionKey, this.currentSection);
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.getOrCreateSection(i);
                 entitysection.add(this.entity);
+                long oldSectionKey = currentSectionKey;
                 this.currentSection = entitysection;
                 this.currentSectionKey = i;
                 this.updateStatus(visibility, entitysection.getStatus());
+                if (this.realEntity != null) {
+                    net.minecraftforge.event.ForgeEventFactory.onEntityEnterSection(this.realEntity, oldSectionKey, i);
+                }
             }
         }
 
