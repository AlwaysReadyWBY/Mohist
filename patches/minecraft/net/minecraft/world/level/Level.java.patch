--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -1,10 +_,13 @@
 package net.minecraft.world.level;
 
 import com.google.common.collect.Lists;
+import com.mohistmc.mohist.forge.ForgeInjectBukkit;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -21,7 +_,13 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
@@ -41,6 +_,7 @@
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.alchemy.PotionBrewing;
@@ -54,11 +_,13 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelEntityGetter;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -75,8 +_,17 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Scoreboard;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CapturedBlockState;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.util.CraftSpawnCategory;
+import org.bukkit.entity.SpawnCategory;
+import org.bukkit.event.block.BlockPhysicsEvent;
 
-public abstract class Level implements LevelAccessor, AutoCloseable {
+public abstract class Level extends net.minecraftforge.common.capabilities.CapabilityProvider<Level> implements LevelAccessor, AutoCloseable, net.minecraftforge.common.extensions.IForgeLevel {
     public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
     public static final ResourceKey<Level> OVERWORLD = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("overworld"));
     public static final ResourceKey<Level> NETHER = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("the_nether"));
@@ -105,29 +_,68 @@
     @Deprecated
     private final RandomSource threadSafeRandom = RandomSource.createThreadSafe();
     private final Holder<DimensionType> dimensionTypeRegistration;
-    protected final WritableLevelData levelData;
+    public final WritableLevelData levelData;
     private final Supplier<ProfilerFiller> profiler;
     public final boolean isClientSide;
     private final WorldBorder worldBorder;
     private final BiomeManager biomeManager;
-    private final ResourceKey<Level> dimension;
+    protected final ResourceKey<Level> dimension;
     private final RegistryAccess registryAccess;
     private final DamageSources damageSources;
     private long subTickCount;
-
-    protected Level(
-        WritableLevelData p_270739_,
-        ResourceKey<Level> p_270683_,
-        RegistryAccess p_270200_,
-        Holder<DimensionType> p_270240_,
-        Supplier<ProfilerFiller> p_270692_,
-        boolean p_270904_,
-        boolean p_270470_,
-        long p_270248_,
-        int p_270466_
-    ) {
+    public boolean restoringBlockSnapshots = false;
+    public boolean captureBlockSnapshots = false;
+    public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<>();
+    private final java.util.ArrayList<BlockEntity> freshBlockEntities = new java.util.ArrayList<>();
+    private final java.util.ArrayList<BlockEntity> pendingFreshBlockEntities = new java.util.ArrayList<>();
+
+    // CraftBukkit start Added the following
+    public CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = true;
+    public static org.bukkit.generator.ChunkGenerator generator;
+    public static org.bukkit.World.Environment environment;
+    public static org.bukkit.generator.BiomeProvider biomeProvider;
+
+    public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
+    public boolean captureBlockStates = false;
+    public boolean captureTreeGeneration = false;
+    public Map<BlockPos, CapturedBlockState> capturedBlockStates = new java.util.LinkedHashMap<>();
+    public Map<BlockPos, BlockEntity> capturedTileEntities = new HashMap<>();
+    public List<ItemEntity> captureDrops;
+    public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
+    public boolean populating;
+    public org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+    public static BlockPos lastPhysicsProblem; // Spigot
+
+    public CraftWorld getWorld() {
+        return this.world;
+    }
+
+    public CraftServer getCraftServer() {
+        return (CraftServer) Bukkit.getServer();
+    }
+
+    public ResourceKey<LevelStem> getTypeKey() {
+        return Registries.levelToLevelStem(dimension);
+    }
+
+    public static void craftWorldData(org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env, org.bukkit.generator.BiomeProvider bp) {
+        generator = gen;
+        environment = env;
+        biomeProvider = bp;
+    }
+
+    protected Level(WritableLevelData p_270739_, ResourceKey<Level> p_270683_, RegistryAccess p_270200_, Holder<DimensionType> p_270240_, Supplier<ProfilerFiller> p_270692_, boolean p_270904_, boolean p_270470_, long p_270248_, int p_270466_) {
+        super(Level.class);
         this.profiler = p_270692_;
         this.levelData = p_270739_;
+        // CraftBukkit Ticks things
+        for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+            if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+                this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+            }
+        }
         this.dimensionTypeRegistration = p_270240_;
         final DimensionType dimensiontype = p_270240_.value();
         this.dimension = p_270683_;
@@ -136,12 +_,12 @@
             this.worldBorder = new WorldBorder() {
                 @Override
                 public double getCenterX() {
-                    return super.getCenterX() / dimensiontype.coordinateScale();
+                    return super.getCenterX(); // CraftBukkit
                 }
 
                 @Override
                 public double getCenterZ() {
-                    return super.getCenterZ() / dimensiontype.coordinateScale();
+                    return super.getCenterZ(); // CraftBukkit
                 }
             };
         } else {
@@ -154,9 +_,50 @@
         this.neighborUpdater = new CollectingNeighborUpdater(this, p_270466_);
         this.registryAccess = p_270200_;
         this.damageSources = new DamageSources(p_270200_);
+        // CraftBukkit start
+        if (environment == null) {
+            environment = ForgeInjectBukkit.environment.get(getTypeKey());
+        }
+        getWorldBorder().world = this;
+        // From PlayerList.setPlayerFileData
+        getWorldBorder().addListener(new BorderChangeListener() {
+
+            @Override
+            public void onBorderSizeSet(WorldBorder pBorder, double pSize) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderSizePacket(pBorder), pBorder.world.dimension());
+            }
+
+            @Override
+            public void onBorderSizeLerping(WorldBorder pBorder, double pOldSize, double pNewSize, long pTime) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderLerpSizePacket(pBorder), pBorder.world.dimension());
+            }
+
+            @Override
+            public void onBorderCenterSet(WorldBorder pBorder, double pX, double pZ) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderCenterPacket(pBorder), pBorder.world.dimension());
+            }
+
+            @Override
+            public void onBorderSetWarningTime(WorldBorder pBorder, int pWarningTime) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDelayPacket(pBorder), pBorder.world.dimension());
+            }
+
+            @Override
+            public void onBorderSetWarningBlocks(WorldBorder pBorder, int pWarningBlocks) {
+                getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDistancePacket(pBorder), pBorder.world.dimension());
+            }
+
+            @Override
+            public void onBorderSetDamagePerBlock(WorldBorder pBorder, double pDamagePerBlock) {
+            }
+
+            @Override
+            public void onBorderSetDamageSafeZOne(WorldBorder pBorder, double pDamageSafeZone) {
+            }
+        });
+        // CraftBukkit end
     }
 
-    @Override
     public boolean isClientSide() {
         return this.isClientSide;
     }
@@ -188,7 +_,7 @@
     }
 
     public LevelChunk getChunk(int p_46727_, int p_46728_) {
-        return (LevelChunk)this.getChunk(p_46727_, p_46728_, ChunkStatus.FULL);
+        return (LevelChunk) this.getChunk(p_46727_, p_46728_, ChunkStatus.FULL);
     }
 
     @Nullable
@@ -209,6 +_,18 @@
 
     @Override
     public boolean setBlock(BlockPos p_46605_, BlockState p_46606_, int p_46607_, int p_46608_) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            CapturedBlockState blockstate = capturedBlockStates.get(p_46605_);
+            if (blockstate == null) {
+                blockstate = CapturedBlockState.getTreeBlockState(this, p_46605_, p_46607_);
+                this.capturedBlockStates.put(p_46605_.immutable(), blockstate);
+            }
+            blockstate.setData(p_46606_);
+            blockstate.setFlag(p_46607_);
+            return true;
+        }
+        // CraftBukkit end
         if (this.isOutsideBuildHeight(p_46605_)) {
             return false;
         } else if (!this.isClientSide && this.isDebug()) {
@@ -216,11 +_,55 @@
         } else {
             LevelChunk levelchunk = this.getChunkAt(p_46605_);
             Block block = p_46606_.getBlock();
+
+            // CraftBukkit start - capture blockstates
+            boolean captured = false;
+            if (this.captureBlockStates && !this.capturedBlockStates.containsKey(p_46605_)) {
+                CapturedBlockState blockstate = CapturedBlockState.getBlockState(this, p_46605_, p_46607_);
+                this.capturedBlockStates.put(p_46605_.immutable(), blockstate);
+                captured = true;
+            }
+            // CraftBukkit end
+
+            p_46605_ = p_46605_.immutable(); // Forge - prevent mutable BlockPos leaks
+            net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+            if (this.captureBlockSnapshots && !this.isClientSide) {
+                blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.create(this.dimension, this, p_46605_, p_46607_);
+                this.capturedBlockSnapshots.add(blockSnapshot);
+            }
+
+            BlockState old = getBlockState(p_46605_);
+            int oldLight = old.getLightEmission(this, p_46605_);
+            int oldOpacity = old.getLightBlock(this, p_46605_);
+            levelchunk.mohist$doPlace.set((p_46607_ & 1024) == 0);
             BlockState blockstate = levelchunk.setBlockState(p_46605_, p_46606_, (p_46607_ & 64) != 0);
+
             if (blockstate == null) {
+                // CraftBukkit start - remove blockstate if failed (or the same)
+                if (this.captureBlockStates && captured) {
+                    this.capturedBlockStates.remove(p_46605_);
+                }
+                // CraftBukkit end
+                if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
                 return false;
             } else {
                 BlockState blockstate1 = this.getBlockState(p_46605_);
+
+                if (blockSnapshot == null) { // Don't notify clients or update physics while capturing blockstates
+                    this.markAndNotifyBlock(p_46605_, levelchunk, blockstate, p_46606_, p_46607_, p_46608_);
+                }
+
+                return true;
+            }
+        }
+    }
+
+    // Split off from original setBlockState(BlockPos, BlockState, int, int) method in order to directly send client and physic updates
+    public void markAndNotifyBlock(BlockPos p_46605_, @Nullable LevelChunk levelchunk, BlockState blockstate, BlockState p_46606_, int p_46607_, int p_46608_) {
+        Block block = p_46606_.getBlock();
+        BlockState blockstate1 = getBlockState(p_46605_);
+        {
+            {
                 if (blockstate1 == p_46606_) {
                     if (blockstate != blockstate1) {
                         this.setBlocksDirty(p_46605_, blockstate, blockstate1);
@@ -247,9 +_,8 @@
                     }
 
                     this.onBlockStateChange(p_46605_, blockstate, blockstate1);
+                    p_46606_.onBlockStateChange(this, p_46605_, blockstate);
                 }
-
-                return true;
             }
         }
     }
@@ -301,6 +_,7 @@
     }
 
     public void updateNeighborsAt(BlockPos p_46673_, Block p_46674_) {
+        net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_46673_, this.getBlockState(p_46673_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
     }
 
     public void updateNeighborsAtExceptFromFacing(BlockPos p_46591_, Block p_46592_, Direction p_46593_) {
@@ -340,6 +_,14 @@
 
     @Override
     public BlockState getBlockState(BlockPos p_46732_) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            CapturedBlockState previous = capturedBlockStates.get(p_46732_);
+            if (previous != null) {
+                return previous.getHandle();
+            }
+        }
+        // CraftBukkit end
         if (this.isOutsideBuildHeight(p_46732_)) {
             return Blocks.VOID_AIR.defaultBlockState();
         } else {
@@ -488,10 +_,30 @@
         (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(p_151526_);
     }
 
+    public void addFreshBlockEntities(java.util.Collection<BlockEntity> beList) {
+        if (this.tickingBlockEntities) {
+            this.pendingFreshBlockEntities.addAll(beList);
+        } else {
+            this.freshBlockEntities.addAll(beList);
+        }
+    }
+
     protected void tickBlockEntities() {
         ProfilerFiller profilerfiller = this.getProfiler();
         profilerfiller.push("blockEntities");
+
+        if (!this.pendingFreshBlockEntities.isEmpty()) {
+            this.freshBlockEntities.addAll(this.pendingFreshBlockEntities);
+            this.pendingFreshBlockEntities.clear();
+        }
+
         this.tickingBlockEntities = true;
+
+        if (!this.freshBlockEntities.isEmpty()) {
+            this.freshBlockEntities.forEach(BlockEntity::onLoad);
+            this.freshBlockEntities.clear();
+        }
+
         if (!this.pendingBlockEntityTickers.isEmpty()) {
             this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
             this.pendingBlockEntityTickers.clear();
@@ -511,16 +_,24 @@
 
         this.tickingBlockEntities = false;
         profilerfiller.pop();
+        spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
     public <T extends Entity> void guardEntityTick(Consumer<T> p_46654_, T p_46655_) {
         try {
+            net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(p_46655_);
             p_46654_.accept(p_46655_);
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking entity");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being ticked");
             p_46655_.fillCrashReportCategory(crashreportcategory);
+            if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringEntities.get()) {
+                com.mojang.logging.LogUtils.getLogger().error("{}", crashreport.getFriendlyReport(net.minecraft.ReportType.CRASH));
+                p_46655_.discard();
+            } else
             throw new ReportedException(crashreport);
+        } finally {
+            net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(p_46655_);
         }
     }
 
@@ -669,7 +_,7 @@
         Explosion.BlockInteraction explosion$blockinteraction = switch (p_310628_) {
             case NONE -> Explosion.BlockInteraction.KEEP;
             case BLOCK -> this.getDestroyType(GameRules.RULE_BLOCK_EXPLOSION_DROP_DECAY);
-            case MOB -> this.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY) : Explosion.BlockInteraction.KEEP;
+            case MOB -> net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this, p_312521_) ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY) : Explosion.BlockInteraction.KEEP;
             case TNT -> this.getDestroyType(GameRules.RULE_TNT_EXPLOSION_DROP_DECAY);
             case TRIGGER -> Explosion.BlockInteraction.TRIGGER_BLOCK;
         };
@@ -688,6 +_,9 @@
             p_311434_,
             p_328498_
         );
+        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) {
+            return explosion;
+        }
         explosion.explode();
         explosion.finalizeExplosion(p_309655_);
         return explosion;
@@ -702,6 +_,16 @@
     @Nullable
     @Override
     public BlockEntity getBlockEntity(BlockPos p_46716_) {
+        // CraftBukkit start
+        return getBlockEntity(p_46716_, true);
+    }
+
+    @Nullable
+    public BlockEntity getBlockEntity(BlockPos p_46716_, boolean validate) {
+        if (capturedTileEntities.containsKey(p_46716_)) {
+            return capturedTileEntities.get(p_46716_);
+        }
+        // CraftBukkit end
         if (this.isOutsideBuildHeight(p_46716_)) {
             return null;
         } else {
@@ -714,6 +_,12 @@
     public void setBlockEntity(BlockEntity p_151524_) {
         BlockPos blockpos = p_151524_.getBlockPos();
         if (!this.isOutsideBuildHeight(blockpos)) {
+            // CraftBukkit start
+            if (captureBlockStates) {
+                capturedTileEntities.put(blockpos.immutable(), p_151524_);
+                return;
+            }
+            // CraftBukkit end
             this.getChunkAt(blockpos).addAndRegisterBlockEntity(p_151524_);
         }
     }
@@ -722,6 +_,7 @@
         if (!this.isOutsideBuildHeight(p_46748_)) {
             this.getChunkAt(p_46748_).removeBlockEntity(p_46748_);
         }
+        this.updateNeighbourForOutputSignal(p_46748_, getBlockState(p_46748_).getBlock()); //Notify neighbors of changes
     }
 
     public boolean isLoaded(BlockPos p_46750_) {
@@ -798,8 +_,8 @@
                 list.add(p_151522_);
             }
 
-            if (p_151522_ instanceof EnderDragon) {
-                for (EnderDragonPart enderdragonpart : ((EnderDragon)p_151522_).getSubEntities()) {
+            if (p_151522_.isMultipartEntity()) {
+                for (var enderdragonpart : p_151522_.getParts()) {
                     if (p_151522_ != p_46536_ && p_46538_.test(enderdragonpart)) {
                         list.add(enderdragonpart);
                     }
@@ -832,8 +_,8 @@
                 }
             }
 
-            if (p_261454_ instanceof EnderDragon enderdragon) {
-                for (EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
+            if (p_261454_ .isMultipartEntity()) {
+                for (var enderdragonpart : p_261454_.getParts()) {
                     T t = p_261885_.tryCast(enderdragonpart);
                     if (t != null && p_261688_.test(t)) {
                         p_262071_.add(t);
@@ -972,16 +_,15 @@
     public abstract Scoreboard getScoreboard();
 
     public void updateNeighbourForOutputSignal(BlockPos p_46718_, Block p_46719_) {
-        for (Direction direction : Direction.Plane.HORIZONTAL) {
+        for (Direction direction : Direction.values()) {
             BlockPos blockpos = p_46718_.relative(direction);
             if (this.hasChunkAt(blockpos)) {
                 BlockState blockstate = this.getBlockState(blockpos);
-                if (blockstate.is(Blocks.COMPARATOR)) {
-                    this.neighborChanged(blockstate, blockpos, p_46719_, p_46718_, false);
-                } else if (blockstate.isRedstoneConductor(this, blockpos)) {
+                blockstate.onNeighborChange(this, blockpos, p_46718_);
+                if (blockstate.isRedstoneConductor(this, blockpos)) {
                     blockpos = blockpos.relative(direction);
                     blockstate = this.getBlockState(blockpos);
-                    if (blockstate.is(Blocks.COMPARATOR)) {
+                    if (blockstate.getWeakChanges(this, blockpos)) {
                         this.neighborChanged(blockstate, blockpos, p_46719_, p_46718_, false);
                     }
                 }
@@ -1075,7 +_,7 @@
         return this.isDebug;
     }
 
-    protected abstract LevelEntityGetter<Entity> getEntities();
+    public abstract LevelEntityGetter<Entity> getEntities();
 
     @Override
     public long nextSubTickCount() {
@@ -1093,6 +_,20 @@
 
     public abstract PotionBrewing potionBrewing();
 
+    private double maxEntityRadius = 2.0D;
+
+    @Override
+    public double getMaxEntityRadius() {
+       return maxEntityRadius;
+    }
+
+    @Override
+    public double increaseMaxEntityRadius(double value) {
+       if (value > maxEntityRadius)
+          maxEntityRadius = value;
+       return maxEntityRadius;
+    }
+
     public static enum ExplosionInteraction implements StringRepresentable {
         NONE("none"),
         BLOCK("block"),
@@ -1112,4 +_,54 @@
             return this.id;
         }
     }
+
+
+    // CraftBukkit start - Split off from above in order to directly send client and physic updates
+    public void notifyAndUpdatePhysics(BlockPos blockposition, LevelChunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i, int j) {
+        BlockState iblockdata = newBlock;
+        BlockState iblockdata1 = oldBlock;
+        BlockState iblockdata2 = actualBlock;
+        if (iblockdata2 == iblockdata) {
+            if (iblockdata1 != iblockdata2) {
+                this.setBlocksDirty(blockposition, iblockdata1, iblockdata2);
+            }
+
+            if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (this.isClientSide || chunk == null || (chunk.getFullStatus() != null && chunk.getFullStatus().isOrAfter(FullChunkStatus.FULL)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+                this.sendBlockUpdated(blockposition, iblockdata1, iblockdata, i);
+            }
+
+            if ((i & 1) != 0) {
+                this.blockUpdated(blockposition, iblockdata1.getBlock());
+                if (!this.isClientSide && iblockdata.hasAnalogOutputSignal()) {
+                    this.updateNeighbourForOutputSignal(blockposition, newBlock.getBlock());
+                }
+            }
+
+            if ((i & 16) == 0 && j > 0) {
+                int k = i & -34;
+
+                // CraftBukkit start
+                iblockdata1.updateIndirectNeighbourShapes(this, blockposition, k, j - 1); // Don't call an event for the old block to limit event spam
+                if (world != null) {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(CraftBlock.at(this, blockposition), CraftBlockData.fromData(iblockdata));
+                    this.getCraftServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
+
+                // CraftBukkit end
+                iblockdata.updateNeighbourShapes(this, blockposition, k, j - 1);
+                iblockdata.updateIndirectNeighbourShapes(this, blockposition, k, j - 1);
+            }
+
+            // CraftBukkit start - SPIGOT-5710
+            if (!preventPoiUpdated) {
+                this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
+            }
+            // CraftBukkit end
+        }
+    }
+    // CraftBukkit end
 }
