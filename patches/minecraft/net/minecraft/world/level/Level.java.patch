--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -1,10 +_,13 @@
 package net.minecraft.world.level;
 
 import com.google.common.collect.Lists;
+import com.mohistmc.forge.ForgeInjectBukkit;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
@@ -18,29 +_,32 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.ParticleOptions;
-import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderSizePacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDelayPacket;
+import net.minecraft.network.protocol.game.ClientboundSetBorderWarningDistancePacket;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.RecipeManager;
@@ -52,11 +_,13 @@
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.TickingBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.border.BorderChangeListener;
 import net.minecraft.world.level.border.WorldBorder;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.level.entity.LevelEntityGetter;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -72,8 +_,17 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.Scoreboard;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_20_R3.CraftServer;
+import org.bukkit.craftbukkit.v1_20_R3.CraftWorld;
+import org.bukkit.craftbukkit.v1_20_R3.block.CapturedBlockState;
+import org.bukkit.craftbukkit.v1_20_R3.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_20_R3.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.v1_20_R3.util.CraftSpawnCategory;
+import org.bukkit.entity.SpawnCategory;
+import org.bukkit.event.block.BlockPhysicsEvent;
 
-public abstract class Level implements LevelAccessor, AutoCloseable {
+public abstract class Level extends net.minecraftforge.common.capabilities.CapabilityProvider<Level> implements LevelAccessor, AutoCloseable, net.minecraftforge.common.extensions.IForgeLevel {
    public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
    public static final ResourceKey<Level> OVERWORLD = ResourceKey.create(Registries.DIMENSION, new ResourceLocation("overworld"));
    public static final ResourceKey<Level> NETHER = ResourceKey.create(Registries.DIMENSION, new ResourceLocation("the_nether"));
@@ -104,19 +_,64 @@
    private final RandomSource threadSafeRandom = RandomSource.createThreadSafe();
    private final ResourceKey<DimensionType> dimensionTypeId;
    private final Holder<DimensionType> dimensionTypeRegistration;
-   protected final WritableLevelData levelData;
+   public final WritableLevelData levelData;
    private final Supplier<ProfilerFiller> profiler;
    public final boolean isClientSide;
    private final WorldBorder worldBorder;
    private final BiomeManager biomeManager;
-   private final ResourceKey<Level> dimension;
+   protected final ResourceKey<Level> dimension;
    private final RegistryAccess registryAccess;
    private final DamageSources damageSources;
    private long subTickCount;
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<>();
+   private final java.util.ArrayList<BlockEntity> freshBlockEntities = new java.util.ArrayList<>();
+   private final java.util.ArrayList<BlockEntity> pendingFreshBlockEntities = new java.util.ArrayList<>();
+
+   // CraftBukkit start Added the following
+   public CraftWorld world;
+   public boolean pvpMode;
+   public boolean keepSpawnInMemory = true;
+   public static org.bukkit.generator.ChunkGenerator generator;
+   public static org.bukkit.World.Environment environment;
+   public static org.bukkit.generator.BiomeProvider biomeProvider;
+
+   public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
+   public boolean captureBlockStates = false;
+   public boolean captureTreeGeneration = false;
+   public Map<BlockPos, CapturedBlockState> capturedBlockStates = new java.util.LinkedHashMap<>();
+   public Map<BlockPos, BlockEntity> capturedTileEntities = new HashMap<>();
+   public List<ItemEntity> captureDrops;
+   public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
+   public boolean populating;
+   public org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+
+   public CraftWorld getWorld() {
+      return this.world;
+   }
+   public CraftServer getCraftServer() {
+      return (CraftServer) Bukkit.getServer();
+   }
+   public ResourceKey<LevelStem> getTypeKey() {
+      return Registries.levelToLevelStem(dimension);
+   }
+   public static void craftWorldData(org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env, org.bukkit.generator.BiomeProvider bp) {
+      generator = gen;
+      environment = env;
+      biomeProvider = bp;
+   }
 
    protected Level(WritableLevelData p_270739_, ResourceKey<Level> p_270683_, RegistryAccess p_270200_, Holder<DimensionType> p_270240_, Supplier<ProfilerFiller> p_270692_, boolean p_270904_, boolean p_270470_, long p_270248_, int p_270466_) {
+      super(Level.class);
       this.profiler = p_270692_;
       this.levelData = p_270739_;
+      // CraftBukkit Ticks things
+      for (SpawnCategory spawnCategory : SpawnCategory.values()) {
+         if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
+            this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+         }
+      }
       this.dimensionTypeRegistration = p_270240_;
       this.dimensionTypeId = p_270240_.unwrapKey().orElseThrow(() -> {
          return new IllegalArgumentException("Dimension must be registered, got " + p_270240_);
@@ -127,11 +_,11 @@
       if (dimensiontype.coordinateScale() != 1.0D) {
          this.worldBorder = new WorldBorder() {
             public double getCenterX() {
-               return super.getCenterX() / dimensiontype.coordinateScale();
+               return super.getCenterX(); // CraftBukkit
             }
 
             public double getCenterZ() {
-               return super.getCenterZ() / dimensiontype.coordinateScale();
+               return super.getCenterZ(); // CraftBukkit
             }
          };
       } else {
@@ -144,6 +_,46 @@
       this.neighborUpdater = new CollectingNeighborUpdater(this, p_270466_);
       this.registryAccess = p_270200_;
       this.damageSources = new DamageSources(p_270200_);
+      // CraftBukkit start
+      if (environment == null) {
+         environment = ForgeInjectBukkit.environment.get(getTypeKey());
+      }
+      getWorldBorder().world = this;
+      // From PlayerList.setPlayerFileData
+      getWorldBorder().addListener(new BorderChangeListener() {
+
+         @Override
+         public void onBorderSizeSet(WorldBorder pBorder, double pSize) {
+            getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderSizePacket(pBorder), pBorder.world.dimension());
+         }
+
+         @Override
+         public void onBorderSizeLerping(WorldBorder pBorder, double pOldSize, double pNewSize, long pTime) {
+            getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderLerpSizePacket(pBorder), pBorder.world.dimension());
+         }
+
+         @Override
+         public void onBorderCenterSet(WorldBorder pBorder, double pX, double pZ) {
+            getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderCenterPacket(pBorder), pBorder.world.dimension());
+         }
+
+         @Override
+         public void onBorderSetWarningTime(WorldBorder pBorder, int pWarningTime) {
+            getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDelayPacket(pBorder), pBorder.world.dimension());
+         }
+
+         @Override
+         public void onBorderSetWarningBlocks(WorldBorder pBorder, int pWarningBlocks) {
+            getCraftServer().getHandle().broadcastAll(new ClientboundSetBorderWarningDistancePacket(pBorder), pBorder.world.dimension());
+         }
+
+         @Override
+         public void onBorderSetDamagePerBlock(WorldBorder pBorder, double pDamagePerBlock) { }
+
+         @Override
+         public void onBorderSetDamageSafeZOne(WorldBorder pBorder, double pDamageSafeZone) { }
+      });
+      // CraftBukkit end
    }
 
    public boolean isClientSide() {
@@ -194,6 +_,17 @@
    }
 
    public boolean setBlock(BlockPos p_46605_, BlockState p_46606_, int p_46607_, int p_46608_) {
+      // CraftBukkit start - tree generation
+      if (this.captureTreeGeneration) {
+         CapturedBlockState blockstate = capturedBlockStates.get(p_46605_);
+         if (blockstate == null) {
+            blockstate = CapturedBlockState.getTreeBlockState(this, p_46605_, p_46607_);
+            this.capturedBlockStates.put(p_46605_.immutable(), blockstate);
+         }
+         blockstate.setData(p_46606_);
+         return true;
+      }
+      // CraftBukkit end
       if (this.isOutsideBuildHeight(p_46605_)) {
          return false;
       } else if (!this.isClientSide && this.isDebug()) {
@@ -201,11 +_,55 @@
       } else {
          LevelChunk levelchunk = this.getChunkAt(p_46605_);
          Block block = p_46606_.getBlock();
+
+         // CraftBukkit start - capture blockstates
+         boolean captured = false;
+         if (this.captureBlockStates && !this.capturedBlockStates.containsKey(p_46605_)) {
+            CapturedBlockState blockstate = CapturedBlockState.getBlockState(this, p_46605_, p_46607_);
+            this.capturedBlockStates.put(p_46605_.immutable(), blockstate);
+            captured = true;
+         }
+         // CraftBukkit end
+
+         p_46605_ = p_46605_.immutable(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.isClientSide) {
+             blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.create(this.dimension, this, p_46605_, p_46607_);
+             this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         BlockState old = getBlockState(p_46605_);
+         int oldLight = old.getLightEmission(this, p_46605_);
+         int oldOpacity = old.getLightBlock(this, p_46605_);
+         levelchunk.mohist$doPlace.set((p_46607_ & 1024) == 0);
          BlockState blockstate = levelchunk.setBlockState(p_46605_, p_46606_, (p_46607_ & 64) != 0);
+
          if (blockstate == null) {
+            // CraftBukkit start - remove blockstate if failed (or the same)
+            if (this.captureBlockStates && captured) {
+               this.capturedBlockStates.remove(p_46605_);
+            }
+            // CraftBukkit end
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
             return false;
          } else {
             BlockState blockstate1 = this.getBlockState(p_46605_);
+
+            if (blockSnapshot == null) { // Don't notify clients or update physics while capturing blockstates
+               this.markAndNotifyBlock(p_46605_, levelchunk, blockstate, p_46606_, p_46607_, p_46608_);
+            }
+
+            return true;
+         }
+      }
+   }
+
+   // Split off from original setBlockState(BlockPos, BlockState, int, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos p_46605_, @Nullable LevelChunk levelchunk, BlockState blockstate, BlockState p_46606_, int p_46607_, int p_46608_) {
+      Block block = p_46606_.getBlock();
+      BlockState blockstate1 = getBlockState(p_46605_);
+      {
+         {
             if (blockstate1 == p_46606_) {
                if (blockstate != blockstate1) {
                   this.setBlocksDirty(p_46605_, blockstate, blockstate1);
@@ -230,9 +_,8 @@
                }
 
                this.onBlockStateChange(p_46605_, blockstate, blockstate1);
+               p_46606_.onBlockStateChange(this, p_46605_, blockstate);
             }
-
-            return true;
          }
       }
    }
@@ -282,6 +_,7 @@
    }
 
    public void updateNeighborsAt(BlockPos p_46673_, Block p_46674_) {
+      net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_46673_, this.getBlockState(p_46673_), java.util.EnumSet.allOf(Direction.class), false).isCanceled();
    }
 
    public void updateNeighborsAtExceptFromFacing(BlockPos p_46591_, Block p_46592_, Direction p_46593_) {
@@ -317,6 +_,14 @@
    }
 
    public BlockState getBlockState(BlockPos p_46732_) {
+      // CraftBukkit start - tree generation
+      if (captureTreeGeneration) {
+         CapturedBlockState previous = capturedBlockStates.get(p_46732_);
+         if (previous != null) {
+            return previous.getHandle();
+         }
+      }
+      // CraftBukkit end
       if (this.isOutsideBuildHeight(p_46732_)) {
          return Blocks.VOID_AIR.defaultBlockState();
       } else {
@@ -365,10 +_,6 @@
 
    public abstract void playSeededSound(@Nullable Player p_220372_, Entity p_220373_, Holder<SoundEvent> p_263500_, SoundSource p_220375_, float p_220376_, float p_220377_, long p_220378_);
 
-   public void playSound(@Nullable Player p_312141_, double p_310370_, double p_311188_, double p_309961_, SoundEvent p_313224_, SoundSource p_312451_) {
-      this.playSound(p_312141_, p_310370_, p_311188_, p_309961_, p_313224_, p_312451_, 1.0F, 1.0F);
-   }
-
    public void playSound(@Nullable Player p_46543_, double p_46544_, double p_46545_, double p_46546_, SoundEvent p_46547_, SoundSource p_46548_, float p_46549_, float p_46550_) {
       this.playSeededSound(p_46543_, p_46544_, p_46545_, p_46546_, p_46547_, p_46548_, p_46549_, p_46550_, this.threadSafeRandom.nextLong());
    }
@@ -381,9 +_,6 @@
       this.playLocalSound((double)p_250938_.getX() + 0.5D, (double)p_250938_.getY() + 0.5D, (double)p_250938_.getZ() + 0.5D, p_252209_, p_249161_, p_249980_, p_250277_, p_250151_);
    }
 
-   public void playLocalSound(Entity p_312682_, SoundEvent p_309977_, SoundSource p_310337_, float p_311199_, float p_311168_) {
-   }
-
    public void playLocalSound(double p_46482_, double p_46483_, double p_46484_, SoundEvent p_46485_, SoundSource p_46486_, float p_46487_, float p_46488_, boolean p_46489_) {
    }
 
@@ -408,39 +_,62 @@
       (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(p_151526_);
    }
 
+   public void addFreshBlockEntities(java.util.Collection<BlockEntity> beList) {
+      if (this.tickingBlockEntities) {
+         this.pendingFreshBlockEntities.addAll(beList);
+      } else {
+         this.freshBlockEntities.addAll(beList);
+      }
+   }
+
    protected void tickBlockEntities() {
       ProfilerFiller profilerfiller = this.getProfiler();
       profilerfiller.push("blockEntities");
+      if (!this.pendingFreshBlockEntities.isEmpty()) {
+         this.freshBlockEntities.addAll(this.pendingFreshBlockEntities);
+         this.pendingFreshBlockEntities.clear();
+      }
       this.tickingBlockEntities = true;
+      if (!this.freshBlockEntities.isEmpty()) {
+         this.freshBlockEntities.forEach(BlockEntity::onLoad);
+         this.freshBlockEntities.clear();
+      }
       if (!this.pendingBlockEntityTickers.isEmpty()) {
          this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
          this.pendingBlockEntityTickers.clear();
       }
 
       Iterator<TickingBlockEntity> iterator = this.blockEntityTickers.iterator();
-      boolean flag = this.tickRateManager().runsNormally();
 
       while(iterator.hasNext()) {
          TickingBlockEntity tickingblockentity = iterator.next();
          if (tickingblockentity.isRemoved()) {
             iterator.remove();
-         } else if (flag && this.shouldTickBlocksAt(tickingblockentity.getPos())) {
+         } else if (this.shouldTickBlocksAt(tickingblockentity.getPos())) {
             tickingblockentity.tick();
          }
       }
 
       this.tickingBlockEntities = false;
       profilerfiller.pop();
+      spigotConfig.currentPrimedTnt = 0; // Spigot
    }
 
    public <T extends Entity> void guardEntityTick(Consumer<T> p_46654_, T p_46655_) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(p_46655_);
          p_46654_.accept(p_46655_);
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking entity");
          CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being ticked");
          p_46655_.fillCrashReportCategory(crashreportcategory);
+         if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringEntities.get()) {
+            com.mojang.logging.LogUtils.getLogger().error("{}", crashreport.getFriendlyReport());
+            p_46655_.discard();
+         } else
          throw new ReportedException(crashreport);
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(p_46655_);
       }
    }
 
@@ -457,28 +_,24 @@
    }
 
    public Explosion explode(@Nullable Entity p_256599_, double p_255914_, double p_255684_, double p_255843_, float p_256310_, Level.ExplosionInteraction p_256178_) {
-      return this.explode(p_256599_, Explosion.getDefaultDamageSource(this, p_256599_), (ExplosionDamageCalculator)null, p_255914_, p_255684_, p_255843_, p_256310_, false, p_256178_, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE);
+      return this.explode(p_256599_, (DamageSource)null, (ExplosionDamageCalculator)null, p_255914_, p_255684_, p_255843_, p_256310_, false, p_256178_);
    }
 
    public Explosion explode(@Nullable Entity p_255682_, double p_255803_, double p_256403_, double p_256538_, float p_255674_, boolean p_256634_, Level.ExplosionInteraction p_256111_) {
-      return this.explode(p_255682_, Explosion.getDefaultDamageSource(this, p_255682_), (ExplosionDamageCalculator)null, p_255803_, p_256403_, p_256538_, p_255674_, p_256634_, p_256111_, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE);
+      return this.explode(p_255682_, (DamageSource)null, (ExplosionDamageCalculator)null, p_255803_, p_256403_, p_256538_, p_255674_, p_256634_, p_256111_);
    }
 
    public Explosion explode(@Nullable Entity p_255653_, @Nullable DamageSource p_256558_, @Nullable ExplosionDamageCalculator p_255929_, Vec3 p_256001_, float p_255963_, boolean p_256099_, Level.ExplosionInteraction p_256371_) {
-      return this.explode(p_255653_, p_256558_, p_255929_, p_256001_.x(), p_256001_.y(), p_256001_.z(), p_255963_, p_256099_, p_256371_, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE);
+      return this.explode(p_255653_, p_256558_, p_255929_, p_256001_.x(), p_256001_.y(), p_256001_.z(), p_255963_, p_256099_, p_256371_);
    }
 
    public Explosion explode(@Nullable Entity p_256145_, @Nullable DamageSource p_256004_, @Nullable ExplosionDamageCalculator p_255696_, double p_256208_, double p_256036_, double p_255746_, float p_256647_, boolean p_256098_, Level.ExplosionInteraction p_256104_) {
-      return this.explode(p_256145_, p_256004_, p_255696_, p_256208_, p_256036_, p_255746_, p_256647_, p_256098_, p_256104_, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE);
-   }
-
-   public Explosion explode(@Nullable Entity p_256233_, @Nullable DamageSource p_255861_, @Nullable ExplosionDamageCalculator p_255867_, double p_256447_, double p_255732_, double p_255717_, float p_256013_, boolean p_256228_, Level.ExplosionInteraction p_255784_, ParticleOptions p_312617_, ParticleOptions p_309714_, SoundEvent p_311749_) {
-      return this.explode(p_256233_, p_255861_, p_255867_, p_256447_, p_255732_, p_255717_, p_256013_, p_256228_, p_255784_, true, p_312617_, p_309714_, p_311749_);
-   }
-
-   public Explosion explode(@Nullable Entity p_312521_, @Nullable DamageSource p_310678_, @Nullable ExplosionDamageCalculator p_312887_, double p_309783_, double p_312776_, double p_310505_, float p_310209_, boolean p_309445_, Level.ExplosionInteraction p_310628_, boolean p_309655_, ParticleOptions p_311889_, ParticleOptions p_311434_, SoundEvent p_312016_) {
+      return this.explode(p_256145_, p_256004_, p_255696_, p_256208_, p_256036_, p_255746_, p_256647_, p_256098_, p_256104_, true);
+   }
+
+   public Explosion explode(@Nullable Entity p_256233_, @Nullable DamageSource p_255861_, @Nullable ExplosionDamageCalculator p_255867_, double p_256447_, double p_255732_, double p_255717_, float p_256013_, boolean p_256228_, Level.ExplosionInteraction p_255784_, boolean p_256377_) {
       Explosion.BlockInteraction explosion$blockinteraction1;
-      switch (p_310628_) {
+      switch (p_255784_) {
          case NONE:
             explosion$blockinteraction1 = Explosion.BlockInteraction.KEEP;
             break;
@@ -486,22 +_,20 @@
             explosion$blockinteraction1 = this.getDestroyType(GameRules.RULE_BLOCK_EXPLOSION_DROP_DECAY);
             break;
          case MOB:
-            explosion$blockinteraction1 = this.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY) : Explosion.BlockInteraction.KEEP;
+            explosion$blockinteraction1 = net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this, p_256233_) ? this.getDestroyType(GameRules.RULE_MOB_EXPLOSION_DROP_DECAY) : Explosion.BlockInteraction.KEEP;
             break;
          case TNT:
             explosion$blockinteraction1 = this.getDestroyType(GameRules.RULE_TNT_EXPLOSION_DROP_DECAY);
             break;
-         case BLOW:
-            explosion$blockinteraction1 = Explosion.BlockInteraction.TRIGGER_BLOCK;
-            break;
          default:
             throw new IncompatibleClassChangeError();
       }
 
       Explosion.BlockInteraction explosion$blockinteraction = explosion$blockinteraction1;
-      Explosion explosion = new Explosion(this, p_312521_, p_310678_, p_312887_, p_309783_, p_312776_, p_310505_, p_310209_, p_309445_, explosion$blockinteraction, p_311889_, p_311434_, p_312016_);
+      Explosion explosion = new Explosion(this, p_256233_, p_255861_, p_255867_, p_256447_, p_255732_, p_255717_, p_256013_, p_256228_, explosion$blockinteraction);
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
       explosion.explode();
-      explosion.finalizeExplosion(p_309655_);
+      explosion.finalizeExplosion(p_256377_);
       return explosion;
    }
 
@@ -513,6 +_,16 @@
 
    @Nullable
    public BlockEntity getBlockEntity(BlockPos p_46716_) {
+      // CraftBukkit start
+      return getBlockEntity(p_46716_, true);
+   }
+
+   @Nullable
+   public BlockEntity getBlockEntity(BlockPos p_46716_, boolean validate) {
+      if (capturedTileEntities.containsKey(p_46716_)) {
+         return capturedTileEntities.get(p_46716_);
+      }
+      // CraftBukkit end
       if (this.isOutsideBuildHeight(p_46716_)) {
          return null;
       } else {
@@ -523,6 +_,12 @@
    public void setBlockEntity(BlockEntity p_151524_) {
       BlockPos blockpos = p_151524_.getBlockPos();
       if (!this.isOutsideBuildHeight(blockpos)) {
+         // CraftBukkit start
+         if (captureBlockStates) {
+            capturedTileEntities.put(blockpos.immutable(), p_151524_);
+            return;
+         }
+         // CraftBukkit end
          this.getChunkAt(blockpos).addAndRegisterBlockEntity(p_151524_);
       }
    }
@@ -531,6 +_,7 @@
       if (!this.isOutsideBuildHeight(p_46748_)) {
          this.getChunkAt(p_46748_).removeBlockEntity(p_46748_);
       }
+      this.updateNeighbourForOutputSignal(p_46748_, getBlockState(p_46748_).getBlock()); //Notify neighbors of changes
    }
 
    public boolean isLoaded(BlockPos p_46750_) {
@@ -601,6 +_,7 @@
             list.add(p_151522_);
          }
 
+         if (false)
          if (p_151522_ instanceof EnderDragon) {
             for(EnderDragonPart enderdragonpart : ((EnderDragon)p_151522_).getSubEntities()) {
                if (p_151522_ != p_46536_ && p_46538_.test(enderdragonpart)) {
@@ -610,6 +_,11 @@
          }
 
       });
+      for (net.minecraftforge.entity.PartEntity<?> p : this.getPartEntities()) {
+         if (p != p_46536_ && p.getBoundingBox().intersects(p_46537_) && p_46538_.test(p)) {
+            list.add(p);
+         }
+      }
       return list;
    }
 
@@ -633,6 +_,8 @@
             }
          }
 
+
+         if (false)
          if (p_261454_ instanceof EnderDragon enderdragon) {
             for(EnderDragonPart enderdragonpart : enderdragon.getSubEntities()) {
                T t = p_261885_.tryCast(enderdragonpart);
@@ -647,6 +_,15 @@
 
          return AbortableIterationConsumer.Continuation.CONTINUE;
       });
+      for (net.minecraftforge.entity.PartEntity<?> p : this.getPartEntities()) {
+         T t = p_261885_.tryCast(p);
+         if (t != null && t.getBoundingBox().intersects(p_262086_) && p_261688_.test(t)) {
+            p_262071_.add(t);
+            if (p_262071_.size() >= p_261858_) {
+               break;
+            }
+         }
+      }
    }
 
    @Nullable
@@ -696,8 +_,6 @@
       return this.levelData.getGameRules();
    }
 
-   public abstract TickRateManager tickRateManager();
-
    public float getThunderLevel(float p_46662_) {
       return Mth.lerp(p_46662_, this.oThunderLevel, this.thunderLevel) * this.getRainLevel(p_46662_);
    }
@@ -780,16 +_,15 @@
    public abstract Scoreboard getScoreboard();
 
    public void updateNeighbourForOutputSignal(BlockPos p_46718_, Block p_46719_) {
-      for(Direction direction : Direction.Plane.HORIZONTAL) {
+      for(Direction direction : Direction.values()) {
          BlockPos blockpos = p_46718_.relative(direction);
          if (this.hasChunkAt(blockpos)) {
             BlockState blockstate = this.getBlockState(blockpos);
-            if (blockstate.is(Blocks.COMPARATOR)) {
-               this.neighborChanged(blockstate, blockpos, p_46719_, p_46718_, false);
-            } else if (blockstate.isRedstoneConductor(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, p_46718_);
+            if (blockstate.isRedstoneConductor(this, blockpos)) {
                blockpos = blockpos.relative(direction);
                blockstate = this.getBlockState(blockpos);
-               if (blockstate.is(Blocks.COMPARATOR)) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   this.neighborChanged(blockstate, blockpos, p_46719_, p_46718_, false);
                }
             }
@@ -876,11 +_,23 @@
       return this.biomeManager;
    }
 
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
+   }
+
    public final boolean isDebug() {
       return this.isDebug;
    }
 
-   protected abstract LevelEntityGetter<Entity> getEntities();
+   public abstract LevelEntityGetter<Entity> getEntities();
 
    public long nextSubTickCount() {
       return (long)(this.subTickCount++);
@@ -898,7 +_,55 @@
       NONE,
       BLOCK,
       MOB,
-      TNT,
-      BLOW;
-   }
+      TNT;
+   }
+
+   // CraftBukkit start - Split off from above in order to directly send client and physic updates
+   public void notifyAndUpdatePhysics(BlockPos blockposition, LevelChunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i, int j) {
+      BlockState iblockdata = newBlock;
+      BlockState iblockdata1 = oldBlock;
+      BlockState iblockdata2 = actualBlock;
+      if (iblockdata2 == iblockdata) {
+         if (iblockdata1 != iblockdata2) {
+            this.setBlocksDirty(blockposition, iblockdata1, iblockdata2);
+         }
+
+         if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (this.isClientSide || chunk == null || (chunk.getFullStatus() != null && chunk.getFullStatus().isOrAfter(FullChunkStatus.FULL)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+            this.sendBlockUpdated(blockposition, iblockdata1, iblockdata, i);
+         }
+
+         if ((i & 1) != 0) {
+            this.blockUpdated(blockposition, iblockdata1.getBlock());
+            if (!this.isClientSide && iblockdata.hasAnalogOutputSignal()) {
+               this.updateNeighbourForOutputSignal(blockposition, newBlock.getBlock());
+            }
+         }
+
+         if ((i & 16) == 0 && j > 0) {
+            int k = i & -34;
+
+            // CraftBukkit start
+            iblockdata1.updateIndirectNeighbourShapes(this, blockposition, k, j - 1); // Don't call an event for the old block to limit event spam
+            if (world != null) {
+               BlockPhysicsEvent event = new BlockPhysicsEvent(CraftBlock.at(this, blockposition), CraftBlockData.fromData(iblockdata));
+               this.getCraftServer().getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  return;
+               }
+            }
+
+            // CraftBukkit end
+            iblockdata.updateNeighbourShapes(this, blockposition, k, j - 1);
+            iblockdata.updateIndirectNeighbourShapes(this, blockposition, k, j - 1);
+         }
+
+         // CraftBukkit start - SPIGOT-5710
+         if (!preventPoiUpdated) {
+            this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
+         }
+         // CraftBukkit end
+      }
+   }
+   // CraftBukkit end
 }
