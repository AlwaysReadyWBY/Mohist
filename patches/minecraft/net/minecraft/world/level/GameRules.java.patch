--- a/net/minecraft/world/level/GameRules.java
+++ b/net/minecraft/world/level/GameRules.java
@@ -2,6 +_,7 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
+import com.mohistmc.plugins.ban.bans.BanEvents;
 import com.mojang.brigadier.arguments.ArgumentType;
 import com.mojang.brigadier.arguments.BoolArgumentType;
 import com.mojang.brigadier.arguments.IntegerArgumentType;
@@ -30,7 +_,7 @@
    private static final Map<GameRules.Key<?>, GameRules.Type<?>> GAME_RULE_TYPES = Maps.newTreeMap(Comparator.comparing((p_46218_) -> {
       return p_46218_.id;
    }));
-   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOFIRETICK = register("doFireTick", GameRules.Category.UPDATES, GameRules.BooleanValue.create(true));
+   public static final GameRules.Key<GameRules.BooleanValue> RULE_DOFIRETICK = register("doFireTick", GameRules.Category.UPDATES, GameRules.BooleanValue.create(!BanEvents.banFireTick()));
    public static final GameRules.Key<GameRules.BooleanValue> RULE_MOBGRIEFING = register("mobGriefing", GameRules.Category.MOBS, GameRules.BooleanValue.create(true));
    public static final GameRules.Key<GameRules.BooleanValue> RULE_KEEPINVENTORY = register("keepInventory", GameRules.Category.PLAYER, GameRules.BooleanValue.create(false));
    public static final GameRules.Key<GameRules.BooleanValue> RULE_DOMOBSPAWNING = register("doMobSpawning", GameRules.Category.SPAWNING, GameRules.BooleanValue.create(true));
@@ -181,13 +_,13 @@
    public static class BooleanValue extends GameRules.Value<GameRules.BooleanValue> {
       private boolean value;
 
-      public static GameRules.Type<GameRules.BooleanValue> create(boolean p_46253_, BiConsumer<MinecraftServer, GameRules.BooleanValue> p_46254_) {
+      static GameRules.Type<GameRules.BooleanValue> create(boolean p_46253_, BiConsumer<MinecraftServer, GameRules.BooleanValue> p_46254_) {
          return new GameRules.Type<>(BoolArgumentType::bool, (p_46242_) -> {
             return new GameRules.BooleanValue(p_46242_, p_46253_);
          }, p_46254_, GameRules.GameRuleTypeVisitor::visitBoolean);
       }
 
-      public static GameRules.Type<GameRules.BooleanValue> create(boolean p_46251_) {
+      static GameRules.Type<GameRules.BooleanValue> create(boolean p_46251_) {
          return create(p_46251_, (p_46236_, p_46237_) -> {
          });
       }
@@ -214,7 +_,7 @@
          return Boolean.toString(this.value);
       }
 
-      protected void deserialize(String p_46234_) {
+      public void deserialize(String p_46234_) {
          this.value = Boolean.parseBoolean(p_46234_);
       }
 
@@ -270,13 +_,13 @@
    public static class IntegerValue extends GameRules.Value<GameRules.IntegerValue> {
       private int value;
 
-      public static GameRules.Type<GameRules.IntegerValue> create(int p_46295_, BiConsumer<MinecraftServer, GameRules.IntegerValue> p_46296_) {
+      private static GameRules.Type<GameRules.IntegerValue> create(int p_46295_, BiConsumer<MinecraftServer, GameRules.IntegerValue> p_46296_) {
          return new GameRules.Type<>(IntegerArgumentType::integer, (p_46293_) -> {
             return new GameRules.IntegerValue(p_46293_, p_46295_);
          }, p_46296_, GameRules.GameRuleTypeVisitor::visitInteger);
       }
 
-      public static GameRules.Type<GameRules.IntegerValue> create(int p_46313_) {
+      static GameRules.Type<GameRules.IntegerValue> create(int p_46313_) {
          return create(p_46313_, (p_46309_, p_46310_) -> {
          });
       }
@@ -303,7 +_,7 @@
          return Integer.toString(this.value);
       }
 
-      protected void deserialize(String p_46307_) {
+      public void deserialize(String p_46307_) {
          this.value = safeParse(p_46307_);
       }
 
@@ -424,14 +_,14 @@
          this.onChanged(p_46371_.getSource().getServer());
       }
 
-      protected void onChanged(@Nullable MinecraftServer p_46369_) {
+      public void onChanged(@Nullable MinecraftServer p_46369_) {
          if (p_46369_ != null) {
             this.type.callback.accept(p_46369_, this.getSelf());
          }
 
       }
 
-      protected abstract void deserialize(String p_46367_);
+      public abstract void deserialize(String p_46367_);
 
       public abstract String serialize();
 
