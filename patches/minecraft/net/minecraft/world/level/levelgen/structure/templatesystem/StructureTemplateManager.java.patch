--- a/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
+++ b/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplateManager.java
@@ -14,6 +_,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.Reader;
 import java.nio.file.Files;
 import java.nio.file.InvalidPathException;
 import java.nio.file.NoSuchFileException;
@@ -51,7 +_,7 @@
     private static final String STRUCTURE_DIRECTORY_NAME = "structures";
     private static final String STRUCTURE_FILE_EXTENSION = ".nbt";
     private static final String STRUCTURE_TEXT_FILE_EXTENSION = ".snbt";
-    public final Map<ResourceLocation, Optional<StructureTemplate>> structureRepository = Maps.newConcurrentMap();
+   public final Map<ResourceLocation, Optional<StructureTemplate>> structureRepository = Maps.newConcurrentMap();
     private final DataFixer fixerUpper;
     private ResourceManager resourceManager;
     private final Path generatedDir;
@@ -133,7 +_,7 @@
         return this.listFolderContents(Paths.get(StructureUtils.testStructuresDir), "minecraft", ".snbt");
     }
 
-    public Optional<StructureTemplate> loadFromGenerated(ResourceLocation p_230432_) {
+    private Optional<StructureTemplate> loadFromGenerated(ResourceLocation p_230432_) {
         if (!Files.isDirectory(this.generatedDir)) {
             return Optional.empty();
         } else {
@@ -227,7 +_,7 @@
         }
     }
 
-    public StructureTemplate readStructure(InputStream p_230378_) throws IOException {
+    private StructureTemplate readStructure(InputStream p_230378_) throws IOException {
         CompoundTag compoundtag = NbtIo.readCompressed(p_230378_, NbtAccounter.unlimitedHeap());
         return this.readStructure(compoundtag);
     }
@@ -286,7 +_,7 @@
         }
     }
 
-    public static Path createAndValidatePathToStructure(Path p_230412_, ResourceLocation p_230413_, String p_230414_) {
+   	public static Path createAndValidatePathToStructure(Path p_230412_, ResourceLocation p_230413_, String p_230414_) {
         if (p_230413_.getPath().contains("//")) {
             throw new ResourceLocationException("Invalid resource path: " + p_230413_);
         } else {
