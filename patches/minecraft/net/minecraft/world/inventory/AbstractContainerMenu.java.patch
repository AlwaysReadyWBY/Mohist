--- a/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -8,7 +_,10 @@
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntList;
+
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
@@ -17,9 +_,11 @@
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
-import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.Container;
@@ -28,9 +_,16 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.flag.FeatureFlagSet;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraftforge.registries.ForgeRegistries;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.Event.Result;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.InventoryView;
 import org.slf4j.Logger;
 
 public abstract class AbstractContainerMenu {
@@ -43,11 +_,11 @@
     public static final int QUICKCRAFT_HEADER_CONTINUE = 1;
     public static final int QUICKCRAFT_HEADER_END = 2;
     public static final int CARRIED_SLOT_SIZE = Integer.MAX_VALUE;
-    public NonNullList<ItemStack> lastSlots = NonNullList.create();
-    public NonNullList<Slot> slots = NonNullList.create();
-    private final List<DataSlot> dataSlots = Lists.newArrayList();
-    private ItemStack carried = ItemStack.EMPTY;
-    public NonNullList<ItemStack> remoteSlots = NonNullList.create();
+   public NonNullList<ItemStack> lastSlots = NonNullList.create();
+   public NonNullList<Slot> slots = NonNullList.create();
+   private final List<DataSlot> dataSlots = Lists.newArrayList();
+   private ItemStack carried = ItemStack.EMPTY;
+   public NonNullList<ItemStack> remoteSlots = NonNullList.create();
     private final IntList remoteDataSlots = new IntArrayList();
     private ItemStack remoteCarried = ItemStack.EMPTY;
     private int stateId;
@@ -62,6 +_,45 @@
     private ContainerSynchronizer synchronizer;
     private boolean suppressRemoteUpdates;
 
+   // CraftBukkit start
+   public boolean checkReachable = true;
+   // Mohist start
+   public InventoryView bukkitView = null;
+
+   public InventoryView getBukkitView(){
+      return bukkitView;
+   }
+
+   // Mohist end
+   public void transferTo(AbstractContainerMenu other, CraftHumanEntity player) {
+      InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+      ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+      ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+      ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+      ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+   }
+   private Component title;
+   public Component getTitle() {
+      // Mohist: null title -> empty title
+      if (this.title == null) {
+         if (this.menuType != null) {
+            ResourceLocation key = ForgeRegistries.MENU_TYPES.getKey(this.menuType);
+             if (key == null) {
+                 this.title = Component.literal(this.toString());
+             } else {
+                 this.title = Component.translatable(key.toString());
+             }
+         } else {
+            this.title = Component.literal(this.toString());
+         }
+      }
+      return this.title;
+   }
+   public void setTitle(Component title) {
+      this.title = title;
+   }
+   // CraftBukkit end
+
     protected AbstractContainerMenu(@Nullable MenuType<?> p_38851_, int p_38852_) {
         this.menuType = p_38851_;
         this.containerId = p_38852_;
@@ -340,6 +_,7 @@
 
                     int k1 = this.getCarried().getCount();
 
+               		Map<Integer, ItemStack> draggedSlots = new HashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
                     for (Slot slot1 : this.quickcraftSlots) {
                         ItemStack itemstack1 = this.getCarried();
                         if (slot1 != null
@@ -351,12 +_,49 @@
                             int k = Math.min(itemstack3.getMaxStackSize(), slot1.getMaxStackSize(itemstack3));
                             int l = Math.min(getQuickCraftPlaceCount(this.quickcraftSlots, this.quickcraftType, itemstack3) + j, k);
                             k1 -= l - j;
-                            slot1.setByPlayer(itemstack3.copyWithCount(l));
-                        }
-                    }
-
-                    itemstack3.setCount(k1);
-                    this.setCarried(itemstack3);
+
+                     // slot1.setByPlayer(itemstack2.copyWithCount(l));
+                     draggedSlots.put(slot1.index, itemstack3.copyWithCount(l)); // CraftBukkit - Put in map instead of setting
+                  }
+               }
+
+               // CraftBukkit start - InventoryDragEvent
+               InventoryView view = this.getBukkitView();
+               org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack3);
+               newcursor.setAmount(k1);
+               Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<>();
+               for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
+                  eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
+               }
+
+               // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+               ItemStack oldCursor = this.getCarried();
+               this.setCarried(CraftItemStack.asNMSCopy(newcursor));
+
+               InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.quickcraftType == 1, eventmap);
+               p_150434_.level().getCraftServer().getPluginManager().callEvent(event);
+
+               // Whether or not a change was made to the inventory that requires an update.
+               boolean needsUpdate = event.getResult() != Result.DEFAULT;
+
+               if (event.getResult() != Result.DENY) {
+                  for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
+                     view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                  }
+                  // The only time the carried item will be set to null is if the inventory is closed by the server.
+                  // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                  if (this.getCarried() != null) {
+                     this.setCarried(CraftItemStack.asNMSCopy(event.getCursor()));
+                     needsUpdate = true;
+                  }
+               } else {
+                  this.setCarried(oldCursor);
+               }
+
+               if (needsUpdate && p_150434_ instanceof ServerPlayer) {
+                  this.sendAllDataToRemote();
+               }
+               // CraftBukkit end
                 }
 
                 this.resetQuickCraft();
@@ -370,8 +_,11 @@
             if (p_150431_ == -999) {
                 if (!this.getCarried().isEmpty()) {
                     if (clickaction == ClickAction.PRIMARY) {
-                        p_150434_.drop(this.getCarried(), true);
-                        this.setCarried(ItemStack.EMPTY);
+                  // CraftBukkit start
+                  ItemStack carried = this.getCarried();
+                  this.setCarried(ItemStack.EMPTY);
+                  p_150434_.drop(carried, true);
+                  // CraftBukkit end
                     } else {
                         p_150434_.drop(this.getCarried().split(1), true);
                     }
@@ -401,6 +_,7 @@
                 ItemStack itemstack10 = this.getCarried();
                 p_150434_.updateTutorialInventoryAction(itemstack10, slot7.getItem(), clickaction);
                 if (!this.tryItemClickBehaviourOverride(p_150434_, clickaction, slot7, itemstack9, itemstack10)) {
+                    if (!net.minecraftforge.event.ForgeEventFactory.onItemStackedOn(itemstack9, itemstack10, slot7, clickaction, p_150434_, createCarriedSlotAccess()))
                     if (itemstack9.isEmpty()) {
                         if (!itemstack10.isEmpty()) {
                             int i3 = clickaction == ClickAction.PRIMARY ? itemstack10.getCount() : 1;
@@ -433,7 +_,16 @@
                 }
 
                 slot7.setChanged();
+            // CraftBukkit start - Make sure the client has the right slot contents
+            if (p_150434_ instanceof ServerPlayer serverPlayer && slot7.getMaxStackSize() != 64) {
+               serverPlayer.connection.send(new ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), slot7.index, slot7.getItem()));
+               // Updating a crafting inventory makes the client reset the result slot, have to send it again
+               if (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING) {
+                  serverPlayer.connection.send(new ClientboundContainerSetSlotPacket(this.containerId, this.incrementStateId(), 0, this.getSlot(0).getItem()));
+               }
             }
+            // CraftBukkit end
+         }
         } else if (p_150433_ == ClickType.SWAP && (p_150432_ >= 0 && p_150432_ < 9 || p_150432_ == 40)) {
             ItemStack itemstack2 = inventory.getItem(p_150432_);
             Slot slot5 = this.slots.get(p_150431_);
@@ -535,16 +_,18 @@
         if (p_38940_ instanceof ServerPlayer) {
             ItemStack itemstack = this.getCarried();
             if (!itemstack.isEmpty()) {
-                if (p_38940_.isAlive() && !((ServerPlayer)p_38940_).hasDisconnected()) {
-                    p_38940_.getInventory().placeItemBackInInventory(itemstack);
-                } else {
-                    p_38940_.drop(itemstack, false);
-                }
-
-                this.setCarried(ItemStack.EMPTY);
+            this.setCarried(ItemStack.EMPTY); // CraftBukkit - SPIGOT-4556 - from below
+            if (p_38940_.isAlive() && !((ServerPlayer)p_38940_).hasDisconnected()) {
+               p_38940_.getInventory().placeItemBackInInventory(itemstack);
+            } else {
+               p_38940_.drop(itemstack, false);
             }
-        }
-    }
+
+            // this.setCarried(ItemStack.EMPTY); // CraftBukkit - moved up
+         }
+      }
+
+   }
 
     protected void clearContainer(Player p_150412_, Container p_150413_) {
         if (!p_150412_.isAlive() || p_150412_ instanceof ServerPlayer && ((ServerPlayer)p_150412_).hasDisconnected()) {
@@ -598,7 +_,7 @@
                 ItemStack itemstack = slot.getItem();
                 if (!itemstack.isEmpty() && ItemStack.isSameItemSameComponents(p_38904_, itemstack)) {
                     int j = itemstack.getCount() + p_38904_.getCount();
-                    int k = slot.getMaxStackSize(itemstack);
+                    int k = Math.min(slot.getMaxStackSize(itemstack), itemstack.getMaxStackSize());
                     if (j <= k) {
                         p_38904_.setCount(0);
                         itemstack.setCount(j);
@@ -769,4 +_,13 @@
         this.stateId = this.stateId + 1 & 32767;
         return this.stateId;
     }
+
+   // CraftBukkit start
+   public void broadcastCarriedItem() {
+      this.remoteCarried = this.getCarried().copy();
+      if (this.synchronizer != null) {
+         this.synchronizer.sendCarriedChange(this, this.remoteCarried);
+      }
+   }
+   // CraftBukkit end
 }
