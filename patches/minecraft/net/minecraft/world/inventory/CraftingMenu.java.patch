--- a/net/minecraft/world/inventory/CraftingMenu.java
+++ b/net/minecraft/world/inventory/CraftingMenu.java
@@ -1,6 +_,8 @@
 package net.minecraft.world.inventory;
 
 import java.util.Optional;
+
+import com.mohistmc.mohist.plugins.ban.bans.BanItem;
 import net.minecraft.network.protocol.game.ClientboundContainerSetSlotPacket;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.Container;
@@ -12,8 +_,13 @@
 import net.minecraft.world.item.crafting.Recipe;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.item.crafting.RecipeType;
+import net.minecraft.world.item.crafting.RepairItemRecipe;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
+import org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryCrafting;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftInventoryView;
+import org.spigotmc.AsyncCatcher;
 
 public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
    public static final int RESULT_SLOT = 0;
@@ -28,6 +_,20 @@
    public final ContainerLevelAccess access;
    private final Player player;
 
+   // CraftBukkit start
+   private CraftInventoryView bukkitEntity = null;
+   @Override
+   public CraftInventoryView getBukkitView() {
+      if (bukkitEntity != null) {
+         return bukkitEntity;
+      }
+
+      CraftInventoryCrafting inventory = new CraftInventoryCrafting(this.craftSlots, this.resultSlots);
+      bukkitEntity = new CraftInventoryView(this.player.getBukkitEntity(), inventory, this);
+      return bukkitEntity;
+   }
+   // CraftBukkit end
+
    public CraftingMenu(int p_39353_, Inventory p_39354_) {
       this(p_39353_, p_39354_, ContainerLevelAccess.NULL);
    }
@@ -36,6 +_,8 @@
       super(MenuType.CRAFTING, p_39356_);
       this.access = p_39358_;
       this.player = p_39357_.player;
+      ((TransientCraftingContainer)this.craftSlots).setOwner(p_39357_.player); // CraftBukkit - pass player // Mohist
+      ((TransientCraftingContainer)this.craftSlots).resultInventory = this.resultSlots;
       this.addSlot(new ResultSlot(p_39357_.player, this.craftSlots, this.resultSlots, 0, 124, 35));
 
       for(int i = 0; i < 3; ++i) {
@@ -66,12 +_,17 @@
             CraftingRecipe craftingrecipe = recipeholder.value();
             if (p_150551_.setRecipeUsed(p_150548_, serverplayer, recipeholder)) {
                ItemStack itemstack1 = craftingrecipe.assemble(p_150550_, p_150548_.registryAccess());
-               if (itemstack1.isItemEnabled(p_150548_.enabledFeatures())) {
-                  itemstack = itemstack1;
+               if (!BanItem.check(itemstack1)) {
+                  if (itemstack1.isItemEnabled(p_150548_.enabledFeatures())) {
+                     itemstack = itemstack1;
+                  }
                }
             }
          }
 
+         if (!AsyncCatcher.catchAsync()) {
+            itemstack = CraftEventFactory.callPreCraftEvent(p_150550_, p_150551_, itemstack, p_150547_.getBukkitView(), optional.map(RecipeHolder::value).orElse(null) instanceof RepairItemRecipe); // CraftBukkit
+         }
          p_150551_.setItem(0, itemstack);
          p_150547_.setRemoteSlot(0, itemstack);
          serverplayer.connection.send(new ClientboundContainerSetSlotPacket(p_150547_.containerId, p_150547_.incrementStateId(), 0, itemstack));
@@ -105,6 +_,7 @@
    }
 
    public boolean stillValid(Player p_39368_) {
+      if (!this.checkReachable) return true; // CraftBukkit
       return stillValid(this.access, p_39368_, Blocks.CRAFTING_TABLE);
    }
 
