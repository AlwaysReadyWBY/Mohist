--- a/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -18,25 +_,35 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.inventory.CraftInventoryGrindstone;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
 
 public class GrindstoneMenu extends AbstractContainerMenu {
-    public static final int MAX_NAME_LENGTH = 35;
-    public static final int INPUT_SLOT = 0;
-    public static final int ADDITIONAL_SLOT = 1;
-    public static final int RESULT_SLOT = 2;
-    private static final int INV_SLOT_START = 3;
-    private static final int INV_SLOT_END = 30;
-    private static final int USE_ROW_SLOT_START = 30;
-    private static final int USE_ROW_SLOT_END = 39;
-    private final Container resultSlots = new ResultContainer();
-    final Container repairSlots = new SimpleContainer(2) {
-        @Override
-        public void setChanged() {
-            super.setChanged();
-            GrindstoneMenu.this.slotsChanged(this);
-        }
-    };
-    private final ContainerLevelAccess access;
+   public static final int MAX_NAME_LENGTH = 35;
+   public static final int INPUT_SLOT = 0;
+   public static final int ADDITIONAL_SLOT = 1;
+   public static final int RESULT_SLOT = 2;
+   private static final int INV_SLOT_START = 3;
+   private static final int INV_SLOT_END = 30;
+   private static final int USE_ROW_SLOT_START = 30;
+   private static final int USE_ROW_SLOT_END = 39;
+   private final Container resultSlots = new ResultContainer();
+   final Container repairSlots = new SimpleContainer(2) {
+       public void setChanged() {
+           super.setChanged();
+           GrindstoneMenu.this.slotsChanged(this);
+       }
+
+       // CraftBukkit start
+       @Override
+       public Location getLocation() {
+           return GrindstoneMenu.this.access.getLocation();
+       }
+       // CraftBukkit end
+   };
+   private final ContainerLevelAccess access;
+   private int xp = -1;
 
     public GrindstoneMenu(int p_39563_, Inventory p_39564_) {
         this(p_39563_, p_39564_, ContainerLevelAccess.NULL);
@@ -48,13 +_,13 @@
         this.addSlot(new Slot(this.repairSlots, 0, 49, 19) {
             @Override
             public boolean mayPlace(ItemStack p_39607_) {
-                return p_39607_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39607_);
+                return p_39607_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39607_) || p_39607_.canGrindstoneRepair();
             }
         });
         this.addSlot(new Slot(this.repairSlots, 1, 49, 40) {
             @Override
             public boolean mayPlace(ItemStack p_39616_) {
-                return p_39616_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39616_);
+                return p_39616_.isDamageableItem() || EnchantmentHelper.hasAnyEnchantments(p_39616_) || p_39616_.canGrindstoneRepair();
             }
         });
         this.addSlot(new Slot(this.resultSlots, 2, 129, 34) {
@@ -65,6 +_,7 @@
 
             @Override
             public void onTake(Player p_150574_, ItemStack p_150575_) {
+                if (net.minecraftforge.common.ForgeHooks.onGrindstoneTake(GrindstoneMenu.this.repairSlots, p_39568_, this::getExperienceAmount)) return;
                 p_39568_.execute((p_39634_, p_39635_) -> {
                     if (p_39634_ instanceof ServerLevel) {
                         ExperienceOrb.award((ServerLevel)p_39634_, Vec3.atCenterOf(p_39635_), this.getExperienceAmount(p_39634_));
@@ -77,6 +_,7 @@
             }
 
             private int getExperienceAmount(Level p_39632_) {
+                if (xp > -1) return xp;
                 int l = 0;
                 l += this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(0));
                 l += this.getExperienceFromItem(GrindstoneMenu.this.repairSlots.getItem(1));
@@ -113,6 +_,8 @@
         for (int k = 0; k < 9; k++) {
             this.addSlot(new Slot(p_39567_, k, 8 + k * 18, 142));
         }
+
+        player = (org.bukkit.entity.Player) p_39567_.player.getBukkitEntity(); // CraftBukkit
     }
 
     @Override
@@ -129,6 +_,17 @@
     }
 
     private ItemStack computeResult(ItemStack p_335167_, ItemStack p_329934_) {
+        var event = net.minecraftforge.event.ForgeEventFactory.onGrindstoneChange(p_335167_, p_329934_, this.resultSlots, -1);
+        if (event.isCanceled()) {
+            this.xp = -1;
+            return ItemStack.EMPTY;
+        } else if (!event.getOutput().isEmpty()) {
+            this.xp = event.getXp();
+            return event.getOutput();
+        } else {
+            this.xp = Integer.MIN_VALUE;
+        }
+
         boolean flag = !p_335167_.isEmpty() || !p_329934_.isEmpty();
         if (!flag) {
             return ItemStack.EMPTY;
@@ -212,6 +_,7 @@
 
     @Override
     public boolean stillValid(Player p_39572_) {
+        if (!this.checkReachable) return true; // CraftBukkit
         return stillValid(this.access, p_39572_, Blocks.GRINDSTONE);
     }
 
@@ -261,4 +_,20 @@
 
         return itemstack;
     }
+
+    // CraftBukkit start
+    private CraftInventoryView bukkitEntity = null;
+    private org.bukkit.entity.Player player;
+
+    @Override
+    public CraftInventoryView getBukkitView() {
+        if (bukkitEntity != null) {
+            return bukkitEntity;
+        }
+
+        CraftInventoryGrindstone inventory = new CraftInventoryGrindstone(this.repairSlots, this.resultSlots);
+        bukkitEntity = new CraftInventoryView(this.player, inventory, this);
+        return bukkitEntity;
+    }
+    // CraftBukkit end
 }
