--- a/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -24,6 +_,16 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.EnchantingTableBlock;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftInventoryEnchanting;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.enchantments.EnchantmentOffer;
+import org.bukkit.event.enchantment.EnchantItemEvent;
+import org.bukkit.event.enchantment.PrepareItemEnchantEvent;
 
 public class EnchantmentMenu extends AbstractContainerMenu {
     static final ResourceLocation EMPTY_SLOT_LAPIS_LAZULI = new ResourceLocation("item/empty_slot_lapis_lazuli");
@@ -33,6 +_,13 @@
             super.setChanged();
             EnchantmentMenu.this.slotsChanged(this);
         }
+
+      // CraftBukkit start
+      @Override
+      public Location getLocation() {
+         return access.getLocation();
+      }
+      // CraftBukkit end
     };
     private final ContainerLevelAccess access;
     private final RandomSource random = RandomSource.create();
@@ -41,6 +_,11 @@
     public final int[] enchantClue = new int[]{-1, -1, -1};
     public final int[] levelClue = new int[]{-1, -1, -1};
 
+   // CraftBukkit start
+   private CraftInventoryView bukkitEntity = null;
+   private org.bukkit.entity.Player player;
+   // CraftBukkit end
+
     public EnchantmentMenu(int p_39454_, Inventory p_39455_) {
         this(p_39454_, p_39455_, ContainerLevelAccess.NULL);
     }
@@ -57,7 +_,7 @@
         this.addSlot(new Slot(this.enchantSlots, 1, 35, 47) {
             @Override
             public boolean mayPlace(ItemStack p_39517_) {
-                return p_39517_.is(Items.LAPIS_LAZULI);
+                return p_39517_.is(net.minecraftforge.common.Tags.Items.ENCHANTING_FUELS);
             }
 
             @Override
@@ -86,31 +_,35 @@
         this.addDataSlot(DataSlot.shared(this.levelClue, 0));
         this.addDataSlot(DataSlot.shared(this.levelClue, 1));
         this.addDataSlot(DataSlot.shared(this.levelClue, 2));
-    }
+      // CraftBukkit start
+      player = (org.bukkit.entity.Player) p_39458_.player.getBukkitEntity();
+      // CraftBukkit end
+   }
 
-    @Override
-    public void slotsChanged(Container p_39461_) {
-        if (p_39461_ == this.enchantSlots) {
-            ItemStack itemstack = p_39461_.getItem(0);
-            if (!itemstack.isEmpty() && itemstack.isEnchantable()) {
+   public void slotsChanged(Container p_39461_) {
+      if (p_39461_ == this.enchantSlots) {
+         ItemStack itemstack = p_39461_.getItem(0);
+         if (!itemstack.isEmpty()) { // CraftBukkit - relax condition
                 this.access.execute((p_327074_, p_327075_) -> {
-                    int j = 0;
+                    float j = 0;
 
                     for (BlockPos blockpos : EnchantingTableBlock.BOOKSHELF_OFFSETS) {
                         if (EnchantingTableBlock.isValidBookShelf(p_327074_, p_327075_, blockpos)) {
                             j++;
+                            j += p_327074_.getBlockState(p_327075_.offset(blockpos)).getEnchantPowerBonus(p_327074_, p_327075_.offset(blockpos));
                         }
                     }
 
                     this.random.setSeed((long)this.enchantmentSeed.get());
 
                     for (int k = 0; k < 3; k++) {
-                        this.costs[k] = EnchantmentHelper.getEnchantmentCost(this.random, k, j, itemstack);
+                        this.costs[k] = EnchantmentHelper.getEnchantmentCost(this.random, k, (int)j, itemstack);
                         this.enchantClue[k] = -1;
                         this.levelClue[k] = -1;
                         if (this.costs[k] < k + 1) {
                             this.costs[k] = 0;
                         }
+                        this.costs[k] = net.minecraftforge.event.ForgeEventFactory.onEnchantmentLevelSet(p_327074_, p_327075_, k, (int)j, itemstack, costs[k]);
                     }
 
                     for (int l = 0; l < 3; l++) {
@@ -124,6 +_,41 @@
                         }
                     }
 
+               // CraftBukkit start
+               CraftItemStack item = CraftItemStack.asCraftMirror(itemstack);
+               org.bukkit.enchantments.EnchantmentOffer[] offers = new EnchantmentOffer[3];
+               for (int l = 0; l < 3; ++l) {
+                  org.bukkit.enchantments.Enchantment enchantment = (this.enchantClue[l] >= 0) ? org.bukkit.enchantments.Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(BuiltInRegistries.ENCHANTMENT.byId(this.enchantClue[l])))) : null;
+                  offers[l] = (enchantment != null) ? new EnchantmentOffer(enchantment, this.levelClue[l], this.costs[l]) : null;
+               }
+
+               PrepareItemEnchantEvent event = new PrepareItemEnchantEvent(player, this.getBukkitView(), access.getLocation().getBlock(), item, offers, (int) j);
+               event.setCancelled(!itemstack.isEnchantable());
+               Bukkit.getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  for (int l = 0; l < 3; ++l) {
+                     this.costs[l] = 0;
+                     this.enchantClue[l] = -1;
+                     this.levelClue[l] = -1;
+                  }
+                  return;
+               }
+
+               for (int l = 0; l < 3; l++) {
+                  EnchantmentOffer offer = event.getOffers()[l];
+                  if (offer != null) {
+                     this.costs[l] = offer.getCost();
+                     this.enchantClue[l] = BuiltInRegistries.ENCHANTMENT.getId(BuiltInRegistries.ENCHANTMENT.get(CraftNamespacedKey.toMinecraft(offer.getEnchantment().getKey())));
+                     this.levelClue[l] = offer.getEnchantmentLevel();
+                  } else {
+                     this.costs[l] = 0;
+                     this.enchantClue[l] = -1;
+                     this.levelClue[l] = -1;
+                  }
+               }
+               // CraftBukkit end
+
                     this.broadcastChanges();
                 });
             } else {
@@ -136,58 +_,98 @@
         }
     }
 
-    @Override
-    public boolean clickMenuButton(Player p_39465_, int p_39466_) {
-        if (p_39466_ >= 0 && p_39466_ < this.costs.length) {
-            ItemStack itemstack = this.enchantSlots.getItem(0);
-            ItemStack itemstack1 = this.enchantSlots.getItem(1);
-            int i = p_39466_ + 1;
-            if ((itemstack1.isEmpty() || itemstack1.getCount() < i) && !p_39465_.hasInfiniteMaterials()) {
-                return false;
-            } else if (this.costs[p_39466_] <= 0
-                || itemstack.isEmpty()
-                || (p_39465_.experienceLevel < i || p_39465_.experienceLevel < this.costs[p_39466_]) && !p_39465_.getAbilities().instabuild) {
-                return false;
-            } else {
-                this.access.execute((p_327081_, p_327082_) -> {
-                    ItemStack itemstack2 = itemstack;
-                    List<EnchantmentInstance> list = this.getEnchantmentList(p_327081_.enabledFeatures(), itemstack, p_39466_, this.costs[p_39466_]);
-                    if (!list.isEmpty()) {
-                        p_39465_.onEnchantmentPerformed(itemstack, i);
-                        if (itemstack.is(Items.BOOK)) {
-                            itemstack2 = itemstack.transmuteCopy(Items.ENCHANTED_BOOK, 1);
-                            this.enchantSlots.setItem(0, itemstack2);
-                        }
-
-                        for (EnchantmentInstance enchantmentinstance : list) {
-                            itemstack2.enchant(enchantmentinstance.enchantment, enchantmentinstance.level);
-                        }
-
-                        if (!p_39465_.hasInfiniteMaterials()) {
-                            itemstack1.shrink(i);
-                            if (itemstack1.isEmpty()) {
-                                this.enchantSlots.setItem(1, ItemStack.EMPTY);
-                            }
-                        }
-
-                        p_39465_.awardStat(Stats.ENCHANT_ITEM);
-                        if (p_39465_ instanceof ServerPlayer) {
-                            CriteriaTriggers.ENCHANTED_ITEM.trigger((ServerPlayer)p_39465_, itemstack2, i);
-                        }
-
-                        this.enchantSlots.setChanged();
-                        this.enchantmentSeed.set(p_39465_.getEnchantmentSeed());
-                        this.slotsChanged(this.enchantSlots);
-                        p_327081_.playSound(null, p_327082_, SoundEvents.ENCHANTMENT_TABLE_USE, SoundSource.BLOCKS, 1.0F, p_327081_.random.nextFloat() * 0.1F + 0.9F);
-                    }
-                });
-                return true;
-            }
-        } else {
-            Util.logAndPauseIfInIde(p_39465_.getName() + " pressed invalid button id: " + p_39466_);
-            return false;
-        }
-    }
+   public boolean clickMenuButton(Player p_39465_, int p_39466_) {
+      if (p_39466_ >= 0 && p_39466_ < this.costs.length) {
+         ItemStack itemstack = this.enchantSlots.getItem(0);
+         ItemStack itemstack1 = this.enchantSlots.getItem(1);
+         int i = p_39466_ + 1;
+         if ((itemstack1.isEmpty() || itemstack1.getCount() < i) && !p_39465_.getAbilities().instabuild) {
+            return false;
+         } else if (this.costs[p_39466_] <= 0 || itemstack.isEmpty() || (p_39465_.experienceLevel < i || p_39465_.experienceLevel < this.costs[p_39466_]) && !p_39465_.getAbilities().instabuild) {
+            return false;
+         } else {
+            this.access.execute((p_296875_, p_296876_) -> {
+               ItemStack itemstack2 = itemstack;
+               List<EnchantmentInstance> list = this.getEnchantmentList(itemstack, p_39466_, this.costs[p_39466_]);
+               if (true || !list.isEmpty()) {
+                  // pPlayer.onEnchantmentPerformed(itemstack, i); // Moved down
+                  boolean flag = itemstack.is(Items.BOOK);
+                  Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<>();
+                  for (Object obj : list) {
+                     EnchantmentInstance instance = (EnchantmentInstance) obj;
+                     enchants.put(org.bukkit.enchantments.Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(instance.enchantment))), instance.level);
+                  }
+                  CraftItemStack item = CraftItemStack.asCraftMirror(itemstack2);
+
+                  org.bukkit.enchantments.Enchantment hintedEnchantment = org.bukkit.enchantments.Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(Enchantment.byId(enchantClue[p_39466_]))));
+                  if (BanEnchantment.check(hintedEnchantment)) return;
+                  int hintedEnchantmentLevel = levelClue[p_39466_];
+                  EnchantItemEvent event = new EnchantItemEvent((org.bukkit.entity.Player) p_39465_.getBukkitEntity(), this.getBukkitView(), access.getLocation().getBlock(), item, this.costs[p_39466_], enchants, hintedEnchantment, hintedEnchantmentLevel, p_39466_);
+                  Bukkit.getPluginManager().callEvent(event);
+
+                  int level = event.getExpLevelCost();
+                  if (event.isCancelled() || (level > p_39465_.experienceLevel && !p_39465_.getAbilities().instabuild) || event.getEnchantsToAdd().isEmpty()) {
+                     return;
+                  }
+                  if (flag) {
+                     itemstack2 = new ItemStack(Items.ENCHANTED_BOOK);
+                     CompoundTag compoundtag = itemstack.getTag();
+                     if (compoundtag != null) {
+                        itemstack2.setTag(compoundtag.copy());
+                     }
+
+                     this.enchantSlots.setItem(0, itemstack2);
+                  }
+
+                  for (Map.Entry<org.bukkit.enchantments.Enchantment, Integer> entry : event.getEnchantsToAdd().entrySet()) {
+                     try {
+                        if (flag) {
+                           NamespacedKey enchantId = entry.getKey().getKey();
+                           net.minecraft.world.item.enchantment.Enchantment nms = BuiltInRegistries.ENCHANTMENT.get(CraftNamespacedKey.toMinecraft(enchantId));
+                           if (nms == null) {
+                              continue;
+                           }
+
+                           EnchantmentInstance weightedrandomenchant = new EnchantmentInstance(nms, entry.getValue());
+                           EnchantedBookItem.addEnchantment(itemstack2, weightedrandomenchant);
+                        } else {
+                           item.addUnsafeEnchantment(entry.getKey(), entry.getValue());
+                        }
+                     } catch (IllegalArgumentException e) {
+                        /* Just swallow invalid enchantments */
+                     }
+                  }
+
+                  p_39465_.onEnchantmentPerformed(itemstack, i);
+                  // CraftBukkit end
+
+                  // CraftBukkit - TODO: let plugins change this
+                  if (!p_39465_.getAbilities().instabuild) {
+                     itemstack1.shrink(i);
+                     if (itemstack1.isEmpty()) {
+                        this.enchantSlots.setItem(1, ItemStack.EMPTY);
+                     }
+                  }
+
+                  p_39465_.awardStat(Stats.ENCHANT_ITEM);
+                  if (p_39465_ instanceof ServerPlayer) {
+                     CriteriaTriggers.ENCHANTED_ITEM.trigger((ServerPlayer)p_39465_, itemstack2, i);
+                  }
+
+                  this.enchantSlots.setChanged();
+                  this.enchantmentSeed.set(p_39465_.getEnchantmentSeed());
+                  this.slotsChanged(this.enchantSlots);
+                  p_296875_.playSound((Player)null, p_296876_, SoundEvents.ENCHANTMENT_TABLE_USE, SoundSource.BLOCKS, 1.0F, p_296875_.random.nextFloat() * 0.1F + 0.9F);
+               }
+
+            });
+            return true;
+         }
+      } else {
+         Util.logAndPauseIfInIde(p_39465_.getName() + " pressed invalid button id: " + p_39466_);
+         return false;
+      }
+   }
 
     private List<EnchantmentInstance> getEnchantmentList(FeatureFlagSet p_330227_, ItemStack p_39472_, int p_39473_, int p_39474_) {
         this.random.setSeed((long)(this.enchantmentSeed.get() + p_39473_));
@@ -216,6 +_,7 @@
 
     @Override
     public boolean stillValid(Player p_39463_) {
+      if (!this.checkReachable) return true; // CraftBukkit
         return stillValid(this.access, p_39463_, Blocks.ENCHANTING_TABLE);
     }
 
@@ -234,7 +_,7 @@
                 if (!this.moveItemStackTo(itemstack1, 2, 38, true)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (itemstack1.is(Items.LAPIS_LAZULI)) {
+            } else if (itemstack1.is(net.minecraftforge.common.Tags.Items.ENCHANTING_FUELS)) {
                 if (!this.moveItemStackTo(itemstack1, 1, 2, true)) {
                     return ItemStack.EMPTY;
                 }
@@ -263,4 +_,17 @@
 
         return itemstack;
     }
+
+   // CraftBukkit start
+   @Override
+   public CraftInventoryView getBukkitView() {
+      if (bukkitEntity != null) {
+         return bukkitEntity;
+      }
+
+      CraftInventoryEnchanting inventory = new CraftInventoryEnchanting(this.enchantSlots);
+      bukkitEntity = new CraftInventoryView(this.player, inventory, this);
+      return bukkitEntity;
+   }
+   // CraftBukkit end
 }
