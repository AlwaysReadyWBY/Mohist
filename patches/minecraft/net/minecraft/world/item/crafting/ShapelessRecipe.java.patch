--- a/net/minecraft/world/item/crafting/ShapelessRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapelessRecipe.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.item.crafting;
 
+import com.mohistmc.mohist.bukkit.inventory.MohistSpecialRecipe;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.MapCodec;
@@ -10,26 +_,51 @@
 import net.minecraft.core.NonNullList;
 import net.minecraft.network.RegistryFriendlyByteBuf;
 import net.minecraft.network.codec.StreamCodec;
+import net.minecraft.world.entity.player.StackedContents;
+import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
 
 public class ShapelessRecipe implements CraftingRecipe {
     final String group;
     final CraftingBookCategory category;
     final ItemStack result;
     final NonNullList<Ingredient> ingredients;
+    private final boolean isSimple;
 
     public ShapelessRecipe(String p_249640_, CraftingBookCategory p_249390_, ItemStack p_252071_, NonNullList<Ingredient> p_250689_) {
         this.group = p_249640_;
         this.category = p_249390_;
         this.result = p_252071_;
         this.ingredients = p_250689_;
-    }
-
-    @Override
-    public RecipeSerializer<?> getSerializer() {
-        return RecipeSerializer.SHAPELESS_RECIPE;
-    }
+        this.isSimple = p_250689_.stream().allMatch(Ingredient::isSimple);
+    }
+
+    // CraftBukkit start
+    @SuppressWarnings("unchecked")
+    public org.bukkit.inventory.Recipe toBukkitRecipe(NamespacedKey id) {
+        if (this.result.isEmpty()) {
+            return new MohistSpecialRecipe(id, this);
+        }
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+        CraftShapelessRecipe recipe = new CraftShapelessRecipe(id, result, this);
+        recipe.setGroup(this.group);
+        recipe.setCategory(CraftRecipe.getCategory(this.category()));
+
+        for (Ingredient list : this.ingredients) {
+            recipe.addIngredient(CraftRecipe.toBukkit(list));
+        }
+        return recipe;
+    }
+    // CraftBukkit end
+
+   public RecipeSerializer<?> getSerializer() {
+      return RecipeSerializer.SHAPELESS_RECIPE;
+   }
 
     @Override
     public String getGroup() {
@@ -54,10 +_,12 @@
     public boolean matches(CraftingInput p_345423_, Level p_44263_) {
         if (p_345423_.ingredientCount() != this.ingredients.size()) {
             return false;
+        } else if (p_345423_.size() == 1 && this.ingredients.size() == 1) {
+            return this.ingredients.getFirst().test(p_345423_.getItem(0));
+        } else if (!isSimple) {
+            return net.minecraftforge.common.util.RecipeMatcher.findMatches(p_345423_.items(),  this.ingredients) != null;
         } else {
-            return p_345423_.size() == 1 && this.ingredients.size() == 1
-                ? this.ingredients.getFirst().test(p_345423_.getItem(0))
-                : p_345423_.stackedContents().canCraft(this, null);
+            return p_345423_.stackedContents().canCraft(this, null);
         }
     }
 
@@ -85,7 +_,7 @@
                                     if (aingredient.length == 0) {
                                         return DataResult.error(() -> "No ingredients for shapeless recipe");
                                     } else {
-                                        return aingredient.length > 9
+                                        return aingredient.length > ShapedRecipe.MAX_WIDTH * ShapedRecipe.MAX_HEIGHT
                                             ? DataResult.error(() -> "Too many ingredients for shapeless recipe")
                                             : DataResult.success(NonNullList.of(Ingredient.EMPTY, aingredient));
                                     }
