--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -12,9 +_,11 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.JsonOps;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Comparator;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -32,6 +_,7 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+import net.minecraftforge.registries.ForgeRegistries;
 import org.slf4j.Logger;
 
 public class RecipeManager extends SimpleJsonResourceReloadListener {
@@ -40,35 +_,58 @@
    public Map<RecipeType<?>, Map<ResourceLocation, RecipeHolder<?>>> recipes = ImmutableMap.of();
    private Map<ResourceLocation, RecipeHolder<?>> byName = ImmutableMap.of();
    private boolean hasErrors;
+   private final net.minecraftforge.common.crafting.conditions.ICondition.IContext context; //Forge: add context
+   public Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>>> recipesCB = ImmutableMap.of(); // CraftBukkit  // Mohist use obf name
 
+   /** @deprecated Forge: use {@linkplain RecipeManager#RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext) constructor with context}. */
+   @Deprecated
    public RecipeManager() {
+      this(net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+   }
+
+   public RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
       super(GSON, "recipes");
+      this.context = context;
    }
 
    protected void apply(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
       this.hasErrors = false;
-      Map<RecipeType<?>, ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>>> map = Maps.newHashMap();
+
+      // CraftBukkit start - SPIGOT-5667 make sure all types are populated and mutable
+      Map<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>>> map1 = Maps.newHashMap();
+      for (RecipeType<?> recipeType : BuiltInRegistries.RECIPE_TYPE) {
+         map1.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+      }
+      // CraftBukkit end
       ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>> builder = ImmutableMap.builder();
 
       for(Map.Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
          ResourceLocation resourcelocation = entry.getKey();
+         if (resourcelocation.getPath().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
          try {
+            if (entry.getValue().isJsonObject() && !net.minecraftforge.common.ForgeHooks.readAndTestCondition(this.context, entry.getValue().getAsJsonObject())) {
+               LOGGER.debug("Skipping loading recipe {} as it's conditions were not met", resourcelocation);
+               continue;
+            }
             RecipeHolder<?> recipeholder = fromJson(resourcelocation, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
-            map.computeIfAbsent(recipeholder.value().getType(), (p_44075_) -> {
-               return ImmutableMap.builder();
-            }).put(resourcelocation, recipeholder);
+
+            // CraftBukkit start
+            map1.computeIfAbsent(recipeholder.value().getType(), (recipes) -> {
+               return new Object2ObjectLinkedOpenHashMap<>();
+               // CraftBukkit end
+            }).putAndMoveToFirst(resourcelocation, recipeholder);
+
             builder.put(resourcelocation, recipeholder);
          } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
-            LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
+            LOGGER.debug("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
          }
       }
 
-      this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Map.Entry::getKey, (p_44033_) -> {
-         return p_44033_.getValue().build();
-      }));
+      this.recipes = (Map) map1;
+      this.recipesCB = map1;
       this.byName = builder.build();
-      LOGGER.info("Loaded {} recipes", (int)map.size());
+      LOGGER.info("Loaded {} recipes", (int)map1.size());
    }
 
    public boolean hadErrorsLoading() {
@@ -76,9 +_,11 @@
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<RecipeHolder<T>> getRecipeFor(RecipeType<T> p_44016_, C p_44017_, Level p_44018_) {
-      return this.byType(p_44016_).values().stream().filter((p_296918_) -> {
+      Optional<RecipeHolder<T>> optional = this.byType(p_44016_).values().stream().filter((p_296918_) -> {
          return p_296918_.value().matches(p_44017_, p_44018_);
       }).findFirst();
+      p_44017_.setCurrentRecipe(optional.orElse(null));
+      return optional;
    }
 
    public <C extends Container, T extends Recipe<C>> Optional<Pair<ResourceLocation, RecipeHolder<T>>> getRecipeFor(RecipeType<T> p_220249_, C p_220250_, Level p_220251_, @Nullable ResourceLocation p_220252_) {
@@ -194,4 +_,58 @@
    public interface CachedCheck<C extends Container, T extends Recipe<C>> {
       Optional<RecipeHolder<T>> getRecipeFor(C p_220280_, Level p_220281_);
    }
+
+   // CraftBukkit start
+   public void addRecipe(RecipeHolder<?> irecipe) {
+      Map<ResourceLocation, RecipeHolder<?>> map = this.recipes.get(irecipe.value().getType());
+      Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>> map0;
+      if (!(map instanceof Object2ObjectLinkedOpenHashMap)) {
+         Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>> hashMap = new Object2ObjectLinkedOpenHashMap<>();
+         hashMap.putAll(map);
+         if (this.recipes instanceof ImmutableMap) {
+            this.recipes = new HashMap<>(recipes);
+         }
+         this.recipes.put(irecipe.value().getType(), hashMap);
+         map0 = hashMap;
+      } else {
+         map0 = ((Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>>) map);
+      }
+
+      Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>> craftbukkit = this.recipesCB.get(irecipe.value().getType()); // CraftBukkit
+
+      if (this.byName.containsKey(irecipe.id()) || map0.containsKey(irecipe.id()) || craftbukkit.containsKey(irecipe.id())) {
+         throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.id());
+      } else {
+         if (this.byName instanceof ImmutableMap) {
+            this.byName = new HashMap<>(byName);
+         }
+         map0.putAndMoveToFirst(irecipe.id(), irecipe);
+         craftbukkit.putAndMoveToFirst(irecipe.id(), irecipe); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+         this.byName.put(irecipe.id(), irecipe);
+      }
+   }
+
+   public void clearRecipes() {
+      this.recipes = Maps.newHashMap();
+      for (RecipeType<?> recipeType : ForgeRegistries.RECIPE_TYPES) {
+         this.recipes.put(recipeType, ImmutableMap.of());
+      }
+
+      this.recipesCB = Maps.newHashMap();
+      for (RecipeType<?> recipeType : BuiltInRegistries.RECIPE_TYPE) {
+         this.recipesCB.put(recipeType, new Object2ObjectLinkedOpenHashMap<>());
+      }
+      this.byName = new HashMap<>();
+   }
+
+   public boolean removeRecipe(ResourceLocation mcKey) {
+      for (Map<ResourceLocation, RecipeHolder<?>> recipes : recipes.values()) {
+         recipes.remove(mcKey);
+      }
+      for (Object2ObjectLinkedOpenHashMap<ResourceLocation, RecipeHolder<?>> recipes0 : recipesCB.values()) {
+         recipes0.remove(mcKey);
+      }
+      return byName.remove(mcKey) != null;
+   }
+   // CraftBukkit end
 }
