--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -3,6 +_,8 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
+import com.google.common.collect.LinkedHashMultimap;
+import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.collect.ImmutableMultimap.Builder;
 import com.google.gson.Gson;
@@ -14,6 +_,7 @@
 import com.mojang.serialization.JsonOps;
 import java.util.Collection;
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
@@ -37,45 +_,76 @@
     private static final Gson GSON = new GsonBuilder().setPrettyPrinting().disableHtmlEscaping().create();
     private static final Logger LOGGER = LogUtils.getLogger();
     private final HolderLookup.Provider registries;
-    private Multimap<RecipeType<?>, RecipeHolder<?>> byType = ImmutableMultimap.of();
+    public Multimap<RecipeType<?>, RecipeHolder<?>> byType = ImmutableMultimap.of();
     private Map<ResourceLocation, RecipeHolder<?>> byName = ImmutableMap.of();
     private boolean hasErrors;
+    private final net.minecraftforge.common.crafting.conditions.ICondition.IContext context; //Forge: add context
 
+    /** @deprecated Forge: use {@linkplain RecipeManager#RecipeManager(net.minecraftforge.common.crafting.conditions.ICondition.IContext) constructor with context}. */
     public RecipeManager(HolderLookup.Provider p_330459_) {
+        this(p_330459_, net.minecraftforge.common.crafting.conditions.ICondition.IContext.EMPTY);
+    }
+
+    public RecipeManager(HolderLookup.Provider p_330459_, net.minecraftforge.common.crafting.conditions.ICondition.IContext context) {
         super(GSON, "recipes");
         this.registries = p_330459_;
+        this.context = context;
     }
 
     protected void apply(Map<ResourceLocation, JsonElement> p_44037_, ResourceManager p_44038_, ProfilerFiller p_44039_) {
         this.hasErrors = false;
         Builder<RecipeType<?>, RecipeHolder<?>> builder = ImmutableMultimap.builder();
         com.google.common.collect.ImmutableMap.Builder<ResourceLocation, RecipeHolder<?>> builder1 = ImmutableMap.builder();
-        RegistryOps<JsonElement> registryops = this.registries.createSerializationContext(JsonOps.INSTANCE);
+        RegistryOps<JsonElement> registryops = this.registries.createSerializationContext(JsonOps.INSTANCE)
+            .withContext(net.minecraftforge.common.crafting.conditions.ICondition.IContext.KEY, this.context);
 
         for (Entry<ResourceLocation, JsonElement> entry : p_44037_.entrySet()) {
             ResourceLocation resourcelocation = entry.getKey();
+            if (resourcelocation.getPath().startsWith("_")) continue; //Forge: filter anything beginning with "_" as it's used for metadata.
 
             try {
+                if (entry.getValue().isJsonObject() && !net.minecraftforge.common.ForgeHooks.readAndTestCondition(registryops, entry.getValue().getAsJsonObject())) {
+                    LOGGER.debug("Skipping loading recipe {} as it's conditions were not met", resourcelocation);
+                    continue;
+                }
                 Recipe<?> recipe = Recipe.CODEC.parse(registryops, entry.getValue()).getOrThrow(JsonParseException::new);
                 RecipeHolder<?> recipeholder = new RecipeHolder<>(resourcelocation, recipe);
                 builder.put(recipe.getType(), recipeholder);
                 builder1.put(resourcelocation, recipeholder);
             } catch (IllegalArgumentException | JsonParseException jsonparseexception) {
-                LOGGER.error("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
+                LOGGER.debug("Parsing error loading recipe {}", resourcelocation, jsonparseexception);
             }
         }
 
-        this.byType = builder.build();
-        this.byName = builder1.build();
+        this.byType = LinkedHashMultimap.create(builder.build());
+        this.byName = Maps.newHashMap(builder1.build());
         LOGGER.info("Loaded {} recipes", this.byType.size());
     }
 
+    // CraftBukkit start
+    public void addRecipe(RecipeHolder<?> irecipe) {
+        org.spigotmc.AsyncCatcher.catchOp("Recipe Add"); // Spigot
+        Collection<RecipeHolder<?>> map = this.byType.get(irecipe.value().getType()); // CraftBukkit
+
+        if (this.byName.containsKey(irecipe.id())) {
+            throw new IllegalStateException("Duplicate recipe ignored with ID " + irecipe.id());
+        } else {
+            map.add(irecipe);
+            this.byName.put(irecipe.id(), irecipe);
+        }
+    }
+    // CraftBukkit end
+
     public boolean hadErrorsLoading() {
         return this.hasErrors;
     }
 
     public <C extends Container, T extends Recipe<C>> Optional<RecipeHolder<T>> getRecipeFor(RecipeType<T> p_44016_, C p_44017_, Level p_44018_) {
-        return this.byType(p_44016_).stream().filter(p_296918_ -> p_296918_.value().matches(p_44017_, p_44018_)).findFirst();
+        List<RecipeHolder<T>> list = this.byType(p_44016_).stream().filter(p_296918_ -> p_296918_.value().matches(p_44017_, p_44018_)).toList();
+        Optional<RecipeHolder<T>> recipe = (list.isEmpty()) ? Optional.empty() : Optional.of(list.getLast()); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+        p_44017_.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
+        return recipe;
+        // CraftBukkit end
     }
 
     public <C extends Container, T extends Recipe<C>> Optional<RecipeHolder<T>> getRecipeFor(
@@ -88,7 +_,12 @@
             }
         }
 
-        return this.byType(p_220249_).stream().filter(p_296912_ -> p_296912_.value().matches(p_220250_, p_220251_)).findFirst();
+        // CraftBukkit start
+        List<RecipeHolder<T>> list = this.byType(p_220249_).stream().filter(p_296912_ -> p_296912_.value().matches(p_220250_, p_220251_)).toList();
+        Optional<RecipeHolder<T>> recipe = (list.isEmpty()) ? Optional.empty() : Optional.of(list.getLast()); // CraftBukkit - SPIGOT-4638: last recipe gets priority
+        p_220250_.setCurrentRecipe(recipe.orElse(null)); // CraftBukkit - Clear recipe when no recipe is found
+        return recipe;
+        // CraftBukkit end
     }
 
     public <C extends Container, T extends Recipe<C>> List<RecipeHolder<T>> getAllRecipesFor(RecipeType<T> p_44014_) {
@@ -161,9 +_,28 @@
             builder1.put(recipeholder.id(), recipeholder);
         }
 
-        this.byType = builder.build();
-        this.byName = builder1.build();
-    }
+        this.byType = LinkedHashMultimap.create(builder.build());
+        this.byName = Maps.newHashMap(builder1.build());
+    }
+
+    // CraftBukkit start
+    public boolean removeRecipe(ResourceLocation mcKey) {
+        Iterator<RecipeHolder<?>> iter = byType.values().iterator();
+        while (iter.hasNext()) {
+            RecipeHolder<?> recipe = iter.next();
+            if (recipe.id().equals(mcKey)) {
+                iter.remove();
+            }
+        }
+
+        return byName.remove(mcKey) != null;
+    }
+
+    public void clearRecipes() {
+        this.byType = LinkedHashMultimap.create();
+        this.byName = Maps.newHashMap();
+    }
+    // CraftBukkit end
 
     public static <C extends Container, T extends Recipe<C>> RecipeManager.CachedCheck<C, T> createCheck(final RecipeType<T> p_220268_) {
         return new RecipeManager.CachedCheck<C, T>() {
