--- a/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -3,15 +_,31 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
 import net.minecraft.core.HolderLookup;
 import net.minecraft.core.NonNullList;
 import net.minecraft.network.RegistryFriendlyByteBuf;
 import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.inventory.CraftShapedRecipe;
+import org.bukkit.inventory.RecipeChoice;
 
-public class ShapedRecipe implements CraftingRecipe {
+public class ShapedRecipe implements CraftingRecipe, net.minecraftforge.common.crafting.IShapedRecipe<CraftingInput> {
+    static int MAX_WIDTH = 3;
+    static int MAX_HEIGHT = 3;
+    /**
+     * Expand the max width and height allowed in the deserializer.
+     * This should be called by modders who add custom crafting tables that are larger than the vanilla 3x3.
+     * @param width your max recipe width
+     * @param height your max recipe height
+     */
+    public static void setCraftingSize(int width, int height) {
+        if (MAX_WIDTH < width) MAX_WIDTH = width;
+        if (MAX_HEIGHT < height) MAX_HEIGHT = height;
+    }
     final ShapedRecipePattern pattern;
     final ItemStack result;
     final String group;
@@ -30,6 +_,67 @@
         this(p_272759_, p_273506_, p_310709_, p_272852_, true);
     }
 
+    // CraftBukkit start
+    public org.bukkit.inventory.ShapedRecipe toBukkitRecipe(NamespacedKey id) {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+        CraftShapedRecipe recipe = new CraftShapedRecipe(id, result, this);
+        recipe.setGroup(this.group);
+        recipe.setCategory(CraftRecipe.getCategory(this.category()));
+
+        switch (this.pattern.height()) {
+            case 1:
+                switch (this.pattern.width()) {
+                    case 1:
+                        recipe.shape("a");
+                        break;
+                    case 2:
+                        recipe.shape("ab");
+                        break;
+                    case 3:
+                        recipe.shape("abc");
+                        break;
+                }
+                break;
+            case 2:
+                switch (this.pattern.width()) {
+                    case 1:
+                        recipe.shape("a", "b");
+                        break;
+                    case 2:
+                        recipe.shape("ab", "cd");
+                        break;
+                    case 3:
+                        recipe.shape("abc", "def");
+                        break;
+                }
+                break;
+            case 3:
+                switch (this.pattern.width()) {
+                    case 1:
+                        recipe.shape("a", "b", "c");
+                        break;
+                    case 2:
+                        recipe.shape("ab", "cd", "ef");
+                        break;
+                    case 3:
+                        recipe.shape("abc", "def", "ghi");
+                        break;
+                }
+                break;
+        }
+        char c = 'a';
+        for (Ingredient list : this.pattern.ingredients()) {
+            RecipeChoice choice = CraftRecipe.toBukkit(list);
+            if (choice != null) {
+                recipe.setIngredient(c, choice);
+            }
+
+            c++;
+        }
+        return recipe;
+    }
+    // CraftBukkit end
+
     @Override
     public RecipeSerializer<?> getSerializer() {
         return RecipeSerializer.SHAPED_RECIPE;
@@ -82,9 +_,19 @@
     }
 
     @Override
+    public int getRecipeWidth() {
+        return getWidth();
+    }
+
+    @Override
+    public int getRecipeHeight() {
+        return getHeight();
+    }
+
+    @Override
     public boolean isIncomplete() {
         NonNullList<Ingredient> nonnulllist = this.getIngredients();
-        return nonnulllist.isEmpty() || nonnulllist.stream().filter(p_151277_ -> !p_151277_.isEmpty()).anyMatch(p_151273_ -> p_151273_.getItems().length == 0);
+        return nonnulllist.isEmpty() || nonnulllist.stream().filter(p_151277_ -> !p_151277_.isEmpty()).anyMatch(net.minecraftforge.common.ForgeHooks::hasNoElements);
     }
 
     public static class Serializer implements RecipeSerializer<ShapedRecipe> {
