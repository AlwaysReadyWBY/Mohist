--- a/net/minecraft/world/item/crafting/SmithingTransformRecipe.java
+++ b/net/minecraft/world/item/crafting/SmithingTransformRecipe.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.item.crafting;
 
+import com.mohistmc.bukkit.inventory.MohistSpecialRecipe;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.stream.Stream;
@@ -9,6 +_,10 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftRecipe;
+import org.bukkit.craftbukkit.v1_20_R3.inventory.CraftSmithingTransformRecipe;
 
 public class SmithingTransformRecipe implements SmithingRecipe {
    final Ingredient template;
@@ -58,8 +_,22 @@
    }
 
    public boolean isIncomplete() {
-      return Stream.of(this.template, this.base, this.addition).anyMatch(Ingredient::isEmpty);
-   }
+      return Stream.of(this.template, this.base, this.addition).anyMatch(net.minecraftforge.common.ForgeHooks::hasNoElements);
+   }
+
+   // CraftBukkit start
+   @Override
+   public org.bukkit.inventory.Recipe toBukkitRecipe(NamespacedKey id) {
+      if (this.result.isEmpty()) {
+         return new MohistSpecialRecipe(id, this);
+      }
+      CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+
+      CraftSmithingTransformRecipe recipe = new CraftSmithingTransformRecipe(id, result, CraftRecipe.toBukkit(this.template), CraftRecipe.toBukkit(this.base), CraftRecipe.toBukkit(this.addition));
+
+      return recipe;
+   }
+   // CraftBukkit end
 
    public static class Serializer implements RecipeSerializer<SmithingTransformRecipe> {
       private static final Codec<SmithingTransformRecipe> CODEC = RecordCodecBuilder.create((p_309262_) -> {
