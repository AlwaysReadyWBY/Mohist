--- a/net/minecraft/world/item/crafting/Recipe.java
+++ b/net/minecraft/world/item/crafting/Recipe.java
@@ -1,13 +_,9 @@
 package net.minecraft.world.item.crafting;
 
 import com.mojang.serialization.Codec;
-import net.minecraft.core.HolderLookup;
 import net.minecraft.core.NonNullList;
+import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.core.registries.Registries;
-import net.minecraft.network.RegistryFriendlyByteBuf;
-import net.minecraft.network.codec.ByteBufCodecs;
-import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
@@ -15,57 +_,61 @@
 import net.minecraft.world.level.block.Blocks;
 
 public interface Recipe<C extends Container> {
-    Codec<Recipe<?>> CODEC = BuiltInRegistries.RECIPE_SERIALIZER.byNameCodec().dispatch(Recipe::getSerializer, RecipeSerializer::codec);
-    StreamCodec<RegistryFriendlyByteBuf, Recipe<?>> STREAM_CODEC = ByteBufCodecs.registry(Registries.RECIPE_SERIALIZER)
-        .dispatch(Recipe::getSerializer, RecipeSerializer::streamCodec);
-
-    boolean matches(C p_44002_, Level p_44003_);
-
-    ItemStack assemble(C p_44001_, HolderLookup.Provider p_332698_);
-
-    boolean canCraftInDimensions(int p_43999_, int p_44000_);
-
-    ItemStack getResultItem(HolderLookup.Provider p_331967_);
-
-    default NonNullList<ItemStack> getRemainingItems(C p_44004_) {
-        NonNullList<ItemStack> nonnulllist = NonNullList.withSize(p_44004_.getContainerSize(), ItemStack.EMPTY);
-
-        for (int i = 0; i < nonnulllist.size(); i++) {
-            Item item = p_44004_.getItem(i).getItem();
-            if (item.hasCraftingRemainingItem()) {
-                nonnulllist.set(i, new ItemStack(item.getCraftingRemainingItem()));
-            }
-        }
-
-        return nonnulllist;
-    }
-
-    default NonNullList<Ingredient> getIngredients() {
-        return NonNullList.create();
-    }
-
-    default boolean isSpecial() {
-        return false;
-    }
-
-    default boolean showNotification() {
-        return true;
-    }
-
-    default String getGroup() {
-        return "";
-    }
-
-    default ItemStack getToastSymbol() {
-        return new ItemStack(Blocks.CRAFTING_TABLE);
-    }
-
-    RecipeSerializer<?> getSerializer();
-
-    RecipeType<?> getType();
-
-    default boolean isIncomplete() {
-        NonNullList<Ingredient> nonnulllist = this.getIngredients();
-        return nonnulllist.isEmpty() || nonnulllist.stream().anyMatch(p_151268_ -> p_151268_.getItems().length == 0);
-    }
+   Codec<Recipe<?>> CODEC = BuiltInRegistries.RECIPE_SERIALIZER.byNameCodec().dispatch(Recipe::getSerializer, RecipeSerializer::codec);
+
+   boolean matches(C p_44002_, Level p_44003_);
+
+   ItemStack assemble(C p_44001_, RegistryAccess p_267165_);
+
+   boolean canCraftInDimensions(int p_43999_, int p_44000_);
+
+   ItemStack getResultItem(RegistryAccess p_267052_);
+
+   default NonNullList<ItemStack> getRemainingItems(C p_44004_) {
+      NonNullList<ItemStack> nonnulllist = NonNullList.withSize(p_44004_.getContainerSize(), ItemStack.EMPTY);
+
+      for(int i = 0; i < nonnulllist.size(); ++i) {
+         ItemStack item = p_44004_.getItem(i);
+         if (item.hasCraftingRemainingItem()) {
+            nonnulllist.set(i, item.getCraftingRemainingItem());
+         }
+      }
+
+      return nonnulllist;
+   }
+
+   default NonNullList<Ingredient> getIngredients() {
+      return NonNullList.create();
+   }
+
+   default boolean isSpecial() {
+      return false;
+   }
+
+   default boolean showNotification() {
+      return true;
+   }
+
+   default String getGroup() {
+      return "";
+   }
+
+   default ItemStack getToastSymbol() {
+      return new ItemStack(Blocks.CRAFTING_TABLE);
+   }
+
+   RecipeSerializer<?> getSerializer();
+
+   RecipeType<?> getType();
+
+   default boolean isIncomplete() {
+      NonNullList<Ingredient> nonnulllist = this.getIngredients();
+      return nonnulllist.isEmpty() || nonnulllist.stream().anyMatch((p_151268_) -> {
+         return net.minecraftforge.common.ForgeHooks.hasNoElements(p_151268_);
+      });
+   }
+
+   default org.bukkit.inventory.Recipe toBukkitRecipe(org.bukkit.NamespacedKey id) {
+      return () -> new org.bukkit.inventory.ItemStack(org.bukkit.Material.AIR);
+   }
 }
