--- a/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/net/minecraft/world/item/trading/MerchantOffer.java
@@ -8,6 +_,7 @@
 import net.minecraft.network.codec.StreamCodec;
 import net.minecraft.util.Mth;
 import net.minecraft.world.item.ItemStack;
+import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
 
 public class MerchantOffer {
     public static final Codec<MerchantOffer> CODEC = RecordCodecBuilder.create(
@@ -28,16 +_,33 @@
     public static final StreamCodec<RegistryFriendlyByteBuf, MerchantOffer> STREAM_CODEC = StreamCodec.of(
         MerchantOffer::writeToStream, MerchantOffer::createFromStream
     );
-    public ItemCost baseCostA;
-    public Optional<ItemCost> costB;
-    public final ItemStack result;
-    public int uses;
-    public int maxUses;
-    public final boolean rewardExp;
-    public int specialPriceDiff;
-    public int demand;
-    public final float priceMultiplier;
-    public final int xp;
+   public ItemCost baseCostA;
+   public Optional<ItemCost> costB;
+   public final ItemStack result;
+   public int uses;
+   public int maxUses;
+   public boolean rewardExp;
+   public int specialPriceDiff;
+   public int demand;
+   public float priceMultiplier;
+   public int xp;
+
+   // CraftBukkit start
+   private CraftMerchantRecipe bukkitHandle; // CraftBukkit
+
+   public CraftMerchantRecipe asBukkit() {
+      return (this.bukkitHandle == null) ? (this.bukkitHandle = new CraftMerchantRecipe(this)) : this.bukkitHandle;
+   }
+
+   public MerchantOffer(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int uses, int maxUses, int experience, float priceMultiplier, CraftMerchantRecipe bukkit) {
+      this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, 0, bukkit);
+   }
+
+   public MerchantOffer(ItemStack itemstack, ItemStack itemstack1, ItemStack itemstack2, int uses, int maxUses, int experience, float priceMultiplier, int demand, CraftMerchantRecipe bukkit) {
+      this(itemstack, itemstack1, itemstack2, uses, maxUses, experience, priceMultiplier, demand);
+      this.bukkitHandle = bukkit;
+   }
+   // CraftBukkit end
 
     private MerchantOffer(
         ItemCost p_329205_,
