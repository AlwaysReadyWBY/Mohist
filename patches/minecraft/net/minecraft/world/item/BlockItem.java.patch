--- a/net/minecraft/world/item/BlockItem.java
+++ b/net/minecraft/world/item/BlockItem.java
@@ -9,6 +_,7 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
@@ -29,6 +_,11 @@
 import net.minecraft.world.level.block.state.properties.Property;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.shapes.CollisionContext;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.block.CraftBlockStates;
+import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.block.BlockCanBuildEvent;
 
 public class BlockItem extends Item {
    public static final String BLOCK_ENTITY_TAG = "BlockEntityTag";
@@ -59,6 +_,12 @@
          return InteractionResult.FAIL;
       } else {
          BlockPlaceContext blockplacecontext = this.updatePlacementContext(p_40577_);
+         // CraftBukkit start - special case for handling block placement with water lilies and snow buckets
+         org.bukkit.block.BlockState blockstateCB = null;
+         if (this instanceof PlaceOnWaterBlockItem || this instanceof SolidBucketItem) {
+            blockstateCB = CraftBlockStates.getBlockState(p_40577_.getLevel(), p_40577_.getClickedPos());
+         }
+         // CraftBukkit end
          if (blockplacecontext == null) {
             return InteractionResult.FAIL;
          } else {
@@ -77,13 +_,26 @@
                   blockstate1 = this.updateBlockStateFromTag(blockpos, level, itemstack, blockstate1);
                   this.updateCustomBlockEntityTag(blockpos, level, player, itemstack, blockstate1);
                   blockstate1.getBlock().setPlacedBy(level, blockpos, blockstate1, player, itemstack);
+                  // CraftBukkit start
+                  if (blockstateCB != null) {
+                     org.bukkit.event.block.BlockPlaceEvent placeEvent = CraftEventFactory.callBlockPlaceEvent((ServerLevel) level, player, p_40577_.getHand(), blockstateCB, blockpos.getX(), blockpos.getY(), blockpos.getZ());
+                     if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                        blockstateCB.update(true, false);
+
+                        if (this instanceof SolidBucketItem) {
+                           ((ServerPlayer) player).getBukkitEntity().updateInventory(); // SPIGOT-4541
+                        }
+                        return InteractionResult.FAIL;
+                     }
+                  }
+                  // CraftBukkit end
                   if (player instanceof ServerPlayer) {
                      CriteriaTriggers.PLACED_BLOCK.trigger((ServerPlayer)player, blockpos, itemstack);
                   }
                }
 
-               SoundType soundtype = blockstate1.getSoundType();
-               level.playSound(player, blockpos, this.getPlaceSound(blockstate1), SoundSource.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
+               SoundType soundtype = blockstate1.getSoundType(level, blockpos, p_40577_.getPlayer());
+               level.playSound(player, blockpos, this.getPlaceSound(blockstate1, level, blockpos, p_40577_.getPlayer()), SoundSource.BLOCKS, (soundtype.getVolume() + 1.0F) / 2.0F, soundtype.getPitch() * 0.8F);
                level.gameEvent(GameEvent.BLOCK_PLACE, blockpos, GameEvent.Context.of(player, blockstate1));
                if (player == null || !player.getAbilities().instabuild) {
                   itemstack.shrink(1);
@@ -95,10 +_,16 @@
       }
    }
 
+   @Deprecated //Forge: Use more sensitive version {@link BlockItem#getPlaceSound(BlockState, IBlockReader, BlockPos, Entity) }
    protected SoundEvent getPlaceSound(BlockState p_40588_) {
       return p_40588_.getSoundType().getPlaceSound();
    }
 
+   //Forge: Sensitive version of BlockItem#getPlaceSound
+   protected SoundEvent getPlaceSound(BlockState state, Level world, BlockPos pos, Player entity) {
+      return state.getSoundType(world, pos, entity).getPlaceSound();
+   }
+
    @Nullable
    public BlockPlaceContext updatePlacementContext(BlockPlaceContext p_40609_) {
       return p_40609_;
@@ -146,7 +_,15 @@
    protected boolean canPlace(BlockPlaceContext p_40611_, BlockState p_40612_) {
       Player player = p_40611_.getPlayer();
       CollisionContext collisioncontext = player == null ? CollisionContext.empty() : CollisionContext.of(player);
-      return (!this.mustSurvive() || p_40612_.canSurvive(p_40611_.getLevel(), p_40611_.getClickedPos())) && p_40611_.getLevel().isUnobstructed(p_40612_, p_40611_.getClickedPos(), collisioncontext);
+      // CraftBukkit start - store default return
+      boolean defaultReturn = (!this.mustSurvive() || p_40612_.canSurvive(p_40611_.getLevel(), p_40611_.getClickedPos())) && p_40611_.getLevel().isUnobstructed(p_40612_, p_40611_.getClickedPos(), collisioncontext);
+      org.bukkit.entity.Player playerCB = (p_40611_.getPlayer() instanceof ServerPlayer) ? (org.bukkit.entity.Player) p_40611_.getPlayer().getBukkitEntity() : null;
+
+      BlockCanBuildEvent event = new BlockCanBuildEvent(CraftBlock.at(p_40611_.getLevel(), p_40611_.getClickedPos()), playerCB, CraftBlockData.fromData(p_40612_), defaultReturn);
+      p_40611_.getLevel().getCraftServer().getPluginManager().callEvent(event);
+
+      return event.isBuildable();
+      // CraftBukkit end
    }
 
    protected boolean mustSurvive() {
@@ -195,6 +_,10 @@
    }
 
    public Block getBlock() {
+      return this.getBlockRaw() == null ? null : net.minecraftforge.registries.ForgeRegistries.BLOCKS.getDelegateOrThrow(this.getBlockRaw()).get();
+   }
+
+   private Block getBlockRaw() {
       return this.block;
    }
 
@@ -202,6 +_,10 @@
       p_40607_.put(this.getBlock(), p_40608_);
    }
 
+   public void removeFromBlockToItemMap(Map<Block, Item> blockToItemMap, Item itemIn) {
+      blockToItemMap.remove(this.getBlock());
+   }
+
    public boolean canFitInsideContainerItems() {
       return !(this.block instanceof ShulkerBoxBlock);
    }
@@ -236,4 +_,22 @@
    public FeatureFlagSet requiredFeatures() {
       return this.getBlock().requiredFeatures();
    }
+
+   public static BlockState getBlockState(BlockState iblockdata, CompoundTag compoundtag1) {
+      BlockState iblockdata1 = iblockdata;
+      {
+         // CraftBukkit end
+         StateDefinition<Block, BlockState> statedefinition = iblockdata.getBlock().getStateDefinition();
+
+         for(String s : compoundtag1.getAllKeys()) {
+            Property<?> property = statedefinition.getProperty(s);
+            if (property != null) {
+               String s1 = compoundtag1.get(s).getAsString();
+               iblockdata1 = updateState(iblockdata1, property, s1);
+            }
+         }
+      }
+      return iblockdata1;
+   }
+
 }
