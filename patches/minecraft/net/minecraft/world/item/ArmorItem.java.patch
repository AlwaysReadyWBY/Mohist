--- a/net/minecraft/world/item/ArmorItem.java
+++ b/net/minecraft/world/item/ArmorItem.java
@@ -1,187 +_,176 @@
 package net.minecraft.world.item;
 
-import com.google.common.base.Suppliers;
-import com.mojang.serialization.Codec;
+import com.google.common.collect.ImmutableMultimap;
+import com.google.common.collect.Multimap;
 import java.util.EnumMap;
 import java.util.List;
 import java.util.UUID;
-import java.util.function.Supplier;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
-import net.minecraft.core.Holder;
 import net.minecraft.core.dispenser.BlockSource;
 import net.minecraft.core.dispenser.DefaultDispenseItemBehavior;
 import net.minecraft.core.dispenser.DispenseItemBehavior;
 import net.minecraft.sounds.SoundEvent;
-import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.entity.EquipmentSlotGroup;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
+import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.component.ItemAttributeModifiers;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.DispenserBlock;
 import net.minecraft.world.phys.AABB;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.block.BlockDispenseArmorEvent;
 
 public class ArmorItem extends Item implements Equipable {
-    private static final EnumMap<ArmorItem.Type, UUID> ARMOR_MODIFIER_UUID_PER_TYPE = Util.make(new EnumMap<>(ArmorItem.Type.class), p_327095_ -> {
-        p_327095_.put(ArmorItem.Type.BOOTS, UUID.fromString("845DB27C-C624-495F-8C9F-6020A9A58B6B"));
-        p_327095_.put(ArmorItem.Type.LEGGINGS, UUID.fromString("D8499B04-0E66-4726-AB29-64469D734E0D"));
-        p_327095_.put(ArmorItem.Type.CHESTPLATE, UUID.fromString("9F3D476D-C118-4544-8365-64846904B48E"));
-        p_327095_.put(ArmorItem.Type.HELMET, UUID.fromString("2AD3F246-FEE1-4E67-B886-69FD380BB150"));
-        p_327095_.put(ArmorItem.Type.BODY, UUID.fromString("C1C72771-8B8E-BA4A-ACE0-81A93C8928B2"));
-    });
-    public static final DispenseItemBehavior DISPENSE_ITEM_BEHAVIOR = new DefaultDispenseItemBehavior() {
-        @Override
-        protected ItemStack execute(BlockSource p_40408_, ItemStack p_40409_) {
-            return ArmorItem.dispenseArmor(p_40408_, p_40409_) ? p_40409_ : super.execute(p_40408_, p_40409_);
-        }
-    };
-    protected final ArmorItem.Type type;
-    protected final Holder<ArmorMaterial> material;
-    private final Supplier<ItemAttributeModifiers> defaultModifiers;
-
-    public static boolean dispenseArmor(BlockSource p_40399_, ItemStack p_40400_) {
-        BlockPos blockpos = p_40399_.pos().relative(p_40399_.state().getValue(DispenserBlock.FACING));
-        List<LivingEntity> list = p_40399_.level()
-            .getEntitiesOfClass(LivingEntity.class, new AABB(blockpos), EntitySelector.NO_SPECTATORS.and(new EntitySelector.MobCanWearArmorEntitySelector(p_40400_)));
-        if (list.isEmpty()) {
+   private static final EnumMap<ArmorItem.Type, UUID> ARMOR_MODIFIER_UUID_PER_TYPE = Util.make(new EnumMap<>(ArmorItem.Type.class), (p_266744_) -> {
+      p_266744_.put(ArmorItem.Type.BOOTS, UUID.fromString("845DB27C-C624-495F-8C9F-6020A9A58B6B"));
+      p_266744_.put(ArmorItem.Type.LEGGINGS, UUID.fromString("D8499B04-0E66-4726-AB29-64469D734E0D"));
+      p_266744_.put(ArmorItem.Type.CHESTPLATE, UUID.fromString("9F3D476D-C118-4544-8365-64846904B48E"));
+      p_266744_.put(ArmorItem.Type.HELMET, UUID.fromString("2AD3F246-FEE1-4E67-B886-69FD380BB150"));
+   });
+   public static final DispenseItemBehavior DISPENSE_ITEM_BEHAVIOR = new DefaultDispenseItemBehavior() {
+      protected ItemStack execute(BlockSource p_40408_, ItemStack p_40409_) {
+         return ArmorItem.dispenseArmor(p_40408_, p_40409_) ? p_40409_ : super.execute(p_40408_, p_40409_);
+      }
+   };
+   protected final ArmorItem.Type type;
+   private final int defense;
+   private final float toughness;
+   protected final float knockbackResistance;
+   protected final ArmorMaterial material;
+   private final Multimap<Attribute, AttributeModifier> defaultModifiers;
+
+   public static boolean dispenseArmor(BlockSource p_40399_, ItemStack p_40400_) {
+      BlockPos blockpos = p_40399_.pos().relative(p_40399_.state().getValue(DispenserBlock.FACING));
+      List<LivingEntity> list = p_40399_.level().getEntitiesOfClass(LivingEntity.class, new AABB(blockpos), EntitySelector.NO_SPECTATORS.and(new EntitySelector.MobCanWearArmorEntitySelector(p_40400_)));
+      if (list.isEmpty()) {
+         return false;
+      } else {
+         LivingEntity livingentity = list.get(0);
+         EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(p_40400_);
+         ItemStack itemstack = p_40400_.split(1);
+         // CraftBukkit start
+         Level world = p_40399_.level();
+         org.bukkit.block.Block block = CraftBlock.at(world, p_40399_.pos());
+         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack);
+
+         BlockDispenseArmorEvent event = new BlockDispenseArmorEvent(block, craftItem.clone(), (org.bukkit.craftbukkit.entity.CraftLivingEntity) livingentity.getBukkitEntity());
+         if (!DispenserBlock.eventFired) {
+            world.getCraftServer().getPluginManager().callEvent(event);
+         }
+
+         if (event.isCancelled()) {
+            p_40400_.grow(1);
             return false;
-        } else {
-            LivingEntity livingentity = list.get(0);
-            EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(p_40400_);
-            ItemStack itemstack = p_40400_.split(1);
-            livingentity.setItemSlot(equipmentslot, itemstack);
-            if (livingentity instanceof Mob) {
-                ((Mob)livingentity).setDropChance(equipmentslot, 2.0F);
-                ((Mob)livingentity).setPersistenceRequired();
-            }
-
-            return true;
-        }
-    }
-
-    public ArmorItem(Holder<ArmorMaterial> p_329451_, ArmorItem.Type p_266831_, Item.Properties p_40388_) {
-        super(p_40388_);
-        this.material = p_329451_;
-        this.type = p_266831_;
-        DispenserBlock.registerBehavior(this, DISPENSE_ITEM_BEHAVIOR);
-        this.defaultModifiers = Suppliers.memoize(
-            () -> {
-                int i = p_329451_.value().getDefense(p_266831_);
-                float f = p_329451_.value().toughness();
-                ItemAttributeModifiers.Builder itemattributemodifiers$builder = ItemAttributeModifiers.builder();
-                EquipmentSlotGroup equipmentslotgroup = EquipmentSlotGroup.bySlot(p_266831_.getSlot());
-                UUID uuid = ARMOR_MODIFIER_UUID_PER_TYPE.get(p_266831_);
-                itemattributemodifiers$builder.add(
-                    Attributes.ARMOR, new AttributeModifier(uuid, "Armor modifier", (double)i, AttributeModifier.Operation.ADD_VALUE), equipmentslotgroup
-                );
-                itemattributemodifiers$builder.add(
-                    Attributes.ARMOR_TOUGHNESS, new AttributeModifier(uuid, "Armor toughness", (double)f, AttributeModifier.Operation.ADD_VALUE), equipmentslotgroup
-                );
-                float f1 = p_329451_.value().knockbackResistance();
-                if (f1 > 0.0F) {
-                    itemattributemodifiers$builder.add(
-                        Attributes.KNOCKBACK_RESISTANCE,
-                        new AttributeModifier(uuid, "Armor knockback resistance", (double)f1, AttributeModifier.Operation.ADD_VALUE),
-                        equipmentslotgroup
-                    );
-                }
-
-                return itemattributemodifiers$builder.build();
-            }
-        );
-    }
-
-    public ArmorItem.Type getType() {
-        return this.type;
-    }
-
-    @Override
-    public int getEnchantmentValue() {
-        return this.material.value().enchantmentValue();
-    }
-
-    public Holder<ArmorMaterial> getMaterial() {
-        return this.material;
-    }
-
-    @Override
-    public boolean isValidRepairItem(ItemStack p_40392_, ItemStack p_40393_) {
-        return this.material.value().repairIngredient().get().test(p_40393_) || super.isValidRepairItem(p_40392_, p_40393_);
-    }
-
-    @Override
-    public InteractionResultHolder<ItemStack> use(Level p_40395_, Player p_40396_, InteractionHand p_40397_) {
-        return this.swapWithEquipmentSlot(this, p_40395_, p_40396_, p_40397_);
-    }
-
-    @Override
-    public ItemAttributeModifiers getDefaultAttributeModifiers() {
-        return this.defaultModifiers.get();
-    }
-
-    public int getDefense() {
-        return this.material.value().getDefense(this.type);
-    }
-
-    public float getToughness() {
-        return this.material.value().toughness();
-    }
-
-    @Override
-    public EquipmentSlot getEquipmentSlot() {
-        return this.type.getSlot();
-    }
-
-    @Override
-    public Holder<SoundEvent> getEquipSound() {
-        return this.getMaterial().value().equipSound();
-    }
-
-    public static enum Type implements StringRepresentable {
-        HELMET(EquipmentSlot.HEAD, 11, "helmet"),
-        CHESTPLATE(EquipmentSlot.CHEST, 16, "chestplate"),
-        LEGGINGS(EquipmentSlot.LEGS, 15, "leggings"),
-        BOOTS(EquipmentSlot.FEET, 13, "boots"),
-        BODY(EquipmentSlot.BODY, 16, "body");
-
-        public static final Codec<ArmorItem.Type> CODEC = StringRepresentable.fromValues(ArmorItem.Type::values);
-        private final EquipmentSlot slot;
-        private final String name;
-        private final int durability;
-
-        private Type(final EquipmentSlot p_266754_, final int p_328437_, final String p_266886_) {
-            this.slot = p_266754_;
-            this.name = p_266886_;
-            this.durability = p_328437_;
-        }
-
-        public int getDurability(int p_333841_) {
-            return this.durability * p_333841_;
-        }
-
-        public EquipmentSlot getSlot() {
-            return this.slot;
-        }
-
-        public String getName() {
-            return this.name;
-        }
-
-        public boolean hasTrims() {
-            return this == HELMET || this == CHESTPLATE || this == LEGGINGS || this == BOOTS;
-        }
-
-        @Override
-        public String getSerializedName() {
-            return this.name;
-        }
-    }
+         }
+
+         if (!event.getItem().equals(craftItem)) {
+            p_40400_.grow(1);
+            // Chain to handler for new item
+            ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
+            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
+               idispensebehavior.dispense(p_40399_, eventStack);
+               return true;
+            }
+         }
+         livingentity.setItemSlot(equipmentslot, CraftItemStack.asNMSCopy(event.getItem()));
+         // CraftBukkit end
+         if (livingentity instanceof Mob) {
+            ((Mob)livingentity).setDropChance(equipmentslot, 2.0F);
+            ((Mob)livingentity).setPersistenceRequired();
+         }
+
+         return true;
+      }
+   }
+
+   public ArmorItem(ArmorMaterial p_40386_, ArmorItem.Type p_266831_, Item.Properties p_40388_) {
+      super(p_40388_.defaultDurability(p_40386_.getDurabilityForType(p_266831_)));
+      this.material = p_40386_;
+      this.type = p_266831_;
+      this.defense = p_40386_.getDefenseForType(p_266831_);
+      this.toughness = p_40386_.getToughness();
+      this.knockbackResistance = p_40386_.getKnockbackResistance();
+      DispenserBlock.registerBehavior(this, DISPENSE_ITEM_BEHAVIOR);
+      ImmutableMultimap.Builder<Attribute, AttributeModifier> builder = ImmutableMultimap.builder();
+      UUID uuid = ARMOR_MODIFIER_UUID_PER_TYPE.get(p_266831_);
+      builder.put(Attributes.ARMOR, new AttributeModifier(uuid, "Armor modifier", (double)this.defense, AttributeModifier.Operation.ADDITION));
+      builder.put(Attributes.ARMOR_TOUGHNESS, new AttributeModifier(uuid, "Armor toughness", (double)this.toughness, AttributeModifier.Operation.ADDITION));
+      if (this.knockbackResistance > 0) {
+         builder.put(Attributes.KNOCKBACK_RESISTANCE, new AttributeModifier(uuid, "Armor knockback resistance", (double)this.knockbackResistance, AttributeModifier.Operation.ADDITION));
+      }
+
+      this.defaultModifiers = builder.build();
+   }
+
+   public ArmorItem.Type getType() {
+      return this.type;
+   }
+
+   public int getEnchantmentValue() {
+      return this.material.getEnchantmentValue();
+   }
+
+   public ArmorMaterial getMaterial() {
+      return this.material;
+   }
+
+   public boolean isValidRepairItem(ItemStack p_40392_, ItemStack p_40393_) {
+      return this.material.getRepairIngredient().test(p_40393_) || super.isValidRepairItem(p_40392_, p_40393_);
+   }
+
+   public InteractionResultHolder<ItemStack> use(Level p_40395_, Player p_40396_, InteractionHand p_40397_) {
+      return this.swapWithEquipmentSlot(this, p_40395_, p_40396_, p_40397_);
+   }
+
+   public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(EquipmentSlot p_40390_) {
+      return p_40390_ == this.type.getSlot() ? this.defaultModifiers : super.getDefaultAttributeModifiers(p_40390_);
+   }
+
+   public int getDefense() {
+      return this.defense;
+   }
+
+   public float getToughness() {
+      return this.toughness;
+   }
+
+   public EquipmentSlot getEquipmentSlot() {
+      return this.type.getSlot();
+   }
+
+   public SoundEvent getEquipSound() {
+      return this.getMaterial().getEquipSound();
+   }
+
+   public static enum Type {
+      HELMET(EquipmentSlot.HEAD, "helmet"),
+      CHESTPLATE(EquipmentSlot.CHEST, "chestplate"),
+      LEGGINGS(EquipmentSlot.LEGS, "leggings"),
+      BOOTS(EquipmentSlot.FEET, "boots");
+
+      private final EquipmentSlot slot;
+      private final String name;
+
+      private Type(EquipmentSlot p_266754_, String p_266886_) {
+         this.slot = p_266754_;
+         this.name = p_266886_;
+      }
+
+      public EquipmentSlot getSlot() {
+         return this.slot;
+      }
+
+      public String getName() {
+         return this.name;
+      }
+   }
 }
