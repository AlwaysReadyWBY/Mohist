--- a/net/minecraft/world/item/ItemStack.java
+++ b/net/minecraft/world/item/ItemStack.java
@@ -1,70 +_,66 @@
 package net.minecraft.world.item;
 
+import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Multimap;
+import com.mohistmc.mohist.plugins.ban.bans.BanItem;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.DataResult;
+import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.MapCodec;
-import com.mojang.serialization.DataResult.Error;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
-import com.mojang.serialization.codecs.RecordCodecBuilder.Instance;
-import io.netty.handler.codec.DecoderException;
-import io.netty.handler.codec.EncoderException;
+import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
+import java.util.Collection;
 import java.util.List;
+import java.util.Locale;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
-import java.util.function.UnaryOperator;
+import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
+import net.minecraft.Util;
 import net.minecraft.advancements.CriteriaTriggers;
+import net.minecraft.commands.arguments.blocks.BlockStateParser;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
-import net.minecraft.core.HolderLookup;
 import net.minecraft.core.HolderSet;
-import net.minecraft.core.NonNullList;
-import net.minecraft.core.component.DataComponentHolder;
-import net.minecraft.core.component.DataComponentMap;
-import net.minecraft.core.component.DataComponentPatch;
-import net.minecraft.core.component.DataComponentType;
-import net.minecraft.core.component.DataComponents;
-import net.minecraft.core.component.PatchedDataComponentMap;
+import net.minecraft.core.Registry;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
-import net.minecraft.network.RegistryFriendlyByteBuf;
+import net.minecraft.nbt.TagParser;
 import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.Style;
-import net.minecraft.network.codec.ByteBufCodecs;
-import net.minecraft.network.codec.StreamCodec;
-import net.minecraft.resources.RegistryOps;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.stats.Stats;
-import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.ExtraCodecs;
-import net.minecraft.util.Mth;
-import net.minecraft.util.NullOps;
 import net.minecraft.util.RandomSource;
-import net.minecraft.util.Unit;
+import net.minecraft.util.datafix.fixes.References;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
-import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.MobType;
 import net.minecraft.world.entity.SlotAccess;
 import net.minecraft.world.entity.ai.attributes.Attribute;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
@@ -76,917 +_,1078 @@
 import net.minecraft.world.inventory.ClickAction;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.inventory.tooltip.TooltipComponent;
-import net.minecraft.world.item.component.ItemAttributeModifiers;
-import net.minecraft.world.item.component.TooltipProvider;
+import net.minecraft.world.item.armortrim.ArmorTrim;
 import net.minecraft.world.item.context.UseOnContext;
 import net.minecraft.world.item.enchantment.DigDurabilityEnchantment;
 import net.minecraft.world.item.enchantment.Enchantment;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.item.enchantment.Enchantments;
-import net.minecraft.world.item.enchantment.ItemEnchantments;
 import net.minecraft.world.level.ItemLike;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.pattern.BlockInWorld;
-import net.minecraft.world.level.saveddata.maps.MapId;
-import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.event.player.PlayerItemDamageEvent;
 import org.slf4j.Logger;
 
-public final class ItemStack implements DataComponentHolder {
-    public static final Codec<Holder<Item>> ITEM_NON_AIR_CODEC = BuiltInRegistries.ITEM
-        .holderByNameCodec()
-        .validate(
-            p_327177_ -> p_327177_.is(Items.AIR.builtInRegistryHolder())
-                    ? DataResult.error(() -> "Item must not be minecraft:air")
-                    : DataResult.success(p_327177_)
-        );
-    public static final Codec<ItemStack> CODEC = Codec.lazyInitialized(
-        () -> RecordCodecBuilder.create(
-                p_327163_ -> p_327163_.group(
-                            ITEM_NON_AIR_CODEC.fieldOf("id").forGetter(ItemStack::getItemHolder),
-                            ExtraCodecs.POSITIVE_INT.fieldOf("count").orElse(1).forGetter(ItemStack::getCount),
-                            DataComponentPatch.CODEC
-                                .optionalFieldOf("components", DataComponentPatch.EMPTY)
-                                .forGetter(p_327171_ -> p_327171_.components.asPatch())
-                        )
-                        .apply(p_327163_, ItemStack::new)
-            )
-    );
-    public static final Codec<ItemStack> SINGLE_ITEM_CODEC = Codec.lazyInitialized(
-        () -> RecordCodecBuilder.create(
-                p_327178_ -> p_327178_.group(
-                            ITEM_NON_AIR_CODEC.fieldOf("id").forGetter(ItemStack::getItemHolder),
-                            DataComponentPatch.CODEC
-                                .optionalFieldOf("components", DataComponentPatch.EMPTY)
-                                .forGetter(p_327155_ -> p_327155_.components.asPatch())
-                        )
-                        .apply(p_327178_, (p_327172_, p_327173_) -> new ItemStack(p_327172_, 1, p_327173_))
-            )
-    );
-    public static final Codec<ItemStack> STRICT_CODEC = CODEC.validate(ItemStack::validateStrict);
-    public static final Codec<ItemStack> STRICT_SINGLE_ITEM_CODEC = SINGLE_ITEM_CODEC.validate(ItemStack::validateStrict);
-    public static final Codec<ItemStack> OPTIONAL_CODEC = ExtraCodecs.optionalEmptyMap(CODEC)
-        .xmap(p_327153_ -> p_327153_.orElse(ItemStack.EMPTY), p_327154_ -> p_327154_.isEmpty() ? Optional.empty() : Optional.of(p_327154_));
-    public static final Codec<ItemStack> SIMPLE_ITEM_CODEC = ITEM_NON_AIR_CODEC.xmap(ItemStack::new, ItemStack::getItemHolder);
-    public static final StreamCodec<RegistryFriendlyByteBuf, ItemStack> OPTIONAL_STREAM_CODEC = new StreamCodec<RegistryFriendlyByteBuf, ItemStack>() {
-        private static final StreamCodec<RegistryFriendlyByteBuf, Holder<Item>> ITEM_STREAM_CODEC = ByteBufCodecs.holderRegistry(Registries.ITEM);
-
-        public ItemStack decode(RegistryFriendlyByteBuf p_328393_) {
-            int i = p_328393_.readVarInt();
-            if (i <= 0) {
-                return ItemStack.EMPTY;
-            } else {
-                Holder<Item> holder = ITEM_STREAM_CODEC.decode(p_328393_);
-                DataComponentPatch datacomponentpatch = DataComponentPatch.STREAM_CODEC.decode(p_328393_);
-                return new ItemStack(holder, i, datacomponentpatch);
-            }
-        }
-
-        public void encode(RegistryFriendlyByteBuf p_332266_, ItemStack p_335702_) {
-            if (p_335702_.isEmpty()) {
-                p_332266_.writeVarInt(0);
-            } else {
-                p_332266_.writeVarInt(p_335702_.getCount());
-                ITEM_STREAM_CODEC.encode(p_332266_, p_335702_.getItemHolder());
-                DataComponentPatch.STREAM_CODEC.encode(p_332266_, p_335702_.components.asPatch());
-            }
-        }
-    };
-    public static final StreamCodec<RegistryFriendlyByteBuf, ItemStack> STREAM_CODEC = new StreamCodec<RegistryFriendlyByteBuf, ItemStack>() {
-        public ItemStack decode(RegistryFriendlyByteBuf p_327992_) {
-            ItemStack itemstack = ItemStack.OPTIONAL_STREAM_CODEC.decode(p_327992_);
-            if (itemstack.isEmpty()) {
-                throw new DecoderException("Empty ItemStack not allowed");
-            } else {
-                return itemstack;
-            }
-        }
-
-        public void encode(RegistryFriendlyByteBuf p_331904_, ItemStack p_328866_) {
-            if (p_328866_.isEmpty()) {
-                throw new EncoderException("Empty ItemStack not allowed");
-            } else {
-                ItemStack.OPTIONAL_STREAM_CODEC.encode(p_331904_, p_328866_);
-            }
-        }
-    };
-    public static final StreamCodec<RegistryFriendlyByteBuf, List<ItemStack>> OPTIONAL_LIST_STREAM_CODEC = OPTIONAL_STREAM_CODEC.apply(ByteBufCodecs.collection(NonNullList::createWithCapacity));
-    public static final StreamCodec<RegistryFriendlyByteBuf, List<ItemStack>> LIST_STREAM_CODEC = STREAM_CODEC.apply(ByteBufCodecs.collection(NonNullList::createWithCapacity));
-    private static final Logger LOGGER = LogUtils.getLogger();
-    public static final ItemStack EMPTY = new ItemStack((Void)null);
-    private static final Component DISABLED_ITEM_TOOLTIP = Component.translatable("item.disabled").withStyle(ChatFormatting.RED);
-    private int count;
-    private int popTime;
-    @Deprecated
-    @Nullable
-    private Item item;
-    final PatchedDataComponentMap components;
-    @Nullable
-    private Entity entityRepresentation;
-
-    private static DataResult<ItemStack> validateStrict(ItemStack p_332181_) {
-        DataResult<Unit> dataresult = validateComponents(p_332181_.getComponents());
-        if (dataresult.isError()) {
-            return dataresult.map(p_327165_ -> p_332181_);
-        } else {
-            return p_332181_.getCount() > p_332181_.getMaxStackSize()
-                ? DataResult.error(() -> "Item stack with stack size of " + p_332181_.getCount() + " was larger than maximum: " + p_332181_.getMaxStackSize())
-                : DataResult.success(p_332181_);
-        }
-    }
-
-    public static StreamCodec<RegistryFriendlyByteBuf, ItemStack> validatedStreamCodec(final StreamCodec<RegistryFriendlyByteBuf, ItemStack> p_332790_) {
-        return new StreamCodec<RegistryFriendlyByteBuf, ItemStack>() {
-            public ItemStack decode(RegistryFriendlyByteBuf p_330762_) {
-                ItemStack itemstack = p_332790_.decode(p_330762_);
-                if (!itemstack.isEmpty()) {
-                    RegistryOps<Unit> registryops = p_330762_.registryAccess().createSerializationContext(NullOps.INSTANCE);
-                    ItemStack.CODEC.encodeStart(registryops, itemstack).getOrThrow(DecoderException::new);
-                }
-
-                return itemstack;
-            }
-
-            public void encode(RegistryFriendlyByteBuf p_336131_, ItemStack p_329943_) {
-                p_332790_.encode(p_336131_, p_329943_);
-            }
-        };
-    }
-
-    public Optional<TooltipComponent> getTooltipImage() {
-        return this.getItem().getTooltipImage(this);
-    }
-
-    @Override
-    public DataComponentMap getComponents() {
-        return (DataComponentMap)(!this.isEmpty() ? this.components : DataComponentMap.EMPTY);
-    }
-
-    public DataComponentMap getPrototype() {
-        return !this.isEmpty() ? this.getItem().components() : DataComponentMap.EMPTY;
-    }
-
-    public DataComponentPatch getComponentsPatch() {
-        return !this.isEmpty() ? this.components.asPatch() : DataComponentPatch.EMPTY;
-    }
-
-    public ItemStack(ItemLike p_41599_) {
-        this(p_41599_, 1);
-    }
-
-    public ItemStack(Holder<Item> p_204116_) {
-        this(p_204116_.value(), 1);
-    }
-
-    public ItemStack(Holder<Item> p_310702_, int p_41605_, DataComponentPatch p_328221_) {
-        this(p_310702_.value(), p_41605_, PatchedDataComponentMap.fromPatch(p_310702_.value().components(), p_328221_));
-    }
-
-    public ItemStack(Holder<Item> p_220155_, int p_220156_) {
-        this(p_220155_.value(), p_220156_);
-    }
-
-    public ItemStack(ItemLike p_41601_, int p_41602_) {
-        this(p_41601_, p_41602_, new PatchedDataComponentMap(p_41601_.asItem().components()));
-    }
-
-    private ItemStack(ItemLike p_331826_, int p_332766_, PatchedDataComponentMap p_333722_) {
-        this.item = p_331826_.asItem();
-        this.count = p_332766_;
-        this.components = p_333722_;
-        this.getItem().verifyComponentsAfterLoad(this);
-    }
-
-    private ItemStack(@Nullable Void p_282703_) {
-        this.item = null;
-        this.components = new PatchedDataComponentMap(DataComponentMap.EMPTY);
-    }
-
-    public static DataResult<Unit> validateComponents(DataComponentMap p_336343_) {
-        return p_336343_.has(DataComponents.MAX_DAMAGE) && p_336343_.getOrDefault(DataComponents.MAX_STACK_SIZE, 1) > 1
-            ? DataResult.error(() -> "Item cannot be both damageable and stackable")
-            : DataResult.success(Unit.INSTANCE);
-    }
-
-    public static Optional<ItemStack> parse(HolderLookup.Provider p_332204_, Tag p_336056_) {
-        return CODEC.parse(p_332204_.createSerializationContext(NbtOps.INSTANCE), p_336056_)
-            .resultOrPartial(p_327167_ -> LOGGER.error("Tried to load invalid item: '{}'", p_327167_));
-    }
-
-    public static ItemStack parseOptional(HolderLookup.Provider p_333870_, CompoundTag p_328391_) {
-        return p_328391_.isEmpty() ? EMPTY : parse(p_333870_, p_328391_).orElse(EMPTY);
-    }
-
-    public boolean isEmpty() {
-        return this == EMPTY || this.item == Items.AIR || this.count <= 0;
-    }
-
-    public boolean isItemEnabled(FeatureFlagSet p_250869_) {
-        return this.isEmpty() || this.getItem().isEnabled(p_250869_);
-    }
-
-    public ItemStack split(int p_41621_) {
-        int i = Math.min(p_41621_, this.getCount());
-        ItemStack itemstack = this.copyWithCount(i);
-        this.shrink(i);
-        return itemstack;
-    }
-
-    public ItemStack copyAndClear() {
-        if (this.isEmpty()) {
-            return EMPTY;
-        } else {
-            ItemStack itemstack = this.copy();
-            this.setCount(0);
-            return itemstack;
-        }
-    }
-
-    public Item getItem() {
-        return this.isEmpty() ? Items.AIR : this.item;
-    }
-
-    public Holder<Item> getItemHolder() {
-        return this.getItem().builtInRegistryHolder();
-    }
-
-    public boolean is(TagKey<Item> p_204118_) {
-        return this.getItem().builtInRegistryHolder().is(p_204118_);
-    }
-
-    public boolean is(Item p_150931_) {
-        return this.getItem() == p_150931_;
-    }
-
-    public boolean is(Predicate<Holder<Item>> p_220168_) {
-        return p_220168_.test(this.getItem().builtInRegistryHolder());
-    }
-
-    public boolean is(Holder<Item> p_220166_) {
-        return this.getItem().builtInRegistryHolder() == p_220166_;
-    }
-
-    public boolean is(HolderSet<Item> p_299078_) {
-        return p_299078_.contains(this.getItemHolder());
-    }
-
-    public Stream<TagKey<Item>> getTags() {
-        return this.getItem().builtInRegistryHolder().tags();
-    }
-
-    public InteractionResult useOn(UseOnContext p_41662_) {
-        Player player = p_41662_.getPlayer();
-        BlockPos blockpos = p_41662_.getClickedPos();
-        if (player != null && !player.getAbilities().mayBuild && !this.canPlaceOnBlockInAdventureMode(new BlockInWorld(p_41662_.getLevel(), blockpos, false))) {
-            return InteractionResult.PASS;
-        } else {
-            Item item = this.getItem();
-            InteractionResult interactionresult = item.useOn(p_41662_);
-            if (player != null && interactionresult.indicateItemUse()) {
-                player.awardStat(Stats.ITEM_USED.get(item));
-            }
-
-            return interactionresult;
-        }
-    }
-
-    public float getDestroySpeed(BlockState p_41692_) {
-        return this.getItem().getDestroySpeed(this, p_41692_);
-    }
-
-    public InteractionResultHolder<ItemStack> use(Level p_41683_, Player p_41684_, InteractionHand p_41685_) {
-        return this.getItem().use(p_41683_, p_41684_, p_41685_);
-    }
-
-    public ItemStack finishUsingItem(Level p_41672_, LivingEntity p_41673_) {
-        return this.getItem().finishUsingItem(this, p_41672_, p_41673_);
-    }
-
-    public Tag save(HolderLookup.Provider p_330500_, Tag p_332574_) {
-        if (this.isEmpty()) {
-            throw new IllegalStateException("Cannot encode empty ItemStack");
-        } else {
-            return CODEC.encode(this, p_330500_.createSerializationContext(NbtOps.INSTANCE), p_332574_).getOrThrow();
-        }
-    }
-
-    public Tag save(HolderLookup.Provider p_328490_) {
-        if (this.isEmpty()) {
-            throw new IllegalStateException("Cannot encode empty ItemStack");
-        } else {
-            return CODEC.encodeStart(p_328490_.createSerializationContext(NbtOps.INSTANCE), this).getOrThrow();
-        }
-    }
-
-    public Tag saveOptional(HolderLookup.Provider p_335413_) {
-        return (Tag)(this.isEmpty() ? new CompoundTag() : this.save(p_335413_, new CompoundTag()));
-    }
-
-    public int getMaxStackSize() {
-        return this.getOrDefault(DataComponents.MAX_STACK_SIZE, Integer.valueOf(1));
-    }
-
-    public boolean isStackable() {
-        return this.getMaxStackSize() > 1 && (!this.isDamageableItem() || !this.isDamaged());
-    }
-
-    public boolean isDamageableItem() {
-        return this.has(DataComponents.MAX_DAMAGE) && !this.has(DataComponents.UNBREAKABLE) && this.has(DataComponents.DAMAGE);
-    }
-
-    public boolean isDamaged() {
-        return this.isDamageableItem() && this.getDamageValue() > 0;
-    }
-
-    public int getDamageValue() {
-        return Mth.clamp(this.getOrDefault(DataComponents.DAMAGE, Integer.valueOf(0)), 0, this.getMaxDamage());
-    }
-
-    public void setDamageValue(int p_41722_) {
-        this.set(DataComponents.DAMAGE, Mth.clamp(p_41722_, 0, this.getMaxDamage()));
-    }
-
-    public int getMaxDamage() {
-        return this.getOrDefault(DataComponents.MAX_DAMAGE, Integer.valueOf(0));
-    }
-
-    public void hurtAndBreak(int p_220158_, RandomSource p_220159_, @Nullable ServerPlayer p_220160_, Runnable p_331215_) {
-        if (this.isDamageableItem()) {
-            if (p_220158_ > 0) {
-                int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.UNBREAKING, this);
-                int j = 0;
-
-                for (int k = 0; i > 0 && k < p_220158_; k++) {
-                    if (DigDurabilityEnchantment.shouldIgnoreDurabilityDrop(this, i, p_220159_)) {
-                        j++;
-                    }
-                }
-
-                p_220158_ -= j;
-                if (p_220158_ <= 0) {
-                    return;
-                }
-            }
-
-            if (p_220160_ != null && p_220158_ != 0) {
-                CriteriaTriggers.ITEM_DURABILITY_CHANGED.trigger(p_220160_, this, this.getDamageValue() + p_220158_);
-            }
-
-            int l = this.getDamageValue() + p_220158_;
-            this.setDamageValue(l);
-            if (l >= this.getMaxDamage()) {
-                p_331215_.run();
-            }
-        }
-    }
-
-    public void hurtAndBreak(int p_41623_, LivingEntity p_41624_, EquipmentSlot p_335324_) {
-        if (!p_41624_.level().isClientSide) {
-            if (p_41624_ instanceof Player player && player.hasInfiniteMaterials()) {
-                return;
-            }
-
-            this.hurtAndBreak(p_41623_, p_41624_.getRandom(), p_41624_ instanceof ServerPlayer serverplayer ? serverplayer : null, () -> {
-                p_41624_.broadcastBreakEvent(p_335324_);
-                Item item = this.getItem();
-                this.shrink(1);
-                if (p_41624_ instanceof Player) {
-                    ((Player)p_41624_).awardStat(Stats.ITEM_BROKEN.get(item));
-                }
-
-                this.setDamageValue(0);
-            });
-        }
-    }
-
-    public boolean isBarVisible() {
-        return this.getItem().isBarVisible(this);
-    }
-
-    public int getBarWidth() {
-        return this.getItem().getBarWidth(this);
-    }
-
-    public int getBarColor() {
-        return this.getItem().getBarColor(this);
-    }
-
-    public boolean overrideStackedOnOther(Slot p_150927_, ClickAction p_150928_, Player p_150929_) {
-        return this.getItem().overrideStackedOnOther(this, p_150927_, p_150928_, p_150929_);
-    }
-
-    public boolean overrideOtherStackedOnMe(ItemStack p_150933_, Slot p_150934_, ClickAction p_150935_, Player p_150936_, SlotAccess p_150937_) {
-        return this.getItem().overrideOtherStackedOnMe(this, p_150933_, p_150934_, p_150935_, p_150936_, p_150937_);
-    }
-
-    public void hurtEnemy(LivingEntity p_41641_, Player p_41642_) {
-        Item item = this.getItem();
-        ItemEnchantments itemenchantments = this.getEnchantments();
-        if (item.hurtEnemy(this, p_41641_, p_41642_)) {
-            p_41642_.awardStat(Stats.ITEM_USED.get(item));
-            EnchantmentHelper.doPostItemStackHurtEffects(p_41642_, p_41641_, itemenchantments);
-        }
-    }
-
-    public void mineBlock(Level p_41687_, BlockState p_41688_, BlockPos p_41689_, Player p_41690_) {
-        Item item = this.getItem();
-        if (item.mineBlock(this, p_41687_, p_41688_, p_41689_, p_41690_)) {
-            p_41690_.awardStat(Stats.ITEM_USED.get(item));
-        }
-    }
-
-    public boolean isCorrectToolForDrops(BlockState p_41736_) {
-        return this.getItem().isCorrectToolForDrops(this, p_41736_);
-    }
-
-    public InteractionResult interactLivingEntity(Player p_41648_, LivingEntity p_41649_, InteractionHand p_41650_) {
-        return this.getItem().interactLivingEntity(this, p_41648_, p_41649_, p_41650_);
-    }
-
-    public ItemStack copy() {
-        if (this.isEmpty()) {
-            return EMPTY;
-        } else {
-            ItemStack itemstack = new ItemStack(this.getItem(), this.count, this.components.copy());
-            itemstack.setPopTime(this.getPopTime());
-            return itemstack;
-        }
-    }
-
-    public ItemStack copyWithCount(int p_256354_) {
-        if (this.isEmpty()) {
-            return EMPTY;
-        } else {
-            ItemStack itemstack = this.copy();
-            itemstack.setCount(p_256354_);
-            return itemstack;
-        }
-    }
-
-    public ItemStack transmuteCopy(ItemLike p_334328_, int p_334821_) {
-        return this.isEmpty() ? EMPTY : this.transmuteCopyIgnoreEmpty(p_334328_, p_334821_);
-    }
-
-    public ItemStack transmuteCopyIgnoreEmpty(ItemLike p_332114_, int p_333334_) {
-        return new ItemStack(p_332114_.asItem().builtInRegistryHolder(), p_333334_, this.components.asPatch());
-    }
-
-    public static boolean matches(ItemStack p_41729_, ItemStack p_41730_) {
-        if (p_41729_ == p_41730_) {
-            return true;
-        } else {
-            return p_41729_.getCount() != p_41730_.getCount() ? false : isSameItemSameComponents(p_41729_, p_41730_);
-        }
-    }
-
-    @Deprecated
-    public static boolean listMatches(List<ItemStack> p_335471_, List<ItemStack> p_334624_) {
-        if (p_335471_.size() != p_334624_.size()) {
-            return false;
-        } else {
-            for (int i = 0; i < p_335471_.size(); i++) {
-                if (!matches(p_335471_.get(i), p_334624_.get(i))) {
-                    return false;
-                }
-            }
-
-            return true;
-        }
-    }
-
-    public static boolean isSameItem(ItemStack p_287761_, ItemStack p_287676_) {
-        return p_287761_.is(p_287676_.getItem());
-    }
-
-    public static boolean isSameItemSameComponents(ItemStack p_334397_, ItemStack p_331609_) {
-        if (!p_334397_.is(p_331609_.getItem())) {
-            return false;
-        } else {
-            return p_334397_.isEmpty() && p_331609_.isEmpty() ? true : Objects.equals(p_334397_.components, p_331609_.components);
-        }
-    }
-
-    public static MapCodec<ItemStack> lenientOptionalFieldOf(String p_336149_) {
-        return CODEC.lenientOptionalFieldOf(p_336149_)
-            .xmap(p_327174_ -> p_327174_.orElse(EMPTY), p_327162_ -> p_327162_.isEmpty() ? Optional.empty() : Optional.of(p_327162_));
-    }
-
-    public static int hashItemAndComponents(@Nullable ItemStack p_334004_) {
-        if (p_334004_ != null) {
-            int i = 31 + p_334004_.getItem().hashCode();
-            return 31 * i + p_334004_.getComponents().hashCode();
-        } else {
-            return 0;
-        }
-    }
-
-    @Deprecated
-    public static int hashStackList(List<ItemStack> p_333449_) {
-        int i = 0;
-
-        for (ItemStack itemstack : p_333449_) {
-            i = i * 31 + hashItemAndComponents(itemstack);
-        }
-
-        return i;
-    }
-
-    public String getDescriptionId() {
-        return this.getItem().getDescriptionId(this);
-    }
-
-    @Override
-    public String toString() {
-        return this.getCount() + " " + this.getItem();
-    }
-
-    public void inventoryTick(Level p_41667_, Entity p_41668_, int p_41669_, boolean p_41670_) {
-        if (this.popTime > 0) {
-            this.popTime--;
-        }
-
-        if (this.getItem() != null) {
-            this.getItem().inventoryTick(this, p_41667_, p_41668_, p_41669_, p_41670_);
-        }
-    }
-
-    public void onCraftedBy(Level p_41679_, Player p_41680_, int p_41681_) {
-        p_41680_.awardStat(Stats.ITEM_CRAFTED.get(this.getItem()), p_41681_);
-        this.getItem().onCraftedBy(this, p_41679_, p_41680_);
-    }
-
-    public void onCraftedBySystem(Level p_311164_) {
-        this.getItem().onCraftedPostProcess(this, p_311164_);
-    }
-
-    public int getUseDuration() {
-        return this.getItem().getUseDuration(this);
-    }
-
-    public UseAnim getUseAnimation() {
-        return this.getItem().getUseAnimation(this);
-    }
-
-    public void releaseUsing(Level p_41675_, LivingEntity p_41676_, int p_41677_) {
-        this.getItem().releaseUsing(this, p_41675_, p_41676_, p_41677_);
-    }
-
-    public boolean useOnRelease() {
-        return this.getItem().useOnRelease(this);
-    }
-
-    @Nullable
-    public <T> T set(DataComponentType<? super T> p_332666_, @Nullable T p_335655_) {
-        return this.components.set(p_332666_, p_335655_);
-    }
-
-    @Nullable
-    public <T, U> T update(DataComponentType<T> p_331418_, T p_327708_, U p_332086_, BiFunction<T, U, T> p_329834_) {
-        return this.set(p_331418_, p_329834_.apply(this.getOrDefault(p_331418_, p_327708_), p_332086_));
-    }
-
-    @Nullable
-    public <T> T update(DataComponentType<T> p_329905_, T p_329705_, UnaryOperator<T> p_335114_) {
-        T t = this.getOrDefault(p_329905_, p_329705_);
-        return this.set(p_329905_, p_335114_.apply(t));
-    }
-
-    @Nullable
-    public <T> T remove(DataComponentType<? extends T> p_333259_) {
-        return this.components.remove(p_333259_);
-    }
-
-    public void applyComponentsAndValidate(DataComponentPatch p_336111_) {
-        DataComponentPatch datacomponentpatch = this.components.asPatch();
-        this.components.applyPatch(p_336111_);
-        Optional<Error<ItemStack>> optional = validateStrict(this).error();
-        if (optional.isPresent()) {
-            LOGGER.error("Failed to apply component patch '{}' to item: '{}'", p_336111_, optional.get().message());
-            this.components.restorePatch(datacomponentpatch);
-        } else {
-            this.getItem().verifyComponentsAfterLoad(this);
-        }
-    }
-
-    public void applyComponents(DataComponentPatch p_328534_) {
-        this.components.applyPatch(p_328534_);
-        this.getItem().verifyComponentsAfterLoad(this);
-    }
-
-    public void applyComponents(DataComponentMap p_335208_) {
-        this.components.setAll(p_335208_);
-        this.getItem().verifyComponentsAfterLoad(this);
-    }
-
-    public Component getHoverName() {
-        Component component = this.get(DataComponents.CUSTOM_NAME);
-        if (component != null) {
-            return component;
-        } else {
-            Component component1 = this.get(DataComponents.ITEM_NAME);
-            return component1 != null ? component1 : this.getItem().getName(this);
-        }
-    }
-
-    private <T extends TooltipProvider> void addToTooltip(
-        DataComponentType<T> p_331934_, Item.TooltipContext p_333562_, Consumer<Component> p_334534_, TooltipFlag p_333715_
-    ) {
-        T t = (T)this.get(p_331934_);
-        if (t != null) {
-            t.addToTooltip(p_333562_, p_334534_, p_333715_);
-        }
-    }
-
-    public List<Component> getTooltipLines(Item.TooltipContext p_331329_, @Nullable Player p_41652_, TooltipFlag p_41653_) {
-        if (!p_41653_.isCreative() && this.has(DataComponents.HIDE_TOOLTIP)) {
-            return List.of();
-        } else {
-            List<Component> list = Lists.newArrayList();
-            MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().color());
-            if (this.has(DataComponents.CUSTOM_NAME)) {
-                mutablecomponent.withStyle(ChatFormatting.ITALIC);
-            }
-
-            list.add(mutablecomponent);
-            if (!p_41653_.isAdvanced() && !this.has(DataComponents.CUSTOM_NAME) && this.is(Items.FILLED_MAP)) {
-                MapId mapid = this.get(DataComponents.MAP_ID);
-                if (mapid != null) {
-                    list.add(MapItem.getTooltipForId(mapid));
-                }
-            }
-
-            Consumer<Component> consumer = list::add;
-            if (!this.has(DataComponents.HIDE_ADDITIONAL_TOOLTIP)) {
-                this.getItem().appendHoverText(this, p_331329_, list, p_41653_);
-            }
-
-            this.addToTooltip(DataComponents.TRIM, p_331329_, consumer, p_41653_);
-            this.addToTooltip(DataComponents.STORED_ENCHANTMENTS, p_331329_, consumer, p_41653_);
-            this.addToTooltip(DataComponents.ENCHANTMENTS, p_331329_, consumer, p_41653_);
-            this.addToTooltip(DataComponents.DYED_COLOR, p_331329_, consumer, p_41653_);
-            this.addToTooltip(DataComponents.LORE, p_331329_, consumer, p_41653_);
-            this.addAttributeTooltips(consumer, p_41652_);
-            this.addToTooltip(DataComponents.UNBREAKABLE, p_331329_, consumer, p_41653_);
-            AdventureModePredicate adventuremodepredicate = this.get(DataComponents.CAN_BREAK);
-            if (adventuremodepredicate != null && adventuremodepredicate.showInTooltip()) {
-                consumer.accept(CommonComponents.EMPTY);
-                consumer.accept(AdventureModePredicate.CAN_BREAK_HEADER);
-                adventuremodepredicate.addToTooltip(consumer);
-            }
-
-            AdventureModePredicate adventuremodepredicate1 = this.get(DataComponents.CAN_PLACE_ON);
-            if (adventuremodepredicate1 != null && adventuremodepredicate1.showInTooltip()) {
-                consumer.accept(CommonComponents.EMPTY);
-                consumer.accept(AdventureModePredicate.CAN_PLACE_HEADER);
-                adventuremodepredicate1.addToTooltip(consumer);
-            }
-
-            if (p_41653_.isAdvanced()) {
-                if (this.isDamaged()) {
-                    list.add(Component.translatable("item.durability", this.getMaxDamage() - this.getDamageValue(), this.getMaxDamage()));
-                }
-
-                list.add(Component.literal(BuiltInRegistries.ITEM.getKey(this.getItem()).toString()).withStyle(ChatFormatting.DARK_GRAY));
-                int i = this.components.size();
-                if (i > 0) {
-                    list.add(Component.translatable("item.components", i).withStyle(ChatFormatting.DARK_GRAY));
-                }
-            }
-
-            if (p_41652_ != null && !this.getItem().isEnabled(p_41652_.level().enabledFeatures())) {
-                list.add(DISABLED_ITEM_TOOLTIP);
-            }
-
-            return list;
-        }
-    }
-
-    private void addAttributeTooltips(Consumer<Component> p_333346_, @Nullable Player p_332769_) {
-        ItemAttributeModifiers itemattributemodifiers = this.getOrDefault(DataComponents.ATTRIBUTE_MODIFIERS, ItemAttributeModifiers.EMPTY);
-        if (itemattributemodifiers.showInTooltip()) {
-            for (EquipmentSlot equipmentslot : EquipmentSlot.values()) {
-                MutableBoolean mutableboolean = new MutableBoolean(true);
-                this.forEachModifier(equipmentslot, (p_327160_, p_327161_) -> {
-                    if (mutableboolean.isTrue()) {
-                        p_333346_.accept(CommonComponents.EMPTY);
-                        p_333346_.accept(Component.translatable("item.modifiers." + equipmentslot.getName()).withStyle(ChatFormatting.GRAY));
-                        mutableboolean.setFalse();
-                    }
-
-                    this.addModifierTooltip(p_333346_, p_332769_, p_327160_, p_327161_);
-                });
-            }
-        }
-    }
-
-    private void addModifierTooltip(Consumer<Component> p_332944_, @Nullable Player p_328442_, Holder<Attribute> p_336373_, AttributeModifier p_332746_) {
-        double d0 = p_332746_.amount();
-        boolean flag = false;
-        if (p_328442_ != null) {
-            if (p_332746_.id() == Item.BASE_ATTACK_DAMAGE_UUID) {
-                d0 += p_328442_.getAttributeBaseValue(Attributes.ATTACK_DAMAGE);
-                d0 += (double)EnchantmentHelper.getDamageBonus(this, null);
-                flag = true;
-            } else if (p_332746_.id() == Item.BASE_ATTACK_SPEED_UUID) {
-                d0 += p_328442_.getAttributeBaseValue(Attributes.ATTACK_SPEED);
-                flag = true;
-            }
-        }
-
-        double d1;
-        if (p_332746_.operation() == AttributeModifier.Operation.ADD_MULTIPLIED_BASE || p_332746_.operation() == AttributeModifier.Operation.ADD_MULTIPLIED_TOTAL
-            )
-         {
-            d1 = d0 * 100.0;
-        } else if (p_336373_.is(Attributes.KNOCKBACK_RESISTANCE)) {
-            d1 = d0 * 10.0;
-        } else {
-            d1 = d0;
-        }
-
-        if (flag) {
-            p_332944_.accept(
-                CommonComponents.space()
-                    .append(
-                        Component.translatable(
-                            "attribute.modifier.equals." + p_332746_.operation().id(),
-                            ItemAttributeModifiers.ATTRIBUTE_MODIFIER_FORMAT.format(d1),
-                            Component.translatable(p_336373_.value().getDescriptionId())
-                        )
-                    )
-                    .withStyle(ChatFormatting.DARK_GREEN)
-            );
-        } else if (d0 > 0.0) {
-            p_332944_.accept(
-                Component.translatable(
-                        "attribute.modifier.plus." + p_332746_.operation().id(),
-                        ItemAttributeModifiers.ATTRIBUTE_MODIFIER_FORMAT.format(d1),
-                        Component.translatable(p_336373_.value().getDescriptionId())
-                    )
-                    .withStyle(ChatFormatting.BLUE)
-            );
-        } else if (d0 < 0.0) {
-            p_332944_.accept(
-                Component.translatable(
-                        "attribute.modifier.take." + p_332746_.operation().id(),
-                        ItemAttributeModifiers.ATTRIBUTE_MODIFIER_FORMAT.format(-d1),
-                        Component.translatable(p_336373_.value().getDescriptionId())
-                    )
-                    .withStyle(ChatFormatting.RED)
-            );
-        }
-    }
-
-    public boolean hasFoil() {
-        Boolean obool = this.get(DataComponents.ENCHANTMENT_GLINT_OVERRIDE);
-        return obool != null ? obool : this.getItem().isFoil(this);
-    }
-
-    public Rarity getRarity() {
-        Rarity rarity = this.getOrDefault(DataComponents.RARITY, Rarity.COMMON);
-        if (!this.isEnchanted()) {
-            return rarity;
-        } else {
-            return switch (rarity) {
-                case COMMON, UNCOMMON -> Rarity.RARE;
-                case RARE -> Rarity.EPIC;
-                default -> rarity;
-            };
-        }
-    }
-
-    public boolean isEnchantable() {
-        if (!this.getItem().isEnchantable(this)) {
-            return false;
-        } else {
-            ItemEnchantments itemenchantments = this.get(DataComponents.ENCHANTMENTS);
-            return itemenchantments != null && itemenchantments.isEmpty();
-        }
-    }
-
-    public void enchant(Enchantment p_41664_, int p_41665_) {
-        EnchantmentHelper.updateEnchantments(this, p_327170_ -> p_327170_.upgrade(p_41664_, p_41665_));
-    }
-
-    public boolean isEnchanted() {
-        return !this.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY).isEmpty();
-    }
-
-    public ItemEnchantments getEnchantments() {
-        return this.getOrDefault(DataComponents.ENCHANTMENTS, ItemEnchantments.EMPTY);
-    }
-
-    public boolean isFramed() {
-        return this.entityRepresentation instanceof ItemFrame;
-    }
-
-    public void setEntityRepresentation(@Nullable Entity p_41637_) {
-        if (!this.isEmpty()) {
-            this.entityRepresentation = p_41637_;
-        }
-    }
-
-    @Nullable
-    public ItemFrame getFrame() {
-        return this.entityRepresentation instanceof ItemFrame ? (ItemFrame)this.getEntityRepresentation() : null;
-    }
-
-    @Nullable
-    public Entity getEntityRepresentation() {
-        return !this.isEmpty() ? this.entityRepresentation : null;
-    }
-
-    public void forEachModifier(EquipmentSlot p_331036_, BiConsumer<Holder<Attribute>, AttributeModifier> p_334430_) {
-        ItemAttributeModifiers itemattributemodifiers = this.getOrDefault(DataComponents.ATTRIBUTE_MODIFIERS, ItemAttributeModifiers.EMPTY);
-        if (!itemattributemodifiers.modifiers().isEmpty()) {
-            itemattributemodifiers.forEach(p_331036_, p_334430_);
-        } else {
-            this.getItem().getDefaultAttributeModifiers().forEach(p_331036_, p_334430_);
-        }
-    }
-
-    public Component getDisplayName() {
-        MutableComponent mutablecomponent = Component.empty().append(this.getHoverName());
-        if (this.has(DataComponents.CUSTOM_NAME)) {
-            mutablecomponent.withStyle(ChatFormatting.ITALIC);
-        }
-
-        MutableComponent mutablecomponent1 = ComponentUtils.wrapInSquareBrackets(mutablecomponent);
-        if (!this.isEmpty()) {
-            mutablecomponent1.withStyle(this.getRarity().color())
-                .withStyle(p_220170_ -> p_220170_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this))));
-        }
-
-        return mutablecomponent1;
-    }
-
-    public boolean canPlaceOnBlockInAdventureMode(BlockInWorld p_331134_) {
-        AdventureModePredicate adventuremodepredicate = this.get(DataComponents.CAN_PLACE_ON);
-        return adventuremodepredicate != null && adventuremodepredicate.test(p_331134_);
-    }
-
-    public boolean canBreakBlockInAdventureMode(BlockInWorld p_333133_) {
-        AdventureModePredicate adventuremodepredicate = this.get(DataComponents.CAN_BREAK);
-        return adventuremodepredicate != null && adventuremodepredicate.test(p_333133_);
-    }
-
-    public int getPopTime() {
-        return this.popTime;
-    }
-
-    public void setPopTime(int p_41755_) {
-        this.popTime = p_41755_;
-    }
-
-    public int getCount() {
-        return this.isEmpty() ? 0 : this.count;
-    }
-
-    public void setCount(int p_41765_) {
-        this.count = p_41765_;
-    }
-
-    public void limitSize(int p_328100_) {
-        if (!this.isEmpty() && this.getCount() > p_328100_) {
-            this.setCount(p_328100_);
-        }
-    }
-
-    public void grow(int p_41770_) {
-        this.setCount(this.getCount() + p_41770_);
-    }
-
-    public void shrink(int p_41775_) {
-        this.grow(-p_41775_);
-    }
-
-    public void consume(int p_329683_, @Nullable LivingEntity p_334302_) {
-        if (p_334302_ == null || !p_334302_.hasInfiniteMaterials()) {
-            this.shrink(p_329683_);
-        }
-    }
-
-    public void onUseTick(Level p_41732_, LivingEntity p_41733_, int p_41734_) {
-        this.getItem().onUseTick(p_41732_, p_41733_, this, p_41734_);
-    }
-
-    public void onDestroyed(ItemEntity p_150925_) {
-        this.getItem().onDestroyed(p_150925_);
-    }
-
-    public SoundEvent getDrinkingSound() {
-        return this.getItem().getDrinkingSound();
-    }
-
-    public SoundEvent getEatingSound() {
-        return this.getItem().getEatingSound();
-    }
-
-    public SoundEvent getBreakingSound() {
-        return this.getItem().getBreakingSound();
-    }
-
-    public boolean canBeHurtBy(DamageSource p_334859_) {
-        return !this.has(DataComponents.FIRE_RESISTANT) || !p_334859_.is(DamageTypeTags.IS_FIRE);
-    }
+public final class ItemStack extends net.minecraftforge.common.capabilities.CapabilityProvider<ItemStack> implements net.minecraftforge.common.extensions.IForgeItemStack {
+   public static final Codec<ItemStack> CODEC = RecordCodecBuilder.create((p_309238_) -> {
+      return p_309238_.group(BuiltInRegistries.ITEM.holderByNameCodec().fieldOf("id").forGetter(ItemStack::getItemHolder), Codec.INT.fieldOf("Count").forGetter(ItemStack::getCount), CompoundTag.CODEC.optionalFieldOf("tag").forGetter((p_281115_) -> {
+         return Optional.ofNullable(p_281115_.getTag());
+      })).apply(p_309238_, ItemStack::new);
+   });
+   @org.jetbrains.annotations.Nullable
+   private net.minecraft.core.Holder.Reference<Item> delegate;
+   private CompoundTag capNBT;
+
+   private static final Codec<Item> ITEM_NON_AIR_CODEC = ExtraCodecs.validate(BuiltInRegistries.ITEM.byNameCodec(), (p_309237_) -> {
+      return p_309237_ == Items.AIR ? DataResult.error(() -> {
+         return "Item must not be minecraft:air";
+      }) : DataResult.success(p_309237_);
+   });
+   public static final Codec<ItemStack> ADVANCEMENT_ICON_CODEC = RecordCodecBuilder.create((p_309240_) -> {
+      return p_309240_.group(BuiltInRegistries.ITEM.holderByNameCodec().fieldOf("item").forGetter(ItemStack::getItemHolder), ExtraCodecs.strictOptionalField(TagParser.AS_CODEC, "nbt").forGetter((p_309242_) -> {
+         return Optional.ofNullable(p_309242_.getTag());
+      })).apply(p_309240_, (p_309243_, p_309244_) -> {
+         return new ItemStack(p_309243_, 1, p_309244_);
+      });
+   });
+   public static final Codec<ItemStack> ITEM_WITH_COUNT_CODEC = RecordCodecBuilder.create((p_309241_) -> {
+      return p_309241_.group(ITEM_NON_AIR_CODEC.fieldOf("item").forGetter(ItemStack::getItem), ExtraCodecs.strictOptionalField(ExtraCodecs.POSITIVE_INT, "count", 1).forGetter(ItemStack::getCount)).apply(p_309241_, ItemStack::new);
+   });
+   public static final Codec<ItemStack> SINGLE_ITEM_CODEC = ITEM_NON_AIR_CODEC.xmap(ItemStack::new, ItemStack::getItem);
+   public static final MapCodec<ItemStack> RESULT_CODEC = RecordCodecBuilder.mapCodec((p_309239_) -> {
+      return p_309239_.group(BuiltInRegistries.ITEM.byNameCodec().fieldOf("result").forGetter(ItemStack::getItem), Codec.INT.fieldOf("count").forGetter(ItemStack::getCount)).apply(p_309239_, ItemStack::new);
+   });
+   private static final Logger LOGGER = LogUtils.getLogger();
+   public static final ItemStack EMPTY = new ItemStack((Void)null);
+   public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), (p_41704_) -> {
+      p_41704_.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
+   });
+   public static final String TAG_ENCH = "Enchantments";
+   public static final String TAG_DISPLAY = "display";
+   public static final String TAG_DISPLAY_NAME = "Name";
+   public static final String TAG_LORE = "Lore";
+   public static final String TAG_DAMAGE = "Damage";
+   public static final String TAG_COLOR = "color";
+   private static final String TAG_UNBREAKABLE = "Unbreakable";
+   private static final String TAG_REPAIR_COST = "RepairCost";
+   private static final String TAG_CAN_DESTROY_BLOCK_LIST = "CanDestroy";
+   private static final String TAG_CAN_PLACE_ON_BLOCK_LIST = "CanPlaceOn";
+   private static final String TAG_HIDE_FLAGS = "HideFlags";
+   private static final Component DISABLED_ITEM_TOOLTIP = Component.translatable("item.disabled").withStyle(ChatFormatting.RED);
+   private static final int DONT_HIDE_TOOLTIP = 0;
+   private static final Style LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
+   private int count;
+   private int popTime;
+   /** @deprecated */
+   @Deprecated
+   @Nullable
+   private Item item;
+   @Nullable
+   private CompoundTag tag;
+   @Nullable
+   private Entity entityRepresentation;
+   @Nullable
+   private AdventureModeCheck adventureBreakCheck;
+   @Nullable
+   private AdventureModeCheck adventurePlaceCheck;
+
+   public Optional<TooltipComponent> getTooltipImage() {
+      return this.getItem().getTooltipImage(this);
+   }
+
+   public ItemStack(ItemLike p_41599_) {
+      this(p_41599_, 1);
+   }
+
+   public ItemStack(Holder<Item> p_204116_) {
+      this(p_204116_.value(), 1);
+   }
+
+   public ItemStack(Holder<Item> p_310702_, int p_41605_, Optional<CompoundTag> p_41606_) {
+      this(p_310702_, p_41605_);
+      p_41606_.ifPresent(this::setTag);
+   }
+
+   public ItemStack(Holder<Item> p_220155_, int p_220156_) {
+      this(p_220155_.value(), p_220156_);
+   }
+
+   public ItemStack(ItemLike p_41601_, int p_41602_) { this(p_41601_, p_41602_, (CompoundTag) null); }
+   public ItemStack(ItemLike p_41604_, int p_41605_, @Nullable CompoundTag p_41606_) {
+      super(ItemStack.class, true);
+      this.capNBT = p_41606_;
+      this.item = p_41604_.asItem();
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(p_41604_.asItem());
+      this.count = p_41605_;
+      this.forgeInit();
+      if (this.item.isDamageable(this)) {
+         this.setDamageValue(this.getDamageValue());
+      }
+
+   }
+
+   private ItemStack(@Nullable Void p_282703_) {
+      super(ItemStack.class, true);
+      this.item = null;
+      this.delegate = null;
+   }
+
+   // Called to run this stack through the data converter to handle older storage methods and serialized items
+   public void convertStack(int version) {
+      if (0 < version && version < CraftMagicNumbers.INSTANCE.getDataVersion()) {
+         CompoundTag savedStack = new CompoundTag();
+         this.save(savedStack);
+         savedStack = (CompoundTag) MinecraftServer.getServer().getFixerUpper().update(References.ITEM_STACK, new Dynamic(NbtOps.INSTANCE, savedStack), version, CraftMagicNumbers.INSTANCE.getDataVersion()).getValue();
+         this.load(savedStack);
+      }
+   }
+
+   // Mohist start fix 'Bigger Stacks' mod mixin
+   // CraftBukkit start - break into own method
+   public void load(CompoundTag compound) {
+      this.capNBT = compound.contains("ForgeCaps") ? compound.getCompound("ForgeCaps") : null;
+      Item rawItem =
+              this.item = BuiltInRegistries.ITEM.get(new ResourceLocation(compound.getString("id")));
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(rawItem);
+      this.count = compound.getByte("Count");
+      if (compound.contains("tag", 10)) {
+         // CraftBukkit start - make defensive copy as this data may be coming from the save thread
+         this.tag = compound.getCompound("tag").copy();
+         this.getItem().verifyTagAfterLoad(this.tag);
+         // CraftBukkit end
+      }
+
+      this.forgeInit();
+      if (this.getItem().isDamageable(this)) {
+         this.setDamageValue(this.getDamageValue());
+      }
+   }
+
+   public ItemStack(CompoundTag p_41608_) {
+      super(ItemStack.class, true);
+      this.capNBT = p_41608_.contains("ForgeCaps") ? p_41608_.getCompound("ForgeCaps") : null;
+      Item rawItem =
+      this.item = BuiltInRegistries.ITEM.get(new ResourceLocation(p_41608_.getString("id")));
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(rawItem);
+      this.count = p_41608_.getByte("Count");
+      if (p_41608_.contains("tag", 10)) {
+         this.tag = p_41608_.getCompound("tag").copy();
+         this.getItem().verifyTagAfterLoad(this.tag);
+      }
+      this.forgeInit();
+
+      if (this.getItem().isDamageable(this)) {
+         this.setDamageValue(this.getDamageValue());
+      }
+   }
+
+   public CompoundTag getForgeCaps() {
+      return this.serializeCaps();
+   }
+
+   public void setForgeCaps(CompoundTag nbt) {
+      this.capNBT = nbt;
+      if (nbt != null)
+         this.deserializeCaps(nbt);
+   }
+
+   // Mohist end
+
+   public static ItemStack of(CompoundTag p_41713_) {
+      try {
+         return new ItemStack(p_41713_);
+      } catch (RuntimeException runtimeexception) {
+         LOGGER.debug("Tried to load invalid item: {}", p_41713_, runtimeexception);
+         return EMPTY;
+      }
+   }
+
+   public boolean isEmpty() {
+      return this == EMPTY || this.count <= 0 || this.delegate.get() == Items.AIR;
+   }
+
+   public boolean isItemEnabled(FeatureFlagSet p_250869_) {
+      return this.isEmpty() || this.getItem().isEnabled(p_250869_);
+   }
+
+   public ItemStack split(int p_41621_) {
+      int i = Math.min(p_41621_, this.getCount());
+      ItemStack itemstack = this.copyWithCount(i);
+      this.shrink(i);
+      return itemstack;
+   }
+
+   public ItemStack copyAndClear() {
+      if (this.isEmpty()) {
+         return EMPTY;
+      } else {
+         ItemStack itemstack = this.copy();
+         this.setCount(0);
+         return itemstack;
+      }
+   }
+
+   public Item getItem() {
+      return this.isEmpty() ? Items.AIR : this.delegate.get();
+   }
+
+   public Holder<Item> getItemHolder() {
+      return this.getItem().builtInRegistryHolder();
+   }
+
+   public boolean is(TagKey<Item> p_204118_) {
+      return this.getItem().builtInRegistryHolder().is(p_204118_);
+   }
+
+   public boolean is(Item p_150931_) {
+      return this.getItem() == p_150931_;
+   }
+
+   public boolean is(Predicate<Holder<Item>> p_220168_) {
+      return p_220168_.test(this.getItem().builtInRegistryHolder());
+   }
+
+   public boolean is(Holder<Item> p_220166_) {
+      return this.getItem().builtInRegistryHolder() == p_220166_;
+   }
+
+   public boolean is(HolderSet<Item> p_299078_) {
+      return p_299078_.contains(this.getItemHolder());
+   }
+
+   public Stream<TagKey<Item>> getTags() {
+      return this.getItem().builtInRegistryHolder().tags();
+   }
+
+   public InteractionResult useOn(UseOnContext p_41662_) {
+      if (!p_41662_.getLevel().isClientSide) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(p_41662_);
+      return onItemUse(p_41662_, (c) -> getItem().useOn(p_41662_));
+   }
+
+   public InteractionResult onItemUseFirst(UseOnContext p_41662_) {
+      return onItemUse(p_41662_, (c) -> getItem().onItemUseFirst(this, p_41662_));
+   }
+
+   private InteractionResult onItemUse(UseOnContext p_41662_, java.util.function.Function<UseOnContext, InteractionResult> callback) {
+      Player player = p_41662_.getPlayer();
+      if (BanItem.check(player, p_41662_.getItemInHand())) return InteractionResult.FAIL;
+      BlockPos blockpos = p_41662_.getClickedPos();
+      BlockInWorld blockinworld = new BlockInWorld(p_41662_.getLevel(), blockpos, false);
+      if (player != null && !player.getAbilities().mayBuild && !this.hasAdventureModePlaceTagForBlock(p_41662_.getLevel().registryAccess().registryOrThrow(Registries.BLOCK), blockinworld)) {
+         return InteractionResult.PASS;
+      } else {
+         Item item = this.getItem();
+         InteractionResult interactionresult = callback.apply(p_41662_);
+         if (player != null && interactionresult.shouldAwardStats()) {
+            player.awardStat(Stats.ITEM_USED.get(item));
+         }
+
+         return interactionresult;
+      }
+   }
+
+   public float getDestroySpeed(BlockState p_41692_) {
+      return this.getItem().getDestroySpeed(this, p_41692_);
+   }
+
+   public InteractionResultHolder<ItemStack> use(Level p_41683_, Player p_41684_, InteractionHand p_41685_) {
+      return this.getItem().use(p_41683_, p_41684_, p_41685_);
+   }
+
+   public ItemStack finishUsingItem(Level p_41672_, LivingEntity p_41673_) {
+      return this.getItem().finishUsingItem(this, p_41672_, p_41673_);
+   }
+
+   public CompoundTag save(CompoundTag p_41740_) {
+      ResourceLocation resourcelocation = BuiltInRegistries.ITEM.getKey(this.getItem());
+      p_41740_.putString("id", resourcelocation == null ? "minecraft:air" : resourcelocation.toString());
+      p_41740_.putByte("Count", (byte)this.count);
+      if (this.tag != null) {
+         p_41740_.put("tag", this.tag.copy());
+      }
+
+      CompoundTag cnbt = this.serializeCaps();
+      if (cnbt != null && !cnbt.isEmpty()) {
+         p_41740_.put("ForgeCaps", cnbt);
+      }
+      return p_41740_;
+   }
+
+   public int getMaxStackSize() {
+      return this.getItem().getMaxStackSize(this);
+   }
+
+   public boolean isStackable() {
+      return this.getMaxStackSize() > 1 && (!this.isDamageableItem() || !this.isDamaged());
+   }
+
+   public boolean isDamageableItem() {
+      if (!this.isEmpty() && this.getItem().isDamageable(this)) {
+         CompoundTag compoundtag = this.getTag();
+         return compoundtag == null || !compoundtag.getBoolean("Unbreakable");
+      } else {
+         return false;
+      }
+   }
+
+   public boolean isDamaged() {
+      return this.isDamageableItem() && getItem().isDamaged(this);
+   }
+
+   public int getDamageValue() {
+      return this.getItem().getDamage(this);
+   }
+
+   public void setDamageValue(int p_41722_) {
+      this.getItem().setDamage(this, p_41722_);
+   }
+
+   public int getMaxDamage() {
+      return this.getItem().getMaxDamage(this);
+   }
+
+   public boolean hurt(int p_220158_, RandomSource p_220159_, @Nullable ServerPlayer p_220160_) {
+      if (!this.isDamageableItem()) {
+         return false;
+      } else {
+         if (p_220158_ > 0) {
+            int i = EnchantmentHelper.getItemEnchantmentLevel(Enchantments.UNBREAKING, this);
+            int j = 0;
+
+            for(int k = 0; i > 0 && k < p_220158_; ++k) {
+               if (DigDurabilityEnchantment.shouldIgnoreDurabilityDrop(this, i, p_220159_)) {
+                  ++j;
+               }
+            }
+
+            p_220158_ -= j;
+            // CraftBukkit start
+            if (p_220160_ != null) {
+               PlayerItemDamageEvent event = new PlayerItemDamageEvent(p_220160_.getBukkitEntity(), CraftItemStack.asCraftMirror(this), p_220158_);
+               event.getPlayer().getServer().getPluginManager().callEvent(event);
+
+               if (p_220158_ != event.getDamage() || event.isCancelled()) {
+                  event.getPlayer().updateInventory();
+               }
+               if (event.isCancelled()) {
+                  return false;
+               }
+
+               p_220158_ = event.getDamage();
+            }
+            // CraftBukkit end
+            if (p_220158_ <= 0) {
+               return false;
+            }
+         }
+
+         if (p_220160_ != null && p_220158_ != 0) {
+            CriteriaTriggers.ITEM_DURABILITY_CHANGED.trigger(p_220160_, this, this.getDamageValue() + p_220158_);
+         }
+
+         int l = this.getDamageValue() + p_220158_;
+         this.setDamageValue(l);
+         return l >= this.getMaxDamage();
+      }
+   }
+
+   public <T extends LivingEntity> void hurtAndBreak(int p_41623_, T p_41624_, Consumer<T> p_41625_) {
+      if (!p_41624_.level().isClientSide && (!(p_41624_ instanceof Player) || !((Player)p_41624_).getAbilities().instabuild)) {
+         if (this.isDamageableItem()) {
+            p_41623_ = this.getItem().damageItem(this, p_41623_, p_41624_, p_41625_);
+            if (this.hurt(p_41623_, p_41624_.getRandom(), p_41624_ instanceof ServerPlayer ? (ServerPlayer)p_41624_ : null)) {
+               p_41625_.accept(p_41624_);
+               Item item = this.getItem();
+               // CraftBukkit start - Check for item breaking
+               if (this.count == 1 && p_41624_ instanceof Player) {
+                  CraftEventFactory.callPlayerItemBreakEvent((Player) p_41624_, this);
+               }
+               // CraftBukkit end
+               this.shrink(1);
+               if (p_41624_ instanceof Player) {
+                  ((Player)p_41624_).awardStat(Stats.ITEM_BROKEN.get(item));
+               }
+
+               this.setDamageValue(0);
+            }
+
+         }
+      }
+   }
+
+   public boolean isBarVisible() {
+      return this.getItem().isBarVisible(this);
+   }
+
+   public int getBarWidth() {
+      return this.getItem().getBarWidth(this);
+   }
+
+   public int getBarColor() {
+      return this.getItem().getBarColor(this);
+   }
+
+   public boolean overrideStackedOnOther(Slot p_150927_, ClickAction p_150928_, Player p_150929_) {
+      return this.getItem().overrideStackedOnOther(this, p_150927_, p_150928_, p_150929_);
+   }
+
+   public boolean overrideOtherStackedOnMe(ItemStack p_150933_, Slot p_150934_, ClickAction p_150935_, Player p_150936_, SlotAccess p_150937_) {
+      return this.getItem().overrideOtherStackedOnMe(this, p_150933_, p_150934_, p_150935_, p_150936_, p_150937_);
+   }
+
+   public void hurtEnemy(LivingEntity p_41641_, Player p_41642_) {
+      Item item = this.getItem();
+      if (item.hurtEnemy(this, p_41641_, p_41642_)) {
+         p_41642_.awardStat(Stats.ITEM_USED.get(item));
+      }
+
+   }
+
+   public void mineBlock(Level p_41687_, BlockState p_41688_, BlockPos p_41689_, Player p_41690_) {
+      Item item = this.getItem();
+      if (item.mineBlock(this, p_41687_, p_41688_, p_41689_, p_41690_)) {
+         p_41690_.awardStat(Stats.ITEM_USED.get(item));
+      }
+
+   }
+
+   public boolean isCorrectToolForDrops(BlockState p_41736_) {
+      return this.getItem().isCorrectToolForDrops(this, p_41736_);
+   }
+
+   public InteractionResult interactLivingEntity(Player p_41648_, LivingEntity p_41649_, InteractionHand p_41650_) {
+      return this.getItem().interactLivingEntity(this, p_41648_, p_41649_, p_41650_);
+   }
+
+   public ItemStack copy() {
+      if (this.isEmpty()) {
+         return EMPTY;
+      } else {
+         ItemStack itemstack = new ItemStack(this.getItem(), this.count, this.serializeCaps());
+         itemstack.setPopTime(this.getPopTime());
+         if (this.tag != null) {
+            itemstack.tag = this.tag.copy();
+         }
+
+         return itemstack;
+      }
+   }
+
+   public ItemStack copyWithCount(int p_256354_) {
+      if (this.isEmpty()) {
+         return EMPTY;
+      } else {
+         ItemStack itemstack = this.copy();
+         itemstack.setCount(p_256354_);
+         return itemstack;
+      }
+   }
+
+   public static boolean matches(ItemStack p_41729_, ItemStack p_41730_) {
+      if (p_41729_ == p_41730_) {
+         return true;
+      } else {
+         return p_41729_.getCount() != p_41730_.getCount() ? false : isSameItemSameTags(p_41729_, p_41730_);
+      }
+   }
+
+   public static boolean isSameItem(ItemStack p_287761_, ItemStack p_287676_) {
+      return p_287761_.is(p_287676_.getItem());
+   }
+
+   public static boolean isSameItemSameTags(ItemStack p_150943_, ItemStack p_150944_) {
+      if (!p_150943_.is(p_150944_.getItem())) {
+         return false;
+      } else {
+         return p_150943_.isEmpty() && p_150944_.isEmpty() ? true : Objects.equals(p_150943_.tag, p_150944_.tag) && p_150943_.areCapsCompatible(p_150944_);
+      }
+   }
+
+   public String getDescriptionId() {
+      return this.getItem().getDescriptionId(this);
+   }
+
+   public String toString() {
+      return this.getCount() + " " + this.getItem();
+   }
+
+   public void inventoryTick(Level p_41667_, Entity p_41668_, int p_41669_, boolean p_41670_) {
+      if (this.popTime > 0) {
+         --this.popTime;
+      }
+
+      if (this.getItem() != null) {
+         this.getItem().inventoryTick(this, p_41667_, p_41668_, p_41669_, p_41670_);
+      }
+
+   }
+
+   public void onCraftedBy(Level p_41679_, Player p_41680_, int p_41681_) {
+      p_41680_.awardStat(Stats.ITEM_CRAFTED.get(this.getItem()), p_41681_);
+      this.getItem().onCraftedBy(this, p_41679_, p_41680_);
+   }
+
+   public void onCraftedBySystem(Level p_311164_) {
+      this.getItem().onCraftedPostProcess(this, p_311164_);
+   }
+
+   public int getUseDuration() {
+      return this.getItem().getUseDuration(this);
+   }
+
+   public UseAnim getUseAnimation() {
+      return this.getItem().getUseAnimation(this);
+   }
+
+   public void releaseUsing(Level p_41675_, LivingEntity p_41676_, int p_41677_) {
+      this.getItem().releaseUsing(this, p_41675_, p_41676_, p_41677_);
+   }
+
+   public boolean useOnRelease() {
+      return this.getItem().useOnRelease(this);
+   }
+
+   public boolean hasTag() {
+      return !this.isEmpty() && this.tag != null && !this.tag.isEmpty();
+   }
+
+   @Nullable
+   public CompoundTag getTag() {
+      return this.tag;
+   }
+
+   // CraftBukkit start
+   @Nullable
+   private CompoundTag getTagClone() {
+      return this.tag == null ? null : this.tag.copy();
+   }
+
+   private void setTagClone(@Nullable CompoundTag nbtttagcompound) {
+      this.setTag(nbtttagcompound == null ? null : nbtttagcompound.copy());
+   }
+   // CraftBukkit end
+
+   public CompoundTag getOrCreateTag() {
+      if (this.tag == null) {
+         this.setTag(new CompoundTag());
+      }
+
+      return this.tag;
+   }
+
+   public CompoundTag getOrCreateTagElement(String p_41699_) {
+      if (this.tag != null && this.tag.contains(p_41699_, 10)) {
+         return this.tag.getCompound(p_41699_);
+      } else {
+         CompoundTag compoundtag = new CompoundTag();
+         this.addTagElement(p_41699_, compoundtag);
+         return compoundtag;
+      }
+   }
+
+   @Nullable
+   public CompoundTag getTagElement(String p_41738_) {
+      return this.tag != null && this.tag.contains(p_41738_, 10) ? this.tag.getCompound(p_41738_) : null;
+   }
+
+   public void removeTagKey(String p_41750_) {
+      if (this.tag != null && this.tag.contains(p_41750_)) {
+         this.tag.remove(p_41750_);
+         if (this.tag.isEmpty()) {
+            this.tag = null;
+         }
+      }
+
+   }
+
+   public ListTag getEnchantmentTags() {
+      return this.tag != null ? this.tag.getList("Enchantments", 10) : new ListTag();
+   }
+
+   public void setTag(@Nullable CompoundTag p_41752_) {
+      this.tag = p_41752_;
+      if (this.getItem().isDamageable(this)) {
+         this.setDamageValue(this.getDamageValue());
+      }
+
+      if (p_41752_ != null) {
+         this.getItem().verifyTagAfterLoad(p_41752_);
+      }
+
+   }
+
+   public Component getHoverName() {
+      CompoundTag compoundtag = this.getTagElement("display");
+      if (compoundtag != null && compoundtag.contains("Name", 8)) {
+         try {
+            Component component = Component.Serializer.fromJson(compoundtag.getString("Name"));
+            if (component != null) {
+               return component;
+            }
+
+            compoundtag.remove("Name");
+         } catch (Exception exception) {
+            compoundtag.remove("Name");
+         }
+      }
+
+      return this.getItem().getName(this);
+   }
+
+   public ItemStack setHoverName(@Nullable Component p_41715_) {
+      CompoundTag compoundtag = this.getOrCreateTagElement("display");
+      if (p_41715_ != null) {
+         compoundtag.putString("Name", Component.Serializer.toJson(p_41715_));
+      } else {
+         compoundtag.remove("Name");
+      }
+
+      return this;
+   }
+
+   public void resetHoverName() {
+      CompoundTag compoundtag = this.getTagElement("display");
+      if (compoundtag != null) {
+         compoundtag.remove("Name");
+         if (compoundtag.isEmpty()) {
+            this.removeTagKey("display");
+         }
+      }
+
+      if (this.tag != null && this.tag.isEmpty()) {
+         this.tag = null;
+      }
+
+   }
+
+   public boolean hasCustomHoverName() {
+      CompoundTag compoundtag = this.getTagElement("display");
+      return compoundtag != null && compoundtag.contains("Name", 8);
+   }
+
+   public List<Component> getTooltipLines(@Nullable Player p_41652_, TooltipFlag p_41653_) {
+      List<Component> list = Lists.newArrayList();
+      MutableComponent mutablecomponent = Component.empty().append(this.getHoverName()).withStyle(this.getRarity().getStyleModifier());
+      if (this.hasCustomHoverName()) {
+         mutablecomponent.withStyle(ChatFormatting.ITALIC);
+      }
+
+      list.add(mutablecomponent);
+      if (!p_41653_.isAdvanced() && !this.hasCustomHoverName() && this.is(Items.FILLED_MAP)) {
+         Integer integer = MapItem.getMapId(this);
+         if (integer != null) {
+            list.add(MapItem.getTooltipForId(this));
+         }
+      }
+
+      int j = this.getHideFlags();
+      if (shouldShowInTooltip(j, ItemStack.TooltipPart.ADDITIONAL)) {
+         this.getItem().appendHoverText(this, p_41652_ == null ? null : p_41652_.level(), list, p_41653_);
+      }
+
+      if (this.hasTag()) {
+         if (shouldShowInTooltip(j, ItemStack.TooltipPart.UPGRADES) && p_41652_ != null) {
+            ArmorTrim.appendUpgradeHoverText(this, p_41652_.level().registryAccess(), list);
+         }
+
+         if (shouldShowInTooltip(j, ItemStack.TooltipPart.ENCHANTMENTS)) {
+            appendEnchantmentNames(list, this.getEnchantmentTags());
+         }
+
+         if (this.tag.contains("display", 10)) {
+            CompoundTag compoundtag = this.tag.getCompound("display");
+            if (shouldShowInTooltip(j, ItemStack.TooltipPart.DYE) && compoundtag.contains("color", 99)) {
+               if (p_41653_.isAdvanced()) {
+                  list.add(Component.translatable("item.color", String.format(Locale.ROOT, "#%06X", compoundtag.getInt("color"))).withStyle(ChatFormatting.GRAY));
+               } else {
+                  list.add(Component.translatable("item.dyed").withStyle(ChatFormatting.GRAY, ChatFormatting.ITALIC));
+               }
+            }
+
+            if (compoundtag.getTagType("Lore") == 9) {
+               ListTag listtag = compoundtag.getList("Lore", 8);
+
+               for(int i = 0; i < listtag.size(); ++i) {
+                  String s = listtag.getString(i);
+
+                  try {
+                     MutableComponent mutablecomponent1 = Component.Serializer.fromJson(s);
+                     if (mutablecomponent1 != null) {
+                        list.add(ComponentUtils.mergeStyles(mutablecomponent1, LORE_STYLE));
+                     }
+                  } catch (Exception exception) {
+                     compoundtag.remove("Lore");
+                  }
+               }
+            }
+         }
+      }
+
+      if (shouldShowInTooltip(j, ItemStack.TooltipPart.MODIFIERS)) {
+         for(EquipmentSlot equipmentslot : EquipmentSlot.values()) {
+            Multimap<Attribute, AttributeModifier> multimap = this.getAttributeModifiers(equipmentslot);
+            if (!multimap.isEmpty()) {
+               list.add(CommonComponents.EMPTY);
+               list.add(Component.translatable("item.modifiers." + equipmentslot.getName()).withStyle(ChatFormatting.GRAY));
+
+               for(Map.Entry<Attribute, AttributeModifier> entry : multimap.entries()) {
+                  AttributeModifier attributemodifier = entry.getValue();
+                  double d0 = attributemodifier.getAmount();
+                  boolean flag = false;
+                  if (p_41652_ != null) {
+                     if (attributemodifier.getId() == Item.BASE_ATTACK_DAMAGE_UUID) {
+                        d0 += p_41652_.getAttributeBaseValue(Attributes.ATTACK_DAMAGE);
+                        d0 += (double)EnchantmentHelper.getDamageBonus(this, MobType.UNDEFINED);
+                        flag = true;
+                     } else if (attributemodifier.getId() == Item.BASE_ATTACK_SPEED_UUID) {
+                        d0 += p_41652_.getAttributeBaseValue(Attributes.ATTACK_SPEED);
+                        flag = true;
+                     }
+                  }
+
+                  double d1;
+                  if (attributemodifier.getOperation() != AttributeModifier.Operation.MULTIPLY_BASE && attributemodifier.getOperation() != AttributeModifier.Operation.MULTIPLY_TOTAL) {
+                     if (entry.getKey().equals(Attributes.KNOCKBACK_RESISTANCE)) {
+                        d1 = d0 * 10.0D;
+                     } else {
+                        d1 = d0;
+                     }
+                  } else {
+                     d1 = d0 * 100.0D;
+                  }
+
+                  if (flag) {
+                     list.add(CommonComponents.space().append(Component.translatable("attribute.modifier.equals." + attributemodifier.getOperation().toValue(), ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(entry.getKey().getDescriptionId()))).withStyle(ChatFormatting.DARK_GREEN));
+                  } else if (d0 > 0.0D) {
+                     list.add(Component.translatable("attribute.modifier.plus." + attributemodifier.getOperation().toValue(), ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(entry.getKey().getDescriptionId())).withStyle(ChatFormatting.BLUE));
+                  } else if (d0 < 0.0D) {
+                     d1 *= -1.0D;
+                     list.add(Component.translatable("attribute.modifier.take." + attributemodifier.getOperation().toValue(), ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(entry.getKey().getDescriptionId())).withStyle(ChatFormatting.RED));
+                  }
+               }
+            }
+         }
+      }
+
+      if (this.hasTag()) {
+         if (shouldShowInTooltip(j, ItemStack.TooltipPart.UNBREAKABLE) && this.tag.getBoolean("Unbreakable")) {
+            list.add(Component.translatable("item.unbreakable").withStyle(ChatFormatting.BLUE));
+         }
+
+         if (shouldShowInTooltip(j, ItemStack.TooltipPart.CAN_DESTROY) && this.tag.contains("CanDestroy", 9)) {
+            ListTag listtag1 = this.tag.getList("CanDestroy", 8);
+            if (!listtag1.isEmpty()) {
+               list.add(CommonComponents.EMPTY);
+               list.add(Component.translatable("item.canBreak").withStyle(ChatFormatting.GRAY));
+
+               for(int k = 0; k < listtag1.size(); ++k) {
+                  list.addAll(expandBlockState(listtag1.getString(k)));
+               }
+            }
+         }
+
+         if (shouldShowInTooltip(j, ItemStack.TooltipPart.CAN_PLACE) && this.tag.contains("CanPlaceOn", 9)) {
+            ListTag listtag2 = this.tag.getList("CanPlaceOn", 8);
+            if (!listtag2.isEmpty()) {
+               list.add(CommonComponents.EMPTY);
+               list.add(Component.translatable("item.canPlace").withStyle(ChatFormatting.GRAY));
+
+               for(int l = 0; l < listtag2.size(); ++l) {
+                  list.addAll(expandBlockState(listtag2.getString(l)));
+               }
+            }
+         }
+      }
+
+      if (p_41653_.isAdvanced()) {
+         if (this.isDamaged()) {
+            list.add(Component.translatable("item.durability", this.getMaxDamage() - this.getDamageValue(), this.getMaxDamage()));
+         }
+
+         list.add(Component.literal(BuiltInRegistries.ITEM.getKey(this.getItem()).toString()).withStyle(ChatFormatting.DARK_GRAY));
+         if (this.hasTag()) {
+            list.add(Component.translatable("item.nbt_tags", this.tag.getAllKeys().size()).withStyle(ChatFormatting.DARK_GRAY));
+         }
+      }
+
+      if (p_41652_ != null && !this.getItem().isEnabled(p_41652_.level().enabledFeatures())) {
+         list.add(DISABLED_ITEM_TOOLTIP);
+      }
+
+      net.minecraftforge.event.ForgeEventFactory.onItemTooltip(this, p_41652_, list, p_41653_);
+      return list;
+   }
+
+   private static boolean shouldShowInTooltip(int p_41627_, ItemStack.TooltipPart p_41628_) {
+      return (p_41627_ & p_41628_.getMask()) == 0;
+   }
+
+   private int getHideFlags() {
+      return this.hasTag() && this.tag.contains("HideFlags", 99) ? this.tag.getInt("HideFlags") : this.getItem().getDefaultTooltipHideFlags(this);
+   }
+
+   public void hideTooltipPart(ItemStack.TooltipPart p_41655_) {
+      CompoundTag compoundtag = this.getOrCreateTag();
+      compoundtag.putInt("HideFlags", compoundtag.getInt("HideFlags") | p_41655_.getMask());
+   }
+
+   public static void appendEnchantmentNames(List<Component> p_41710_, ListTag p_41711_) {
+      for(int i = 0; i < p_41711_.size(); ++i) {
+         CompoundTag compoundtag = p_41711_.getCompound(i);
+         BuiltInRegistries.ENCHANTMENT.getOptional(EnchantmentHelper.getEnchantmentId(compoundtag)).ifPresent((p_41708_) -> {
+            p_41710_.add(p_41708_.getFullname(EnchantmentHelper.getEnchantmentLevel(compoundtag)));
+         });
+      }
+
+   }
+
+   private static Collection<Component> expandBlockState(String p_41762_) {
+      try {
+         return BlockStateParser.parseForTesting(BuiltInRegistries.BLOCK.asLookup(), p_41762_, true).map((p_220162_) -> {
+            return Lists.newArrayList(p_220162_.blockState().getBlock().getName().withStyle(ChatFormatting.DARK_GRAY));
+         }, (p_220164_) -> {
+            return p_220164_.tag().stream().map((p_220172_) -> {
+               return p_220172_.value().getName().withStyle(ChatFormatting.DARK_GRAY);
+            }).collect(Collectors.toList());
+         });
+      } catch (CommandSyntaxException commandsyntaxexception) {
+         return Lists.newArrayList(Component.literal("missingno").withStyle(ChatFormatting.DARK_GRAY));
+      }
+   }
+
+   public boolean hasFoil() {
+      return this.getItem().isFoil(this);
+   }
+
+   public Rarity getRarity() {
+      return this.getItem().getRarity(this);
+   }
+
+   public boolean isEnchantable() {
+      if (!this.getItem().isEnchantable(this)) {
+         return false;
+      } else {
+         return !this.isEnchanted();
+      }
+   }
+
+   public void enchant(Enchantment p_41664_, int p_41665_) {
+      this.getOrCreateTag();
+      if (!this.tag.contains("Enchantments", 9)) {
+         this.tag.put("Enchantments", new ListTag());
+      }
+
+      ListTag listtag = this.tag.getList("Enchantments", 10);
+      listtag.add(EnchantmentHelper.storeEnchantment(EnchantmentHelper.getEnchantmentId(p_41664_), (byte)p_41665_));
+   }
+
+   public boolean isEnchanted() {
+      if (this.tag != null && this.tag.contains("Enchantments", 9)) {
+         return !this.tag.getList("Enchantments", 10).isEmpty();
+      } else {
+         return false;
+      }
+   }
+
+   public void addTagElement(String p_41701_, Tag p_41702_) {
+      this.getOrCreateTag().put(p_41701_, p_41702_);
+   }
+
+   public boolean isFramed() {
+      return this.entityRepresentation instanceof ItemFrame;
+   }
+
+   public void setEntityRepresentation(@Nullable Entity p_41637_) {
+      this.entityRepresentation = p_41637_;
+   }
+
+   @Nullable
+   public ItemFrame getFrame() {
+      return this.entityRepresentation instanceof ItemFrame ? (ItemFrame)this.getEntityRepresentation() : null;
+   }
+
+   @Nullable
+   public Entity getEntityRepresentation() {
+      return !this.isEmpty() ? this.entityRepresentation : null;
+   }
+
+   public int getBaseRepairCost() {
+      return this.hasTag() && this.tag.contains("RepairCost", 3) ? this.tag.getInt("RepairCost") : 0;
+   }
+
+   public void setRepairCost(int p_41743_) {
+      if (p_41743_ > 0) {
+         this.getOrCreateTag().putInt("RepairCost", p_41743_);
+      } else {
+         this.removeTagKey("RepairCost");
+      }
+
+   }
+
+   public Multimap<Attribute, AttributeModifier> getAttributeModifiers(EquipmentSlot p_41639_) {
+      Multimap<Attribute, AttributeModifier> multimap;
+      if (this.hasTag() && this.tag.contains("AttributeModifiers", 9)) {
+         multimap = HashMultimap.create();
+         ListTag listtag = this.tag.getList("AttributeModifiers", 10);
+
+         for(int i = 0; i < listtag.size(); ++i) {
+            CompoundTag compoundtag = listtag.getCompound(i);
+            if (!compoundtag.contains("Slot", 8) || compoundtag.getString("Slot").equals(p_41639_.getName())) {
+               Optional<Attribute> optional = BuiltInRegistries.ATTRIBUTE.getOptional(ResourceLocation.tryParse(compoundtag.getString("AttributeName")));
+               if (!optional.isEmpty()) {
+                  AttributeModifier attributemodifier = AttributeModifier.load(compoundtag);
+                  if (attributemodifier != null && attributemodifier.getId().getLeastSignificantBits() != 0L && attributemodifier.getId().getMostSignificantBits() != 0L) {
+                     multimap.put(optional.get(), attributemodifier);
+                  }
+               }
+            }
+         }
+      } else {
+         multimap = this.getItem().getAttributeModifiers(p_41639_, this);
+      }
+
+      multimap = net.minecraftforge.common.ForgeHooks.getAttributeModifiers(this, p_41639_, multimap);
+      return multimap;
+   }
+
+   public void addAttributeModifier(Attribute p_41644_, AttributeModifier p_41645_, @Nullable EquipmentSlot p_41646_) {
+      this.getOrCreateTag();
+      if (!this.tag.contains("AttributeModifiers", 9)) {
+         this.tag.put("AttributeModifiers", new ListTag());
+      }
+
+      ListTag listtag = this.tag.getList("AttributeModifiers", 10);
+      CompoundTag compoundtag = p_41645_.save();
+      compoundtag.putString("AttributeName", BuiltInRegistries.ATTRIBUTE.getKey(p_41644_).toString());
+      if (p_41646_ != null) {
+         compoundtag.putString("Slot", p_41646_.getName());
+      }
+
+      listtag.add(compoundtag);
+   }
+
+   public Component getDisplayName() {
+      MutableComponent mutablecomponent = Component.empty().append(this.getHoverName());
+      if (this.hasCustomHoverName()) {
+         mutablecomponent.withStyle(ChatFormatting.ITALIC);
+      }
+
+      MutableComponent mutablecomponent1 = ComponentUtils.wrapInSquareBrackets(mutablecomponent);
+      if (!this.isEmpty()) {
+         mutablecomponent1.withStyle(this.getRarity().getStyleModifier()).withStyle((p_220170_) -> {
+            return p_220170_.withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_ITEM, new HoverEvent.ItemStackInfo(this)));
+         });
+      }
+
+      return mutablecomponent1;
+   }
+
+   public boolean hasAdventureModePlaceTagForBlock(Registry<Block> p_204122_, BlockInWorld p_204123_) {
+      if (this.adventurePlaceCheck == null) {
+         this.adventurePlaceCheck = new AdventureModeCheck("CanPlaceOn");
+      }
+
+      return this.adventurePlaceCheck.test(this, p_204122_, p_204123_);
+   }
+
+   public boolean hasAdventureModeBreakTagForBlock(Registry<Block> p_204129_, BlockInWorld p_204130_) {
+      if (this.adventureBreakCheck == null) {
+         this.adventureBreakCheck = new AdventureModeCheck("CanDestroy");
+      }
+
+      return this.adventureBreakCheck.test(this, p_204129_, p_204130_);
+   }
+
+   public int getPopTime() {
+      return this.popTime;
+   }
+
+   public void setPopTime(int p_41755_) {
+      this.popTime = p_41755_;
+   }
+
+   public int getCount() {
+      return this.isEmpty() ? 0 : this.count;
+   }
+
+   public void setCount(int p_41765_) {
+      this.count = p_41765_;
+   }
+
+   public void grow(int p_41770_) {
+      this.setCount(this.getCount() + p_41770_);
+   }
+
+   public void shrink(int p_41775_) {
+      this.grow(-p_41775_);
+   }
+
+   public void onUseTick(Level p_41732_, LivingEntity p_41733_, int p_41734_) {
+      this.getItem().onUseTick(p_41732_, p_41733_, this, p_41734_);
+   }
+
+   /** @deprecated Forge: Use {@linkplain net.minecraftforge.common.extensions.IForgeItemStack#onDestroyed(ItemEntity, net.minecraft.world.damagesource.DamageSource) damage source sensitive version} */
+   @Deprecated
+   public void onDestroyed(ItemEntity p_150925_) {
+      this.getItem().onDestroyed(p_150925_);
+   }
+
+   public boolean isEdible() {
+      return this.getItem().isEdible();
+   }
+
+   // FORGE START
+   public void deserializeNBT(CompoundTag nbt) {
+      final ItemStack itemStack = ItemStack.of(nbt);
+      this.setTag(itemStack.getTag());
+      if (itemStack.capNBT != null) deserializeCaps(itemStack.capNBT);
+   }
+
+   /**
+    * Set up forge's ItemStack additions.
+    */
+   private void forgeInit() {
+      if (this.delegate != null) {
+         this.gatherCapabilities(() -> item.initCapabilities(this, this.capNBT));
+         if (this.capNBT != null) deserializeCaps(this.capNBT);
+      }
+   }
+
+   public SoundEvent getDrinkingSound() {
+      return this.getItem().getDrinkingSound();
+   }
+
+   public SoundEvent getEatingSound() {
+      return this.getItem().getEatingSound();
+   }
+
+   // CraftBukkit start
+   @Deprecated
+   public void setItem(Item item) {
+      this.item = item;
+      this.delegate = net.minecraftforge.registries.ForgeRegistries.ITEMS.getDelegateOrThrow(item.asItem());
+   }
+   // CraftBukkit end
+
+   public static enum TooltipPart {
+      ENCHANTMENTS,
+      MODIFIERS,
+      UNBREAKABLE,
+      CAN_DESTROY,
+      CAN_PLACE,
+      ADDITIONAL,
+      DYE,
+      UPGRADES;
+
+      private final int mask = 1 << this.ordinal();
+
+      public int getMask() {
+         return this.mask;
+      }
+   }
 }
