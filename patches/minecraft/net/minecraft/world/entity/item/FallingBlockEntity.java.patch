--- a/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.entity.item;
 
 import com.mojang.logging.LogUtils;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.CrashReportCategory;
@@ -19,7 +_,6 @@
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -44,6 +_,8 @@
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.v1_20_R4.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.slf4j.Logger;
 
 public class FallingBlockEntity extends Entity {
@@ -51,10 +_,10 @@
    private BlockState blockState = Blocks.SAND.defaultBlockState();
    public int time;
    public boolean dropItem = true;
-   private boolean cancelDrop;
+   public boolean cancelDrop;
    public boolean hurtEntities;
-   private int fallDamageMax = 40;
-   private float fallDamagePerDistance;
+   public int fallDamageMax = 40;
+   public float fallDamagePerDistance;
    @Nullable
    public CompoundTag blockData;
    protected static final EntityDataAccessor<BlockPos> DATA_START_POS = SynchedEntityData.defineId(FallingBlockEntity.class, EntityDataSerializers.BLOCK_POS);
@@ -75,13 +_,25 @@
       this.setStartPos(this.blockPosition());
    }
 
+   // Mohist start - fix mixin form blueprint
+   public static AtomicReference<CreatureSpawnEvent.SpawnReason> fallspawnReason = new AtomicReference<>(CreatureSpawnEvent.SpawnReason.DEFAULT);
+
    public static FallingBlockEntity fall(Level p_201972_, BlockPos p_201973_, BlockState p_201974_) {
+      // CraftBukkit start
       FallingBlockEntity fallingblockentity = new FallingBlockEntity(p_201972_, (double)p_201973_.getX() + 0.5D, (double)p_201973_.getY(), (double)p_201973_.getZ() + 0.5D, p_201974_.hasProperty(BlockStateProperties.WATERLOGGED) ? p_201974_.setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(false)) : p_201974_);
+      if (!CraftEventFactory.callEntityChangeBlockEvent(fallingblockentity, p_201973_, p_201974_.getFluidState().createLegacyBlock())) return fallingblockentity; // CraftBukkit
       p_201972_.setBlock(p_201973_, p_201974_.getFluidState().createLegacyBlock(), 3);
-      p_201972_.addFreshEntity(fallingblockentity);
+      p_201972_.addFreshEntity(fallingblockentity, fallspawnReason.getAndSet(CreatureSpawnEvent.SpawnReason.DEFAULT)); // CraftBukkit
       return fallingblockentity;
    }
 
+   public static FallingBlockEntity fall(Level p_201972_, BlockPos p_201973_, BlockState p_201974_, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+      fallspawnReason.set(spawnReason);
+      return fall(p_201972_, p_201973_, p_201974_);
+   }
+   // CraftBukkit end
+   // Mohist end
+
    public boolean isAttackable() {
       return false;
    }
@@ -120,11 +_,11 @@
          if (!this.level().isClientSide) {
             BlockPos blockpos = this.blockPosition();
             boolean flag = this.blockState.getBlock() instanceof ConcretePowderBlock;
-            boolean flag1 = flag && this.level().getFluidState(blockpos).is(FluidTags.WATER);
+            boolean flag1 = flag && this.blockState.canBeHydrated(this.level(), blockpos, this.level().getFluidState(blockpos), blockpos);
             double d0 = this.getDeltaMovement().lengthSqr();
             if (flag && d0 > 1.0D) {
                BlockHitResult blockhitresult = this.level().clip(new ClipContext(new Vec3(this.xo, this.yo, this.zo), this.position(), ClipContext.Block.COLLIDER, ClipContext.Fluid.SOURCE_ONLY, this));
-               if (blockhitresult.getType() != HitResult.Type.MISS && this.level().getFluidState(blockhitresult.getBlockPos()).is(FluidTags.WATER)) {
+               if (blockhitresult.getType() != HitResult.Type.MISS && this.blockState.canBeHydrated(this.level(), blockpos, this.level().getFluidState(blockhitresult.getBlockPos()), blockhitresult.getBlockPos())) {
                   blockpos = blockhitresult.getBlockPos();
                   flag1 = true;
                }
@@ -150,6 +_,13 @@
                         if (this.blockState.hasProperty(BlockStateProperties.WATERLOGGED) && this.level().getFluidState(blockpos).getType() == Fluids.WATER) {
                            this.blockState = this.blockState.setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(true));
                         }
+
+                        // CraftBukkit start
+                        if (!CraftEventFactory.callEntityChangeBlockEvent(this, blockpos, this.blockState)) {
+                           this.discard(); // SPIGOT-6586 called before the event in previous versions
+                           return;
+                        }
+                        // CraftBukkit end
 
                         if (this.level().setBlock(blockpos, this.blockState, 3)) {
                            ((ServerLevel)this.level()).getChunkSource().chunkMap.broadcast(this, new ClientboundBlockUpdatePacket(blockpos, this.level().getBlockState(blockpos)));
