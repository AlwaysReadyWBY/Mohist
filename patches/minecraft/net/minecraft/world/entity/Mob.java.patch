--- a/net/minecraft/world/entity/Mob.java
+++ b/net/minecraft/world/entity/Mob.java
@@ -1,11 +_,11 @@
 package net.minecraft.world.entity;
 
-import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Maps;
 import java.util.Arrays;
 import java.util.Map;
 import java.util.Optional;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -23,6 +_,7 @@
 import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
@@ -63,7 +_,6 @@
 import net.minecraft.world.item.SpawnEggItem;
 import net.minecraft.world.item.SwordItem;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
-import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
@@ -72,6 +_,13 @@
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.AABB;
+import org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
+import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
 
 public abstract class Mob extends LivingEntity implements Targeting {
    private static final EntityDataAccessor<Byte> DATA_MOB_FLAGS_ID = SynchedEntityData.defineId(Mob.class, EntityDataSerializers.BYTE);
@@ -96,8 +_,8 @@
    protected JumpControl jumpControl;
    private final BodyRotationControl bodyRotationControl;
    protected PathNavigation navigation;
-   public final GoalSelector goalSelector;
-   public final GoalSelector targetSelector;
+   public GoalSelector goalSelector;
+   public GoalSelector targetSelector;
    @Nullable
    private LivingEntity target;
    private final Sensing sensing;
@@ -106,7 +_,7 @@
    private final NonNullList<ItemStack> armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
    public final float[] armorDropChances = new float[4];
    private boolean canPickUpLoot;
-   public boolean persistenceRequired;
+   private boolean persistenceRequired;
    private final Map<BlockPathTypes, Float> pathfindingMalus = Maps.newEnumMap(BlockPathTypes.class);
    @Nullable
    public ResourceLocation lootTable;
@@ -118,6 +_,10 @@
    private CompoundTag leashInfoTag;
    private BlockPos restrictCenter = BlockPos.ZERO;
    private float restrictRadius = -1.0F;
+   @Nullable
+   private MobSpawnType spawnType;
+   private boolean spawnCancelled = false;
+   public boolean aware = true; // CraftBukkit
 
    protected Mob(EntityType<? extends Mob> p_21368_, Level p_21369_) {
       super(p_21368_, p_21369_);
@@ -232,8 +_,27 @@
    }
 
    public void setTarget(@Nullable LivingEntity p_21544_) {
-      this.target = p_21544_;
-   }
+      if (getTarget() == p_21544_) return;
+      net.minecraftforge.event.entity.living.LivingChangeTargetEvent changeTargetEvent = net.minecraftforge.common.ForgeHooks.onLivingChangeTarget(this, p_21544_, net.minecraftforge.event.entity.living.LivingChangeTargetEvent.LivingTargetType.MOB_TARGET);
+      if(!changeTargetEvent.isCanceled()) {
+         this.target = changeTargetEvent.getNewTarget();
+      }
+   }
+
+   // Mohist start
+   public boolean setTarget(@Nullable LivingEntity pTarget, EntityTargetEvent.TargetReason reason, boolean fireEvent) {
+      if (getTarget() == pTarget) return false;
+      net.minecraftforge.event.entity.living.LivingChangeTargetEvent changeTargetEvent = net.minecraftforge.common.ForgeHooks.onLivingChangeTarget(this, pTarget, net.minecraftforge.event.entity.living.LivingChangeTargetEvent.LivingTargetType.MOB_TARGET);
+      changeTargetEvent.setReason(reason);
+      changeTargetEvent.setfireCBEvent(fireEvent);
+      if (!changeTargetEvent.isCanceled()) {
+         this.target = changeTargetEvent.getNewTarget();
+      } else {
+         return false;
+      }
+      return true;
+   }
+   // Mohist end
 
    public boolean canAttackType(EntityType<?> p_21399_) {
       return p_21399_ != EntityType.GHAST;
@@ -359,6 +_,12 @@
       return null;
    }
 
+   // CraftBukkit start - Add delegate method
+   public SoundEvent getAmbientSound0() {
+      return getAmbientSound();
+   }
+   // CraftBukkit end
+
    public void addAdditionalSaveData(CompoundTag p_21484_) {
       super.addAdditionalSaveData(p_21484_);
       p_21484_.putBoolean("CanPickUpLoot", this.canPickUpLoot());
@@ -430,15 +_,27 @@
          p_21484_.putBoolean("NoAI", this.isNoAi());
       }
 
+      if (this.spawnType != null) {
+         p_21484_.putString("forge:spawn_type", this.spawnType.name());
+      }
+
+      p_21484_.putBoolean("Bukkit.Aware", this.aware); // CraftBukkit
    }
 
    public void readAdditionalSaveData(CompoundTag p_21450_) {
       super.readAdditionalSaveData(p_21450_);
       if (p_21450_.contains("CanPickUpLoot", 1)) {
-         this.setCanPickUpLoot(p_21450_.getBoolean("CanPickUpLoot"));
+         boolean data = p_21450_.getBoolean("CanPickUpLoot");
+         if (isLevelAtLeast(p_21450_, 1) || data) {
+            this.setCanPickUpLoot(data);
+         }
       }
 
-      this.persistenceRequired = p_21450_.getBoolean("PersistenceRequired");
+      boolean data = p_21450_.getBoolean("PersistenceRequired");
+      if (isLevelAtLeast(p_21450_, 1) || data) {
+         this.persistenceRequired = data;
+      }
+      // CraftBukkit end
       if (p_21450_.contains("ArmorItems", 9)) {
          ListTag listtag = p_21450_.getList("ArmorItems", 10);
 
@@ -482,6 +_,20 @@
       }
 
       this.setNoAi(p_21450_.getBoolean("NoAI"));
+
+      if (p_21450_.contains("forge:spawn_type")) {
+         try {
+            this.spawnType = MobSpawnType.valueOf(p_21450_.getString("forge:spawn_type"));
+         } catch (Exception ex) {
+            p_21450_.remove("forge:spawn_type");
+         }
+      }
+
+      // CraftBukkit start
+      if (p_21450_.contains("Bukkit.Aware")) {
+         this.aware = p_21450_.getBoolean("Bukkit.Aware");
+      }
+      // CraftBukkit end
    }
 
    protected void dropFromLootTable(DamageSource p_21389_, boolean p_21390_) {
@@ -521,9 +_,9 @@
    public void aiStep() {
       super.aiStep();
       this.level().getProfiler().push("looting");
-      if (!this.level().isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
          Vec3i vec3i = this.getPickupReach();
 
+      if (!this.level().isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level(), this)) {
          for(ItemEntity itementity : this.level().getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate((double)vec3i.getX(), (double)vec3i.getY(), (double)vec3i.getZ()))) {
             if (!itementity.isRemoved() && !itementity.getItem().isEmpty() && !itementity.hasPickUpDelay() && this.wantsToPickUp(itementity.getItem())) {
                this.pickUpItem(itementity);
@@ -540,6 +_,7 @@
 
    protected void pickUpItem(ItemEntity p_21471_) {
       ItemStack itemstack = p_21471_.getItem();
+      this.entityitem = p_21471_;
       ItemStack itemstack1 = this.equipItemIfPossible(itemstack.copy());
       if (!itemstack1.isEmpty()) {
          this.onItemPickup(p_21471_);
@@ -552,6 +_,8 @@
 
    }
 
+
+   public ItemEntity entityitem = null;
    public ItemStack equipItemIfPossible(ItemStack p_255842_) {
       EquipmentSlot equipmentslot = getEquipmentSlotForItem(p_255842_);
       ItemStack itemstack = this.getItemBySlot(equipmentslot);
@@ -559,13 +_,21 @@
       if (equipmentslot.isArmor() && !flag) {
          equipmentslot = EquipmentSlot.MAINHAND;
          itemstack = this.getItemBySlot(equipmentslot);
-         flag = itemstack.isEmpty();
+         flag = this.canReplaceCurrentItem(p_255842_, itemstack);
       }
 
-      if (flag && this.canHoldItem(p_255842_)) {
+      // CraftBukkit start
+      boolean canPickup = flag && this.canHoldItem(itemstack);
+      if (entityitem != null) {
+         canPickup = !CraftEventFactory.callEntityPickupItemEvent(this, entityitem, 0, !canPickup).isCancelled();
+      }
+      if (canPickup) {
+         // CraftBukkit end
          double d0 = (double)this.getEquipmentDropChance(equipmentslot);
          if (!itemstack.isEmpty() && (double)Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d0) {
+            this.forceDrops = true; // CraftBukkit
             this.spawnAtLocation(itemstack);
+            this.forceDrops = false; // CraftBukkit
          }
 
          if (equipmentslot.isArmor() && p_255842_.getCount() > 1) {
@@ -581,6 +_,11 @@
       }
    }
 
+   public ItemStack equipItemIfPossible(ItemStack itemstack, ItemEntity entityitem) {
+      this.entityitem = entityitem;
+      return equipItemIfPossible(itemstack);
+   }
+
    protected void setItemSlotAndDropWhenKilled(EquipmentSlot p_21469_, ItemStack p_21470_) {
       this.setItemSlot(p_21469_, p_21470_);
       this.setGuaranteedDrop(p_21469_);
@@ -699,6 +_,14 @@
          this.discard();
       } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
          Entity entity = this.level().getNearestPlayer(this, -1.0D);
+         net.minecraftforge.eventbus.api.Event.Result result = net.minecraftforge.event.ForgeEventFactory.canEntityDespawn(this, (ServerLevel) this.level());
+         if (result == net.minecraftforge.eventbus.api.Event.Result.DENY) {
+            noActionTime = 0;
+            entity = null;
+         } else if (result == net.minecraftforge.eventbus.api.Event.Result.ALLOW) {
+            this.discard();
+            entity = null;
+         }
          if (entity != null) {
             double d0 = entity.distanceToSqr(this);
             int i = this.getType().getCategory().getDespawnDistance();
@@ -723,6 +_,7 @@
 
    protected final void serverAiStep() {
       ++this.noActionTime;
+      if (!this.aware) return; // CraftBukkit
       this.level().getProfiler().push("sensing");
       this.sensing.tick();
       this.level().getProfiler().pop();
@@ -1032,6 +_,16 @@
 
    }
 
+   /**
+    * Forge: Override-Only, call via ForgeEventFactory.onFinalizeSpawn.<br>
+    * Overrides are allowed. Do not wrap super calls within override (as that will cause stack overflows).<br>
+    * Vanilla calls are replaced with a transformer, and are not visible in source.<br>
+    * <p>
+    * Be certain to either call super.finalizeSpawn or set the {@link #spawnType} field from within your override.
+    * @see {@link net.minecraftforge.event.ForgeEventFactory#onFinalizeSpawn onFinalizeSpawn} for additional documentation.
+    */
+   @Deprecated
+   @org.jetbrains.annotations.ApiStatus.OverrideOnly
    @Nullable
    public SpawnGroupData finalizeSpawn(ServerLevelAccessor p_21434_, DifficultyInstance p_21435_, MobSpawnType p_21436_, @Nullable SpawnGroupData p_21437_, @Nullable CompoundTag p_21438_) {
       RandomSource randomsource = p_21434_.getRandom();
@@ -1042,6 +_,7 @@
          this.setLeftHanded(false);
       }
 
+      this.spawnType = p_21436_;
       return p_21437_;
    }
 
@@ -1049,6 +_,12 @@
       this.persistenceRequired = true;
    }
 
+   // CraftBukkit start
+   public void setPersistenceRequired(boolean persistenceRequired) {
+      this.persistenceRequired = persistenceRequired;
+   }
+   // CraftBukkit end
+
    public void setDropChance(EquipmentSlot p_21410_, float p_21411_) {
       switch (p_21410_.getType()) {
          case HAND:
@@ -1081,6 +_,12 @@
       if (!this.isAlive()) {
          return InteractionResult.PASS;
       } else if (this.getLeashHolder() == p_21420_) {
+         // CraftBukkit start - fire PlayerUnleashEntityEvent
+         if (CraftEventFactory.callPlayerUnleashEntityEvent(this, p_21420_, p_21421_).isCancelled()) {
+            ((ServerPlayer) p_21420_).connection.send(new ClientboundSetEntityLinkPacket(this, this.getLeashHolder()));
+            return InteractionResult.PASS;
+         }
+         // CraftBukkit end
          this.dropLeash(true, !p_21420_.getAbilities().instabuild);
          this.gameEvent(GameEvent.ENTITY_INTERACT, p_21420_);
          return InteractionResult.sidedSuccess(this.level().isClientSide);
@@ -1104,6 +_,12 @@
    private InteractionResult checkAndHandleImportantInteractions(Player p_21500_, InteractionHand p_21501_) {
       ItemStack itemstack = p_21500_.getItemInHand(p_21501_);
       if (itemstack.is(Items.LEAD) && this.canBeLeashed(p_21500_)) {
+         // CraftBukkit start - fire PlayerLeashEntityEvent
+         if (CraftEventFactory.callPlayerLeashEntityEvent(this, p_21500_, p_21500_, p_21501_).isCancelled()) {
+            ((ServerPlayer) p_21500_).connection.send(new ClientboundSetEntityLinkPacket(this, this.getLeashHolder()));
+            return InteractionResult.PASS;
+         }
+         // CraftBukkit end
          this.setLeashedTo(p_21500_, true);
          itemstack.shrink(1);
          return InteractionResult.sidedSuccess(this.level().isClientSide);
@@ -1206,7 +_,12 @@
                }
             }
 
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityTransformEvent(this, t, this.transformReason.getAndSet(EntityTransformEvent.TransformReason.UNKNOWN)).isCancelled()) {
+               return null;
+            }
             this.level().addFreshEntity(t);
+            // CraftBukkit end
             if (this.isPassenger()) {
                Entity entity = this.getVehicle();
                this.stopRiding();
@@ -1219,6 +_,19 @@
       }
    }
 
+   // Mohist start
+   public AtomicReference<EntityTransformEvent.TransformReason> transformReason = new AtomicReference<>(EntityTransformEvent.TransformReason.UNKNOWN);
+   public void transformReasonAndspawnReason(EntityTransformEvent.TransformReason transformReason, CreatureSpawnEvent.SpawnReason spawnReason) {
+      this.transformReason.set(transformReason);
+      this.spawnReason(spawnReason);
+   }
+   @Nullable
+   public <T extends Mob> T convertTo(EntityType<T> pEntityType, boolean pTransferInventory, EntityTransformEvent.TransformReason transformReason, CreatureSpawnEvent.SpawnReason spawnReason) {
+      transformReasonAndspawnReason(transformReason, spawnReason);
+      return convertTo(pEntityType, pTransferInventory);
+   }
+   // Mohist end
+
    protected void tickLeash() {
       if (this.leashInfoTag != null) {
          this.restoreLeashFromSave();
@@ -1237,7 +_,9 @@
          this.leashHolder = null;
          this.leashInfoTag = null;
          if (!this.level().isClientSide && p_21457_) {
+            this.forceDrops = true; // CraftBukkit
             this.spawnAtLocation(Items.LEAD);
+            this.forceDrops = false; // CraftBukkit
          }
 
          if (!this.level().isClientSide && p_21456_ && this.level() instanceof ServerLevel) {
@@ -1285,6 +_,7 @@
    public boolean startRiding(Entity p_21396_, boolean p_21397_) {
       boolean flag = super.startRiding(p_21396_, p_21397_);
       if (flag && this.isLeashed()) {
+         this.level.getCraftServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
          this.dropLeash(true, true);
       }
 
@@ -1307,7 +_,9 @@
          }
 
          if (this.tickCount > 100) {
+            this.forceDrops = true; // CraftBukkit
             this.spawnAtLocation(Items.LEAD);
+            this.forceDrops = false; // CraftBukkit
             this.leashInfoTag = null;
          }
       }
@@ -1380,7 +_,14 @@
 
       int i = EnchantmentHelper.getFireAspect(this);
       if (i > 0) {
-         p_21372_.setSecondsOnFire(i * 4);
+         // CraftBukkit start - Call a combust event when somebody hits with a fire enchanted item
+         EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_21372_.getBukkitEntity(), i * 4);
+         org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+
+         if (!combustEvent.isCancelled()) {
+            p_21372_.setSecondsOnFire(combustEvent.getDuration(), false);
+         }
+         // CraftBukkit end
       }
 
       boolean flag = p_21372_.hurt(this.damageSources().mobAttack(this), f);
@@ -1426,16 +_,25 @@
       return false;
    }
 
+   @Deprecated // FORGE: use jumpInFluid instead
    protected void jumpInLiquid(TagKey<Fluid> p_204045_) {
+      this.jumpInLiquidInternal(() -> super.jumpInLiquid(p_204045_));
+   }
+
+   private void jumpInLiquidInternal(Runnable onSuper) {
       if (this.getNavigation().canFloat()) {
-         super.jumpInLiquid(p_204045_);
+         onSuper.run();
       } else {
          this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.3D, 0.0D));
       }
 
    }
 
-   @VisibleForTesting
+   @Override
+   public void jumpInFluid(net.minecraftforge.fluids.FluidType type) {
+      this.jumpInLiquidInternal(() -> super.jumpInFluid(type));
+   }
+
    public void removeFreeWill() {
       this.removeAllGoals((p_262562_) -> {
          return true;
@@ -1449,6 +_,7 @@
 
    protected void removeAfterChangingDimensions() {
       super.removeAfterChangingDimensions();
+      this.level.getCraftServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), UnleashReason.UNKNOWN)); // CraftBukkit
       this.dropLeash(true, false);
       this.getAllSlots().forEach((p_278936_) -> {
          if (!p_278936_.isEmpty()) {
@@ -1462,5 +_,40 @@
    public ItemStack getPickResult() {
       SpawnEggItem spawneggitem = SpawnEggItem.byId(this.getType());
       return spawneggitem == null ? null : new ItemStack(spawneggitem);
+   }
+
+   /**
+   * Returns the type of spawn that created this mob, if applicable.
+   * If it could not be determined, this will return null.
+   * <p>
+   * This is set via {@link Mob#finalizeSpawn}, so you should not call this from within that method, instead using the parameter.
+   */
+   @Nullable
+   public final MobSpawnType getSpawnType() {
+      return this.spawnType;
+   }
+
+   /**
+    * This method exists so that spawns can be cancelled from the {@link net.minecraftforge.event.entity.living.MobSpawnEvent.FinalizeSpawn FinalizeSpawnEvent}
+    * without needing to hook up an additional handler for the {@link net.minecraftforge.event.entity.EntityJoinLevelEvent EntityJoinLevelEvent}.
+    * @return if this mob will be blocked from spawning during {@link Level#addFreshEntity(Entity)}
+    * @apiNote Not public-facing API.
+    */
+   @org.jetbrains.annotations.ApiStatus.Internal
+   public final boolean isSpawnCancelled() {
+      return this.spawnCancelled;
+   }
+
+   /**
+    * Marks this mob as being disallowed to spawn during {@link Level#addFreshEntity(Entity)}.<p>
+    * @throws UnsupportedOperationException if this entity has already been {@link Entity#isAddedToWorld() added to the world}.
+    * @apiNote Not public-facing API.
+    */
+   @org.jetbrains.annotations.ApiStatus.Internal
+   public final void setSpawnCancelled(boolean cancel) {
+      if (this.isAddedToWorld()) {
+         throw new UnsupportedOperationException("Late invocations of Mob#setSpawnCancelled are not permitted.");
+      }
+      this.spawnCancelled = cancel;
    }
 }
