--- a/net/minecraft/world/entity/npc/Villager.java
+++ b/net/minecraft/world/entity/npc/Villager.java
@@ -6,6 +_,7 @@
 import com.google.common.collect.ImmutableSet;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import java.util.List;
@@ -88,6 +_,10 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.phys.AABB;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.bukkit.event.entity.VillagerReplenishTradeEvent;
 import org.slf4j.Logger;
 
 public class Villager extends AbstractVillager implements ReputationEventHandler, VillagerDataHolder {
@@ -260,46 +_,56 @@
         return this.assignProfessionWhenSpawned;
     }
 
-    @Override
-    protected void customServerAiStep() {
-        this.level().getProfiler().push("villagerBrain");
-        this.getBrain().tick((ServerLevel)this.level(), this);
-        this.level().getProfiler().pop();
-        if (this.assignProfessionWhenSpawned) {
-            this.assignProfessionWhenSpawned = false;
-        }
-
-        if (!this.isTrading() && this.updateMerchantTimer > 0) {
-            this.updateMerchantTimer--;
-            if (this.updateMerchantTimer <= 0) {
-                if (this.increaseProfessionLevelOnUpdate) {
-                    this.increaseMerchantCareer();
-                    this.increaseProfessionLevelOnUpdate = false;
-                }
-
-                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 200, 0));
-            }
-        }
-
-        if (this.lastTradedPlayer != null && this.level() instanceof ServerLevel) {
-            ((ServerLevel)this.level()).onReputationEvent(ReputationEventType.TRADE, this.lastTradedPlayer, this);
-            this.level().broadcastEntityEvent(this, (byte)14);
-            this.lastTradedPlayer = null;
-        }
-
-        if (!this.isNoAi() && this.random.nextInt(100) == 0) {
-            Raid raid = ((ServerLevel)this.level()).getRaidAt(this.blockPosition());
-            if (raid != null && raid.isActive() && !raid.isOver()) {
-                this.level().broadcastEntityEvent(this, (byte)42);
-            }
-        }
-
-        if (this.getVillagerData().getProfession() == VillagerProfession.NONE && this.isTrading()) {
-            this.stopTrading();
-        }
-
-        super.customServerAiStep();
-    }
+   // Spigot Start
+   @Override
+   public void inactiveTick() {
+      // SPIGOT-3874, SPIGOT-3894, SPIGOT-3846, SPIGOT-5286 :(
+      if (this.level().spigotConfig.tickInactiveVillagers && this.isEffectiveAi()) {
+         this.customServerAiStep();
+      }
+      super.inactiveTick();
+   }
+   // Spigot End
+
+   protected void customServerAiStep() {
+       this.level().getProfiler().push("villagerBrain");
+       this.getBrain().tick((ServerLevel) this.level(), this);
+       this.level().getProfiler().pop();
+       if (this.assignProfessionWhenSpawned) {
+           this.assignProfessionWhenSpawned = false;
+       }
+
+       if (!this.isTrading() && this.updateMerchantTimer > 0) {
+           this.updateMerchantTimer--;
+           if (this.updateMerchantTimer <= 0) {
+               if (this.increaseProfessionLevelOnUpdate) {
+                   this.increaseMerchantCareer();
+                   this.increaseProfessionLevelOnUpdate = false;
+               }
+
+               this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 200, 0));
+           }
+       }
+
+       if (this.lastTradedPlayer != null && this.level() instanceof ServerLevel) {
+           ((ServerLevel) this.level()).onReputationEvent(ReputationEventType.TRADE, this.lastTradedPlayer, this);
+           this.level().broadcastEntityEvent(this, (byte) 14);
+           this.lastTradedPlayer = null;
+       }
+
+       if (!this.isNoAi() && this.random.nextInt(100) == 0) {
+           Raid raid = ((ServerLevel) this.level()).getRaidAt(this.blockPosition());
+           if (raid != null && raid.isActive() && !raid.isOver()) {
+               this.level().broadcastEntityEvent(this, (byte) 42);
+           }
+       }
+
+       if (this.getVillagerData().getProfession() == VillagerProfession.NONE && this.isTrading()) {
+           this.stopTrading();
+       }
+
+       super.customServerAiStep();
+   }
 
     @Override
     public void tick() {
@@ -314,7 +_,7 @@
     @Override
     public InteractionResult mobInteract(Player p_35472_, InteractionHand p_35473_) {
         ItemStack itemstack = p_35472_.getItemInHand(p_35473_);
-        if (itemstack.is(Items.VILLAGER_SPAWN_EGG) || !this.isAlive() || this.isTrading() || this.isSleeping()) {
+        if (itemstack.is(Items.VILLAGER_SPAWN_EGG) || !this.isAlive() || this.isTrading() || this.isSleeping() || p_35472_.isSecondaryUseActive()) {
             return super.mobInteract(p_35472_, p_35473_);
         } else if (this.isBaby()) {
             this.setUnhappy();
@@ -341,7 +_,7 @@
         }
     }
 
-    private void setUnhappy() {
+    public void setUnhappy() {
         this.setUnhappyCounter(40);
         if (!this.level().isClientSide()) {
             this.makeSound(SoundEvents.VILLAGER_NO);
@@ -389,8 +_,14 @@
         this.updateDemand();
 
         for (MerchantOffer merchantoffer : this.getOffers()) {
+         // CraftBukkit start
+         VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantoffer.asBukkit());
+         Bukkit.getPluginManager().callEvent(event);
+         if (!event.isCancelled()) {
             merchantoffer.resetUses();
-        }
+         }
+         // CraftBukkit end
+      }
 
         this.resendOffersToTradingPlayer();
         this.lastRestockGameTime = this.level().getGameTime();
@@ -443,9 +_,15 @@
         int i = 2 - this.numberOfRestocksToday;
         if (i > 0) {
             for (MerchantOffer merchantoffer : this.getOffers()) {
-                merchantoffer.resetUses();
+            // CraftBukkit start
+            VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantoffer.asBukkit());
+            Bukkit.getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+               merchantoffer.resetUses();
             }
-        }
+            // CraftBukkit end
+         }
+      }
 
         for (int j = 0; j < i; j++) {
             this.updateDemand();
@@ -619,7 +_,7 @@
 
     @Override
     public void die(DamageSource p_35419_) {
-        LOGGER.info("Villager {} died, message: '{}'", this, p_35419_.getLocalizedDeathMessage(this).getString());
+      if (org.spigotmc.SpigotConfig.logVillagerDeaths) LOGGER.info("Villager {} died, message: '{}'", this, p_35419_.getLocalizedDeathMessage(this).getString());
         Entity entity = p_35419_.getEntity();
         if (entity != null) {
             this.tellWitnessesThatIWasMurdered(entity);
@@ -629,7 +_,7 @@
         super.die(p_35419_);
     }
 
-    private void releaseAllPois() {
+    public void releaseAllPois() {
         this.releasePoi(MemoryModuleType.HOME);
         this.releasePoi(MemoryModuleType.JOB_SITE);
         this.releasePoi(MemoryModuleType.POTENTIAL_JOB_SITE);
@@ -725,7 +_,8 @@
 
     @Override
     protected Component getTypeName() {
-        return Component.translatable(this.getType().getDescriptionId() + "." + BuiltInRegistries.VILLAGER_PROFESSION.getKey(this.getVillagerData().getProfession()).getPath());
+        var profName = net.minecraftforge.registries.ForgeRegistries.VILLAGER_PROFESSIONS.getKey(this.getVillagerData().getProfession());
+        return Component.translatable(this.getType().getDescriptionId() + '.' + (!"minecraft".equals(profName.getNamespace()) ? profName.getNamespace() + '.' : "") + profName.getPath());
     }
 
     @Override
@@ -780,7 +_,7 @@
 
     @Override
     public void thunderHit(ServerLevel p_35409_, LightningBolt p_35410_) {
-        if (p_35409_.getDifficulty() != Difficulty.PEACEFUL) {
+        if (p_35409_.getDifficulty() != Difficulty.PEACEFUL && net.minecraftforge.event.ForgeEventFactory.canLivingConvert(this, EntityType.WITCH, (timer) -> {})) {
             LOGGER.info("Villager {} was struck by lightning {}.", this, p_35410_);
             Witch witch = EntityType.WITCH.create(p_35409_);
             if (witch != null) {
@@ -793,6 +_,12 @@
                 }
 
                 witch.setPersistenceRequired();
+                net.minecraftforge.event.ForgeEventFactory.onLivingConvert(this, witch);
+            	// CraftBukkit start
+            	if (CraftEventFactory.callEntityTransformEvent(this, witch, EntityTransformEvent.TransformReason.LIGHTNING).isCancelled()) {
+               		return;
+            	}
+            	witch.spawnReason(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING);
                 p_35409_.addFreshEntityWithPassengers(witch);
                 this.releaseAllPois();
                 this.discard();
