--- a/net/minecraft/world/entity/ExperienceOrb.java
+++ b/net/minecraft/world/entity/ExperienceOrb.java
@@ -19,6 +_,11 @@
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.v1_20_R2.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.v1_20_R2.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.player.PlayerExpCooldownChangeEvent;
 
 public class ExperienceOrb extends Entity {
    private static final int LIFETIME = 6000;
@@ -32,13 +_,67 @@
    private int count = 1;
    private Player followingPlayer;
 
-   public ExperienceOrb(Level p_20776_, double p_20777_, double p_20778_, double p_20779_, int p_20780_) {
-      this(EntityType.EXPERIENCE_ORB, p_20776_);
-      this.setPos(p_20777_, p_20778_, p_20779_);
-      this.setYRot((float)(this.random.nextDouble() * 360.0D));
-      this.setDeltaMovement((this.random.nextDouble() * (double)0.2F - (double)0.1F) * 2.0D, this.random.nextDouble() * 0.2D * 2.0D, (this.random.nextDouble() * (double)0.2F - (double)0.1F) * 2.0D);
-      this.value = p_20780_;
-   }
+   // Paper start
+   @javax.annotation.Nullable
+   public java.util.UUID sourceEntityId;
+   @javax.annotation.Nullable
+   public java.util.UUID triggerEntityId;
+   public org.bukkit.entity.ExperienceOrb.SpawnReason spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+
+   private void loadPaperNBT(CompoundTag nbttagcompound) {
+      if (!nbttagcompound.contains("Paper.ExpData", 10)) { // 10 = compound
+         return;
+      }
+      CompoundTag comp = nbttagcompound.getCompound("Paper.ExpData");
+      if (comp.hasUUID("source")) {
+         this.sourceEntityId = comp.getUUID("source");
+      }
+      if (comp.hasUUID("trigger")) {
+         this.triggerEntityId = comp.getUUID("trigger");
+      }
+      if (comp.contains("reason")) {
+         String reason = comp.getString("reason");
+         try {
+            this.spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.valueOf(reason);
+         } catch (Exception e) {
+            this.level().getCraftServer().getLogger().warning("Invalid spawnReason set for experience orb: " + e.getMessage() + " - " + reason);
+         }
+      }
+   }
+   private void savePaperNBT(CompoundTag nbttagcompound) {
+      CompoundTag comp = new CompoundTag();
+      if (this.sourceEntityId != null) {
+         comp.putUUID("source", this.sourceEntityId);
+      }
+      if (this.triggerEntityId != null) {
+         comp.putUUID("trigger", triggerEntityId);
+      }
+      if (this.spawnReason != null && this.spawnReason != org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN) {
+         comp.putString("reason", this.spawnReason.name());
+      }
+      nbttagcompound.put("Paper.ExpData", comp);
+   }
+
+   @Deprecated
+   public ExperienceOrb(Level pLevel, double pX, double pY, double pZ, int pValue) {
+      this(pLevel, pX, pY, pZ, pValue, null, null);
+   }
+
+   public ExperienceOrb(Level world, double d0, double d1, double d2, int i, @javax.annotation.Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @javax.annotation.Nullable Entity triggerId) {
+      this(world, d0, d1, d2, i, reason, triggerId, null);
+   }
+
+   public ExperienceOrb(Level world, double d0, double d1, double d2, int i, @javax.annotation.Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @javax.annotation.Nullable Entity triggerId, @javax.annotation.Nullable Entity sourceId) {
+      this(EntityType.EXPERIENCE_ORB, world);
+      this.sourceEntityId = sourceId != null ? sourceId.getUUID() : null;
+      this.triggerEntityId = triggerId != null ? triggerId.getUUID() : null;
+      this.spawnReason = reason != null ? reason : org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+      this.setPos(d0, d1, d2);
+      this.setYRot((float) (this.random.nextDouble() * 360.0D));
+      this.setDeltaMovement((this.random.nextDouble() * 0.20000000298023224D - 0.10000000149011612D) * 2.0D, this.random.nextDouble() * 0.2D * 2.0D, (this.random.nextDouble() * 0.20000000298023224D - 0.10000000149011612D) * 2.0D);
+      this.value = i;
+   }
+   // Paper end
 
    public ExperienceOrb(EntityType<? extends ExperienceOrb> p_20773_, Level p_20774_) {
       super(p_20773_, p_20774_);
@@ -53,6 +_,7 @@
 
    public void tick() {
       super.tick();
+      Player prevTarget = this.followingPlayer;// CraftBukkit - store old target
       this.xo = this.getX();
       this.yo = this.getY();
       this.zo = this.getZ();
@@ -78,7 +_,22 @@
          this.followingPlayer = null;
       }
 
-      if (this.followingPlayer != null) {
+      // CraftBukkit start
+      boolean cancelled = false;
+      if (this.followingPlayer != prevTarget) {
+         EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this, followingPlayer, (followingPlayer != null) ? EntityTargetEvent.TargetReason.CLOSEST_PLAYER : EntityTargetEvent.TargetReason.FORGOT_TARGET);
+         LivingEntity target = (event.getTarget() == null) ? null : ((CraftLivingEntity) event.getTarget()).getHandle();
+         cancelled = event.isCancelled();
+
+         if (cancelled) {
+            followingPlayer = prevTarget;
+         } else {
+            followingPlayer = (target instanceof Player) ? (Player) target : null;
+         }
+      }
+
+      if (this.followingPlayer != null && !cancelled) {
+         // CraftBukkit end
          Vec3 vec3 = new Vec3(this.followingPlayer.getX() - this.getX(), this.followingPlayer.getY() + (double)this.followingPlayer.getEyeHeight() / 2.0D - this.getY(), this.followingPlayer.getZ() - this.getZ());
          double d0 = vec3.lengthSqr();
          if (d0 < 64.0D) {
@@ -90,7 +_,8 @@
       this.move(MoverType.SELF, this.getDeltaMovement());
       float f = 0.98F;
       if (this.onGround()) {
-         f = this.level().getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getFriction() * 0.98F;
+         BlockPos pos = getBlockPosBelowThatAffectsMyMovement();
+         f = this.level().getBlockState(pos).getFriction(this.level(), pos, this) * 0.98F;
       }
 
       this.setDeltaMovement(this.getDeltaMovement().multiply((double)f, 0.98D, (double)f));
@@ -172,6 +_,7 @@
    }
 
    public boolean hurt(DamageSource p_20785_, float p_20786_) {
+      if (this.level().isClientSide || this.isRemoved()) return false; //Forge: Fixes MC-53850
       if (this.isInvulnerableTo(p_20785_)) {
          return false;
       } else if (this.level().isClientSide) {
@@ -204,11 +_,12 @@
    public void playerTouch(Player p_20792_) {
       if (!this.level().isClientSide) {
          if (p_20792_.takeXpDelay == 0) {
-            p_20792_.takeXpDelay = 2;
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerXpEvent.PickupXp(p_20792_, this))) return;
+            p_20792_.takeXpDelay = CraftEventFactory.callPlayerXpCooldownEvent(p_20792_, 2, PlayerExpCooldownChangeEvent.ChangeReason.PICKUP_ORB).getNewCooldown(); // CraftBukkit - entityhuman.takeXpDelay = 2;
             p_20792_.take(this, 1);
             int i = this.repairPlayerItems(p_20792_, this.value);
             if (i > 0) {
-               p_20792_.giveExperiencePoints(i);
+               p_20792_.giveExperiencePoints(CraftEventFactory.callPlayerExpChangeEvent(p_20792_, i).getAmount());
             }
 
             --this.count;
@@ -224,20 +_,29 @@
       Map.Entry<EquipmentSlot, ItemStack> entry = EnchantmentHelper.getRandomItemWith(Enchantments.MENDING, p_147093_, ItemStack::isDamaged);
       if (entry != null) {
          ItemStack itemstack = entry.getValue();
-         int i = Math.min(this.xpToDurability(this.value), itemstack.getDamageValue());
+         int i = Math.min((int) (this.value * itemstack.getXpRepairRatio()), itemstack.getDamageValue());
+         // CraftBukkit start
+         org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(p_147093_, this, itemstack, entry.getKey(), i, this::durabilityToXp); // Paper
+         i = event.getRepairAmount();
+         if (event.isCancelled()) {
+            return p_147094_;
+         }
+         // CraftBukkit end
+
          itemstack.setDamageValue(itemstack.getDamageValue() - i);
          int j = p_147094_ - this.durabilityToXp(i);
+         this.value = j; // CraftBukkit - update exp value of orb for PlayerItemMendEvent calls
          return j > 0 ? this.repairPlayerItems(p_147093_, j) : 0;
       } else {
          return p_147094_;
       }
    }
 
-   private int durabilityToXp(int p_20794_) {
+   public int durabilityToXp(int p_20794_) {
       return p_20794_ / 2;
    }
 
-   private int xpToDurability(int p_20799_) {
+   public int xpToDurability(int p_20799_) {
       return p_20799_ * 2;
    }
 
@@ -270,6 +_,24 @@
    }
 
    public static int getExperienceValue(int p_20783_) {
+      // CraftBukkit start
+      if (p_20783_ > 162670129) return p_20783_ - 100000;
+      if (p_20783_ > 81335063) return 81335063;
+      if (p_20783_ > 40667527) return 40667527;
+      if (p_20783_ > 20333759) return 20333759;
+      if (p_20783_ > 10166857) return 10166857;
+      if (p_20783_ > 5083423) return 5083423;
+      if (p_20783_ > 2541701) return 2541701;
+      if (p_20783_ > 1270849) return 1270849;
+      if (p_20783_ > 635413) return 635413;
+      if (p_20783_ > 317701) return 317701;
+      if (p_20783_ > 158849) return 158849;
+      if (p_20783_ > 79423) return 79423;
+      if (p_20783_ > 39709) return 39709;
+      if (p_20783_ > 19853) return 19853;
+      if (p_20783_ > 9923) return 9923;
+      if (p_20783_ > 4957) return 4957;
+      // CraftBukkit end
       if (p_20783_ >= 2477) {
          return 2477;
       } else if (p_20783_ >= 1237) {
