--- a/net/minecraft/world/entity/ExperienceOrb.java
+++ b/net/minecraft/world/entity/ExperienceOrb.java
@@ -1,13 +_,12 @@
 package net.minecraft.world.entity;
 
 import java.util.List;
-import java.util.Map.Entry;
+import java.util.Map;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddExperienceOrbPacket;
-import net.minecraft.network.syncher.SynchedEntityData;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.FluidTags;
@@ -20,309 +_,400 @@
 import net.minecraft.world.level.entity.EntityTypeTest;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.EntityRemoveEvent.Cause;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.player.PlayerExpCooldownChangeEvent;
 
 public class ExperienceOrb extends Entity {
-    private static final int LIFETIME = 6000;
-    private static final int ENTITY_SCAN_PERIOD = 20;
-    private static final int MAX_FOLLOW_DIST = 8;
-    private static final int ORB_GROUPS_PER_AREA = 40;
-    private static final double ORB_MERGE_DISTANCE = 0.5;
-    private int age;
-    private int health = 5;
-    public int value;
-    private int count = 1;
-    private Player followingPlayer;
-
-    public ExperienceOrb(Level p_20776_, double p_20777_, double p_20778_, double p_20779_, int p_20780_) {
-        this(EntityType.EXPERIENCE_ORB, p_20776_);
-        this.setPos(p_20777_, p_20778_, p_20779_);
-        this.setYRot((float)(this.random.nextDouble() * 360.0));
-        this.setDeltaMovement((this.random.nextDouble() * 0.2F - 0.1F) * 2.0, this.random.nextDouble() * 0.2 * 2.0, (this.random.nextDouble() * 0.2F - 0.1F) * 2.0);
-        this.value = p_20780_;
-    }
-
-    public ExperienceOrb(EntityType<? extends ExperienceOrb> p_20773_, Level p_20774_) {
-        super(p_20773_, p_20774_);
-    }
-
-    @Override
-    protected Entity.MovementEmission getMovementEmission() {
-        return Entity.MovementEmission.NONE;
-    }
-
-    @Override
-    protected void defineSynchedData(SynchedEntityData.Builder p_329424_) {
-    }
-
-    @Override
-    protected double getDefaultGravity() {
-        return 0.03;
-    }
-
-    @Override
-    public void tick() {
-        super.tick();
-        this.xo = this.getX();
-        this.yo = this.getY();
-        this.zo = this.getZ();
-        if (this.isEyeInFluid(FluidTags.WATER)) {
-            this.setUnderwaterMovement();
-        } else {
-            this.applyGravity();
-        }
-
-        if (this.level().getFluidState(this.blockPosition()).is(FluidTags.LAVA)) {
-            this.setDeltaMovement(
-                (double)((this.random.nextFloat() - this.random.nextFloat()) * 0.2F),
-                0.2F,
-                (double)((this.random.nextFloat() - this.random.nextFloat()) * 0.2F)
-            );
-        }
-
-        if (!this.level().noCollision(this.getBoundingBox())) {
-            this.moveTowardsClosestSpace(this.getX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0, this.getZ());
-        }
-
-        if (this.tickCount % 20 == 1) {
-            this.scanForEntities();
-        }
-
-        if (this.followingPlayer != null && (this.followingPlayer.isSpectator() || this.followingPlayer.isDeadOrDying())) {
-            this.followingPlayer = null;
-        }
-
-        if (this.followingPlayer != null) {
-            Vec3 vec3 = new Vec3(
-                this.followingPlayer.getX() - this.getX(),
-                this.followingPlayer.getY() + (double)this.followingPlayer.getEyeHeight() / 2.0 - this.getY(),
-                this.followingPlayer.getZ() - this.getZ()
-            );
-            double d0 = vec3.lengthSqr();
-            if (d0 < 64.0) {
-                double d1 = 1.0 - Math.sqrt(d0) / 8.0;
-                this.setDeltaMovement(this.getDeltaMovement().add(vec3.normalize().scale(d1 * d1 * 0.1)));
-            }
-        }
-
-        this.move(MoverType.SELF, this.getDeltaMovement());
-        float f = 0.98F;
-        if (this.onGround()) {
-            f = this.level().getBlockState(this.getBlockPosBelowThatAffectsMyMovement()).getBlock().getFriction() * 0.98F;
-        }
-
-        this.setDeltaMovement(this.getDeltaMovement().multiply((double)f, 0.98, (double)f));
-        if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().multiply(1.0, -0.9, 1.0));
-        }
-
-        this.age++;
-        if (this.age >= 6000) {
+   private static final int LIFETIME = 6000;
+   private static final int ENTITY_SCAN_PERIOD = 20;
+   private static final int MAX_FOLLOW_DIST = 8;
+   private static final int ORB_GROUPS_PER_AREA = 40;
+   private static final double ORB_MERGE_DISTANCE = 0.5D;
+   private int age;
+   private int health = 5;
+   public int value;
+   private int count = 1;
+   private Player followingPlayer;
+
+   // Paper start
+   @javax.annotation.Nullable
+   public java.util.UUID sourceEntityId;
+   @javax.annotation.Nullable
+   public java.util.UUID triggerEntityId;
+   public org.bukkit.entity.ExperienceOrb.SpawnReason spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+
+   private void loadPaperNBT(CompoundTag nbttagcompound) {
+      if (!nbttagcompound.contains("Paper.ExpData", 10)) { // 10 = compound
+         return;
+      }
+      CompoundTag comp = nbttagcompound.getCompound("Paper.ExpData");
+      if (comp.hasUUID("source")) {
+         this.sourceEntityId = comp.getUUID("source");
+      }
+      if (comp.hasUUID("trigger")) {
+         this.triggerEntityId = comp.getUUID("trigger");
+      }
+      if (comp.contains("reason")) {
+         String reason = comp.getString("reason");
+         try {
+            this.spawnReason = org.bukkit.entity.ExperienceOrb.SpawnReason.valueOf(reason);
+         } catch (Exception e) {
+            this.level().getCraftServer().getLogger().warning("Invalid spawnReason set for experience orb: " + e.getMessage() + " - " + reason);
+         }
+      }
+   }
+   private void savePaperNBT(CompoundTag nbttagcompound) {
+      CompoundTag comp = new CompoundTag();
+      if (this.sourceEntityId != null) {
+         comp.putUUID("source", this.sourceEntityId);
+      }
+      if (this.triggerEntityId != null) {
+         comp.putUUID("trigger", triggerEntityId);
+      }
+      if (this.spawnReason != null && this.spawnReason != org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN) {
+         comp.putString("reason", this.spawnReason.name());
+      }
+      nbttagcompound.put("Paper.ExpData", comp);
+   }
+
+   @Deprecated
+   public ExperienceOrb(Level pLevel, double pX, double pY, double pZ, int pValue) {
+      this(pLevel, pX, pY, pZ, pValue, null, null);
+   }
+
+   public ExperienceOrb(Level world, double d0, double d1, double d2, int i, @javax.annotation.Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @javax.annotation.Nullable Entity triggerId) {
+      this(world, d0, d1, d2, i, reason, triggerId, null);
+   }
+
+   public ExperienceOrb(Level world, double d0, double d1, double d2, int i, @javax.annotation.Nullable org.bukkit.entity.ExperienceOrb.SpawnReason reason, @javax.annotation.Nullable Entity triggerId, @javax.annotation.Nullable Entity sourceId) {
+      this(EntityType.EXPERIENCE_ORB, world);
+      this.sourceEntityId = sourceId != null ? sourceId.getUUID() : null;
+      this.triggerEntityId = triggerId != null ? triggerId.getUUID() : null;
+      this.spawnReason = reason != null ? reason : org.bukkit.entity.ExperienceOrb.SpawnReason.UNKNOWN;
+      this.setPos(d0, d1, d2);
+      this.setYRot((float) (this.random.nextDouble() * 360.0D));
+      this.setDeltaMovement((this.random.nextDouble() * 0.20000000298023224D - 0.10000000149011612D) * 2.0D, this.random.nextDouble() * 0.2D * 2.0D, (this.random.nextDouble() * 0.20000000298023224D - 0.10000000149011612D) * 2.0D);
+      this.value = i;
+   }
+   // Paper end
+
+   public ExperienceOrb(EntityType<? extends ExperienceOrb> p_20773_, Level p_20774_) {
+      super(p_20773_, p_20774_);
+   }
+
+   protected Entity.MovementEmission getMovementEmission() {
+      return Entity.MovementEmission.NONE;
+   }
+
+   protected void defineSynchedData() {
+   }
+
+   public void tick() {
+      super.tick();
+      Player prevTarget = this.followingPlayer;// CraftBukkit - store old target
+      this.xo = this.getX();
+      this.yo = this.getY();
+      this.zo = this.getZ();
+      if (this.isEyeInFluid(FluidTags.WATER)) {
+         this.setUnderwaterMovement();
+      } else if (!this.isNoGravity()) {
+         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.03D, 0.0D));
+      }
+
+      if (this.level().getFluidState(this.blockPosition()).is(FluidTags.LAVA)) {
+         this.setDeltaMovement((double)((this.random.nextFloat() - this.random.nextFloat()) * 0.2F), (double)0.2F, (double)((this.random.nextFloat() - this.random.nextFloat()) * 0.2F));
+      }
+
+      if (!this.level().noCollision(this.getBoundingBox())) {
+         this.moveTowardsClosestSpace(this.getX(), (this.getBoundingBox().minY + this.getBoundingBox().maxY) / 2.0D, this.getZ());
+      }
+
+      if (this.tickCount % 20 == 1) {
+         this.scanForEntities();
+      }
+
+      if (this.followingPlayer != null && (this.followingPlayer.isSpectator() || this.followingPlayer.isDeadOrDying())) {
+         this.followingPlayer = null;
+      }
+
+      // CraftBukkit start
+      boolean cancelled = false;
+      if (this.followingPlayer != prevTarget) {
+         EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(this, followingPlayer, (followingPlayer != null) ? EntityTargetEvent.TargetReason.CLOSEST_PLAYER : EntityTargetEvent.TargetReason.FORGOT_TARGET);
+         LivingEntity target = (event.getTarget() == null) ? null : ((CraftLivingEntity) event.getTarget()).getHandle();
+         cancelled = event.isCancelled();
+
+         if (cancelled) {
+            followingPlayer = prevTarget;
+         } else {
+            followingPlayer = (target instanceof Player) ? (Player) target : null;
+         }
+      }
+
+      if (this.followingPlayer != null && !cancelled) {
+         // CraftBukkit end
+         Vec3 vec3 = new Vec3(this.followingPlayer.getX() - this.getX(), this.followingPlayer.getY() + (double)this.followingPlayer.getEyeHeight() / 2.0D - this.getY(), this.followingPlayer.getZ() - this.getZ());
+         double d0 = vec3.lengthSqr();
+         if (d0 < 64.0D) {
+            double d1 = 1.0D - Math.sqrt(d0) / 8.0D;
+            this.setDeltaMovement(this.getDeltaMovement().add(vec3.normalize().scale(d1 * d1 * 0.1D)));
+         }
+      }
+
+      this.move(MoverType.SELF, this.getDeltaMovement());
+      float f = 0.98F;
+      if (this.onGround()) {
+         BlockPos pos = getBlockPosBelowThatAffectsMyMovement();
+         f = this.level().getBlockState(pos).getFriction(this.level(), pos, this) * 0.98F;
+      }
+
+      this.setDeltaMovement(this.getDeltaMovement().multiply((double)f, 0.98D, (double)f));
+      if (this.onGround()) {
+         this.setDeltaMovement(this.getDeltaMovement().multiply(1.0D, -0.9D, 1.0D));
+      }
+
+      ++this.age;
+      if (this.age >= 6000) {
+         this.putRemoveCause(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+         this.discard();
+      }
+
+   }
+
+   protected BlockPos getBlockPosBelowThatAffectsMyMovement() {
+      return this.getOnPos(0.999999F);
+   }
+
+   private void scanForEntities() {
+      if (this.followingPlayer == null || this.followingPlayer.distanceToSqr(this) > 64.0D) {
+         this.followingPlayer = this.level().getNearestPlayer(this, 8.0D);
+      }
+
+      if (this.level() instanceof ServerLevel) {
+         for(ExperienceOrb experienceorb : this.level().getEntities(EntityTypeTest.forClass(ExperienceOrb.class), this.getBoundingBox().inflate(0.5D), this::canMerge)) {
+            this.merge(experienceorb);
+         }
+      }
+
+   }
+
+   public static void award(ServerLevel p_147083_, Vec3 p_147084_, int p_147085_) {
+      while(p_147085_ > 0) {
+         int i = getExperienceValue(p_147085_);
+         p_147085_ -= i;
+         if (!tryMergeToExisting(p_147083_, p_147084_, i)) {
+            p_147083_.addFreshEntity(new ExperienceOrb(p_147083_, p_147084_.x(), p_147084_.y(), p_147084_.z(), i));
+         }
+      }
+
+   }
+
+   private static boolean tryMergeToExisting(ServerLevel p_147097_, Vec3 p_147098_, int p_147099_) {
+      AABB aabb = AABB.ofSize(p_147098_, 1.0D, 1.0D, 1.0D);
+      int i = p_147097_.getRandom().nextInt(40);
+      List<ExperienceOrb> list = p_147097_.getEntities(EntityTypeTest.forClass(ExperienceOrb.class), aabb, (p_147081_) -> {
+         return canMerge(p_147081_, i, p_147099_);
+      });
+      if (!list.isEmpty()) {
+         ExperienceOrb experienceorb = list.get(0);
+         ++experienceorb.count;
+         experienceorb.age = 0;
+         return true;
+      } else {
+         return false;
+      }
+   }
+
+   private boolean canMerge(ExperienceOrb p_147087_) {
+      return p_147087_ != this && canMerge(p_147087_, this.getId(), this.value);
+   }
+
+   private static boolean canMerge(ExperienceOrb p_147089_, int p_147090_, int p_147091_) {
+      return !p_147089_.isRemoved() && (p_147089_.getId() - p_147090_) % 40 == 0 && p_147089_.value == p_147091_;
+   }
+
+   private void merge(ExperienceOrb p_147101_) {
+      this.count += p_147101_.count;
+      this.age = Math.min(this.age, p_147101_.age);
+      p_147101_.putRemoveCause(Cause.MERGE); // CraftBukkit - add Bukkit remove cause
+      p_147101_.discard();
+   }
+
+   private void setUnderwaterMovement() {
+      Vec3 vec3 = this.getDeltaMovement();
+      this.setDeltaMovement(vec3.x * (double)0.99F, Math.min(vec3.y + (double)5.0E-4F, (double)0.06F), vec3.z * (double)0.99F);
+   }
+
+   protected void doWaterSplashEffect() {
+   }
+
+   public boolean hurt(DamageSource p_20785_, float p_20786_) {
+      if (this.level().isClientSide || this.isRemoved()) return false; //Forge: Fixes MC-53850
+      if (this.isInvulnerableTo(p_20785_)) {
+         return false;
+      } else if (this.level().isClientSide) {
+         return true;
+      } else {
+         this.markHurt();
+         this.health = (int)((float)this.health - p_20786_);
+         if (this.health <= 0) {
+            this.putRemoveCause(EntityRemoveEvent.Cause.DEATH); // CraftBukkit - add Bukkit remove cause
             this.discard();
-        }
-    }
-
-    @Override
-    protected BlockPos getBlockPosBelowThatAffectsMyMovement() {
-        return this.getOnPos(0.999999F);
-    }
-
-    private void scanForEntities() {
-        if (this.followingPlayer == null || this.followingPlayer.distanceToSqr(this) > 64.0) {
-            this.followingPlayer = this.level().getNearestPlayer(this, 8.0);
-        }
-
-        if (this.level() instanceof ServerLevel) {
-            for (ExperienceOrb experienceorb : this.level()
-                .getEntities(EntityTypeTest.forClass(ExperienceOrb.class), this.getBoundingBox().inflate(0.5), this::canMerge)) {
-                this.merge(experienceorb);
-            }
-        }
-    }
-
-    public static void award(ServerLevel p_147083_, Vec3 p_147084_, int p_147085_) {
-        while (p_147085_ > 0) {
-            int i = getExperienceValue(p_147085_);
-            p_147085_ -= i;
-            if (!tryMergeToExisting(p_147083_, p_147084_, i)) {
-                p_147083_.addFreshEntity(new ExperienceOrb(p_147083_, p_147084_.x(), p_147084_.y(), p_147084_.z(), i));
-            }
-        }
-    }
-
-    private static boolean tryMergeToExisting(ServerLevel p_147097_, Vec3 p_147098_, int p_147099_) {
-        AABB aabb = AABB.ofSize(p_147098_, 1.0, 1.0, 1.0);
-        int i = p_147097_.getRandom().nextInt(40);
-        List<ExperienceOrb> list = p_147097_.getEntities(EntityTypeTest.forClass(ExperienceOrb.class), aabb, p_147081_ -> canMerge(p_147081_, i, p_147099_));
-        if (!list.isEmpty()) {
-            ExperienceOrb experienceorb = list.get(0);
-            experienceorb.count++;
-            experienceorb.age = 0;
-            return true;
-        } else {
-            return false;
-        }
-    }
-
-    private boolean canMerge(ExperienceOrb p_147087_) {
-        return p_147087_ != this && canMerge(p_147087_, this.getId(), this.value);
-    }
-
-    private static boolean canMerge(ExperienceOrb p_147089_, int p_147090_, int p_147091_) {
-        return !p_147089_.isRemoved() && (p_147089_.getId() - p_147090_) % 40 == 0 && p_147089_.value == p_147091_;
-    }
-
-    private void merge(ExperienceOrb p_147101_) {
-        this.count = this.count + p_147101_.count;
-        this.age = Math.min(this.age, p_147101_.age);
-        p_147101_.discard();
-    }
-
-    private void setUnderwaterMovement() {
-        Vec3 vec3 = this.getDeltaMovement();
-        this.setDeltaMovement(vec3.x * 0.99F, Math.min(vec3.y + 5.0E-4F, 0.06F), vec3.z * 0.99F);
-    }
-
-    @Override
-    protected void doWaterSplashEffect() {
-    }
-
-    @Override
-    public boolean hurt(DamageSource p_20785_, float p_20786_) {
-        if (this.isInvulnerableTo(p_20785_)) {
-            return false;
-        } else if (this.level().isClientSide) {
-            return true;
-        } else {
-            this.markHurt();
-            this.health = (int)((float)this.health - p_20786_);
-            if (this.health <= 0) {
-                this.discard();
-            }
-
-            return true;
-        }
-    }
-
-    @Override
-    public void addAdditionalSaveData(CompoundTag p_20796_) {
-        p_20796_.putShort("Health", (short)this.health);
-        p_20796_.putShort("Age", (short)this.age);
-        p_20796_.putShort("Value", (short)this.value);
-        p_20796_.putInt("Count", this.count);
-    }
-
-    @Override
-    public void readAdditionalSaveData(CompoundTag p_20788_) {
-        this.health = p_20788_.getShort("Health");
-        this.age = p_20788_.getShort("Age");
-        this.value = p_20788_.getShort("Value");
-        this.count = Math.max(p_20788_.getInt("Count"), 1);
-    }
-
-    @Override
-    public void playerTouch(Player p_20792_) {
-        if (!this.level().isClientSide) {
-            if (p_20792_.takeXpDelay == 0) {
-                p_20792_.takeXpDelay = 2;
-                p_20792_.take(this, 1);
-                int i = this.repairPlayerItems(p_20792_, this.value);
-                if (i > 0) {
-                    p_20792_.giveExperiencePoints(i);
-                }
-
-                this.count--;
-                if (this.count == 0) {
-                    this.discard();
-                }
-            }
-        }
-    }
-
-    private int repairPlayerItems(Player p_147093_, int p_147094_) {
-        Entry<EquipmentSlot, ItemStack> entry = EnchantmentHelper.getRandomItemWith(Enchantments.MENDING, p_147093_, ItemStack::isDamaged);
-        if (entry != null) {
-            ItemStack itemstack = entry.getValue();
-            int i = Math.min(this.xpToDurability(p_147094_), itemstack.getDamageValue());
-            itemstack.setDamageValue(itemstack.getDamageValue() - i);
-            int j = p_147094_ - this.durabilityToXp(i);
-            return j > 0 ? this.repairPlayerItems(p_147093_, j) : 0;
-        } else {
+         }
+
+         return true;
+      }
+   }
+
+   public void addAdditionalSaveData(CompoundTag p_20796_) {
+      p_20796_.putShort("Health", (short)this.health);
+      p_20796_.putShort("Age", (short)this.age);
+      p_20796_.putShort("Value", (short)this.value);
+      p_20796_.putInt("Count", this.count);
+   }
+
+   public void readAdditionalSaveData(CompoundTag p_20788_) {
+      this.health = p_20788_.getShort("Health");
+      this.age = p_20788_.getShort("Age");
+      this.value = p_20788_.getShort("Value");
+      this.count = Math.max(p_20788_.getInt("Count"), 1);
+   }
+
+   public void playerTouch(Player p_20792_) {
+      if (!this.level().isClientSide) {
+         if (p_20792_.takeXpDelay == 0) {
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.player.PlayerXpEvent.PickupXp(p_20792_, this))) return;
+            p_20792_.takeXpDelay = CraftEventFactory.callPlayerXpCooldownEvent(p_20792_, 2, PlayerExpCooldownChangeEvent.ChangeReason.PICKUP_ORB).getNewCooldown(); // CraftBukkit - entityhuman.takeXpDelay = 2;
+            p_20792_.take(this, 1);
+            int i = this.repairPlayerItems(p_20792_, this.value);
+            if (i > 0) {
+               p_20792_.giveExperiencePoints(CraftEventFactory.callPlayerExpChangeEvent(p_20792_, i).getAmount());
+            }
+
+            --this.count;
+            if (this.count == 0) {
+               this.putRemoveCause(Cause.PICKUP); // CraftBukkit - add Bukkit remove cause
+               this.discard();
+            }
+         }
+
+      }
+   }
+
+   private int repairPlayerItems(Player p_147093_, int p_147094_) {
+      Map.Entry<EquipmentSlot, ItemStack> entry = EnchantmentHelper.getRandomItemWith(Enchantments.MENDING, p_147093_, ItemStack::isDamaged);
+      if (entry != null) {
+         ItemStack itemstack = entry.getValue();
+         int i = Math.min(this.xpToDurability(p_147094_), itemstack.getDamageValue());
+         // CraftBukkit start
+         org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(p_147093_, this, itemstack, entry.getKey(), i, this::durabilityToXp); // Paper
+         i = event.getRepairAmount();
+         if (event.isCancelled()) {
             return p_147094_;
-        }
-    }
-
-    private int durabilityToXp(int p_20794_) {
-        return p_20794_ / 2;
-    }
-
-    private int xpToDurability(int p_20799_) {
-        return p_20799_ * 2;
-    }
-
-    public int getValue() {
-        return this.value;
-    }
-
-    public int getIcon() {
-        if (this.value >= 2477) {
-            return 10;
-        } else if (this.value >= 1237) {
-            return 9;
-        } else if (this.value >= 617) {
-            return 8;
-        } else if (this.value >= 307) {
-            return 7;
-        } else if (this.value >= 149) {
-            return 6;
-        } else if (this.value >= 73) {
-            return 5;
-        } else if (this.value >= 37) {
-            return 4;
-        } else if (this.value >= 17) {
-            return 3;
-        } else if (this.value >= 7) {
-            return 2;
-        } else {
-            return this.value >= 3 ? 1 : 0;
-        }
-    }
-
-    public static int getExperienceValue(int p_20783_) {
-        if (p_20783_ >= 2477) {
-            return 2477;
-        } else if (p_20783_ >= 1237) {
-            return 1237;
-        } else if (p_20783_ >= 617) {
-            return 617;
-        } else if (p_20783_ >= 307) {
-            return 307;
-        } else if (p_20783_ >= 149) {
-            return 149;
-        } else if (p_20783_ >= 73) {
-            return 73;
-        } else if (p_20783_ >= 37) {
-            return 37;
-        } else if (p_20783_ >= 17) {
-            return 17;
-        } else if (p_20783_ >= 7) {
-            return 7;
-        } else {
-            return p_20783_ >= 3 ? 3 : 1;
-        }
-    }
-
-    @Override
-    public boolean isAttackable() {
-        return false;
-    }
-
-    @Override
-    public Packet<ClientGamePacketListener> getAddEntityPacket() {
-        return new ClientboundAddExperienceOrbPacket(this);
-    }
-
-    @Override
-    public SoundSource getSoundSource() {
-        return SoundSource.AMBIENT;
-    }
+         }
+         // CraftBukkit end
+
+         itemstack.setDamageValue(itemstack.getDamageValue() - i);
+         int j = p_147094_ - this.durabilityToXp(i);
+         this.value = j; // CraftBukkit - update exp value of orb for PlayerItemMendEvent calls
+         return j > 0 ? this.repairPlayerItems(p_147093_, j) : 0;
+      } else {
+         return p_147094_;
+      }
+   }
+
+   public int durabilityToXp(int p_20794_) {
+      return p_20794_ / 2;
+   }
+
+   public int xpToDurability(int p_20799_) {
+      return p_20799_ * 2;
+   }
+
+   public int getValue() {
+      return this.value;
+   }
+
+   public int getIcon() {
+      if (this.value >= 2477) {
+         return 10;
+      } else if (this.value >= 1237) {
+         return 9;
+      } else if (this.value >= 617) {
+         return 8;
+      } else if (this.value >= 307) {
+         return 7;
+      } else if (this.value >= 149) {
+         return 6;
+      } else if (this.value >= 73) {
+         return 5;
+      } else if (this.value >= 37) {
+         return 4;
+      } else if (this.value >= 17) {
+         return 3;
+      } else if (this.value >= 7) {
+         return 2;
+      } else {
+         return this.value >= 3 ? 1 : 0;
+      }
+   }
+
+   public static int getExperienceValue(int p_20783_) {
+      // CraftBukkit start
+      if (p_20783_ > 162670129) return p_20783_ - 100000;
+      if (p_20783_ > 81335063) return 81335063;
+      if (p_20783_ > 40667527) return 40667527;
+      if (p_20783_ > 20333759) return 20333759;
+      if (p_20783_ > 10166857) return 10166857;
+      if (p_20783_ > 5083423) return 5083423;
+      if (p_20783_ > 2541701) return 2541701;
+      if (p_20783_ > 1270849) return 1270849;
+      if (p_20783_ > 635413) return 635413;
+      if (p_20783_ > 317701) return 317701;
+      if (p_20783_ > 158849) return 158849;
+      if (p_20783_ > 79423) return 79423;
+      if (p_20783_ > 39709) return 39709;
+      if (p_20783_ > 19853) return 19853;
+      if (p_20783_ > 9923) return 9923;
+      if (p_20783_ > 4957) return 4957;
+      // CraftBukkit end
+      if (p_20783_ >= 2477) {
+         return 2477;
+      } else if (p_20783_ >= 1237) {
+         return 1237;
+      } else if (p_20783_ >= 617) {
+         return 617;
+      } else if (p_20783_ >= 307) {
+         return 307;
+      } else if (p_20783_ >= 149) {
+         return 149;
+      } else if (p_20783_ >= 73) {
+         return 73;
+      } else if (p_20783_ >= 37) {
+         return 37;
+      } else if (p_20783_ >= 17) {
+         return 17;
+      } else if (p_20783_ >= 7) {
+         return 7;
+      } else {
+         return p_20783_ >= 3 ? 3 : 1;
+      }
+   }
+
+   public boolean isAttackable() {
+      return false;
+   }
+
+   public Packet<ClientGamePacketListener> getAddEntityPacket() {
+      return new ClientboundAddExperienceOrbPacket(this);
+   }
+
+   public SoundSource getSoundSource() {
+      return SoundSource.AMBIENT;
+   }
 }
