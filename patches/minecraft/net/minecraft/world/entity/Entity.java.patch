--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1,6 +_,8 @@
 package net.minecraft.world.entity;
 
 import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableList.Builder;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.ImmutableList.Builder;
@@ -12,6 +_,7 @@
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Comparator;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
@@ -19,7 +_,9 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
@@ -45,6 +_,7 @@
 import net.minecraft.nbt.FloatTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
+import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
@@ -52,11 +_,13 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientGamePacketListener;
 import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
 import net.minecraft.network.protocol.game.VecDeltaCodec;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SyncedDataHolder;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerEntity;
@@ -85,7 +_,8 @@
 import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
-import net.minecraft.world.item.Items;
+import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.item.enchantment.ProtectionEnchantment;
 import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.ClipContext;
@@ -103,7 +_,10 @@
 import net.minecraft.world.level.block.Rotation;
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.BlockStateProperties;
 import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.dimension.DimensionType;
+import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
@@ -126,9 +_,42 @@
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Team;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Server;
+import org.bukkit.block.BlockFace;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityAirChangeEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityDismountEvent;
+import org.bukkit.event.entity.EntityDropItemEvent;
+import org.bukkit.event.entity.EntityMountEvent;
+import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.entity.EntityPoseChangeEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.plugin.PluginManager;
+import org.joml.Vector3f;
 import org.slf4j.Logger;
+import org.spigotmc.AsyncCatcher;
 
-public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess, CommandSource, ScoreHolder {
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements SyncedDataHolder, Nameable, EntityAccess, CommandSource, ScoreHolder, net.minecraftforge.common.extensions.IForgeEntity {
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final String ID_TAG = "id";
     public static final String PASSENGERS_TAG = "Passengers";
@@ -149,14 +_,15 @@
     private static final double LAVA_SLOW_FLOW_SCALE = 0.0023333333333333335;
     public static final String UUID_TAG = "UUID";
     private static double viewScale = 1.0;
+    @Deprecated // Forge: Use the getter to allow overriding in mods
     private final EntityType<?> type;
     private int id = ENTITY_COUNTER.incrementAndGet();
     public boolean blocksBuilding;
-    public ImmutableList<Entity> passengers = ImmutableList.of();
+   	public ImmutableList<Entity> passengers = ImmutableList.of();
     protected int boardingCooldown;
     @Nullable
     private Entity vehicle;
-    private Level level;
+   	public Level level;
     public double xo;
     public double yo;
     public double zo;
@@ -169,7 +_,7 @@
     public float yRotO;
     public float xRotO;
     private AABB bb = INITIAL_AABB;
-    private boolean onGround;
+   	public boolean onGround;
     public boolean horizontalCollision;
     public boolean verticalCollision;
     public boolean verticalCollisionBelow;
@@ -189,13 +_,15 @@
     public double xOld;
     public double yOld;
     public double zOld;
-    public boolean noPhysics;
-    protected final RandomSource random = RandomSource.create();
-    public int tickCount;
-    public int remainingFireTicks = -this.getFireImmuneTicks();
-    protected boolean wasTouchingWater;
+   	public boolean noPhysics;
+   	public final RandomSource random = RandomSource.create();
+   	public int tickCount;
+   	public int remainingFireTicks = -this.getFireImmuneTicks();
+   	public boolean wasTouchingWater;
+    @Deprecated // Forge: Use forgeFluidTypeHeight instead
     protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
     protected boolean wasEyeInWater;
+    @Deprecated // Forge: Use forgeFluidTypeOnEyes instead
     private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
     public int invulnerableTime;
     protected boolean firstTick = true;
@@ -221,7 +_,7 @@
     public boolean hasImpulse;
     @Nullable
     public PortalProcessor portalProcess;
-    public int portalCooldown;
+    private int portalCooldown;
     private boolean invulnerable;
     protected UUID uuid = Mth.createInsecureUUID(this.random);
     protected String stringUUID = this.uuid.toString();
@@ -238,17 +_,89 @@
     private boolean onGroundNoBlocks = false;
     private float crystalSoundIntensity;
     private int lastCrystalSoundPlayTick;
-    public boolean hasVisualFire;
-    @Nullable
-    private BlockState inBlockState = null;
+   	public boolean hasVisualFire;
+   	@Nullable
+   	private BlockState inBlockState = null;
+
+    // CraftBukkit start
+    public boolean persist = true;
+    public boolean visibleByDefault = true;
+    public boolean valid;
+    public boolean inWorld = false;
+    public boolean generation;
+    public int maxAirTicks = getDefaultMaxAirSupply(); // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+    public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+    public boolean lastDamageCancelled; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+    public boolean persistentInvisibility = false;
+    public BlockPos lastLavaContact;
+    // Marks an entity, that it was removed by a plugin via Entity#remove
+    // Main use case currently is for SPIGOT-7487, preventing dropping of leash when leash is removed
+    public boolean pluginRemoved = false;
+    // CraftBukkit end
+
+    // Spigot start
+    public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+    public final boolean defaultActivationState;
+    public long activatedTick = Integer.MIN_VALUE;
+    // Spigot end
+
+    public AtomicReference<CreatureSpawnEvent.SpawnReason> spawnReason = new AtomicReference<>(CreatureSpawnEvent.SpawnReason.DEFAULT);
+
+    public void spawnReason(CreatureSpawnEvent.SpawnReason spawnReason) {
+        this.spawnReason.set(spawnReason);
+    }
+
+    public float getBukkitYaw() {
+      return this.yRot;
+    }
+
+    private static final int CURRENT_LEVEL = 2;
+    static boolean isLevelAtLeast(CompoundTag tag, int level) {
+      return tag.contains("Bukkit.updateLevel") && tag.getInt("Bukkit.updateLevel") >= level;
+    }
+
+    private CraftEntity bukkitEntity;
+    public CraftEntity getBukkitEntity() {
+        if (bukkitEntity == null) {
+            bukkitEntity = CraftEntity.getEntity(level.getCraftServer(), this);
+        }
+        return bukkitEntity;
+    }
+
+    public void setBukkitEntity(CraftEntity bukkitEntity) {
+        this.bukkitEntity = bukkitEntity;
+    }
+
+    @Override
+    public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+        return getBukkitEntity();
+    }
+
+    // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+    public int getDefaultMaxAirSupply() {
+        return TOTAL_AIR_SUPPLY;
+    }
+
+    public boolean isChunkLoaded() {
+        return level.hasChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4);
+    }
+    // CraftBukkit end
 
     public Entity(EntityType<?> p_19870_, Level p_19871_) {
+        super(Entity.class);
         this.type = p_19870_;
         this.level = p_19871_;
         this.dimensions = p_19870_.getDimensions();
         this.position = Vec3.ZERO;
         this.blockPosition = BlockPos.ZERO;
         this.chunkPosition = ChunkPos.ZERO;
+        // Spigot start
+        if (p_19871_ != null && p_19871_ instanceof ServerLevel) {
+            this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, p_19871_.spigotConfig);
+        } else {
+            this.defaultActivationState = false;
+        }
+        // Spigot end
         SynchedEntityData.Builder synchedentitydata$builder = new SynchedEntityData.Builder(this);
         synchedentitydata$builder.define(DATA_SHARED_FLAGS_ID, (byte)0);
         synchedentitydata$builder.define(DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
@@ -262,6 +_,8 @@
         this.entityData = synchedentitydata$builder.build();
         this.setPos(0.0, 0.0, 0.0);
         this.eyeHeight = this.dimensions.eyeHeight();
+        net.minecraftforge.event.ForgeEventFactory.onEntityConstructing(this);
+        this.gatherCapabilities();
     }
 
     public boolean isColliding(BlockPos p_20040_, BlockState p_20041_) {
@@ -322,7 +_,15 @@
         return this.tags.remove(p_20138_);
     }
 
+    // Mohist start
+    private AtomicReference<EntityRemoveEvent.Cause> mohist$removeCause = new AtomicReference<>(null);
+
+    public void putRemoveCause(EntityRemoveEvent.Cause cause) {
+        mohist$removeCause.set(cause);
+    }
+
     public void kill() {
+        this.putRemoveCause(EntityRemoveEvent.Cause.DEATH); // CraftBukkit - add Bukkit remove cause
         this.remove(Entity.RemovalReason.KILLED);
         this.gameEvent(GameEvent.ENTITY_DIE);
     }
@@ -331,12 +_,28 @@
         this.remove(Entity.RemovalReason.DISCARDED);
     }
 
+    public final void discard(EntityRemoveEvent.Cause cause) {
+        this.remove(Entity.RemovalReason.DISCARDED, cause);
+        // CraftBukkit end
+    }
+    // Mohist end
+
     protected abstract void defineSynchedData(SynchedEntityData.Builder p_333664_);
 
     public SynchedEntityData getEntityData() {
         return this.entityData;
     }
 
+    // CraftBukkit start
+    public void refreshEntityData(ServerPlayer to) {
+        List<SynchedEntityData.DataValue<?>> list = this.getEntityData().getNonDefaultValues();
+
+        if (list != null) {
+            to.connection.send(new ClientboundSetEntityDataPacket(this.getId(), list));
+        }
+    }
+    // CraftBukkit end
+
     @Override
     public boolean equals(Object p_20245_) {
         return p_20245_ instanceof Entity ? ((Entity)p_20245_).id == this.id : false;
@@ -349,14 +_,28 @@
 
     public void remove(Entity.RemovalReason p_146834_) {
         this.setRemoved(p_146834_);
-    }
-
-    public void onClientRemoval() {
-    }
-
-    public void setPose(Pose p_20125_) {
-        this.entityData.set(DATA_POSE, p_20125_);
-    }
+        this.invalidateCaps();
+    }
+
+   public void remove(Entity.RemovalReason p_146834_, EntityRemoveEvent.Cause cause) {
+      putRemoveCause(cause);
+      remove(p_146834_);
+   }
+
+   public void onClientRemoval() {
+   }
+
+   public void setPose(Pose p_20125_) {
+      // CraftBukkit start
+      if (p_20125_ == this.getPose()) {
+         return;
+      }
+      if (!AsyncCatcher.catchAsync()) {
+         this.level.getCraftServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), org.bukkit.entity.Pose.values()[p_20125_.ordinal()]));
+      }
+      // CraftBukkit end
+      this.entityData.set(DATA_POSE, p_20125_);
+   }
 
     public Pose getPose() {
         return this.entityData.get(DATA_POSE);
@@ -378,6 +_,33 @@
     }
 
     protected void setRot(float p_19916_, float p_19917_) {
+        // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(p_19916_)) {
+            p_19916_ = 0;
+        }
+
+        if (p_19916_ == Float.POSITIVE_INFINITY || p_19916_ == Float.NEGATIVE_INFINITY) {
+            if (this instanceof ServerPlayer) {
+                this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid yaw");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
+            }
+            p_19916_ = 0;
+        }
+
+        // pitch was sometimes set to NaN, so we need to set it back to 0
+        if (Float.isNaN(p_19917_)) {
+            p_19917_ = 0;
+        }
+
+        if (p_19917_ == Float.POSITIVE_INFINITY || p_19917_ == Float.NEGATIVE_INFINITY) {
+            if (this instanceof ServerPlayer) {
+                this.level.getCraftServer().getLogger().warning(this.getScoreboardName() + " was caught trying to crash the server with an invalid pitch");
+                ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
+            }
+            p_19917_ = 0;
+        }
+        // CraftBukkit end
+
         this.setYRot(p_19916_ % 360.0F);
         this.setXRot(p_19917_ % 360.0F);
     }
@@ -417,6 +_,15 @@
         this.baseTick();
     }
 
+    // CraftBukkit start
+    public void postTick() {
+        // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+        if (!(this instanceof ServerPlayer)) {
+            this.handleNetherPortal();
+        }
+    }
+    // CraftBukkit end
+
     public void baseTick() {
         this.level().getProfiler().push("entityBaseTick");
         this.inBlockState = null;
@@ -431,7 +_,7 @@
         this.walkDistO = this.walkDist;
         this.xRotO = this.getXRot();
         this.yRotO = this.getYRot();
-        this.handlePortal();
+        if (this instanceof ServerPlayer) this.handleNetherPortal(); // CraftBukkit - // Moved up to postTick
         if (this.canSpawnSprintParticle()) {
             this.spawnSprintParticle();
         }
@@ -465,7 +_,11 @@
 
         if (this.isInLava()) {
             this.lavaHurt();
-            this.fallDistance *= 0.5F;
+            this.fallDistance *= this.getFluidFallDistanceModifier(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+        } else {
+            // CraftBukkit start
+            this.lastLavaContact = null;
+            // CraftBukkit end
         }
 
         this.checkBelowWorld();
@@ -515,16 +_,50 @@
 
     public void lavaHurt() {
         if (!this.fireImmune()) {
-            this.igniteForSeconds(15.0F);
-            if (this.hurt(this.damageSources().lava(), 4.0F)) {
+            // CraftBukkit start - Fallen in lava TODO: this event spams!
+            if (this instanceof LivingEntity && remainingFireTicks <= 0) {
+                // not on fire yet
+                org.bukkit.block.Block damager = (lastLavaContact == null) ? null : CraftBlock.at(level, lastLavaContact);
+                org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+                EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+                this.level.getCraftServer().getPluginManager().callEvent(combustEvent);
+
+                if (!combustEvent.isCancelled()) {
+                    this.igniteForSeconds(combustEvent.getDuration(), false);
+                }
+            } else {
+                // This will be called every single tick the entity is in lava, so don't throw an event
+                this.igniteForSeconds(15, false);
+            }
+            if (this.hurt(this.damageSources().lava().directBlock(level, lastLavaContact), 4.0F)) {
                 this.playSound(SoundEvents.GENERIC_BURN, 0.4F, 2.0F + this.random.nextFloat() * 0.4F);
             }
-        }
-    }
-
-    public final void igniteForSeconds(float p_344126_) {
-        this.igniteForTicks(Mth.floor(p_344126_ * 20.0F));
-    }
+            // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
+        }
+    }
+
+    // Mohist start
+    public AtomicBoolean igniteForSeconds$callEvent = new AtomicBoolean(true);
+
+    public final void igniteForSeconds(int p_332057_) {
+        if (igniteForSeconds$callEvent.getAndSet(true)) {
+            EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), p_332057_);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
+
+            p_332057_ = event.getDuration();
+        }
+        this.igniteForTicks(p_332057_ * 20);
+    }
+
+    public void igniteForSeconds(int i, boolean callEvent) {
+        this.igniteForSeconds$callEvent.set(callEvent);
+        igniteForTicks(i);
+    }
+    // Mohist end
 
     public void igniteForTicks(int p_328241_) {
         if (this.remainingFireTicks < p_328241_) {
@@ -545,6 +_,7 @@
     }
 
     protected void onBelowWorld() {
+      	this.putRemoveCause(EntityRemoveEvent.Cause.OUT_OF_WORLD); // CraftBukkit - add Bukkit remove cause
         this.discard();
     }
 
@@ -664,6 +_,28 @@
                     block.updateEntityAfterFallOn(this.level(), this);
                 }
 
+                // CraftBukkit start
+                if (horizontalCollision && getBukkitEntity() instanceof Vehicle) {
+                   Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                   org.bukkit.block.Block bl = this.level.getWorld().getBlockAt(Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ()));
+                   if (p_19974_.x > vec3.x) {
+                      bl = bl.getRelative(BlockFace.EAST);
+                   } else if (p_19974_.x < vec3.x) {
+                      bl = bl.getRelative(BlockFace.WEST);
+                   } else if (p_19974_.z > vec3.z) {
+                      bl = bl.getRelative(BlockFace.SOUTH);
+                   } else if (p_19974_.z < vec3.z) {
+                      bl = bl.getRelative(BlockFace.NORTH);
+                   }
+
+                   if (!bl.getType().isAir()) {
+                      VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                      level.getCraftServer().getPluginManager().callEvent(event);
+                   }
+                }
+                // CraftBukkit end
+
+
                 if (this.onGround()) {
                     block.stepOn(this.level(), blockpos, blockstate, this);
                 }
@@ -673,7 +_,7 @@
                     double d1 = vec3.x;
                     double d2 = vec3.y;
                     double d3 = vec3.z;
-                    this.flyDist = this.flyDist + (float)(vec3.length() * 0.6);
+                    this.flyDist = (float)((double)this.flyDist + vec3.length() * 0.6D);
                     BlockPos blockpos1 = this.getOnPos();
                     BlockState blockstate1 = this.level().getBlockState(blockpos1);
                     boolean flag1 = this.isStateClimbable(blockstate1);
@@ -717,12 +_,12 @@
                         this.setRemainingFireTicks(-this.getFireImmuneTicks());
                     }
 
-                    if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+                    if (this.wasOnFire && (this.isInPowderSnow || this.isInWaterRainOrBubble() || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
                         this.playEntityOnFireExtinguishedSound();
                     }
                 }
 
-                if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble())) {
+                if (this.isOnFire() && (this.isInPowderSnow || this.isInWaterRainOrBubble() || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
                     this.setRemainingFireTicks(-this.getFireImmuneTicks());
                 }
 
@@ -812,9 +_,7 @@
                 return blockpos;
             } else {
                 BlockState blockstate = this.level().getBlockState(blockpos);
-                return (!((double)p_216987_ <= 0.5) || !blockstate.is(BlockTags.FENCES))
-                        && !blockstate.is(BlockTags.WALLS)
-                        && !(blockstate.getBlock() instanceof FenceGateBlock)
+                return (!((double)p_216987_ <= 0.5) || !blockstate.collisionExtendsVertically(this.level(), blockpos, this))
                     ? blockpos.atY(Mth.floor(this.position.y - (double)p_216987_))
                     : blockpos;
             }
@@ -1005,6 +_,20 @@
         return SoundEvents.GENERIC_SPLASH;
     }
 
+    // CraftBukkit start - Add delegate methods
+    public SoundEvent getSwimSound0() {
+      return getSwimSound();
+   }
+
+    public SoundEvent getSwimSplashSound0() {
+      return getSwimSplashSound();
+   }
+
+    public SoundEvent getSwimHighSpeedSplashSound0() {
+      return getSwimHighSpeedSplashSound();
+   }
+    // CraftBukkit end
+
     protected void checkInsideBlocks() {
         AABB aabb = this.getBoundingBox();
         BlockPos blockpos = BlockPos.containing(aabb.minX + 1.0E-7, aabb.minY + 1.0E-7, aabb.minZ + 1.0E-7);
@@ -1078,19 +_,19 @@
         return !blockstate.is(BlockTags.INSIDE_STEP_SOUND_BLOCKS) && !blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS) ? p_278049_ : blockpos;
     }
 
-    protected void playCombinationStepSounds(BlockState p_277472_, BlockState p_277630_) {
-        SoundType soundtype = p_277472_.getSoundType();
+    protected void playCombinationStepSounds(BlockState p_277472_, BlockState p_277630_, BlockPos primaryPos, BlockPos secondaryPos) {
+        SoundType soundtype = p_277472_.getSoundType(this.level(), primaryPos, this);
         this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
-        this.playMuffledStepSound(p_277630_);
+        this.playMuffledStepSound(p_277630_, secondaryPos);
     }
 
-    protected void playMuffledStepSound(BlockState p_283110_) {
-        SoundType soundtype = p_283110_.getSoundType();
+    protected void playMuffledStepSound(BlockState p_283110_, BlockPos pos) {
+        SoundType soundtype = p_283110_.getSoundType(this.level(), pos, this);
         this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.05F, soundtype.getPitch() * 0.8F);
     }
 
     protected void playStepSound(BlockPos p_20135_, BlockState p_20136_) {
-        SoundType soundtype = p_20136_.getSoundType();
+        SoundType soundtype = p_20136_.getSoundType(this.level(), p_20135_, this);
         this.playSound(soundtype.getStepSound(), soundtype.getVolume() * 0.15F, soundtype.getPitch());
     }
 
@@ -1241,27 +_,33 @@
 
     public void updateSwimming() {
         if (this.isSwimming()) {
-            this.setSwimming(this.isSprinting() && this.isInWater() && !this.isPassenger());
+            this.setSwimming(this.isSprinting() && (this.isInWater() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) && !this.isPassenger());
         } else {
-            this.setSwimming(this.isSprinting() && this.isUnderWater() && !this.isPassenger() && this.level().getFluidState(this.blockPosition).is(FluidTags.WATER));
+            this.setSwimming(this.isSprinting() && (this.isUnderWater() || this.canStartSwimming()) && !this.isPassenger());
         }
     }
 
     protected boolean updateInWaterStateAndDoFluidPushing() {
         this.fluidHeight.clear();
+        this.forgeFluidTypeHeight.clear();
         this.updateInWaterStateAndDoWaterCurrentPushing();
-        double d0 = this.level().dimensionType().ultraWarm() ? 0.007 : 0.0023333333333333335;
-        boolean flag = this.updateFluidHeightAndDoFluidPushing(FluidTags.LAVA, d0);
-        return this.isInWater() || flag;
+        if (!(this.getVehicle() instanceof Boat)) {
+           this.fallDistance *= this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().filter(e -> !e.getKey().isAir() && !e.getKey().isVanilla()).map(e -> this.getFluidFallDistanceModifier(e.getKey())).min(Float::compare).orElse(1F);
+           if (this.isInFluidType((fluidType, height) -> !fluidType.isAir() && !fluidType.isVanilla() && this.canFluidExtinguish(fluidType))) this.clearFire();
+        }
+        return this.isInFluidType();
     }
 
     void updateInWaterStateAndDoWaterCurrentPushing() {
+        java.util.function.BooleanSupplier updateFluidHeight = () -> this.updateFluidHeightAndDoFluidPushing(FluidTags.WATER, 0.014D);
         if (this.getVehicle() instanceof Boat boat && !boat.isUnderWater()) {
-            this.wasTouchingWater = false;
-            return;
+            updateFluidHeight = () -> {
+                this.updateFluidHeightAndDoFluidPushing(state -> this.shouldUpdateFluidWhileBoating(state, boat));
+                return false;
+            };
         }
 
-        if (this.updateFluidHeightAndDoFluidPushing(FluidTags.WATER, 0.014)) {
+        if (updateFluidHeight.getAsBoolean()) {
             if (!this.wasTouchingWater && !this.firstTick) {
                 this.doWaterSplashEffect();
             }
@@ -1277,6 +_,7 @@
     private void updateFluidOnEyes() {
         this.wasEyeInWater = this.isEyeInFluid(FluidTags.WATER);
         this.fluidOnEyes.clear();
+        this.forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
         double d0 = this.getEyeY();
         if (this.getVehicle() instanceof Boat boat && !boat.isUnderWater() && boat.getBoundingBox().maxY >= d0 && boat.getBoundingBox().minY <= d0) {
             return;
@@ -1286,7 +_,7 @@
         FluidState fluidstate = this.level().getFluidState(blockpos);
         double d1 = (double)((float)blockpos.getY() + fluidstate.getHeight(this.level(), blockpos));
         if (d1 > d0) {
-            fluidstate.getTags().forEach(this.fluidOnEyes::add);
+            this.forgeFluidTypeOnEyes = fluidstate.getFluidType();
         }
     }
 
@@ -1340,12 +_,13 @@
     }
 
     public boolean canSpawnSprintParticle() {
-        return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive();
+        return this.isSprinting() && !this.isInWater() && !this.isSpectator() && !this.isCrouching() && !this.isInLava() && this.isAlive() && !this.isInFluidType();
     }
 
     protected void spawnSprintParticle() {
         BlockPos blockpos = this.getOnPosLegacy();
         BlockState blockstate = this.level().getBlockState(blockpos);
+        if (!blockstate.addRunningEffects(level, blockpos, this))
         if (blockstate.getRenderShape() != RenderShape.INVISIBLE) {
             Vec3 vec3 = this.getDeltaMovement();
             BlockPos blockpos1 = this.blockPosition();
@@ -1361,7 +_,7 @@
 
             this.level()
                 .addParticle(
-                    new BlockParticleOption(ParticleTypes.BLOCK, blockstate),
+                    new BlockParticleOption(ParticleTypes.BLOCK, blockstate).setPos(blockpos),
                     d0,
                     this.getY() + 0.1,
                     d1,
@@ -1372,12 +_,15 @@
         }
     }
 
+    @Deprecated // Forge: Use isEyeInFluidType instead
     public boolean isEyeInFluid(TagKey<Fluid> p_204030_) {
+        if (p_204030_ == FluidTags.WATER) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+        else if (p_204030_ == FluidTags.LAVA) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
         return this.fluidOnEyes.contains(p_204030_);
     }
 
     public boolean isInLava() {
-        return !this.firstTick && this.fluidHeight.getDouble(FluidTags.LAVA) > 0.0;
+        return !this.firstTick && this.forgeFluidTypeHeight.getDouble(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get()) > 0.0;
     }
 
     public void moveRelative(float p_19921_, Vec3 p_19922_) {
@@ -1423,7 +_,8 @@
         this.yo = p_20250_;
         this.zo = d1;
         this.setPos(d0, p_20250_, d1);
-    }
+      	if (valid) level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
+   }
 
     public void moveTo(Vec3 p_20220_) {
         this.moveTo(p_20220_.x, p_20220_.y, p_20220_.z);
@@ -1620,6 +_,12 @@
         return false;
     }
 
+    // CraftBukkit start - collidable API
+    public boolean canCollideWithBukkit(Entity entity) {
+        return isPushable();
+    }
+    // CraftBukkit end
+
     public void awardKillScore(Entity p_19953_, int p_19954_, DamageSource p_19955_) {
         if (p_19953_ instanceof ServerPlayer) {
             CriteriaTriggers.ENTITY_KILLED_PLAYER.trigger((ServerPlayer)p_19953_, this, p_19955_);
@@ -1645,15 +_,21 @@
     }
 
     public boolean saveAsPassenger(CompoundTag p_20087_) {
+        // CraftBukkit start - allow excluding certain data when saving
+        return saveAsPassenger(p_20087_, true);
+    }
+
+    public boolean saveAsPassenger(CompoundTag p_20087_, boolean includeAll) {
+        // CraftBukkit end
         if (this.removalReason != null && !this.removalReason.shouldSave()) {
             return false;
         } else {
             String s = this.getEncodeId();
-            if (s == null) {
+            if (!this.persist || s == null) { // CraftBukkit - persist flag
                 return false;
             } else {
                 p_20087_.putString("id", s);
-                this.saveWithoutId(p_20087_);
+                this.saveWithoutId(p_20087_, includeAll); // CraftBukkit - pass on includeAll
                 return true;
             }
         }
@@ -1664,15 +_,37 @@
     }
 
     public CompoundTag saveWithoutId(CompoundTag p_20241_) {
-        try {
-            if (this.vehicle != null) {
-                p_20241_.put("Pos", this.newDoubleList(this.vehicle.getX(), this.getY(), this.vehicle.getZ()));
-            } else {
-                p_20241_.put("Pos", this.newDoubleList(this.getX(), this.getY(), this.getZ()));
+        // CraftBukkit start - allow excluding certain data when saving
+        return saveWithoutId(p_20241_, true);
+    }
+
+    public CompoundTag saveWithoutId(CompoundTag p_20241_, boolean includeAll) {
+       // CraftBukkit end
+       try {
+            // CraftBukkit start - selectively save position
+            if (includeAll) {
+                if (this.vehicle != null) {
+                    p_20241_.put("Pos", this.newDoubleList(this.vehicle.getX(), this.getY(), this.vehicle.getZ()));
+                } else {
+                    p_20241_.put("Pos", this.newDoubleList(this.getX(), this.getY(), this.getZ()));
+                }
             }
+            // CraftBukkit end
 
             Vec3 vec3 = this.getDeltaMovement();
             p_20241_.put("Motion", this.newDoubleList(vec3.x, vec3.y, vec3.z));
+
+            // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+            // TODO: make sure this is the best way to address this.
+            if (Float.isNaN(this.yRot)) {
+                this.yRot = 0;
+            }
+
+            if (Float.isNaN(this.xRot)) {
+                this.xRot = 0;
+            }
+            // CraftBukkit end
+
             p_20241_.put("Rotation", this.newFloatList(this.getYRot(), this.getXRot()));
             p_20241_.putFloat("FallDistance", this.fallDistance);
             p_20241_.putShort("Fire", (short)this.remainingFireTicks);
@@ -1680,7 +_,29 @@
             p_20241_.putBoolean("OnGround", this.onGround());
             p_20241_.putBoolean("Invulnerable", this.invulnerable);
             p_20241_.putInt("PortalCooldown", this.portalCooldown);
-            p_20241_.putUUID("UUID", this.getUUID());
+            // CraftBukkit start - selectively save uuid and world
+            if (includeAll) {
+                p_20241_.putUUID("UUID", this.getUUID());
+                // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+                p_20241_.putLong("WorldUUIDLeast", ((ServerLevel) this.level).getWorld().getUID().getLeastSignificantBits());
+                p_20241_.putLong("WorldUUIDMost", ((ServerLevel) this.level).getWorld().getUID().getMostSignificantBits());
+            }
+            p_20241_.putInt("Bukkit.updateLevel", CURRENT_LEVEL);
+            if (!this.persist) {
+                p_20241_.putBoolean("Bukkit.persist", this.persist);
+            }
+            if (!this.visibleByDefault) {
+                p_20241_.putBoolean("Bukkit.visibleByDefault", this.visibleByDefault);
+            }
+            if (this.persistentInvisibility) {
+                p_20241_.putBoolean("Bukkit.invisible", this.persistentInvisibility);
+            }
+            // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+            if (maxAirTicks != getDefaultMaxAirSupply()) {
+                p_20241_.putInt("Bukkit.MaxAirSupply", getMaxAirSupply());
+            }
+            p_20241_.putInt("Spigot.ticksLived", this.tickCount);
+            // CraftBukkit end
             Component component = this.getCustomName();
             if (component != null) {
                 p_20241_.putString("CustomName", Component.Serializer.toJson(component, this.registryAccess()));
@@ -1711,6 +_,11 @@
                 p_20241_.putBoolean("HasVisualFire", this.hasVisualFire);
             }
 
+            p_20241_.putBoolean("CanUpdate", canUpdate);
+            CompoundTag caps = serializeCaps(this.registryAccess());
+            if (caps != null) p_20241_.put("ForgeCaps", caps);
+            if (persistentData != null) p_20241_.put("ForgeData", persistentData.copy());
+
             if (!this.tags.isEmpty()) {
                 ListTag listtag = new ListTag();
 
@@ -1721,13 +_,13 @@
                 p_20241_.put("Tags", listtag);
             }
 
-            this.addAdditionalSaveData(p_20241_);
+            this.addAdditionalSaveData(p_20241_, includeAll); // CraftBukkit - pass on includeAll
             if (this.isVehicle()) {
                 ListTag listtag1 = new ListTag();
 
                 for (Entity entity : this.getPassengers()) {
                     CompoundTag compoundtag = new CompoundTag();
-                    if (entity.saveAsPassenger(compoundtag)) {
+                    if (entity.saveAsPassenger(compoundtag, includeAll)) { // CraftBukkit - pass on includeAll
                         listtag1.add(compoundtag);
                     }
                 }
@@ -1736,7 +_,11 @@
                     p_20241_.put("Passengers", listtag1);
                 }
             }
-
+            // CraftBukkit start - stores eventually existing bukkit values
+            if (this.bukkitEntity != null) {
+                this.bukkitEntity.storeBukkitValues(p_20241_);
+            }
+            // CraftBukkit end
             return p_20241_;
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Saving entity NBT");
@@ -1801,6 +_,9 @@
                 this.setGlowingTag(p_20259_.getBoolean("Glowing"));
                 this.setTicksFrozen(p_20259_.getInt("TicksFrozen"));
                 this.hasVisualFire = p_20259_.getBoolean("HasVisualFire");
+                if (p_20259_.contains("ForgeData", 10)) persistentData = p_20259_.getCompound("ForgeData");
+                if (p_20259_.contains("CanUpdate", 99)) this.canUpdate(p_20259_.getBoolean("CanUpdate"));
+                if (p_20259_.contains("ForgeCaps", 10)) deserializeCaps(this.registryAccess(), p_20259_.getCompound("ForgeCaps"));
                 if (p_20259_.contains("Tags", 9)) {
                     this.tags.clear();
                     ListTag listtag3 = p_20259_.getList("Tags", 8);
@@ -1818,6 +_,48 @@
             } else {
                 throw new IllegalStateException("Entity has invalid rotation");
             }
+            // CraftBukkit start
+            // Spigot start
+            if (this instanceof LivingEntity) {
+                this.tickCount = p_20259_.getInt("Spigot.ticksLived");
+            }
+            // Spigot end
+            this.persist = !p_20259_.contains("Bukkit.persist") || p_20259_.getBoolean("Bukkit.persist");
+            this.visibleByDefault = !p_20259_.contains("Bukkit.visibleByDefault") || p_20259_.getBoolean("Bukkit.visibleByDefault");
+            // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+            if (p_20259_.contains("Bukkit.MaxAirSupply")) {
+                maxAirTicks = p_20259_.getInt("Bukkit.MaxAirSupply");
+            }
+            // CraftBukkit end
+
+            // CraftBukkit start - Reset world
+            if (this instanceof ServerPlayer serverPlayer) {
+                Server server = Bukkit.getServer();
+                org.bukkit.World bworld = null;
+
+                // TODO: Remove World related checks, replaced with WorldUID
+                String worldName = p_20259_.getString("world");
+
+                if (p_20259_.contains("WorldUUIDMost") && p_20259_.contains("WorldUUIDLeast")) {
+                    UUID uid = new UUID(p_20259_.getLong("WorldUUIDMost"), p_20259_.getLong("WorldUUIDLeast"));
+                    bworld = server.getWorld(uid);
+                } else {
+                    bworld = server.getWorld(worldName);
+                }
+
+                if (bworld == null) {
+                    bworld = ((CraftServer) server).getServer().getLevel(Level.OVERWORLD).getWorld();
+                }
+
+                serverPlayer.setLevel(bworld == null ? null : ((CraftWorld) bworld).getHandle());
+            }
+            this.getBukkitEntity().readBukkitValues(p_20259_);
+            if (p_20259_.contains("Bukkit.invisible")) {
+                boolean bukkitInvisible = p_20259_.getBoolean("Bukkit.invisible");
+                this.setInvisible(bukkitInvisible);
+                this.persistentInvisibility = bukkitInvisible;
+            }
+            // CraftBukkit end
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Loading entity NBT");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Entity being loaded");
@@ -1837,6 +_,12 @@
         return entitytype.canSerialize() && resourcelocation != null ? resourcelocation.toString() : null;
     }
 
+    // CraftBukkit start - allow excluding certain data when saving
+    protected void addAdditionalSaveData(CompoundTag p_20052_, boolean includeAll) {
+        addAdditionalSaveData(p_20052_);
+    }
+    // CraftBukkit end
+
     protected abstract void readAdditionalSaveData(CompoundTag p_20052_);
 
     protected abstract void addAdditionalSaveData(CompoundTag p_20139_);
@@ -1885,6 +_,15 @@
         } else {
             ItemEntity itementity = new ItemEntity(this.level(), this.getX(), this.getY() + (double)p_19986_, this.getZ(), p_19985_);
             itementity.setDefaultPickUpDelay();
+            // CraftBukkit start
+            EntityDropItemEvent event = new EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+            Bukkit.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return null;
+            }
+            // CraftBukkit end
+            if (captureDrops() != null) captureDrops().add(itementity);
+            else
             this.level().addFreshEntity(itementity);
             return itementity;
         }
@@ -1952,6 +_,7 @@
 
     public void rideTick() {
         this.setDeltaMovement(Vec3.ZERO);
+        if (canUpdate())
         this.tick();
         if (this.isPassenger()) {
             this.getVehicle().positionRider(this);
@@ -2010,7 +_,29 @@
                 }
             }
 
+            if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, p_19966_, true)) return false;
             if (p_19967_ || this.canRide(p_19966_) && p_19966_.canAddPassenger(this)) {
+                // CraftBukkit start
+                if (p_19966_.getBukkitEntity() instanceof Vehicle && this.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+                    VehicleEnterEvent event = new VehicleEnterEvent((Vehicle) p_19966_.getBukkitEntity(), (org.bukkit.entity.LivingEntity) this.getBukkitEntity());
+                    // Suppress during worldgen
+                    if (this.valid) {
+                        Bukkit.getPluginManager().callEvent(event);
+                    }
+                    if (event.isCancelled()) {
+                        return false;
+                    }
+                }
+
+                EntityMountEvent event = new EntityMountEvent(this.getBukkitEntity(), p_19966_.getBukkitEntity());
+                // Suppress during worldgen
+                if (this.valid) {
+                    Bukkit.getPluginManager().callEvent(event);
+                }
+                if (event.isCancelled()) {
+                    return false;
+                }
+                // CraftBukkit end
                 if (this.isPassenger()) {
                     this.stopRiding();
                 }
@@ -2041,8 +_,9 @@
     public void removeVehicle() {
         if (this.vehicle != null) {
             Entity entity = this.vehicle;
+            if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
             this.vehicle = null;
-            entity.removePassenger(this);
+         	if (!entity.removePassenger(this)) this.vehicle = entity; // CraftBukkit
         }
     }
 
@@ -2071,25 +_,58 @@
         }
     }
 
-    protected void removePassenger(Entity p_20352_) {
-        if (p_20352_.getVehicle() == this) {
+    protected boolean removePassenger(Entity pPassenger) {
+        if (pPassenger.getVehicle() == this) {
             throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
         } else {
-            if (this.passengers.size() == 1 && this.passengers.get(0) == p_20352_) {
+            // CraftBukkit start
+            CraftEntity craft = (CraftEntity) pPassenger.getBukkitEntity().getVehicle();
+            Entity orig = craft == null ? null : craft.getHandle();
+            if (getBukkitEntity() instanceof Vehicle && pPassenger.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+                VehicleExitEvent event = new VehicleExitEvent(
+                        (Vehicle) getBukkitEntity(),
+                        (org.bukkit.entity.LivingEntity) pPassenger.getBukkitEntity()
+                );
+                // Suppress during worldgen
+                if (this.valid) {
+                    Bukkit.getPluginManager().callEvent(event);
+                }
+                CraftEntity craftn = (CraftEntity) pPassenger.getBukkitEntity().getVehicle();
+                Entity n = craftn == null ? null : craftn.getHandle();
+                if (event.isCancelled() || n != orig) {
+                    return false;
+                }
+            }
+
+            EntityDismountEvent event = new EntityDismountEvent(pPassenger.getBukkitEntity(), this.getBukkitEntity());
+            // Suppress during worldgen
+            if (this.valid) {
+                Bukkit.getPluginManager().callEvent(event);
+            }
+            if (event.isCancelled()) {
+                return false;
+            }
+            // CraftBukkit end
+            if (this.passengers.size() == 1 && this.passengers.get(0) == pPassenger) {
                 this.passengers = ImmutableList.of();
             } else {
-                this.passengers = this.passengers.stream().filter(p_344072_ -> p_344072_ != p_20352_).collect(ImmutableList.toImmutableList());
+                this.passengers = this.passengers.stream().filter((p_185980_) -> {
+                    return p_185980_ != pPassenger;
+                }).collect(ImmutableList.toImmutableList());
             }
 
-            p_20352_.boardingCooldown = 60;
-            this.gameEvent(GameEvent.ENTITY_DISMOUNT, p_20352_);
+            pPassenger.boardingCooldown = 60;
+            this.gameEvent(GameEvent.ENTITY_DISMOUNT, pPassenger);
         }
+        return true;
     }
 
     protected boolean canAddPassenger(Entity p_20354_) {
         return this.passengers.isEmpty();
     }
 
+    /** @deprecated Forge: Use {@link #canBeRiddenUnderFluidType(net.minecraftforge.fluids.FluidType, Entity) rider sensitive version} */
+    @Deprecated
     protected boolean couldAcceptPassenger() {
         return true;
     }
@@ -2274,10 +_,17 @@
     }
 
     public boolean isVisuallyCrawling() {
-        return this.isVisuallySwimming() && !this.isInWater();
+        return this.isVisuallySwimming() && !this.isInWater() && !this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType));
     }
 
     public void setSwimming(boolean p_20283_) {
+        // CraftBukkit start
+        if (valid && this.isSwimming() != p_20283_ && this instanceof LivingEntity) {
+            if (CraftEventFactory.callToggleSwimEvent((LivingEntity) this, p_20283_).isCancelled()) {
+                return;
+            }
+        }
+        // CraftBukkit end
         this.setSharedFlag(4, p_20283_);
     }
 
@@ -2327,15 +_,18 @@
         return this.getTeam() != null ? this.getTeam().isAlliedTo(p_20032_) : false;
     }
 
+    // CraftBukkit - start
     public void setInvisible(boolean p_20304_) {
-        this.setSharedFlag(5, p_20304_);
+        if (!this.persistentInvisibility) { // Prevent Minecraft from removing our invisibility flag
+            this.setSharedFlag(5, p_20304_);
+        }
     }
 
-    protected boolean getSharedFlag(int p_20292_) {
+    public boolean getSharedFlag(int p_20292_) {
         return (this.entityData.get(DATA_SHARED_FLAGS_ID) & 1 << p_20292_) != 0;
     }
 
-    protected void setSharedFlag(int p_20116_, boolean p_20117_) {
+    public void setSharedFlag(int p_20116_, boolean p_20117_) {
         byte b0 = this.entityData.get(DATA_SHARED_FLAGS_ID);
         if (p_20117_) {
             this.entityData.set(DATA_SHARED_FLAGS_ID, (byte)(b0 | 1 << p_20116_));
@@ -2345,7 +_,7 @@
     }
 
     public int getMaxAirSupply() {
-        return 300;
+        return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
     }
 
     public int getAirSupply() {
@@ -2353,7 +_,18 @@
     }
 
     public void setAirSupply(int p_20302_) {
-        this.entityData.set(DATA_AIR_SUPPLY_ID, p_20302_);
+        // CraftBukkit start
+        EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), p_20302_);
+        // Suppress during worldgen
+        if (this.valid) {
+            event.getEntity().getServer().getPluginManager().callEvent(event);
+        }
+        if (event.isCancelled() && this.getAirSupply() != p_20302_) {
+            this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
+            return;
+        }
+        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+        // CraftBukkit end
     }
 
     public int getTicksFrozen() {
@@ -2379,11 +_,39 @@
 
     public void thunderHit(ServerLevel p_19927_, LightningBolt p_19928_) {
         this.setRemainingFireTicks(this.remainingFireTicks + 1);
+        // CraftBukkit start
+        final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+        final org.bukkit.entity.Entity stormBukkitEntity = p_19928_.getBukkitEntity();
+        final PluginManager pluginManager = Bukkit.getPluginManager();
+        // CraftBukkit end
+
         if (this.remainingFireTicks == 0) {
-            this.igniteForSeconds(8.0F);
-        }
-
-        this.hurt(this.damageSources().lightningBolt(), 5.0F);
+            // CraftBukkit start - Call a combust event when lightning strikes
+            EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+            pluginManager.callEvent(entityCombustEvent);
+            if (!entityCombustEvent.isCancelled()) {
+                this.igniteForSeconds(entityCombustEvent.getDuration(), false);
+            }
+            // CraftBukkit end
+        }
+
+        // CraftBukkit start
+        if (thisBukkitEntity instanceof Hanging) {
+            HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+            pluginManager.callEvent(hangingEvent);
+
+            if (hangingEvent.isCancelled()) {
+                return;
+            }
+        }
+
+        if (this.fireImmune()) {
+            return;
+        }
+        if (!this.hurt(this.damageSources().lightningBolt().customEntityDamager(p_19928_), 5.0F)) {
+            return;
+        }
+        // CraftBukkit end
     }
 
     public void onAboveBubbleCol(boolean p_20313_) {
@@ -2478,7 +_,7 @@
     }
 
     protected Component getTypeName() {
-        return this.type.getDescription();
+        return this.getType().getDescription(); // Forge: Use getter to allow overriding by mods;
     }
 
     public boolean is(Entity p_20356_) {
@@ -2627,6 +_,30 @@
         return (p_343600_ || !this.isPassenger()) && this.isAlive();
     }
 
+
+    // CraftBukkit start
+    protected CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, Vec3 exitPosition, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+        org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+        Location enter = bukkitEntity.getLocation();
+        Location exit = CraftLocation.toBukkit(exitPosition, exitWorldServer.getWorld());
+
+        EntityPortalEvent event = new EntityPortalEvent(bukkitEntity, enter, exit, searchRadius);
+        event.getEntity().getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.isAlive()) {
+            return null;
+        }
+        return new CraftPortalEvent(event);
+    }
+
+    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel p_185935_, BlockPos p_185936_, boolean p_185937_, WorldBorder p_185938_) {
+        return p_185935_.getPortalForcer().findPortalAround(p_185936_, p_185937_, p_185938_);
+    }
+
+    protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel pDestination, BlockPos pFindFrom, boolean pIsToNether, WorldBorder pWorldBorder, int searchRadius, boolean canCreatePortal, int createRadius) {
+        return pDestination.getPortalForcer().findPortalAround(pFindFrom, pWorldBorder, searchRadius);
+        // CraftBukkit end
+    }
+
     public boolean canChangeDimensions(Level p_342413_, Level p_345364_) {
         return true;
     }
@@ -2685,6 +_,7 @@
         return this.stringUUID;
     }
 
+    @Deprecated // Forge: Use FluidType sensitive version
     public boolean isPushedByFluid() {
         return true;
     }
@@ -2725,9 +_,13 @@
         return this.entityData.get(DATA_CUSTOM_NAME_VISIBLE);
     }
 
-    public boolean teleportTo(
-        ServerLevel p_265257_, double p_265407_, double p_265727_, double p_265410_, Set<RelativeMovement> p_265083_, float p_265573_, float p_265094_
-    ) {
+    // CraftBukkit start
+    public boolean teleportTo(ServerLevel worldserver, double d0, double d1, double d2, Set<RelativeMovement> set, float f, float f1, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        return this.teleportTo(worldserver, d0, d1, d2, set, f, f1);
+    }
+    // CraftBukkit end
+
+    public boolean teleportTo(ServerLevel p_265257_, double p_265407_, double p_265727_, double p_265410_, Set<RelativeMovement> p_265083_, float p_265573_, float p_265094_) {
         float f = Mth.clamp(p_265094_, -90.0F, 90.0F);
         if (p_265257_ == this.level()) {
             this.moveTo(p_265407_, p_265727_, p_265410_, p_265573_, f);
@@ -2744,7 +_,11 @@
             entity.moveTo(p_265407_, p_265727_, p_265410_, p_265573_, f);
             entity.setYHeadRot(p_265573_);
             this.setRemoved(Entity.RemovalReason.CHANGED_DIMENSION);
-            p_265257_.addDuringTeleport(entity);
+            // CraftBukkit start - Don't spawn the new entity if the current entity isn't spawned
+            if (inWorld) {
+                p_265257_.addDuringTeleport(entity);
+            }
+            // CraftBukkit end
         }
 
         return true;
@@ -3069,7 +_,7 @@
         return SoundSource.NEUTRAL;
     }
 
-    protected int getFireImmuneTicks() {
+    public int getFireImmuneTicks() {
         return 1;
     }
 
@@ -3127,9 +_,17 @@
         return Mth.lerp(p_344421_, this.yRotO, this.yRot);
     }
 
+    @Deprecated // Forge: Use predicate version instead, only for vanilla Tags
     public boolean updateFluidHeightAndDoFluidPushing(TagKey<Fluid> p_204032_, double p_204033_) {
+        this.updateFluidHeightAndDoFluidPushing(com.google.common.base.Predicates.alwaysTrue());
+        if(p_204032_ == FluidTags.WATER) return this.isInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+        else if (p_204032_ == FluidTags.LAVA) return this.isInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+        else return false;
+     }
+
+     public void updateFluidHeightAndDoFluidPushing(Predicate<FluidState> shouldUpdate) {
         if (this.touchingUnloadedChunk()) {
-            return false;
+            return;
         } else {
             AABB aabb = this.getBoundingBox().deflate(0.001);
             int i = Mth.floor(aabb.minX);
@@ -3144,25 +_,28 @@
             Vec3 vec3 = Vec3.ZERO;
             int k1 = 0;
             BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+            var interimCalcs = new it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap<net.minecraftforge.fluids.FluidType, org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer>>(net.minecraftforge.fluids.FluidType.SIZE.get() - 1);
 
             for (int l1 = i; l1 < j; l1++) {
                 for (int i2 = k; i2 < l; i2++) {
                     for (int j2 = i1; j2 < j1; j2++) {
                         blockpos$mutableblockpos.set(l1, i2, j2);
                         FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                        if (fluidstate.is(p_204032_)) {
+                        net.minecraftforge.fluids.FluidType fluidType = fluidstate.getFluidType();
+                        if (!fluidType.isAir() && shouldUpdate.test(fluidstate)) {
                             double d1 = (double)((float)i2 + fluidstate.getHeight(this.level(), blockpos$mutableblockpos));
                             if (d1 >= aabb.minY) {
                                 flag1 = true;
-                                d0 = Math.max(d1 - aabb.minY, d0);
-                                if (flag) {
+                                var interim = interimCalcs.computeIfAbsent(fluidType, t -> org.apache.commons.lang3.tuple.MutableTriple.of(0.0D, Vec3.ZERO, 0));
+                                interim.setLeft(Math.max(d1 - aabb.minY, interim.getLeft()));
+                                if (this.isPushedByFluid(fluidType)) {
                                     Vec3 vec31 = fluidstate.getFlow(this.level(), blockpos$mutableblockpos);
-                                    if (d0 < 0.4) {
-                                        vec31 = vec31.scale(d0);
+                                    if (interim.getLeft() < 0.4D) {
+                                       vec31 = vec31.scale(interim.getLeft());
                                     }
 
-                                    vec3 = vec3.add(vec31);
-                                    k1++;
+                                    interim.setMiddle(interim.getMiddle().add(vec31));
+                                    interim.setRight(interim.getRight() + 1);
                                 }
                             }
                         }
@@ -3170,27 +_,28 @@
                 }
             }
 
-            if (vec3.length() > 0.0) {
-                if (k1 > 0) {
-                    vec3 = vec3.scale(1.0 / (double)k1);
+            interimCalcs.forEach((fluidType, interim) -> {
+            if (interim.getMiddle().length() > 0.0D) {
+                if (interim.getRight() > 0) {
+                    interim.setMiddle(interim.getMiddle().scale(1.0D / (double)interim.getRight()));
                 }
 
                 if (!(this instanceof Player)) {
-                    vec3 = vec3.normalize();
+                    interim.setMiddle(interim.getMiddle().normalize());
                 }
 
                 Vec3 vec32 = this.getDeltaMovement();
-                vec3 = vec3.scale(p_204033_);
+                interim.setMiddle(interim.getMiddle().scale(this.getFluidMotionScale(fluidType)));
                 double d2 = 0.003;
-                if (Math.abs(vec32.x) < 0.003 && Math.abs(vec32.z) < 0.003 && vec3.length() < 0.0045000000000000005) {
-                    vec3 = vec3.normalize().scale(0.0045000000000000005);
+                if (Math.abs(vec32.x) < 0.003 && Math.abs(vec32.z) < 0.003 && interim.getMiddle().length() < 0.0045000000000000005) {
+                    interim.setMiddle(interim.getMiddle().normalize().scale(0.0045000000000000005));
                 }
 
-                this.setDeltaMovement(this.getDeltaMovement().add(vec3));
+                this.setDeltaMovement(this.getDeltaMovement().add(interim.getMiddle()));
             }
 
-            this.fluidHeight.put(p_204032_, d0);
-            return flag1;
+            this.setFluidTypeHeight(fluidType, interim.getLeft());
+            });
         }
     }
 
@@ -3203,7 +_,10 @@
         return !this.level().hasChunksAt(i, k, j, l);
     }
 
+    @Deprecated // Forge: Use getFluidTypeHeight instead
     public double getFluidHeight(TagKey<Fluid> p_204037_) {
+        if (p_204037_ == FluidTags.WATER) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+        else if (p_204037_ == FluidTags.LAVA) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
         return this.fluidHeight.getDouble(p_204037_);
     }
 
@@ -3219,7 +_,9 @@
         return this.dimensions.height();
     }
 
+    private boolean hasExtraSpawnData = this instanceof net.minecraftforge.entity.IEntityAdditionalSpawnData;
     public Packet<ClientGamePacketListener> getAddEntityPacket(ServerEntity p_344981_) {
+        if (hasExtraSpawnData) return net.minecraftforge.common.ForgeHooks.getEntitySpawnPacket(this);
         return new ClientboundAddEntityPacket(this, p_344981_);
     }
 
@@ -3340,6 +_,11 @@
 
             this.levelCallback.onMove();
         }
+
+        // Forge - ensure target chunk is loaded.
+        if (this.isAddedToWorld() && !this.level.isClientSide && !this.isRemoved()) {
+            this.level.getChunk((int) Math.floor(p_20344_) >> 4, (int) Math.floor(p_20346_) >> 4);
+        }
     }
 
     public void checkDespawn() {
@@ -3429,6 +_,7 @@
 
     @Override
     public final void setRemoved(Entity.RemovalReason p_146876_) {
+      	CraftEventFactory.callEntityRemoveEvent(this, mohist$removeCause.getAndSet(null));
         if (this.removalReason == null) {
             this.removalReason = p_146876_;
         }
@@ -3441,7 +_,15 @@
         this.levelCallback.onRemove(p_146876_);
     }
 
-    protected void unsetRemoved() {
+   // CraftBukkit start
+   @Override
+   public final void setRemoved(Entity.RemovalReason p_146876_, EntityRemoveEvent.Cause cause) {
+      putRemoveCause(cause);
+      setRemoved(p_146876_);
+   }
+   // CraftBukkit
+
+    public void unsetRemoved() {
         this.removalReason = null;
     }
 
@@ -3493,6 +_,100 @@
         float f1 = (float)Mth.lerp(d0, (double)this.getXRot(), p_298926_);
         this.setPos(d1, d2, d3);
         this.setRot(f, f1);
+    }
+
+    private boolean canUpdate = true;
+    @Override
+    public void canUpdate(boolean value) {
+       this.canUpdate = value;
+    }
+
+    @Override
+    public boolean canUpdate() {
+       return this.canUpdate;
+    }
+
+    private java.util.Collection<ItemEntity> captureDrops = null;
+    @Override
+    public java.util.Collection<ItemEntity> captureDrops() {
+       return captureDrops;
+    }
+
+    @Override
+    public java.util.Collection<ItemEntity> captureDrops(java.util.Collection<ItemEntity> value) {
+       java.util.Collection<ItemEntity> ret = captureDrops;
+       this.captureDrops = value;
+       return ret;
+    }
+
+    private CompoundTag persistentData;
+    @Override
+    public CompoundTag getPersistentData() {
+       if (persistentData == null)
+          persistentData = new CompoundTag();
+       return persistentData;
+    }
+
+    @Override
+    public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+       return level.random.nextFloat() < fallDistance - 0.5F
+           && this instanceof LivingEntity
+           && (this instanceof Player || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(level, this))
+           && this.getBbWidth() * this.getBbWidth() * this.getBbHeight() > 0.512F;
+    }
+
+    /**
+     * Internal use for keeping track of entities that are tracked by a world, to
+     * allow guarantees that entity position changes will force a chunk load, avoiding
+     * potential issues with entity desyncing and bad chunk data.
+     */
+    private boolean isAddedToWorld;
+
+    @Override
+    public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+    @Override
+    public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+    @Override
+    public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+    @Override
+    public void revive() {
+        this.unsetRemoved();
+        this.reviveCaps();
+    }
+
+    protected Object2DoubleMap<net.minecraftforge.fluids.FluidType> forgeFluidTypeHeight = new Object2DoubleArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get());
+    private net.minecraftforge.fluids.FluidType forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
+    protected final void setFluidTypeHeight(net.minecraftforge.fluids.FluidType type, double height) {
+        this.forgeFluidTypeHeight.put(type, height);
+    }
+
+    @Override
+    public final double getFluidTypeHeight(net.minecraftforge.fluids.FluidType type) {
+        return this.forgeFluidTypeHeight.getDouble(type);
+    }
+
+    @Override
+    public final boolean isInFluidType(java.util.function.BiPredicate<net.minecraftforge.fluids.FluidType, Double> predicate, boolean forAllTypes) {
+       return forAllTypes ? this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().allMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()))
+                          : this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().anyMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()));
+    }
+
+    @Override
+    public final boolean isInFluidType() {
+       return this.forgeFluidTypeHeight.size() > 0;
+    }
+
+    @Override
+    public final net.minecraftforge.fluids.FluidType getEyeInFluidType() {
+        return forgeFluidTypeOnEyes;
+    }
+
+    @Override
+    public net.minecraftforge.fluids.FluidType getMaxHeightFluidType() {
+        return this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().max(java.util.Comparator.comparingDouble(Object2DoubleMap.Entry::getDoubleValue)).map(Object2DoubleMap.Entry::getKey).orElseGet(net.minecraftforge.common.ForgeMod.EMPTY_TYPE);
     }
 
     public RandomSource getRandom() {
