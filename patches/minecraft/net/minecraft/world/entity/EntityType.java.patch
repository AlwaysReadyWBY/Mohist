--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -5,6 +_,7 @@
 import java.util.List;
 import java.util.Optional;
 import java.util.Spliterator;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.Stream;
@@ -168,6 +_,8 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
 import org.slf4j.Logger;
 
 public class EntityType<T extends Entity> implements FeatureElement, EntityTypeTest<Entity, T> {
@@ -723,6 +_,11 @@
     private final float spawnDimensionsScale;
     private final FeatureFlagSet requiredFeatures;
 
+    private final java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier;
+    private final java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier;
+    private final java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier;
+    private final java.util.function.BiFunction<net.minecraftforge.network.packets.SpawnEntity, Level, T> customClientFactory;
+
     private static <T extends Entity> EntityType<T> register(String p_20635_, EntityType.Builder<T> p_20636_) {
         return Registry.register(BuiltInRegistries.ENTITY_TYPE, p_20635_, p_20636_.build(p_20635_));
     }
@@ -735,6 +_,10 @@
         return BuiltInRegistries.ENTITY_TYPE.getOptional(ResourceLocation.tryParse(p_20633_));
     }
 
+    public EntityType(EntityType.EntityFactory<T> p_273268_, MobCategory p_272918_, boolean p_273417_, boolean p_273389_, boolean p_273556_, boolean p_272654_, ImmutableSet<Block> p_273631_, EntityDimensions p_272946_, float p_332711_, int p_272895_, int p_273451_, FeatureFlagSet p_273518_) {
+        this(p_273268_, p_272918_, p_273417_, p_273389_, p_273556_, p_272654_, p_273631_, p_272946_, p_332711_, p_272895_, p_273451_, p_273518_, null);
+    }
+
     public EntityType(
         EntityType.EntityFactory<T> p_273268_,
         MobCategory p_272918_,
@@ -747,7 +_,8 @@
         float p_332711_,
         int p_272895_,
         int p_273451_,
-        FeatureFlagSet p_273518_
+        FeatureFlagSet p_273518_,
+        Builder builder
     ) {
         this.factory = p_273268_;
         this.category = p_272918_;
@@ -761,6 +_,10 @@
         this.clientTrackingRange = p_272895_;
         this.updateInterval = p_273451_;
         this.requiredFeatures = p_273518_;
+        this.velocityUpdateSupplier = builder == null || builder.velocityUpdateSupplier == null ? EntityType::defaultVelocitySupplier : builder.velocityUpdateSupplier;
+        this.trackingRangeSupplier = builder == null || builder.trackingRangeSupplier == null ? EntityType::defaultTrackingRangeSupplier : builder.trackingRangeSupplier;
+        this.updateIntervalSupplier = builder == null || builder.updateIntervalSupplier == null ? EntityType::defaultUpdateIntervalSupplier : builder.updateIntervalSupplier;
+        this.customClientFactory = builder == null ? null : builder.customClientFactory;
     }
 
     @Nullable
@@ -803,6 +_,13 @@
         return !customdata.isEmpty() ? p_263579_.andThen(p_326771_ -> updateCustomEntityTag(p_263571_, p_263574_, p_326771_, customdata)) : p_263579_;
     }
 
+    // Mohist start
+    private final AtomicReference<SpawnReason> spawnReasonAtomicReference = new AtomicReference<>(CreatureSpawnEvent.SpawnReason.DEFAULT);
+
+    public void spawnReason(SpawnReason reason) {
+        spawnReasonAtomicReference.set(reason);
+    }
+
     @Nullable
     public T spawn(ServerLevel p_262634_, BlockPos p_262707_, MobSpawnType p_262597_) {
         return this.spawn(p_262634_, null, p_262707_, p_262597_, false, false);
@@ -812,13 +_,22 @@
     public T spawn(ServerLevel p_262704_, @Nullable Consumer<T> p_262621_, BlockPos p_262672_, MobSpawnType p_262644_, boolean p_262690_, boolean p_262590_) {
         T t = this.create(p_262704_, p_262621_, p_262672_, p_262644_, p_262690_, p_262590_);
         if (t != null) {
-            p_262704_.addFreshEntityWithPassengers(t);
+            p_262704_.addFreshEntityWithPassengers(t, spawnReasonAtomicReference.getAndSet(CreatureSpawnEvent.SpawnReason.DEFAULT));
+            return !t.isRemoved() ? t : null; // Don't return an entity when CreatureSpawnEvent is canceled
+            // CraftBukkit end
         }
 
         return t;
     }
 
     @Nullable
+    public T spawn(ServerLevel pLevel, @Nullable Consumer<T> pConsumer, BlockPos pPos, MobSpawnType pSpawnType, boolean pShouldOffsetY, boolean pShouldOffsetYMore, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
+        spawnReasonAtomicReference.set(spawnReason);
+        return spawn(pLevel, pConsumer, pPos, pSpawnType, pShouldOffsetY, pShouldOffsetYMore);
+    }
+    // Mohist end
+
+    @Nullable
     public T create(ServerLevel p_262637_, @Nullable Consumer<T> p_262629_, BlockPos p_262595_, MobSpawnType p_262666_, boolean p_262685_, boolean p_262588_) {
         T t = this.create(p_262637_);
         if (t == null) {
@@ -1037,14 +_,26 @@
     }
 
     public int clientTrackingRange() {
+        return trackingRangeSupplier.applyAsInt(this);
+    }
+
+    private int defaultTrackingRangeSupplier() {
         return this.clientTrackingRange;
     }
 
     public int updateInterval() {
+        return updateIntervalSupplier.applyAsInt(this);
+    }
+
+    private int defaultUpdateIntervalSupplier() {
         return this.updateInterval;
     }
 
     public boolean trackDeltas() {
+        return velocityUpdateSupplier.test(this);
+    }
+
+    private boolean defaultVelocitySupplier() {
         return this != PLAYER
             && this != LLAMA_SPIT
             && this != WITHER
@@ -1080,6 +_,12 @@
         return this.builtInRegistryHolder;
     }
 
+    public T customClientSpawn(net.minecraftforge.network.packets.SpawnEntity packet, Level world) {
+        if (customClientFactory == null) return this.create(world);
+        return customClientFactory.apply(packet, world);
+    }
+    public Stream<TagKey<EntityType<?>>> getTags() {return this.builtInRegistryHolder().tags();}
+
     public static class Builder<T extends Entity> {
         private final EntityType.EntityFactory<T> factory;
         private final MobCategory category;
@@ -1094,6 +_,10 @@
         private float spawnDimensionsScale = 1.0F;
         private EntityAttachments.Builder attachments = EntityAttachments.builder();
         private FeatureFlagSet requiredFeatures = FeatureFlags.VANILLA_SET;
+        private java.util.function.Predicate<EntityType<?>> velocityUpdateSupplier = EntityType::defaultVelocitySupplier;
+        private java.util.function.ToIntFunction<EntityType<?>> trackingRangeSupplier = EntityType::defaultTrackingRangeSupplier;
+        private java.util.function.ToIntFunction<EntityType<?>> updateIntervalSupplier = EntityType::defaultUpdateIntervalSupplier;
+        private java.util.function.BiFunction<net.minecraftforge.network.packets.SpawnEntity, Level, T> customClientFactory;
 
         private Builder(EntityType.EntityFactory<T> p_20696_, MobCategory p_20697_) {
             this.factory = p_20696_;
@@ -1202,6 +_,30 @@
             return this;
         }
 
+        public EntityType.Builder<T> setUpdateInterval(int interval) {
+            this.updateIntervalSupplier = t->interval;
+            return this;
+        }
+
+        public EntityType.Builder<T> setTrackingRange(int range) {
+            this.trackingRangeSupplier = t->range;
+            return this;
+        }
+
+        public EntityType.Builder<T> setShouldReceiveVelocityUpdates(boolean value) {
+            this.velocityUpdateSupplier = t->value;
+            return this;
+        }
+
+        /**
+         * By default, entities are spawned clientside via {@link EntityType#create(Level)}}.
+         * If you need finer control over the spawning process, use this to get read access to the spawn packet.
+         */
+        public EntityType.Builder<T> setCustomClientFactory(java.util.function.BiFunction<net.minecraftforge.network.packets.SpawnEntity, Level, T> customClientFactory) {
+            this.customClientFactory = customClientFactory;
+            return this;
+        }
+
         public EntityType<T> build(String p_20713_) {
             if (this.serialize) {
                 Util.fetchChoiceType(References.ENTITY_TREE, p_20713_);
@@ -1219,7 +_,8 @@
                 this.spawnDimensionsScale,
                 this.clientTrackingRange,
                 this.updateInterval,
-                this.requiredFeatures
+                this.requiredFeatures,
+                this
             );
         }
     }
