--- a/net/minecraft/world/entity/decoration/HangingEntity.java
+++ b/net/minecraft/world/entity/decoration/HangingEntity.java
@@ -7,6 +_,7 @@
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.tags.DamageTypeTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
@@ -24,6 +_,9 @@
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.entity.Hanging;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.hanging.HangingBreakEvent;
 import org.slf4j.Logger;
 
 public abstract class HangingEntity extends Entity {
@@ -47,7 +_,7 @@
    protected void defineSynchedData() {
    }
 
-   protected void setDirection(Direction p_31728_) {
+   public void setDirection(Direction p_31728_) {
       Validate.notNull(p_31728_);
       Validate.isTrue(p_31728_.getAxis().isHorizontal());
       this.direction = p_31728_;
@@ -87,16 +_,69 @@
       }
    }
 
-   private double offs(int p_31710_) {
+   // CraftBukkit start - break out BB calc into own method
+   public static AABB calculateBoundingBox(Entity entity, BlockPos pos, Direction direction, int width, int height) {
+      double d0 = (double) pos.getX() + 0.5D;
+      double d1 = (double) pos.getY() + 0.5D;
+      double d2 = (double) pos.getZ() + 0.5D;
+      double d3 = 0.46875D;
+      double d4 = offs(width);
+      double d5 = offs(height);
+      d0 -= (double) direction.getStepX() * 0.46875D;
+      d2 -= (double) direction.getStepZ() * 0.46875D;
+      d1 += d5;
+      Direction enumdirection = direction.getCounterClockWise();
+      d0 += d4 * (double)enumdirection.getStepX();
+      d2 += d4 * (double)enumdirection.getStepZ();
+      if(entity != null)
+      {
+         entity.setPosRaw( d0, d1, d2 );
+      }
+      double d6 = (double)width;
+      double d7 = (double)height;
+      double d8 = (double)width;
+      if (direction.getAxis() == Direction.Axis.Z) {
+         d8 = 1.0D;
+      } else {
+         d6 = 1.0D;
+      }
+
+      d6 /= 32.0D;
+      d7 /= 32.0D;
+      d8 /= 32.0D;
+
+      return new AABB(d0 - d6, d1 - d7, d2 - d8, d0 + d6, d1 + d7, d2 + d8);
+   }
+   // CraftBukkit end
+
+   private static double offs(int p_31710_) {
       return p_31710_ % 32 == 0 ? 0.5D : 0.0D;
    }
 
    public void tick() {
       if (!this.level().isClientSide) {
          this.checkBelowWorld();
-         if (this.checkInterval++ == 100) {
+         if (this.checkInterval++ == this.level.spigotConfig.hangingTickFrequency) { // Spigot
             this.checkInterval = 0;
             if (!this.isRemoved() && !this.survives()) {
+               // CraftBukkit start - fire break events
+               BlockState material = this.level.getBlockState(this.blockPosition());
+               HangingBreakEvent.RemoveCause cause;
+
+               if (!material.isAir()) {
+                  // TODO: This feels insufficient to catch 100% of suffocation cases
+                  cause = HangingBreakEvent.RemoveCause.OBSTRUCTION;
+               } else {
+                  cause = HangingBreakEvent.RemoveCause.PHYSICS;
+               }
+
+               HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), cause);
+               this.level.getCraftServer().getPluginManager().callEvent(event);
+
+               if (this.isRemoved() || event.isCancelled()) {
+                  return;
+               }
+               // CraftBukkit end
                this.discard();
                this.dropItem((Entity)null);
             }
@@ -121,6 +_,8 @@
                int j1 = (j - 1) / -2;
                blockpos$mutableblockpos.set(blockpos).move(direction, k + i1).move(Direction.UP, l + j1);
                BlockState blockstate = this.level().getBlockState(blockpos$mutableblockpos);
+               if (net.minecraft.world.level.block.Block.canSupportCenter(this.level(), blockpos$mutableblockpos, this.direction))
+                  continue;
                if (!blockstate.isSolid() && !DiodeBlock.isDiode(blockstate)) {
                   return false;
                }
@@ -151,7 +_,23 @@
       if (this.isInvulnerableTo(p_31715_)) {
          return false;
       } else {
-         if (!this.isRemoved() && !this.level().isClientSide) {
+         if (!this.isRemoved() && !this.level.isClientSide) {
+            // CraftBukkit start - fire break events
+            Entity damager = (p_31715_.isIndirect()) ? p_31715_.getEntity() : p_31715_.getDirectEntity();
+            HangingBreakEvent event;
+            if (damager != null) {
+               event = new HangingBreakByEntityEvent((Hanging) this.getBukkitEntity(), damager.getBukkitEntity(), p_31715_.is(DamageTypeTags.IS_EXPLOSION) ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.ENTITY);
+            } else {
+               event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), p_31715_.is(DamageTypeTags.IS_EXPLOSION) ? HangingBreakEvent.RemoveCause.EXPLOSION : HangingBreakEvent.RemoveCause.DEFAULT);
+            }
+
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (this.isRemoved() || event.isCancelled()) {
+               return true;
+            }
+            // CraftBukkit end
+
             this.kill();
             this.markHurt();
             this.dropItem(p_31715_.getEntity());
@@ -163,6 +_,17 @@
 
    public void move(MoverType p_31719_, Vec3 p_31720_) {
       if (!this.level().isClientSide && !this.isRemoved() && p_31720_.lengthSqr() > 0.0D) {
+         if (this.isRemoved()) return; // CraftBukkit
+
+         // CraftBukkit start - fire break events
+         // TODO - Does this need its own cause? Seems to only be triggered by pistons
+         HangingBreakEvent event = new HangingBreakEvent((Hanging) this.getBukkitEntity(), HangingBreakEvent.RemoveCause.PHYSICS);
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+
+         if (this.isRemoved() || event.isCancelled()) {
+            return;
+         }
+         // CraftBukkit end
          this.kill();
          this.dropItem((Entity)null);
       }
@@ -170,12 +_,20 @@
    }
 
    public void push(double p_31744_, double p_31745_, double p_31746_) {
-      if (!this.level().isClientSide && !this.isRemoved() && p_31744_ * p_31744_ + p_31745_ * p_31745_ + p_31746_ * p_31746_ > 0.0D) {
+      if (false && !this.level().isClientSide && !this.isRemoved() && p_31744_ * p_31744_ + p_31745_ * p_31745_ + p_31746_ * p_31746_ > 0.0D) { // CraftBukkit - not needed
          this.kill();
          this.dropItem((Entity)null);
       }
 
    }
+
+   @Override
+   public void addAdditionalSaveData(CompoundTag nbttagcompound, boolean includeAll) {
+      if (includeAll) {
+         addAdditionalSaveData(nbttagcompound);
+      }
+   }
+   // CraftBukkit end
 
    public void addAdditionalSaveData(CompoundTag p_31736_) {
       BlockPos blockpos = this.getPos();
@@ -187,7 +_,7 @@
    public void readAdditionalSaveData(CompoundTag p_31730_) {
       BlockPos blockpos = new BlockPos(p_31730_.getInt("TileX"), p_31730_.getInt("TileY"), p_31730_.getInt("TileZ"));
       if (!blockpos.closerThan(this.blockPosition(), 16.0D)) {
-         LOGGER.error("Hanging entity at invalid position: {}", (Object)blockpos);
+         LOGGER.debug("Hanging entity at invalid position: {}", (Object)blockpos);
       } else {
          this.pos = blockpos;
       }
