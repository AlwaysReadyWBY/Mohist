--- a/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -1,7 +_,13 @@
 package net.minecraft.world.entity.decoration;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
 import java.util.function.Predicate;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+
+import com.google.common.collect.Lists;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Rotations;
@@ -28,6 +_,7 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.item.ItemStack;
@@ -41,6 +_,10 @@
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.v1_20_R4.CraftEquipmentSlot;
+import org.bukkit.craftbukkit.v1_20_R4.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_20_R4.inventory.CraftItemStack;
+import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
 
 public class ArmorStand extends LivingEntity {
    public static final int WOBBLE_TIME = 5;
@@ -71,7 +_,7 @@
    public static final EntityDataAccessor<Rotations> DATA_LEFT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
    public static final EntityDataAccessor<Rotations> DATA_RIGHT_LEG_POSE = SynchedEntityData.defineId(ArmorStand.class, EntityDataSerializers.ROTATIONS);
    private static final Predicate<Entity> RIDABLE_MINECARTS = (p_31582_) -> {
-      return p_31582_ instanceof AbstractMinecart && ((AbstractMinecart)p_31582_).getMinecartType() == AbstractMinecart.Type.RIDEABLE;
+      return p_31582_ instanceof AbstractMinecart && ((AbstractMinecart)p_31582_).canBeRidden();
    };
    private final NonNullList<ItemStack> handItems = NonNullList.withSize(2, ItemStack.EMPTY);
    private final NonNullList<ItemStack> armorItems = NonNullList.withSize(4, ItemStack.EMPTY);
@@ -95,6 +_,13 @@
       this.setPos(p_31557_, p_31558_, p_31559_);
    }
 
+   // CraftBukkit start - SPIGOT-3607, SPIGOT-3637
+   @Override
+   public float getBukkitYaw() {
+      return this.getYRot();
+   }
+   // CraftBukkit end
+
    public void refreshDimensions() {
       double d0 = this.getX();
       double d1 = this.getY();
@@ -153,6 +_,19 @@
 
    }
 
+   public void setItemSlot(EquipmentSlot pSlot, ItemStack pStack, boolean silent) {
+      // CraftBukkit end
+      this.verifyEquippedItem(pStack);
+      switch(pSlot.getType()) {
+         case HAND:
+            this.handItems.set(pSlot.getIndex(), pStack);
+            break;
+         case ARMOR:
+            this.armorItems.set(pSlot.getIndex(), pStack);
+      }
+
+   }
+
    public boolean canTakeItem(ItemStack p_31638_) {
       EquipmentSlot equipmentslot = Mob.getEquipmentSlotForItem(p_31638_);
       return this.getItemBySlot(equipmentslot).isEmpty() && !this.isDisabled(equipmentslot);
@@ -347,6 +_,22 @@
 
    private boolean swapItem(Player p_31589_, EquipmentSlot p_31590_, ItemStack p_31591_, InteractionHand p_31592_) {
       ItemStack itemstack = this.getItemBySlot(p_31590_);
+      // CraftBukkit start
+      org.bukkit.inventory.ItemStack armorStandItem = CraftItemStack.asCraftMirror(p_31591_);
+      org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack);
+
+      org.bukkit.entity.Player player = (org.bukkit.entity.Player) p_31589_.getBukkitEntity();
+      org.bukkit.entity.ArmorStand self = (org.bukkit.entity.ArmorStand) this.getBukkitEntity();
+
+      org.bukkit.inventory.EquipmentSlot slot = CraftEquipmentSlot.getSlot(p_31590_);
+      org.bukkit.inventory.EquipmentSlot hand = CraftEquipmentSlot.getHand(p_31592_);
+      PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player,self,playerHeldItem,armorStandItem,slot,hand);
+      this.level.getCraftServer().getPluginManager().callEvent(armorStandManipulateEvent);
+
+      if (armorStandManipulateEvent.isCancelled()) {
+         return true;
+      }
+      // CraftBukkit end
       if (!itemstack.isEmpty() && (this.disabledSlots & 1 << p_31590_.getFilterFlag() + 8) != 0) {
          return false;
       } else if (itemstack.isEmpty() && (this.disabledSlots & 1 << p_31590_.getFilterFlag() + 16) != 0) {
@@ -371,9 +_,19 @@
    public boolean hurt(DamageSource p_31579_, float p_31580_) {
       if (!this.level().isClientSide && !this.isRemoved()) {
          if (p_31579_.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+            // CraftBukkit start
+            if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_31579_, p_31580_)) {
+               return false;
+            }
+            // CraftBukkit end
             this.kill();
             return false;
-         } else if (!this.isInvulnerableTo(p_31579_) && !this.invisible && !this.isMarker()) {
+         } else if (!this.isInvulnerableTo(p_31579_) && (true || !this.invisible) && !this.isMarker()) { // CraftBukkit
+            // CraftBukkit start
+            if (CraftEventFactory.handleNonLivingEntityDamageEvent(this, p_31579_, p_31580_, true, this.invisible)) {
+               return false;
+            }
+            // CraftBukkit end
             if (p_31579_.is(DamageTypeTags.IS_EXPLOSION)) {
                this.brokenByAnything(p_31579_);
                this.kill();
@@ -417,7 +_,7 @@
                      } else {
                         this.brokenByPlayer(p_31579_);
                         this.showBreakingParticles();
-                        this.kill();
+                        this.discard(); // CraftBukkit - SPIGOT-4890: remain as this.discard() since above damagesource method will call death event
                      }
 
                      return true;
@@ -583,7 +_,24 @@
       return this.isSmall();
    }
 
+   // CraftBukkit start
+   @Override
+   public boolean shouldDropExperience() {
+      return true; // MC-157395, SPIGOT-5193 even baby (small) armor stands should drop
+   }
+   // CraftBukkit end
+
    public void kill() {
+      Collection<ItemEntity> captureDrops = this.captureDrops(null);
+      List<org.bukkit.inventory.ItemStack> drops;
+      if (captureDrops == null) {
+         drops = new ArrayList<>();
+      } else if (captureDrops instanceof List) {
+         drops = Lists.transform((List<ItemEntity>) captureDrops, e -> CraftItemStack.asCraftMirror(e.getItem()));
+      } else {
+         drops = captureDrops.stream().map(ItemEntity::getItem).map(CraftItemStack::asCraftMirror).collect(Collectors.toList());
+      }
+      CraftEventFactory.callEntityDeathEvent(this, drops); // CraftBukkit - call event
       this.remove(Entity.RemovalReason.KILLED);
       this.gameEvent(GameEvent.ENTITY_DIE);
    }
@@ -600,7 +_,7 @@
       return this.isMarker();
    }
 
-   private void setSmall(boolean p_31604_) {
+   public void setSmall(boolean p_31604_) {
       this.entityData.set(DATA_CLIENT_FLAGS, this.setBit(this.entityData.get(DATA_CLIENT_FLAGS), 1, p_31604_));
    }
 
@@ -624,7 +_,7 @@
       return (this.entityData.get(DATA_CLIENT_FLAGS) & 8) != 0;
    }
 
-   private void setMarker(boolean p_31682_) {
+   public void setMarker(boolean p_31682_) {
       this.entityData.set(DATA_CLIENT_FLAGS, this.setBit(this.entityData.get(DATA_CLIENT_FLAGS), 16, p_31682_));
    }
 
