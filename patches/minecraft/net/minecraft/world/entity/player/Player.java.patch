--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.entity.player;
 
+import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Lists;
@@ -11,6 +_,8 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.OptionalInt;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -24,11 +_,9 @@
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.NbtUtils;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.chat.ClickEvent;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.MutableComponent;
-import net.minecraft.network.chat.Style;
 import net.minecraft.network.protocol.game.ClientboundSetEntityMotionPacket;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
@@ -64,6 +_,7 @@
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.HumanoidArm;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SlotAccess;
@@ -99,6 +_,9 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.BedBlock;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import net.minecraft.world.level.block.entity.SignBlockEntity;
@@ -110,10 +_,24 @@
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
-import net.minecraft.world.scores.Team;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.event.ForgeEventFactory;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.CraftVector;
+import org.bukkit.entity.Item;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityExhaustionEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.player.PlayerDropItemEvent;
+import org.bukkit.event.player.PlayerVelocityEvent;
 import org.slf4j.Logger;
 
-public abstract class Player extends LivingEntity {
+public abstract class Player extends LivingEntity implements net.minecraftforge.common.extensions.IForgePlayer {
+   public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final HumanoidArm DEFAULT_MAIN_HAND = HumanoidArm.RIGHT;
     public static final int DEFAULT_MODEL_CUSTOMIZATION = 0;
@@ -154,10 +_,10 @@
     protected static final EntityDataAccessor<CompoundTag> DATA_SHOULDER_RIGHT = SynchedEntityData.defineId(Player.class, EntityDataSerializers.COMPOUND_TAG);
     private long timeEntitySatOnShoulder;
     final Inventory inventory = new Inventory(this);
-    protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer();
-    public final InventoryMenu inventoryMenu;
-    public AbstractContainerMenu containerMenu;
-    protected FoodData foodData = new FoodData();
+   	protected PlayerEnderChestContainer enderChestInventory = new PlayerEnderChestContainer(this); // CraftBukkit - add "this" to constructor
+   	public final InventoryMenu inventoryMenu;
+   	public AbstractContainerMenu containerMenu;
+   	protected FoodData foodData = new FoodData(this); // CraftBukkit - add "this" to constructor
     protected int jumpTriggerTime;
     public float oBob;
     public float bob;
@@ -168,13 +_,13 @@
     public double xCloak;
     public double yCloak;
     public double zCloak;
-    public int sleepCounter;
+   	public int sleepCounter;
     protected boolean wasUnderwater;
     private final Abilities abilities = new Abilities();
     public int experienceLevel;
     public int totalExperience;
     public float experienceProgress;
-    protected int enchantmentSeed;
+   	public int enchantmentSeed;
     protected final float defaultFlySpeed = 0.02F;
     private int lastLevelUpTime;
     private final GameProfile gameProfile;
@@ -189,8 +_,21 @@
     public Vec3 currentImpulseImpactPos;
     @Nullable
     public Entity currentExplosionCause;
-    private boolean ignoreFallDamageFromCurrentImpulse;
+    public boolean ignoreFallDamageFromCurrentImpulse;
     private int currentImpulseContextResetGraceTime;
+    private final java.util.Collection<MutableComponent> prefixes = new java.util.LinkedList<>();
+    private final java.util.Collection<MutableComponent> suffixes = new java.util.LinkedList<>();
+    @Nullable private Pose forcedPose;
+
+   // CraftBukkit start
+   public boolean fauxSleeping;
+   public int oldLevel = -1;
+
+   @Override
+   public CraftHumanEntity getBukkitEntity() {
+      return (CraftHumanEntity) super.getBukkitEntity();
+   }
+   // CraftBukkit end
 
     public Player(Level p_250508_, BlockPos p_250289_, float p_251702_, GameProfile p_252153_) {
         super(EntityType.PLAYER, p_250508_);
@@ -223,11 +_,12 @@
             .add(Attributes.LUCK)
             .add(Attributes.BLOCK_INTERACTION_RANGE, 4.5)
             .add(Attributes.ENTITY_INTERACTION_RANGE, 3.0)
-            .add(Attributes.BLOCK_BREAK_SPEED)
             .add(Attributes.SUBMERGED_MINING_SPEED)
             .add(Attributes.SNEAKING_SPEED)
             .add(Attributes.MINING_EFFICIENCY)
-            .add(Attributes.SWEEPING_DAMAGE_RATIO);
+            .add(Attributes.SWEEPING_DAMAGE_RATIO)
+            .add(Attributes.BLOCK_BREAK_SPEED)
+            .add(Attributes.ATTACK_KNOCKBACK);
     }
 
     @Override
@@ -243,6 +_,7 @@
 
     @Override
     public void tick() {
+        net.minecraftforge.event.ForgeEventFactory.onPlayerPreTick(this);
         this.noPhysics = this.isSpectator();
         if (this.isSpectator()) {
             this.setOnGround(false);
@@ -258,7 +_,7 @@
                 this.sleepCounter = 100;
             }
 
-            if (!this.level().isClientSide && this.level().isDay()) {
+            if (!this.level().isClientSide && !net.minecraftforge.event.ForgeEventFactory.onSleepingTimeCheck(this, getSleepingPos())) {
                 this.stopSleepInBed(false, true);
             }
         } else if (this.sleepCounter > 0) {
@@ -316,6 +_,7 @@
         if (this.currentImpulseContextResetGraceTime > 0) {
             this.currentImpulseContextResetGraceTime--;
         }
+        net.minecraftforge.event.ForgeEventFactory.onPlayerPostTick(this);
     }
 
     @Override
@@ -343,6 +_,7 @@
     private void turtleHelmetTick() {
         ItemStack itemstack = this.getItemBySlot(EquipmentSlot.HEAD);
         if (itemstack.is(Items.TURTLE_HELMET) && !this.isEyeInFluid(FluidTags.WATER)) {
+            this.addEffectCause(EntityPotionEffectEvent.Cause.TURTLE_HELMET);
             this.addEffect(new MobEffectInstance(MobEffects.WATER_BREATHING, 200, 0, false, false, true));
         }
     }
@@ -395,6 +_,10 @@
     }
 
     protected void updatePlayerPose() {
+        if (forcedPose != null) {
+            this.setPose(forcedPose);
+            return;
+        }
         if (this.canPlayerFitWithinBlocksAndEntitiesWhen(Pose.SWIMMING)) {
             Pose pose;
             if (this.isFallFlying()) {
@@ -462,7 +_,7 @@
     }
 
     @Override
-    protected int getFireImmuneTicks() {
+    public int getFireImmuneTicks() {
         return 20;
     }
 
@@ -490,8 +_,14 @@
     public void rideTick() {
         if (!this.level().isClientSide && this.wantsToStopRiding() && this.isPassenger()) {
             this.stopRiding();
-            this.setShiftKeyDown(false);
-        } else {
+            // CraftBukkit start - SPIGOT-7316: no longer passenger, dismount and return
+            if (!this.isPassenger()) {
+                this.setShiftKeyDown(false);
+                return;
+            }
+        }
+        {
+            // CraftBukkit end
             super.rideTick();
             this.oBob = this.bob;
             this.bob = 0.0F;
@@ -513,6 +_,8 @@
 
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.level().getGameRules().getBoolean(GameRules.RULE_NATURAL_REGENERATION)) {
             if (this.getHealth() < this.getMaxHealth() && this.tickCount % 20 == 0) {
+                // CraftBukkit - added regain reason of "REGEN" for filtering purposes.
+                this.heal$regainReason(EntityRegainHealthEvent.RegainReason.REGEN);
                 this.heal(1.0F);
             }
 
@@ -628,6 +_,7 @@
 
     @Override
     public void die(DamageSource p_36152_) {
+        if (net.minecraftforge.event.ForgeEventFactory.onLivingDeath(this, p_36152_)) return;
         super.die(p_36152_);
         this.reapplyPosition();
         if (!this.isSpectator() && this.level() instanceof ServerLevel serverlevel) {
@@ -682,8 +_,17 @@
 
     @Nullable
     public ItemEntity drop(ItemStack p_36177_, boolean p_36178_) {
-        return this.drop(p_36177_, false, p_36178_);
-    }
+        return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, p_36177_, p_36178_);
+    }
+
+    // Mohist start
+    public AtomicBoolean callEventA = new AtomicBoolean(true);
+    @Nullable
+    public ItemEntity drop(ItemStack pDroppedItem, boolean pDropAround, boolean pIncludeThrowerName, boolean callEven) {
+        callEventA.set(callEven);
+        return drop(pDroppedItem, pDropAround, pIncludeThrowerName);
+    }
+    // Mohist end
 
     @Nullable
     public ItemEntity drop(ItemStack p_36179_, boolean p_36180_, boolean p_36181_) {
@@ -720,11 +_,43 @@
                 );
             }
 
+            // CraftBukkit start - fire PlayerDropItemEvent
+            if (!callEventA.getAndSet(true)) { // SPIGOT-2942: Add boolean to call event
+                return itementity;
+            }
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
+            Item drop = (Item) itementity.getBukkitEntity();
+
+            PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                org.bukkit.inventory.ItemStack cur = player.getInventory().getItemInHand();
+                if (p_36181_ && (cur == null || cur.getAmount() == 0)) {
+                    // The complete stack was dropped
+                    player.getInventory().setItemInHand(drop.getItemStack());
+                } else if (p_36181_ && cur.isSimilar(drop.getItemStack()) && cur.getAmount() < cur.getMaxStackSize() && drop.getItemStack().getAmount() == 1) {
+                    // Only one item is dropped
+                    cur.setAmount(cur.getAmount() + 1);
+                    player.getInventory().setItemInHand(cur);
+                } else {
+                    // Fallback
+                    player.getInventory().addItem(drop.getItemStack());
+                }
+                return null;
+            }
+            // CraftBukkit end
+
             return itementity;
         }
     }
 
+    /** @deprecated Use {@link #getDestroySpeed(BlockState,BlockPos) */
     public float getDestroySpeed(BlockState p_36282_) {
+        return getDestroySpeed(p_36282_, null);
+    }
+
+    public float getDestroySpeed(BlockState p_36282_, @Nullable BlockPos pos) {
         float f = this.inventory.getDestroySpeed(p_36282_);
         if (f > 1.0F) {
             f += (float)this.getAttributeValue(Attributes.MINING_EFFICIENCY);
@@ -752,11 +_,14 @@
             f /= 5.0F;
         }
 
+        f = net.minecraftforge.event.ForgeEventFactory.getBreakSpeed(this, p_36282_, f, pos);
+
         return f;
     }
 
     public boolean hasCorrectToolForDrops(BlockState p_36299_) {
-        return !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_36299_);
+        var vanilla = !p_36299_.requiresCorrectToolForDrops() || this.inventory.getSelected().isCorrectToolForDrops(p_36299_);
+        return net.minecraftforge.event.ForgeEventFactory.doPlayerHarvestCheck(this, p_36299_, vanilla);
     }
 
     @Override
@@ -857,6 +_,7 @@
 
     @Override
     public boolean hurt(DamageSource p_36154_, float p_36155_) {
+        if (!net.minecraftforge.common.ForgeHooks.onPlayerAttack(this, p_36154_, p_36155_)) return false;
         if (this.isInvulnerableTo(p_36154_)) {
             return false;
         } else if (this.abilities.invulnerable && !p_36154_.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
@@ -867,12 +_,12 @@
                 return false;
             } else {
                 if (!this.level().isClientSide) {
-                    this.removeEntitiesOnShoulder();
+                    // this.removeEntitiesOnShoulder(); // CraftBukkit - moved down
                 }
 
                 if (p_36154_.scalesWithDifficulty()) {
                     if (this.level().getDifficulty() == Difficulty.PEACEFUL) {
-                        p_36155_ = 0.0F;
+                        return false; // CraftBukkit - f = 0.0f -> return false
                     }
 
                     if (this.level().getDifficulty() == Difficulty.EASY) {
@@ -884,7 +_,13 @@
                     }
                 }
 
-                return p_36155_ == 0.0F ? false : super.hurt(p_36154_, p_36155_);
+                // CraftBukkit start - Don't filter out 0 damage
+                boolean damaged = super.hurt(p_36154_, p_36155_);
+                if (damaged) {
+                    this.removeEntitiesOnShoulder();
+                }
+                return damaged;
+                // CraftBukkit end
             }
         }
     }
@@ -892,7 +_,7 @@
     @Override
     protected void blockUsingShield(LivingEntity p_36295_) {
         super.blockUsingShield(p_36295_);
-        if (p_36295_.canDisableShield()) {
+        if (p_36295_.getMainHandItem().canDisableShield(this.useItem, this, p_36295_)) {
             this.disableShield();
         }
     }
@@ -903,13 +_,29 @@
     }
 
     public boolean canHarmPlayer(Player p_36169_) {
-        Team team = this.getTeam();
-        Team team1 = p_36169_.getTeam();
-        if (team == null) {
-            return true;
+        // CraftBukkit start - Change to check OTHER player's scoreboard team according to API
+        // To summarize this method's logic, it's "Can parameter hurt this"
+        org.bukkit.scoreboard.Team team;
+        if (p_36169_ instanceof ServerPlayer) {
+            ServerPlayer thatPlayer = (ServerPlayer) p_36169_;
+            team = thatPlayer.getBukkitEntity().getScoreboard().getPlayerTeam(thatPlayer.getBukkitEntity());
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
         } else {
-            return !team.isAlliedTo(team1) ? true : team.isAllowFriendlyFire();
-        }
+            // This should never be called, but is implemented anyway
+            org.bukkit.OfflinePlayer thisPlayer = p_36169_.level().getCraftServer().getOfflinePlayer(p_36169_.getScoreboardName());
+            team = p_36169_.level().getCraftServer().getScoreboardManager().getMainScoreboard().getPlayerTeam(thisPlayer);
+            if (team == null || team.allowFriendlyFire()) {
+                return true;
+            }
+        }
+
+        if (this instanceof ServerPlayer) {
+            return !team.hasPlayer(((ServerPlayer) this).getBukkitEntity());
+        }
+        return !team.hasPlayer(this.level().getCraftServer().getOfflinePlayer(this.getScoreboardName()));
+        // CraftBukkit end
     }
 
     @Override
@@ -924,7 +_,7 @@
 
     @Override
     protected void hurtCurrentlyUsedShield(float p_36383_) {
-        if (this.useItem.is(Items.SHIELD)) {
+        if (this.useItem.canPerformAction(net.minecraftforge.common.ToolActions.SHIELD_BLOCK)) {
             if (!this.level().isClientSide) {
                 this.awardStat(Stats.ITEM_USED.get(this.useItem.getItem()));
             }
@@ -947,30 +_,33 @@
         }
     }
 
-    @Override
-    protected void actuallyHurt(DamageSource p_36312_, float p_36313_) {
-        if (!this.isInvulnerableTo(p_36312_)) {
-            p_36313_ = this.getDamageAfterArmorAbsorb(p_36312_, p_36313_);
-            p_36313_ = this.getDamageAfterMagicAbsorb(p_36312_, p_36313_);
-            float f1 = Math.max(p_36313_ - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_36313_ - f1));
-            float f = p_36313_ - f1;
-            if (f > 0.0F && f < 3.4028235E37F) {
-                this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
-            }
-
-            if (f1 != 0.0F) {
-                this.causeFoodExhaustion(p_36312_.getFoodExhaustion());
-                this.getCombatTracker().recordDamage(p_36312_, f1);
-                this.setHealth(this.getHealth() - f1);
-                if (f1 < 3.4028235E37F) {
-                    this.awardStat(Stats.DAMAGE_TAKEN, Math.round(f1 * 10.0F));
-                }
-
-                this.gameEvent(GameEvent.ENTITY_DAMAGE);
-            }
-        }
-    }
+   protected boolean damageEntity0(DamageSource damagesource, float f) { // void -> boolean
+      return super.damageEntity0(damagesource, f);
+   }
+
+   protected void actuallyHurt(DamageSource p_36312_, float p_36313_) {
+       if (!this.isInvulnerableTo(p_36312_)) {
+           p_36313_ = this.getDamageAfterArmorAbsorb(p_36312_, p_36313_);
+           p_36313_ = this.getDamageAfterMagicAbsorb(p_36312_, p_36313_);
+           float f1 = Math.max(p_36313_ - this.getAbsorptionAmount(), 0.0F);
+           this.setAbsorptionAmount(this.getAbsorptionAmount() - (p_36313_ - f1));
+           float f = p_36313_ - f1;
+           if (f > 0.0F && f < 3.4028235E37F) {
+               this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f * 10.0F));
+           }
+
+           if (f1 != 0.0F) {
+               this.causeFoodExhaustion(p_36312_.getFoodExhaustion());
+               this.getCombatTracker().recordDamage(p_36312_, f1);
+               this.setHealth(this.getHealth() - f1);
+               if (f1 < 3.4028235E37F) {
+                   this.awardStat(Stats.DAMAGE_TAKEN, Math.round(f1 * 10.0F));
+               }
+
+               this.gameEvent(GameEvent.ENTITY_DAMAGE);
+           }
+       }
+   }
 
     public boolean isTextFilteringEnabled() {
         return false;
@@ -1012,6 +_,10 @@
 
             return InteractionResult.PASS;
         } else {
+            var event = net.minecraftforge.event.ForgeEventFactory.onEntityInteract(this, p_36158_, p_36159_);
+            if (event.isCanceled()) {
+                return event.getCancellationResult();
+            }
             ItemStack itemstack = this.getItemInHand(p_36159_);
             ItemStack itemstack1 = itemstack.copy();
             InteractionResult interactionresult = p_36158_.interact(this, p_36159_);
@@ -1020,6 +_,10 @@
                     itemstack.setCount(itemstack1.getCount());
                 }
 
+                if (!this.abilities.instabuild && itemstack.isEmpty()) {
+                    net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, getSlotForHand(p_36159_));
+                }
+
                 return interactionresult;
             } else {
                 if (!itemstack.isEmpty() && p_36158_ instanceof LivingEntity) {
@@ -1031,6 +_,7 @@
                     if (interactionresult1.consumesAction()) {
                         this.level().gameEvent(GameEvent.ENTITY_INTERACT, p_36158_.position(), GameEvent.Context.of(this));
                         if (itemstack.isEmpty() && !this.abilities.instabuild) {
+                            net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this, itemstack1, getSlotForHand(p_36159_));
                             this.setItemInHand(p_36159_, ItemStack.EMPTY);
                         }
 
@@ -1130,6 +_,7 @@
     }
 
     public void attack(Entity p_36347_) {
+        if (!net.minecraftforge.common.ForgeHooks.onPlayerAttackTarget(this, p_36347_)) return;
         if (p_36347_.isAttackable()) {
             if (!p_36347_.skipAttackInteraction(this)) {
                 float f = this.isAutoSpinAttack() ? this.autoSpinAttackDmg : (float)this.getAttributeValue(Attributes.ATTACK_DAMAGE);
@@ -1167,8 +_,10 @@
                         && !this.isPassenger()
                         && p_36347_ instanceof LivingEntity
                         && !this.isSprinting();
+                    var hitResult = net.minecraftforge.common.ForgeHooks.getCriticalHit(this, p_36347_, flag1, flag1 ? 1.5F : 1.0F);
+                    flag1 = hitResult != null;
                     if (flag1) {
-                        f *= 1.5F;
+                            f *= hitResult.getDamageModifier();
                     }
 
                     float f3 = f + f1;
@@ -1176,7 +_,7 @@
                     double d0 = (double)(this.walkDist - this.walkDistO);
                     if (flag4 && !flag1 && !flag && this.onGround() && d0 < (double)this.getSpeed()) {
                         ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
-                        if (itemstack1.getItem() instanceof SwordItem) {
+                            if (itemstack.canPerformAction(net.minecraftforge.common.ToolActions.SWORD_SWEEP)) {
                             flag2 = true;
                         }
                     }
@@ -1212,7 +_,7 @@
                         if (flag2) {
                             float f7 = 1.0F + (float)this.getAttributeValue(Attributes.SWEEPING_DAMAGE_RATIO) * f;
 
-                            for (LivingEntity livingentity2 : this.level().getEntitiesOfClass(LivingEntity.class, p_36347_.getBoundingBox().inflate(1.0, 0.25, 1.0))) {
+                                for (LivingEntity livingentity2 : this.level().getEntitiesOfClass(LivingEntity.class, this.getItemInHand(InteractionHand.MAIN_HAND).getSweepHitBox(this, p_36347_))) {
                                 if (livingentity2 != this
                                     && livingentity2 != p_36347_
                                     && !this.isAlliedTo(livingentity2)
@@ -1262,8 +_,8 @@
 
                         this.setLastHurtMob(p_36347_);
                         Entity entity = p_36347_;
-                        if (p_36347_ instanceof EnderDragonPart) {
-                            entity = ((EnderDragonPart)p_36347_).parentMob;
+                        if (p_36347_ instanceof net.minecraftforge.entity.PartEntity<?> pe) {
+                            entity = pe.getParent();
                         }
 
                         boolean flag5 = false;
@@ -1304,6 +_,7 @@
                         this.level().playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_ATTACK_NODAMAGE, this.getSoundSource(), 1.0F, 1.0F);
                     }
                 }
+                this.resetAttackStrengthTicker(); // FORGE: Moved from beginning of attack() so that getAttackStrengthScale() returns an accurate value during all attack events
             }
         }
     }
@@ -1318,7 +_,7 @@
     }
 
     public void disableShield() {
-        this.getCooldowns().addCooldown(Items.SHIELD, 100);
+        this.getCooldowns().addCooldown(this.getUseItem().getItem(), 100);
         this.stopUsingItem();
         this.level().broadcastEntityEvent(this, (byte)30);
     }
@@ -1377,6 +_,12 @@
         return this.containerMenu != this.inventoryMenu;
     }
 
+   protected AtomicBoolean startSleepInBed_force = new AtomicBoolean(false);
+   public Player forceSleepInBed(boolean force) {
+      startSleepInBed_force.set(force);
+      return this;
+   }
+
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_36203_) {
         this.startSleeping(p_36203_);
         this.sleepCounter = 0;
@@ -1384,6 +_,7 @@
     }
 
     public void stopSleepInBed(boolean p_36226_, boolean p_36227_) {
+        net.minecraftforge.event.ForgeEventFactory.onPlayerWakeup(this, p_36226_, p_36227_);
         super.stopSleeping();
         if (this.level() instanceof ServerLevel && p_36227_) {
             ((ServerLevel)this.level()).updateSleepingPlayerList();
@@ -1442,14 +_,17 @@
 
     @Override
     public void jumpFromGround() {
-        super.jumpFromGround();
-        this.awardStat(Stats.JUMP);
-        if (this.isSprinting()) {
-            this.causeFoodExhaustion(0.2F);
-        } else {
-            this.causeFoodExhaustion(0.05F);
-        }
-    }
+      super.jumpFromGround();
+      this.awardStat(Stats.JUMP);
+      if (this.isSprinting()) {
+         this.exhaustionReason(EntityExhaustionEvent.ExhaustionReason.JUMP_SPRINT); // CraftBukkit - EntityExhaustionEvent
+         this.causeFoodExhaustion(0.2F);
+      } else {
+         this.exhaustionReason(EntityExhaustionEvent.ExhaustionReason.JUMP); // CraftBukkit - EntityExhaustionEvent
+         this.causeFoodExhaustion(0.05F);
+      }
+
+   }
 
     @Override
     public void travel(Vec3 p_36359_) {
@@ -1470,7 +_,11 @@
             Vec3 vec31 = this.getDeltaMovement();
             this.setDeltaMovement(vec31.x, d2 * 0.6, vec31.z);
             this.resetFallDistance();
-            this.setSharedFlag(7, false);
+            // CraftBukkit start
+            if (getSharedFlag(7) && !org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+                this.setSharedFlag(7, false);
+            }
+            // CraftBukkit end
         } else {
             super.travel(p_36359_);
         }
@@ -1497,6 +_,7 @@
     @Override
     public boolean causeFallDamage(float p_150093_, float p_150094_, DamageSource p_150095_) {
         if (this.abilities.mayfly) {
+            net.minecraftforge.event.ForgeEventFactory.onPlayerFall(this, p_150093_, p_150093_);
             return false;
         } else {
             if (p_150093_ >= 2.0F) {
@@ -1528,7 +_,7 @@
     public boolean tryToStartFallFlying() {
         if (!this.onGround() && !this.isFallFlying() && !this.isInWater() && !this.hasEffect(MobEffects.LEVITATION)) {
             ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
-            if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
+            if (itemstack.canElytraFly(this)) {
                 this.startFallFlying();
                 return true;
             }
@@ -1538,14 +_,25 @@
     }
 
     public void startFallFlying() {
-        this.setSharedFlag(7, true);
-    }
-
-    public void stopFallFlying() {
-        this.setSharedFlag(7, true);
-        this.setSharedFlag(7, false);
-    }
-
+      // CraftBukkit start
+      if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, true).isCancelled()) {
+         this.setSharedFlag(7, true);
+      } else {
+         // SPIGOT-5542: must toggle like below
+         this.setSharedFlag(7, true);
+         this.setSharedFlag(7, false);
+      }
+      // CraftBukkit end
+   }
+
+   public void stopFallFlying() {
+      // CraftBukkit start
+      if (!org.bukkit.craftbukkit.event.CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) {
+         this.setSharedFlag(7, true);
+         this.setSharedFlag(7, false);
+      }
+      // CraftBukkit end
+   }
     @Override
     protected void doWaterSplashEffect() {
         if (!this.isSpectator()) {
@@ -1557,13 +_,13 @@
     protected void playStepSound(BlockPos p_282121_, BlockState p_282194_) {
         if (this.isInWater()) {
             this.waterSwimSound();
-            this.playMuffledStepSound(p_282194_);
+            this.playMuffledStepSound(p_282194_, p_282121_);
         } else {
             BlockPos blockpos = this.getPrimaryStepSoundBlockPos(p_282121_);
             if (!p_282121_.equals(blockpos)) {
                 BlockState blockstate = this.level().getBlockState(blockpos);
                 if (blockstate.is(BlockTags.COMBINATION_STEP_SOUND_BLOCKS)) {
-                    this.playCombinationStepSounds(blockstate, p_282194_);
+                    this.playCombinationStepSounds(blockstate, p_282194_, blockpos, p_282121_);
                 } else {
                     super.playStepSound(blockpos, blockstate);
                 }
@@ -1594,6 +_,12 @@
     }
 
     public void giveExperiencePoints(int p_36291_) {
+        var event = net.minecraftforge.event.ForgeEventFactory.onPlayerXpChange(this, p_36291_);
+        if (event.isCanceled()) {
+            return;
+        }
+        p_36291_ = event.getAmount();
+
         this.increaseScore(p_36291_);
         this.experienceProgress = this.experienceProgress + (float)p_36291_ / (float)this.getXpNeededForNextLevel();
         this.totalExperience = Mth.clamp(this.totalExperience + p_36291_, 0, Integer.MAX_VALUE);
@@ -1621,7 +_,7 @@
     }
 
     public void onEnchantmentPerformed(ItemStack p_36172_, int p_36173_) {
-        this.experienceLevel -= p_36173_;
+        giveExperienceLevels(-p_36173_);
         if (this.experienceLevel < 0) {
             this.experienceLevel = 0;
             this.experienceProgress = 0.0F;
@@ -1632,6 +_,12 @@
     }
 
     public void giveExperienceLevels(int p_36276_) {
+        var event = net.minecraftforge.event.ForgeEventFactory.onPlayerLevelChange(this, p_36276_);
+        if (event.isCanceled()) {
+            return;
+        }
+        p_36276_ = event.getLevels();
+
         this.experienceLevel += p_36276_;
         if (this.experienceLevel < 0) {
             this.experienceLevel = 0;
@@ -1657,10 +_,29 @@
     public void causeFoodExhaustion(float p_36400_) {
         if (!this.abilities.invulnerable) {
             if (!this.level().isClientSide) {
-                this.foodData.addExhaustion(p_36400_);
+                // CraftBukkit start
+                EntityExhaustionEvent event = CraftEventFactory.callPlayerExhaustionEvent(this, this.reason.getAndSet(EntityExhaustionEvent.ExhaustionReason.UNKNOWN), p_36400_);
+                if (!event.isCancelled()) {
+                    this.foodData.addExhaustion(event.getExhaustion());
+                }
+                // CraftBukkit end
             }
+
         }
     }
+
+   // Mohist start
+   // CraftBukkit start
+   private AtomicReference<EntityExhaustionEvent.ExhaustionReason> reason = new AtomicReference<>(EntityExhaustionEvent.ExhaustionReason.UNKNOWN);
+   public void exhaustionReason(EntityExhaustionEvent.ExhaustionReason exhaustionReason) {
+      reason.set(exhaustionReason);
+   }
+   public void causeFoodExhaustion(float f, EntityExhaustionEvent.ExhaustionReason reason) {
+      this.exhaustionReason(reason);
+      causeFoodExhaustion(f);
+   }
+   // CraftBukkit end
+   // Mohist end
 
     public Optional<WardenSpawnTracker> getWardenSpawnTracker() {
         return Optional.empty();
@@ -1757,6 +_,15 @@
         }
     }
 
+   // Mohist start
+   // CraftBukkit start
+   public void setItemSlot(EquipmentSlot enumitemslot, ItemStack itemstack, boolean silent) {
+      this.silent0.set(silent);
+      setItemSlot(enumitemslot, itemstack);
+   }
+   // CraftBukkit end
+   // Mohist end
+
     public boolean addItem(ItemStack p_36357_) {
         return this.inventory.add(p_36357_);
     }
@@ -1794,26 +_,40 @@
 
     protected void removeEntitiesOnShoulder() {
         if (this.timeEntitySatOnShoulder + 20L < this.level().getGameTime()) {
-            this.respawnEntityOnShoulder(this.getShoulderEntityLeft());
+         // CraftBukkit start
+         if (this.spawnEntityFromShoulder(this.getShoulderEntityLeft())) {
             this.setShoulderEntityLeft(new CompoundTag());
-            this.respawnEntityOnShoulder(this.getShoulderEntityRight());
+         }
+         if (this.spawnEntityFromShoulder(this.getShoulderEntityRight())) {
             this.setShoulderEntityRight(new CompoundTag());
-        }
-    }
-
-    private void respawnEntityOnShoulder(CompoundTag p_36371_) {
+         }
+         // CraftBukkit end
+      }
+
+   }
+
+   // Mohist start
+   public AtomicBoolean spawnEntityFromShoulder = new AtomicBoolean(true);
+
+   private void respawnEntityOnShoulder(CompoundTag p_36371_) {
         if (!this.level().isClientSide && !p_36371_.isEmpty()) {
-            EntityType.create(p_36371_, this.level()).ifPresent(p_341480_ -> {
-                if (p_341480_ instanceof TamableAnimal) {
-                    ((TamableAnimal)p_341480_).setOwnerUUID(this.uuid);
+            EntityType.create(p_36371_, this.level()).ifPresent(p_327053_ -> {
+                if (p_327053_ instanceof TamableAnimal) {
+                    ((TamableAnimal)p_327053_).setOwnerUUID(this.uuid);
                 }
 
-                p_341480_.setPos(this.getX(), this.getY() + 0.7F, this.getZ());
-                ((ServerLevel)this.level()).addWithUUID(p_341480_);
+                p_327053_.setPos(this.getX(), this.getY() + 0.7F, this.getZ());
+            	boolean canAdd = ((ServerLevel)this.level()).addWithUUID(p_327053_);
+            	spawnEntityFromShoulder.set(canAdd);
             });
         }
     }
 
+   private boolean spawnEntityFromShoulder(CompoundTag pEntityCompound) { // CraftBukkit void->boolean
+      respawnEntityOnShoulder(pEntityCompound);
+      return spawnEntityFromShoulder.getAndSet(true);
+   }
+   // Mohist end
     @Override
     public abstract boolean isSpectator();
 
@@ -1840,7 +_,13 @@
 
     @Override
     public Component getDisplayName() {
-        MutableComponent mutablecomponent = PlayerTeam.formatNameForTeam(this.getTeam(), this.getName());
+        if (this.displayname == null) {
+            this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+        }
+        MutableComponent mutablecomponent = Component.literal("");
+        mutablecomponent = prefixes.stream().reduce(mutablecomponent, MutableComponent::append);
+        mutablecomponent = mutablecomponent.append(PlayerTeam.formatNameForTeam(this.getTeam(), this.displayname));
+        mutablecomponent = suffixes.stream().reduce(mutablecomponent, MutableComponent::append);
         return this.decorateDisplayNameComponent(mutablecomponent);
     }
 
@@ -1936,7 +_,7 @@
         return this.entityData.get(DATA_SHOULDER_LEFT);
     }
 
-    protected void setShoulderEntityLeft(CompoundTag p_36363_) {
+    public void setShoulderEntityLeft(CompoundTag p_36363_) {
         this.entityData.set(DATA_SHOULDER_LEFT, p_36363_);
     }
 
@@ -1944,7 +_,7 @@
         return this.entityData.get(DATA_SHOULDER_RIGHT);
     }
 
-    protected void setShoulderEntityRight(CompoundTag p_36365_) {
+    public void setShoulderEntityRight(CompoundTag p_36365_) {
         this.entityData.set(DATA_SHOULDER_RIGHT, p_36365_);
     }
 
@@ -2001,18 +_,19 @@
             Predicate<ItemStack> predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getSupportedHeldProjectiles();
             ItemStack itemstack = ProjectileWeaponItem.getHeldProjectile(this, predicate);
             if (!itemstack.isEmpty()) {
-                return itemstack;
+                return net.minecraftforge.common.ForgeHooks.getProjectile(this, p_36349_, itemstack);
             } else {
                 predicate = ((ProjectileWeaponItem)p_36349_.getItem()).getAllSupportedProjectiles();
 
                 for (int i = 0; i < this.inventory.getContainerSize(); i++) {
                     ItemStack itemstack1 = this.inventory.getItem(i);
                     if (predicate.test(itemstack1)) {
-                        return itemstack1;
+                        return net.minecraftforge.common.ForgeHooks.getProjectile(this, p_36349_, itemstack1);
                     }
                 }
 
-                return this.abilities.instabuild ? new ItemStack(Items.ARROW) : ItemStack.EMPTY;
+                var vanilla = this.abilities.instabuild ? new ItemStack(Items.ARROW) : ItemStack.EMPTY;
+                return net.minecraftforge.common.ForgeHooks.getProjectile(this, p_36349_, vanilla);
             }
         }
     }
@@ -2173,6 +_,65 @@
         this.currentImpulseImpactPos = null;
         this.ignoreFallDamageFromCurrentImpulse = false;
     }
+
+    public Collection<MutableComponent> getPrefixes() {
+        return this.prefixes;
+    }
+
+    public Collection<MutableComponent> getSuffixes() {
+        return this.suffixes;
+    }
+
+    private Component displayname = null;
+
+    /**
+     * Force the displayed name to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.NameFormat}, using the real player name as event parameter.
+     */
+    public void refreshDisplayName() {
+        this.displayname = net.minecraftforge.event.ForgeEventFactory.getPlayerDisplayName(this, this.getName());
+    }
+
+    private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+        playerMainHandler = net.minecraftforge.common.util.LazyOptional.of(
+            () -> new net.minecraftforge.items.wrapper.PlayerMainInvWrapper(inventory));
+
+    private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+        playerEquipmentHandler = net.minecraftforge.common.util.LazyOptional.of(
+            () -> new net.minecraftforge.items.wrapper.CombinedInvWrapper(
+                  new net.minecraftforge.items.wrapper.PlayerArmorInvWrapper(inventory),
+                  new net.minecraftforge.items.wrapper.PlayerOffhandInvWrapper(inventory)));
+
+    private final net.minecraftforge.common.util.LazyOptional<net.minecraftforge.items.IItemHandler>
+        playerJoinedHandler = net.minecraftforge.common.util.LazyOptional.of(
+            () -> new net.minecraftforge.items.wrapper.PlayerInvWrapper(inventory));
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+        if (capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && this.isAlive()) {
+            if (facing == null) return playerJoinedHandler.cast();
+            else if (facing.getAxis().isVertical()) return playerMainHandler.cast();
+            else if (facing.getAxis().isHorizontal()) return playerEquipmentHandler.cast();
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    /**
+     * Force a pose for the player. If set, the vanilla pose determination and clearance check is skipped. Make sure the pose is clear yourself (e.g. in PlayerTick).
+     * This has to be set just once, do not set it every tick.
+     * Make sure to clear (null) the pose if not required anymore and only use if necessary.
+     */
+    public void setForcedPose(@Nullable Pose pose) {
+        this.forcedPose = pose;
+    }
+
+    /**
+     * @return The forced pose if set, null otherwise
+     */
+    @Nullable
+    public Pose getForcedPose() {
+        return this.forcedPose;
+    }
+
 
     public static enum BedSleepingProblem {
         NOT_POSSIBLE_HERE,
