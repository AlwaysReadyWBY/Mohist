--- a/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/net/minecraft/world/entity/AreaEffectCloud.java
@@ -2,29 +_,38 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.logging.LogUtils;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
-import java.util.Map.Entry;
 import javax.annotation.Nullable;
+import net.minecraft.commands.arguments.ParticleArgument;
 import net.minecraft.core.particles.ColorParticleOption;
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
-import net.minecraft.resources.RegistryOps;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.FastColor;
 import net.minecraft.util.Mth;
 import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.item.alchemy.Potion;
 import net.minecraft.world.item.alchemy.PotionContents;
+import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.material.PushReaction;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.AreaEffectCloudApplyEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
 import org.slf4j.Logger;
 
 public class AreaEffectCloud extends Entity implements TraceableEntity {
@@ -39,13 +_,14 @@
     public static final float DEFAULT_WIDTH = 6.0F;
     public static final float HEIGHT = 0.5F;
     private PotionContents potionContents = PotionContents.EMPTY;
-    private final Map<Entity, Integer> victims = Maps.newHashMap();
-    private int duration = 600;
-    public int waitTime = 20;
-    public int reapplicationDelay = 20;
-    public int durationOnUse;
-    public float radiusOnUse;
-    public float radiusPerTick;
+   	private final Map<Entity, Integer> victims = Maps.newHashMap();
+   	private int duration = 600;
+   	public int waitTime = 20;
+   	public int reapplicationDelay = 20;
+   	private boolean fixedColor;
+   	public int durationOnUse;
+   	public float radiusOnUse;
+   	public float radiusPerTick;
     @Nullable
     private LivingEntity owner;
     @Nullable
@@ -128,7 +_,18 @@
         this.duration = p_19735_;
     }
 
-    @Override
+   // Spigot start - copied from below
+   @Override
+   public void inactiveTick() {
+      super.inactiveTick();
+
+      if (this.tickCount >= this.waitTime + this.duration) {
+         this.discard();
+         return;
+      }
+   }
+   // Spigot end
+
     public void tick() {
         super.tick();
         boolean flag = this.isWaiting();
@@ -169,74 +_,83 @@
                 }
             }
         } else {
-            if (this.tickCount >= this.waitTime + this.duration) {
-                this.discard();
-                return;
-            }
-
-            boolean flag1 = this.tickCount < this.waitTime;
-            if (flag != flag1) {
-                this.setWaiting(flag1);
-            }
-
-            if (flag1) {
-                return;
-            }
-
-            if (this.radiusPerTick != 0.0F) {
-                f += this.radiusPerTick;
-                if (f < 0.5F) {
-                    this.discard();
-                    return;
-                }
-
-                this.setRadius(f);
-            }
-
-            if (this.tickCount % 5 == 0) {
-                this.victims.entrySet().removeIf(p_287380_ -> this.tickCount >= p_287380_.getValue());
-                if (!this.potionContents.hasEffects()) {
-                    this.victims.clear();
-                } else {
-                    List<MobEffectInstance> list = Lists.newArrayList();
-                    if (this.potionContents.potion().isPresent()) {
-                        for (MobEffectInstance mobeffectinstance1 : this.potionContents.potion().get().value().getEffects()) {
-                            list.add(
-                                new MobEffectInstance(
-                                    mobeffectinstance1.getEffect(),
-                                    mobeffectinstance1.mapDuration(p_267926_ -> p_267926_ / 4),
-                                    mobeffectinstance1.getAmplifier(),
-                                    mobeffectinstance1.isAmbient(),
-                                    mobeffectinstance1.isVisible()
-                                )
-                            );
+         if (this.tickCount >= this.waitTime + this.duration) {
+            this.putRemoveCause(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+            this.discard();
+            return;
+         }
+
+         boolean flag1 = this.tickCount < this.waitTime;
+         if (flag != flag1) {
+            this.setWaiting(flag1);
+         }
+
+         if (flag1) {
+            return;
+         }
+
+         if (this.radiusPerTick != 0.0F) {
+            f += this.radiusPerTick;
+            if (f < 0.5F) {
+               this.putRemoveCause(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
+               this.discard();
+               return;
+            }
+
+            this.setRadius(f);
+         }
+
+         if (this.tickCount % 5 == 0) {
+            this.victims.entrySet().removeIf((p_287380_) -> {
+               return this.tickCount >= p_287380_.getValue();
+            });
+            List<MobEffectInstance> list = Lists.newArrayList();
+
+            for(MobEffectInstance mobeffectinstance : this.potion.getEffects()) {
+               list.add(new MobEffectInstance(mobeffectinstance.getEffect(), mobeffectinstance.mapDuration((p_267926_) -> {
+                  return p_267926_ / 4;
+               }), mobeffectinstance.getAmplifier(), mobeffectinstance.isAmbient(), mobeffectinstance.isVisible()));
+            }
+
+            list.addAll(this.effects);
+            if (list.isEmpty()) {
+               this.victims.clear();
+            } else {
+               List<LivingEntity> list1 = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox());
+               if (!list1.isEmpty()) {
+                  List<org.bukkit.entity.LivingEntity> entities = new java.util.ArrayList<>(); // CraftBukkit
+                  for(LivingEntity livingentity : list1) {
+                     if (!this.victims.containsKey(livingentity) && livingentity.isAffectedByPotions()) {
+                        double d8 = livingentity.getX() - this.getX();
+                        double d1 = livingentity.getZ() - this.getZ();
+                        double d3 = d8 * d8 + d1 * d1;
+                        if (d3 <= (double)(f * f)) {
+                           // CraftBukkit start
+                           entities.add((org.bukkit.entity.LivingEntity) livingentity.getBukkitEntity());
                         }
-                    }
-
-                    list.addAll(this.potionContents.customEffects());
-                    List<LivingEntity> list1 = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox());
-                    if (!list1.isEmpty()) {
-                        for (LivingEntity livingentity : list1) {
-                            if (!this.victims.containsKey(livingentity) && livingentity.isAffectedByPotions()) {
-                                double d5 = livingentity.getX() - this.getX();
-                                double d1 = livingentity.getZ() - this.getZ();
-                                double d3 = d5 * d5 + d1 * d1;
-                                if (d3 <= (double)(f * f)) {
-                                    this.victims.put(livingentity, this.tickCount + this.reapplicationDelay);
-
-                                    for (MobEffectInstance mobeffectinstance : list) {
-                                        if (mobeffectinstance.getEffect().value().isInstantenous()) {
-                                            mobeffectinstance.getEffect()
-                                                .value()
-                                                .applyInstantenousEffect(this, this.getOwner(), livingentity, mobeffectinstance.getAmplifier(), 0.5);
-                                        } else {
-                                            livingentity.addEffect(new MobEffectInstance(mobeffectinstance), this);
-                                        }
-                                    }
+                     }
+                  }
+                  AreaEffectCloudApplyEvent event = CraftEventFactory.callAreaEffectCloudApplyEvent(this, entities);
+                  if (!event.isCancelled()) {
+                     for (org.bukkit.entity.LivingEntity entity : event.getAffectedEntities()) {
+                        if (entity instanceof CraftLivingEntity) {
+                           LivingEntity livingentity = ((CraftLivingEntity) entity).getHandle();
+                           // CraftBukkit end
+                           this.victims.put(livingentity, this.tickCount + this.reapplicationDelay);
+
+                           for(MobEffectInstance mobeffectinstance1 : list) {
+                              if (mobeffectinstance1.getEffect().isInstantenous()) {
+                                 mobeffectinstance1.getEffect().applyInstantenousEffect(this, this.getOwner(), livingentity, mobeffectinstance1.getAmplifier(), 0.5D);
+                              } else {
+                                 livingentity.addEffectCause.set(EntityPotionEffectEvent.Cause.AREA_EFFECT_CLOUD); // Mohist
+                                 livingentity.addEffect(new MobEffectInstance(mobeffectinstance1), this);
+                              }
+                           }
 
                                     if (this.radiusOnUse != 0.0F) {
                                         f += this.radiusOnUse;
                                         if (f < 0.5F) {
+                                 this.putRemoveCause(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
                                             this.discard();
                                             return;
                                         }
@@ -247,6 +_,7 @@
                                     if (this.durationOnUse != 0) {
                                         this.duration = this.duration + this.durationOnUse;
                                         if (this.duration <= 0) {
+                                 			this.putRemoveCause(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
                                             this.discard();
                                             return;
                                         }
