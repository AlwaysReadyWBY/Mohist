--- a/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/net/minecraft/world/entity/AreaEffectCloud.java
@@ -26,6 +_,10 @@
 import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.material.PushReaction;
+import org.bukkit.craftbukkit.v1_20_R3.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.v1_20_R3.event.CraftEventFactory;
+import org.bukkit.event.entity.AreaEffectCloudApplyEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.slf4j.Logger;
 
 public class AreaEffectCloud extends Entity implements TraceableEntity {
@@ -41,7 +_,7 @@
    public static final float DEFAULT_WIDTH = 6.0F;
    public static final float HEIGHT = 0.5F;
    private static final String TAG_EFFECTS = "effects";
-   private Potion potion = Potions.EMPTY;
+   public Potion potion = Potions.EMPTY;
    public final List<MobEffectInstance> effects = Lists.newArrayList();
    private final Map<Entity, Integer> victims = Maps.newHashMap();
    private int duration = 600;
@@ -100,7 +_,7 @@
 
    }
 
-   private void updateColor() {
+   public void updateColor() {
       if (this.potion == Potions.EMPTY && this.effects.isEmpty()) {
          this.getEntityData().set(DATA_COLOR, 0);
       } else {
@@ -150,6 +_,18 @@
       this.duration = p_19735_;
    }
 
+   // Spigot start - copied from below
+   @Override
+   public void inactiveTick() {
+      super.inactiveTick();
+
+      if (this.tickCount >= this.waitTime + this.duration) {
+         this.discard();
+         return;
+      }
+   }
+   // Spigot end
+
    public void tick() {
       super.tick();
       boolean flag = this.isWaiting();
@@ -239,18 +_,31 @@
             } else {
                List<LivingEntity> list1 = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox());
                if (!list1.isEmpty()) {
+                  List<org.bukkit.entity.LivingEntity> entities = new java.util.ArrayList<>(); // CraftBukkit
                   for(LivingEntity livingentity : list1) {
                      if (!this.victims.containsKey(livingentity) && livingentity.isAffectedByPotions()) {
                         double d8 = livingentity.getX() - this.getX();
                         double d1 = livingentity.getZ() - this.getZ();
                         double d3 = d8 * d8 + d1 * d1;
                         if (d3 <= (double)(f * f)) {
+                           // CraftBukkit start
+                           entities.add((org.bukkit.entity.LivingEntity) livingentity.getBukkitEntity());
+                        }
+                     }
+                  }
+                  AreaEffectCloudApplyEvent event = CraftEventFactory.callAreaEffectCloudApplyEvent(this, entities);
+                  if (!event.isCancelled()) {
+                     for (org.bukkit.entity.LivingEntity entity : event.getAffectedEntities()) {
+                        if (entity instanceof CraftLivingEntity) {
+                           LivingEntity livingentity = ((CraftLivingEntity) entity).getHandle();
+                           // CraftBukkit end
                            this.victims.put(livingentity, this.tickCount + this.reapplicationDelay);
 
                            for(MobEffectInstance mobeffectinstance1 : list) {
                               if (mobeffectinstance1.getEffect().isInstantenous()) {
                                  mobeffectinstance1.getEffect().applyInstantenousEffect(this, this.getOwner(), livingentity, mobeffectinstance1.getAmplifier(), 0.5D);
                               } else {
+                                 livingentity.addEffectCause.set(EntityPotionEffectEvent.Cause.AREA_EFFECT_CLOUD); // Mohist
                                  livingentity.addEffect(new MobEffectInstance(mobeffectinstance1), this);
                               }
                            }
