--- a/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/net/minecraft/world/entity/AreaEffectCloud.java
@@ -2,6 +_,8 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.mojang.brigadier.StringReader;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.logging.LogUtils;
 import java.util.List;
 import java.util.Map;
@@ -22,9 +_,16 @@
 import net.minecraft.util.FastColor;
 import net.minecraft.util.Mth;
 import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.item.alchemy.Potion;
 import net.minecraft.world.item.alchemy.PotionContents;
+import net.minecraft.world.item.alchemy.Potions;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.material.PushReaction;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.AreaEffectCloudApplyEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
 import org.slf4j.Logger;
 
 public class AreaEffectCloud extends Entity implements TraceableEntity {
@@ -39,13 +_,13 @@
     public static final float DEFAULT_WIDTH = 6.0F;
     public static final float HEIGHT = 0.5F;
     private PotionContents potionContents = PotionContents.EMPTY;
-    private final Map<Entity, Integer> victims = Maps.newHashMap();
-    private int duration = 600;
-    public int waitTime = 20;
-    public int reapplicationDelay = 20;
-    public int durationOnUse;
-    public float radiusOnUse;
-    public float radiusPerTick;
+   	private final Map<Entity, Integer> victims = Maps.newHashMap();
+   	private int duration = 600;
+   	public int waitTime = 20;
+   	public int reapplicationDelay = 20;
+   	public int durationOnUse;
+   	public float radiusOnUse;
+   	public float radiusPerTick;
     @Nullable
     private LivingEntity owner;
     @Nullable
@@ -128,7 +_,18 @@
         this.duration = p_19735_;
     }
 
-    @Override
+   // Spigot start - copied from below
+   @Override
+   public void inactiveTick() {
+      super.inactiveTick();
+
+      if (this.tickCount >= this.waitTime + this.duration) {
+         this.discard();
+         return;
+      }
+   }
+   // Spigot end
+
     public void tick() {
         super.tick();
         boolean flag = this.isWaiting();
