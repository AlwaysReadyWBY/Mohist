--- a/net/minecraft/world/entity/animal/Animal.java
+++ b/net/minecraft/world/entity/animal/Animal.java
@@ -21,220 +_,274 @@
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.BlockAndTintGetter;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.Blocks;
-import net.minecraft.world.level.pathfinder.PathType;
+import net.minecraft.world.level.pathfinder.BlockPathTypes;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityEnterLoveModeEvent;
 
 public abstract class Animal extends AgeableMob {
-    protected static final int PARENT_AGE_AFTER_BREEDING = 6000;
-    public int inLove;
-    @Nullable
-    public UUID loveCause;
-
-    protected Animal(EntityType<? extends Animal> p_27557_, Level p_27558_) {
-        super(p_27557_, p_27558_);
-        this.setPathfindingMalus(PathType.DANGER_FIRE, 16.0F);
-        this.setPathfindingMalus(PathType.DAMAGE_FIRE, -1.0F);
-    }
-
-    @Override
-    protected void customServerAiStep() {
-        if (this.getAge() != 0) {
-            this.inLove = 0;
-        }
-
-        super.customServerAiStep();
-    }
-
-    @Override
-    public void aiStep() {
-        super.aiStep();
-        if (this.getAge() != 0) {
-            this.inLove = 0;
-        }
-
-        if (this.inLove > 0) {
-            this.inLove--;
-            if (this.inLove % 10 == 0) {
-                double d0 = this.random.nextGaussian() * 0.02;
-                double d1 = this.random.nextGaussian() * 0.02;
-                double d2 = this.random.nextGaussian() * 0.02;
-                this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), d0, d1, d2);
-            }
-        }
-    }
-
-    @Override
-    protected void actuallyHurt(DamageSource p_328294_, float p_327706_) {
-        this.resetLove();
-        super.actuallyHurt(p_328294_, p_327706_);
-    }
-
-    @Override
-    public float getWalkTargetValue(BlockPos p_27573_, LevelReader p_27574_) {
-        return p_27574_.getBlockState(p_27573_.below()).is(Blocks.GRASS_BLOCK) ? 10.0F : p_27574_.getPathfindingCostFromLightLevels(p_27573_);
-    }
-
-    @Override
-    public void addAdditionalSaveData(CompoundTag p_27587_) {
-        super.addAdditionalSaveData(p_27587_);
-        p_27587_.putInt("InLove", this.inLove);
-        if (this.loveCause != null) {
-            p_27587_.putUUID("LoveCause", this.loveCause);
-        }
-    }
-
-    @Override
-    public void readAdditionalSaveData(CompoundTag p_27576_) {
-        super.readAdditionalSaveData(p_27576_);
-        this.inLove = p_27576_.getInt("InLove");
-        this.loveCause = p_27576_.hasUUID("LoveCause") ? p_27576_.getUUID("LoveCause") : null;
-    }
-
-    public static boolean checkAnimalSpawnRules(
-        EntityType<? extends Animal> p_218105_, LevelAccessor p_218106_, MobSpawnType p_218107_, BlockPos p_218108_, RandomSource p_218109_
-    ) {
-        boolean flag = MobSpawnType.ignoresLightRequirements(p_218107_) || isBrightEnoughToSpawn(p_218106_, p_218108_);
-        return p_218106_.getBlockState(p_218108_.below()).is(BlockTags.ANIMALS_SPAWNABLE_ON) && flag;
-    }
-
-    protected static boolean isBrightEnoughToSpawn(BlockAndTintGetter p_186210_, BlockPos p_186211_) {
-        return p_186210_.getRawBrightness(p_186211_, 0) > 8;
-    }
-
-    @Override
-    public int getAmbientSoundInterval() {
-        return 120;
-    }
-
-    @Override
-    public boolean removeWhenFarAway(double p_27598_) {
-        return false;
-    }
-
-    @Override
-    public int getExperienceReward() {
-        return 1 + this.level().random.nextInt(3);
-    }
-
-    public abstract boolean isFood(ItemStack p_27600_);
-
-    @Override
-    public InteractionResult mobInteract(Player p_27584_, InteractionHand p_27585_) {
-        ItemStack itemstack = p_27584_.getItemInHand(p_27585_);
-        if (this.isFood(itemstack)) {
-            int i = this.getAge();
-            if (!this.level().isClientSide && i == 0 && this.canFallInLove()) {
-                this.usePlayerItem(p_27584_, p_27585_, itemstack);
-                this.setInLove(p_27584_);
-                return InteractionResult.SUCCESS;
-            }
-
-            if (this.isBaby()) {
-                this.usePlayerItem(p_27584_, p_27585_, itemstack);
-                this.ageUp(getSpeedUpSecondsWhenFeeding(-i), true);
-                return InteractionResult.sidedSuccess(this.level().isClientSide);
-            }
-
-            if (this.level().isClientSide) {
-                return InteractionResult.CONSUME;
-            }
-        }
-
-        return super.mobInteract(p_27584_, p_27585_);
-    }
-
-    protected void usePlayerItem(Player p_148715_, InteractionHand p_148716_, ItemStack p_148717_) {
-        p_148717_.consume(1, p_148715_);
-    }
-
-    public boolean canFallInLove() {
-        return this.inLove <= 0;
-    }
-
-    public void setInLove(@Nullable Player p_27596_) {
-        this.inLove = 600;
-        if (p_27596_ != null) {
-            this.loveCause = p_27596_.getUUID();
-        }
-
-        this.level().broadcastEntityEvent(this, (byte)18);
-    }
-
-    public void setInLoveTime(int p_27602_) {
-        this.inLove = p_27602_;
-    }
-
-    public int getInLoveTime() {
-        return this.inLove;
-    }
-
-    @Nullable
-    public ServerPlayer getLoveCause() {
-        if (this.loveCause == null) {
-            return null;
-        } else {
-            Player player = this.level().getPlayerByUUID(this.loveCause);
-            return player instanceof ServerPlayer ? (ServerPlayer)player : null;
-        }
-    }
-
-    public boolean isInLove() {
-        return this.inLove > 0;
-    }
-
-    public void resetLove() {
-        this.inLove = 0;
-    }
-
-    public boolean canMate(Animal p_27569_) {
-        if (p_27569_ == this) {
-            return false;
-        } else {
-            return p_27569_.getClass() != this.getClass() ? false : this.isInLove() && p_27569_.isInLove();
-        }
-    }
-
-    public void spawnChildFromBreeding(ServerLevel p_27564_, Animal p_27565_) {
-        AgeableMob ageablemob = this.getBreedOffspring(p_27564_, p_27565_);
-        if (ageablemob != null) {
-            ageablemob.setBaby(true);
-            ageablemob.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
-            this.finalizeSpawnChildFromBreeding(p_27564_, p_27565_, ageablemob);
-            p_27564_.addFreshEntityWithPassengers(ageablemob);
-        }
-    }
-
-    public void finalizeSpawnChildFromBreeding(ServerLevel p_277963_, Animal p_277357_, @Nullable AgeableMob p_277516_) {
-        Optional.ofNullable(this.getLoveCause()).or(() -> Optional.ofNullable(p_277357_.getLoveCause())).ifPresent(p_277486_ -> {
-            p_277486_.awardStat(Stats.ANIMALS_BRED);
-            CriteriaTriggers.BRED_ANIMALS.trigger(p_277486_, this, p_277357_, p_277516_);
-        });
-        this.setAge(6000);
-        p_277357_.setAge(6000);
-        this.resetLove();
-        p_277357_.resetLove();
-        p_277963_.broadcastEntityEvent(this, (byte)18);
-        if (p_277963_.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
-            p_277963_.addFreshEntity(new ExperienceOrb(p_277963_, this.getX(), this.getY(), this.getZ(), this.getRandom().nextInt(7) + 1));
-        }
-    }
-
-    @Override
-    public void handleEntityEvent(byte p_27562_) {
-        if (p_27562_ == 18) {
-            for (int i = 0; i < 7; i++) {
-                double d0 = this.random.nextGaussian() * 0.02;
-                double d1 = this.random.nextGaussian() * 0.02;
-                double d2 = this.random.nextGaussian() * 0.02;
-                this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0), this.getRandomY() + 0.5, this.getRandomZ(1.0), d0, d1, d2);
-            }
-        } else {
-            super.handleEntityEvent(p_27562_);
-        }
-    }
+   protected static final int PARENT_AGE_AFTER_BREEDING = 6000;
+   public int inLove;
+   @Nullable
+   public UUID loveCause;
+   public ItemStack breedItem; // CraftBukkit - Add breedItem variable
+
+   protected Animal(EntityType<? extends Animal> p_27557_, Level p_27558_) {
+      super(p_27557_, p_27558_);
+      this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, 16.0F);
+      this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
+   }
+
+   protected void customServerAiStep() {
+      if (this.getAge() != 0) {
+         this.inLove = 0;
+      }
+
+      super.customServerAiStep();
+   }
+
+   public void aiStep() {
+      super.aiStep();
+      if (this.getAge() != 0) {
+         this.inLove = 0;
+      }
+
+      if (this.inLove > 0) {
+         --this.inLove;
+         if (this.inLove % 10 == 0) {
+            double d0 = this.random.nextGaussian() * 0.02D;
+            double d1 = this.random.nextGaussian() * 0.02D;
+            double d2 = this.random.nextGaussian() * 0.02D;
+            this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
+         }
+      }
+
+   }
+
+   public boolean hurt(DamageSource p_27567_, float p_27568_) {
+      if (this.isInvulnerableTo(p_27567_)) {
+         return false;
+      } else {
+         // CraftBukkit start
+         boolean result = super.hurt(p_27567_, p_27568_);
+         if (result) {
+            this.inLove = 0;
+         }
+         return result;
+         // CraftBukkit end
+      }
+   }
+
+   public float getWalkTargetValue(BlockPos p_27573_, LevelReader p_27574_) {
+      return p_27574_.getBlockState(p_27573_.below()).is(Blocks.GRASS_BLOCK) ? 10.0F : p_27574_.getPathfindingCostFromLightLevels(p_27573_);
+   }
+
+   public void addAdditionalSaveData(CompoundTag p_27587_) {
+      super.addAdditionalSaveData(p_27587_);
+      p_27587_.putInt("InLove", this.inLove);
+      if (this.loveCause != null) {
+         p_27587_.putUUID("LoveCause", this.loveCause);
+      }
+
+   }
+
+   public void readAdditionalSaveData(CompoundTag p_27576_) {
+      super.readAdditionalSaveData(p_27576_);
+      this.inLove = p_27576_.getInt("InLove");
+      this.loveCause = p_27576_.hasUUID("LoveCause") ? p_27576_.getUUID("LoveCause") : null;
+   }
+
+   public static boolean checkAnimalSpawnRules(EntityType<? extends Animal> p_218105_, LevelAccessor p_218106_, MobSpawnType p_218107_, BlockPos p_218108_, RandomSource p_218109_) {
+      boolean flag = MobSpawnType.ignoresLightRequirements(p_218107_) || isBrightEnoughToSpawn(p_218106_, p_218108_);
+      return p_218106_.getBlockState(p_218108_.below()).is(BlockTags.ANIMALS_SPAWNABLE_ON) && flag;
+   }
+
+   protected static boolean isBrightEnoughToSpawn(BlockAndTintGetter p_186210_, BlockPos p_186211_) {
+      return p_186210_.getRawBrightness(p_186211_, 0) > 8;
+   }
+
+   public int getAmbientSoundInterval() {
+      return 120;
+   }
+
+   public boolean removeWhenFarAway(double p_27598_) {
+      return false;
+   }
+
+   public int getExperienceReward() {
+      return 1 + this.level().random.nextInt(3);
+   }
+
+   public boolean isFood(ItemStack p_27600_) {
+      return p_27600_.is(Items.WHEAT);
+   }
+
+   public InteractionResult mobInteract(Player p_27584_, InteractionHand p_27585_) {
+      ItemStack itemstack = p_27584_.getItemInHand(p_27585_);
+      if (this.isFood(itemstack)) {
+         int i = this.getAge();
+         if (!this.level().isClientSide && i == 0 && this.canFallInLove()) {
+            this.usePlayerItem(p_27584_, p_27585_, itemstack);
+            this.setInLove(p_27584_);
+            return InteractionResult.SUCCESS;
+         }
+
+         if (this.isBaby()) {
+            this.usePlayerItem(p_27584_, p_27585_, itemstack);
+            this.ageUp(getSpeedUpSecondsWhenFeeding(-i), true);
+            return InteractionResult.sidedSuccess(this.level().isClientSide);
+         }
+
+         if (this.level().isClientSide) {
+            return InteractionResult.CONSUME;
+         }
+      }
+
+      return super.mobInteract(p_27584_, p_27585_);
+   }
+
+   protected void usePlayerItem(Player p_148715_, InteractionHand p_148716_, ItemStack p_148717_) {
+      if (!p_148715_.getAbilities().instabuild) {
+         p_148717_.shrink(1);
+      }
+
+   }
+
+   public boolean canFallInLove() {
+      return this.inLove <= 0;
+   }
+
+   public void setInLove(@Nullable Player p_27596_) {
+      this.inLove = 600;
+      if (p_27596_ != null) {
+         // CraftBukkit start
+         EntityEnterLoveModeEvent entityEnterLoveModeEvent = CraftEventFactory.callEntityEnterLoveModeEvent(p_27596_, this, 600);
+         if (entityEnterLoveModeEvent.isCancelled()) {
+            return;
+         }
+         this.setInLoveTime(entityEnterLoveModeEvent.getTicksInLove());
+         // CraftBukkit end
+         this.loveCause = p_27596_.getUUID();
+         this.breedItem = p_27596_.getInventory().getSelected(); // CraftBukkit
+      }
+
+      this.level().broadcastEntityEvent(this, (byte)18);
+   }
+
+   public void setInLoveTime(int p_27602_) {
+      this.inLove = p_27602_;
+   }
+
+   public int getInLoveTime() {
+      return this.inLove;
+   }
+
+   @Nullable
+   public ServerPlayer getLoveCause() {
+      if (this.loveCause == null) {
+         return null;
+      } else {
+         Player player = this.level().getPlayerByUUID(this.loveCause);
+         return player instanceof ServerPlayer ? (ServerPlayer)player : null;
+      }
+   }
+
+   public boolean isInLove() {
+      return this.inLove > 0;
+   }
+
+   public void resetLove() {
+      this.inLove = 0;
+   }
+
+   public boolean canMate(Animal p_27569_) {
+      if (p_27569_ == this) {
+         return false;
+      } else if (p_27569_.getClass() != this.getClass()) {
+         return false;
+      } else {
+         return this.isInLove() && p_27569_.isInLove();
+      }
+   }
+
+   public void spawnChildFromBreeding(ServerLevel p_27564_, Animal p_27565_) {
+      AgeableMob ageablemob = this.getBreedOffspring(p_27564_, p_27565_);
+      final net.minecraftforge.event.entity.living.BabyEntitySpawnEvent event = new net.minecraftforge.event.entity.living.BabyEntitySpawnEvent(this, p_27565_, ageablemob);
+      final boolean cancelled = net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event);
+      ageablemob = event.getChild();
+      if (cancelled) {
+         //Reset the "inLove" state for the animals
+         this.setAge(6000);
+         p_27565_.setAge(6000);
+         this.resetLove();
+         p_27565_.resetLove();
+         return;
+      }
+      if (ageablemob != null) {
+         ageablemob.setBaby(true);
+         ageablemob.moveTo(this.getX(), this.getY(), this.getZ(), 0.0F, 0.0F);
+         this.finalizeSpawnChildFromBreeding(p_27564_, p_27565_, ageablemob);
+         p_27564_.addFreshEntityWithPassengers(ageablemob);
+         // CraftBukkit start - call EntityBreedEvent
+         ServerPlayer breeder = Optional.ofNullable(this.getLoveCause()).or(() -> {
+            return Optional.ofNullable(p_27565_.getLoveCause());
+         }).orElse(null);
+         int experience = this.getRandom().nextInt(7) + 1;
+         org.bukkit.event.entity.EntityBreedEvent entityBreedEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callEntityBreedEvent(ageablemob, this, p_27565_, breeder, this.breedItem, experience);
+         if (entityBreedEvent.isCancelled()) {
+            return;
+         }
+         experience = entityBreedEvent.getExperience();
+         this.finalizeSpawnChildFromBreeding(p_27564_, p_27565_, ageablemob, experience);
+         ageablemob.spawnReason(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.BREEDING);
+         p_27564_.addFreshEntityWithPassengers(ageablemob);
+         // CraftBukkit end
+      }
+   }
+   
+   public void finalizeSpawnChildFromBreeding(ServerLevel p_277963_, Animal p_277357_, @Nullable AgeableMob p_277516_) {
+      // CraftBukkit start
+      this.finalizeSpawnChildFromBreeding(p_277963_, p_277357_, p_277516_, this.getRandom().nextInt(7) + 1);
+   }
+   public void finalizeSpawnChildFromBreeding(ServerLevel pLevel, Animal pAnimal, @Nullable AgeableMob pBaby, int experience) {
+      Optional.ofNullable(this.getLoveCause()).or(() -> {
+         return Optional.ofNullable(pAnimal.getLoveCause());
+      }).ifPresent((p_277486_) -> {
+         p_277486_.awardStat(Stats.ANIMALS_BRED);
+         CriteriaTriggers.BRED_ANIMALS.trigger(p_277486_, this, pAnimal, pBaby);
+      });
+      this.setAge(6000);
+      pAnimal.setAge(6000);
+      this.resetLove();
+      pAnimal.resetLove();
+      pLevel.broadcastEntityEvent(this, (byte)18);
+      if (pLevel.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
+         // CraftBukkit start - use event experience
+         if (experience > 0) {
+            pLevel.addFreshEntity(new ExperienceOrb(pLevel, this.getX(), this.getY(), this.getZ(), experience));
+         }
+         // CraftBukkit end
+      }
+
+   }
+
+   public void handleEntityEvent(byte p_27562_) {
+      if (p_27562_ == 18) {
+         for(int i = 0; i < 7; ++i) {
+            double d0 = this.random.nextGaussian() * 0.02D;
+            double d1 = this.random.nextGaussian() * 0.02D;
+            double d2 = this.random.nextGaussian() * 0.02D;
+            this.level().addParticle(ParticleTypes.HEART, this.getRandomX(1.0D), this.getRandomY() + 0.5D, this.getRandomZ(1.0D), d0, d1, d2);
+         }
+      } else {
+         super.handleEntityEvent(p_27562_);
+      }
+
+   }
 }
