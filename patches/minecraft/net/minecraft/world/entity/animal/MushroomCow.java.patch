--- a/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/net/minecraft/world/entity/animal/MushroomCow.java
@@ -8,7 +_,6 @@
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
-import net.minecraft.nbt.Tag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
@@ -28,11 +_,13 @@
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Shearable;
 import net.minecraft.world.entity.VariantHolder;
+import net.minecraft.world.entity.animal.MushroomCow.MushroomType;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ItemUtils;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.item.SuspiciousStewItem;
 import net.minecraft.world.item.component.SuspiciousStewEffects;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
@@ -41,13 +_,17 @@
 import net.minecraft.world.level.block.SuspiciousEffectHolder;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.gameevent.GameEvent;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityDropItemEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
 
 public class MushroomCow extends Cow implements Shearable, VariantHolder<MushroomCow.MushroomType> {
     private static final EntityDataAccessor<String> DATA_TYPE = SynchedEntityData.defineId(MushroomCow.class, EntityDataSerializers.STRING);
     private static final int MUTATE_CHANCE = 1024;
     private static final String TAG_STEW_EFFECTS = "stew_effects";
     @Nullable
-    private SuspiciousStewEffects stewEffects;
+    public SuspiciousStewEffects stewEffects;
     @Nullable
     private UUID lastLightningBoltUUID;
 
@@ -108,7 +_,7 @@
 
             this.playSound(soundevent, 1.0F, 1.0F);
             return InteractionResult.sidedSuccess(this.level().isClientSide);
-        } else if (itemstack.is(Items.SHEARS) && this.readyForShearing()) {
+        } else if (false && itemstack.is(Items.SHEARS) && this.readyForShearing()) { //Forge: Moved to onSheared
             this.shear(SoundSource.PLAYERS);
             this.gameEvent(GameEvent.SHEAR, p_28941_);
             if (!this.level().isClientSide) {
@@ -163,12 +_,17 @@
 
     @Override
     public void shear(SoundSource p_28924_) {
+        shearInternal(p_28924_).forEach(s -> this.level().addFreshEntity(new ItemEntity(this.level(), this.getX(), this.getY(1.0D), this.getZ(), s)));
+    }
+
+    private java.util.List<ItemStack> shearInternal(SoundSource p_28924_) {
         this.level().playSound(null, this, SoundEvents.MOOSHROOM_SHEAR, p_28924_, 1.0F, 1.0F);
         if (!this.level().isClientSide()) {
+            if (!net.minecraftforge.event.ForgeEventFactory.canLivingConvert(this, EntityType.COW, time -> {})) return java.util.Collections.emptyList();
             Cow cow = EntityType.COW.create(this.level());
             if (cow != null) {
                 ((ServerLevel)this.level()).sendParticles(ParticleTypes.EXPLOSION, this.getX(), this.getY(0.5), this.getZ(), 1, 0.0, 0.0, 0.0, 0.0);
-                this.discard();
+            	// this.discard(); // CraftBukkit - moved down
                 cow.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
                 cow.setHealth(this.getHealth());
                 cow.yBodyRot = this.yBodyRot;
@@ -182,18 +_,33 @@
                 }
 
                 cow.setInvulnerable(this.isInvulnerable());
-                this.level().addFreshEntity(cow);
-
+            	// CraftBukkit start
+            	if (CraftEventFactory.callEntityTransformEvent(this, cow, EntityTransformEvent.TransformReason.SHEARED).isCancelled()) {
+               		return java.util.Collections.emptyList();
+            	}
+            	cow.spawnReason(org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SHEARED);
+            	this.level().addFreshEntity(cow);
+
+            	this.discard(); // CraftBukkit - from above
+            	// CraftBukkit end
+            	net.minecraftforge.event.ForgeEventFactory.onLivingConvert(this, cow);
+
+                var items = new java.util.ArrayList<ItemStack>();
                 for (int i = 0; i < 5; i++) {
-                    this.level()
-                        .addFreshEntity(
-                            new ItemEntity(
-                                this.level(), this.getX(), this.getY(1.0), this.getZ(), new ItemStack(this.getVariant().blockState.getBlock())
-                            )
-                        );
+               		// CraftBukkit start
+               		ItemEntity entityitem = new ItemEntity(this.level, this.getX(), this.getY(1.0D), this.getZ(), new ItemStack(this.getVariant().blockState.getBlock()));
+               		EntityDropItemEvent event = new EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+               		Bukkit.getPluginManager().callEvent(event);
+               		if (event.isCancelled()) {
+                  		continue;
+               		}
+               		// CraftBukkit end
+                    items.add(new ItemStack(this.getVariant().blockState.getBlock()));
                 }
+                return items;
             }
         }
+        return java.util.Collections.emptyList();
     }
 
     @Override
@@ -255,6 +_,12 @@
         }
 
         return mushroomcow$mushroomtype2;
+    }
+
+    @Override
+    public java.util.List<ItemStack> onSheared(@org.jetbrains.annotations.Nullable Player player, @org.jetbrains.annotations.NotNull ItemStack item, Level world, BlockPos pos, int fortune) {
+        this.gameEvent(GameEvent.SHEAR, player);
+        return shearInternal(player == null ? SoundSource.BLOCKS : SoundSource.PLAYERS);
     }
 
     public static enum MushroomType implements StringRepresentable {
