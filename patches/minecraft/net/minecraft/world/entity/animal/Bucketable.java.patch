--- a/net/minecraft/world/entity/animal/Bucketable.java
+++ b/net/minecraft/world/entity/animal/Bucketable.java
@@ -2,8 +_,8 @@
 
 import java.util.Optional;
 import net.minecraft.advancements.CriteriaTriggers;
-import net.minecraft.core.component.DataComponents;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.world.InteractionHand;
@@ -14,94 +_,113 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ItemUtils;
 import net.minecraft.world.item.Items;
-import net.minecraft.world.item.component.CustomData;
 import net.minecraft.world.level.Level;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.player.PlayerBucketEntityEvent;
 
 public interface Bucketable {
-    boolean fromBucket();
-
-    void setFromBucket(boolean p_148834_);
-
-    void saveToBucketTag(ItemStack p_148833_);
-
-    void loadFromBucketTag(CompoundTag p_148832_);
-
-    ItemStack getBucketItemStack();
-
-    SoundEvent getPickupSound();
-
-    @Deprecated
-    static void saveDefaultDataToBucketTag(Mob p_148823_, ItemStack p_148824_) {
-        p_148824_.set(DataComponents.CUSTOM_NAME, p_148823_.getCustomName());
-        CustomData.update(DataComponents.BUCKET_ENTITY_DATA, p_148824_, p_335779_ -> {
-            if (p_148823_.isNoAi()) {
-                p_335779_.putBoolean("NoAI", p_148823_.isNoAi());
-            }
-
-            if (p_148823_.isSilent()) {
-                p_335779_.putBoolean("Silent", p_148823_.isSilent());
-            }
-
-            if (p_148823_.isNoGravity()) {
-                p_335779_.putBoolean("NoGravity", p_148823_.isNoGravity());
-            }
-
-            if (p_148823_.hasGlowingTag()) {
-                p_335779_.putBoolean("Glowing", p_148823_.hasGlowingTag());
-            }
-
-            if (p_148823_.isInvulnerable()) {
-                p_335779_.putBoolean("Invulnerable", p_148823_.isInvulnerable());
-            }
-
-            p_335779_.putFloat("Health", p_148823_.getHealth());
-        });
-    }
-
-    @Deprecated
-    static void loadDefaultDataFromBucketTag(Mob p_148826_, CompoundTag p_148827_) {
-        if (p_148827_.contains("NoAI")) {
-            p_148826_.setNoAi(p_148827_.getBoolean("NoAI"));
-        }
-
-        if (p_148827_.contains("Silent")) {
-            p_148826_.setSilent(p_148827_.getBoolean("Silent"));
-        }
-
-        if (p_148827_.contains("NoGravity")) {
-            p_148826_.setNoGravity(p_148827_.getBoolean("NoGravity"));
-        }
-
-        if (p_148827_.contains("Glowing")) {
-            p_148826_.setGlowingTag(p_148827_.getBoolean("Glowing"));
-        }
-
-        if (p_148827_.contains("Invulnerable")) {
-            p_148826_.setInvulnerable(p_148827_.getBoolean("Invulnerable"));
-        }
-
-        if (p_148827_.contains("Health", 99)) {
-            p_148826_.setHealth(p_148827_.getFloat("Health"));
-        }
-    }
-
-    static <T extends LivingEntity & Bucketable> Optional<InteractionResult> bucketMobPickup(Player p_148829_, InteractionHand p_148830_, T p_148831_) {
-        ItemStack itemstack = p_148829_.getItemInHand(p_148830_);
-        if (itemstack.getItem() == Items.WATER_BUCKET && p_148831_.isAlive()) {
-            p_148831_.playSound(p_148831_.getPickupSound(), 1.0F, 1.0F);
-            ItemStack itemstack1 = p_148831_.getBucketItemStack();
-            p_148831_.saveToBucketTag(itemstack1);
-            ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, p_148829_, itemstack1, false);
-            p_148829_.setItemInHand(p_148830_, itemstack2);
-            Level level = p_148831_.level();
-            if (!level.isClientSide) {
-                CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)p_148829_, itemstack1);
-            }
-
-            p_148831_.discard();
-            return Optional.of(InteractionResult.sidedSuccess(level.isClientSide));
-        } else {
-            return Optional.empty();
-        }
-    }
+   boolean fromBucket();
+
+   void setFromBucket(boolean p_148834_);
+
+   void saveToBucketTag(ItemStack p_148833_);
+
+   void loadFromBucketTag(CompoundTag p_148832_);
+
+   ItemStack getBucketItemStack();
+
+   SoundEvent getPickupSound();
+
+   /** @deprecated */
+   @Deprecated
+   static void saveDefaultDataToBucketTag(Mob p_148823_, ItemStack p_148824_) {
+      CompoundTag compoundtag = p_148824_.getOrCreateTag();
+      if (p_148823_.hasCustomName()) {
+         p_148824_.setHoverName(p_148823_.getCustomName());
+      }
+
+      if (p_148823_.isNoAi()) {
+         compoundtag.putBoolean("NoAI", p_148823_.isNoAi());
+      }
+
+      if (p_148823_.isSilent()) {
+         compoundtag.putBoolean("Silent", p_148823_.isSilent());
+      }
+
+      if (p_148823_.isNoGravity()) {
+         compoundtag.putBoolean("NoGravity", p_148823_.isNoGravity());
+      }
+
+      if (p_148823_.hasGlowingTag()) {
+         compoundtag.putBoolean("Glowing", p_148823_.hasGlowingTag());
+      }
+
+      if (p_148823_.isInvulnerable()) {
+         compoundtag.putBoolean("Invulnerable", p_148823_.isInvulnerable());
+      }
+
+      compoundtag.putFloat("Health", p_148823_.getHealth());
+   }
+
+   /** @deprecated */
+   @Deprecated
+   static void loadDefaultDataFromBucketTag(Mob p_148826_, CompoundTag p_148827_) {
+      if (p_148827_.contains("NoAI")) {
+         p_148826_.setNoAi(p_148827_.getBoolean("NoAI"));
+      }
+
+      if (p_148827_.contains("Silent")) {
+         p_148826_.setSilent(p_148827_.getBoolean("Silent"));
+      }
+
+      if (p_148827_.contains("NoGravity")) {
+         p_148826_.setNoGravity(p_148827_.getBoolean("NoGravity"));
+      }
+
+      if (p_148827_.contains("Glowing")) {
+         p_148826_.setGlowingTag(p_148827_.getBoolean("Glowing"));
+      }
+
+      if (p_148827_.contains("Invulnerable")) {
+         p_148826_.setInvulnerable(p_148827_.getBoolean("Invulnerable"));
+      }
+
+      if (p_148827_.contains("Health", 99)) {
+         p_148826_.setHealth(p_148827_.getFloat("Health"));
+      }
+
+   }
+
+   static <T extends LivingEntity & Bucketable> Optional<InteractionResult> bucketMobPickup(Player p_148829_, InteractionHand p_148830_, T p_148831_) {
+      ItemStack itemstack = p_148829_.getItemInHand(p_148830_);
+      if (itemstack.getItem() == Items.WATER_BUCKET && p_148831_.isAlive()) {
+         // pEntity.playSound(pEntity.getPickupSound(), 1.0F, 1.0F); // CraftBukkit - moved down
+         ItemStack itemstack1 = p_148831_.getBucketItemStack();
+         p_148831_.saveToBucketTag(itemstack1);
+
+         PlayerBucketEntityEvent playerBucketFishEvent = CraftEventFactory.callPlayerFishBucketEvent(p_148831_, p_148829_, itemstack, itemstack1, p_148830_);
+         itemstack1 = CraftItemStack.asNMSCopy(playerBucketFishEvent.getEntityBucket());
+         if (playerBucketFishEvent.isCancelled()) {
+            ((ServerPlayer) p_148829_).containerMenu.sendAllDataToRemote(); // We need to update inventory to resync client's bucket
+            ((ServerPlayer) p_148829_).connection.send(new ClientboundAddEntityPacket(p_148831_)); // We need to play out these packets as the client assumes the fish is gone
+            p_148831_.getEntityData().refresh((ServerPlayer) p_148829_); // Need to send data such as the display name to client
+            return Optional.of(InteractionResult.FAIL);
+         }
+         p_148831_.playSound(p_148831_.getPickupSound(), 1.0F, 1.0F);
+         // CraftBukkit end
+
+         ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, p_148829_, itemstack1, false);
+         p_148829_.setItemInHand(p_148830_, itemstack2);
+         Level level = p_148831_.level();
+         if (!level.isClientSide) {
+            CriteriaTriggers.FILLED_BUCKET.trigger((ServerPlayer)p_148829_, itemstack1);
+         }
+
+         p_148831_.discard();
+         return Optional.of(InteractionResult.sidedSuccess(level.isClientSide));
+      } else {
+         return Optional.empty();
+      }
+   }
 }
