--- a/net/minecraft/world/entity/animal/Parrot.java
+++ b/net/minecraft/world/entity/animal/Parrot.java
@@ -2,10 +_,11 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import com.mojang.serialization.Codec;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.function.IntFunction;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
@@ -21,7 +_,6 @@
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
 import net.minecraft.tags.BlockTags;
-import net.minecraft.tags.ItemTags;
 import net.minecraft.util.ByIdMap;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
@@ -35,10 +_,12 @@
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.AgeableMob;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.VariantHolder;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
@@ -56,459 +_,427 @@
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.ai.util.LandRandomPos;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.state.BlockState;
-import net.minecraft.world.level.pathfinder.PathType;
+import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
+import org.joml.Vector3f;
 
 public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot.Variant>, FlyingAnimal {
-    private static final EntityDataAccessor<Integer> DATA_VARIANT_ID = SynchedEntityData.defineId(Parrot.class, EntityDataSerializers.INT);
-    private static final Predicate<Mob> NOT_PARROT_PREDICATE = new Predicate<Mob>() {
-        public boolean test(@Nullable Mob p_29453_) {
-            return p_29453_ != null && Parrot.MOB_SOUND_MAP.containsKey(p_29453_.getType());
-        }
-    };
-    static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = Util.make(Maps.newHashMap(), p_326979_ -> {
-        p_326979_.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
-        p_326979_.put(EntityType.BOGGED, SoundEvents.PARROT_IMITATE_BOGGED);
-        p_326979_.put(EntityType.BREEZE, SoundEvents.PARROT_IMITATE_BREEZE);
-        p_326979_.put(EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
-        p_326979_.put(EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
-        p_326979_.put(EntityType.DROWNED, SoundEvents.PARROT_IMITATE_DROWNED);
-        p_326979_.put(EntityType.ELDER_GUARDIAN, SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN);
-        p_326979_.put(EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
-        p_326979_.put(EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
-        p_326979_.put(EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
-        p_326979_.put(EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
-        p_326979_.put(EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
-        p_326979_.put(EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
-        p_326979_.put(EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
-        p_326979_.put(EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
-        p_326979_.put(EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
-        p_326979_.put(EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
-        p_326979_.put(EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
-        p_326979_.put(EntityType.PIGLIN_BRUTE, SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE);
-        p_326979_.put(EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
-        p_326979_.put(EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
-        p_326979_.put(EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
-        p_326979_.put(EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
-        p_326979_.put(EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
-        p_326979_.put(EntityType.SLIME, SoundEvents.PARROT_IMITATE_SLIME);
-        p_326979_.put(EntityType.SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
-        p_326979_.put(EntityType.STRAY, SoundEvents.PARROT_IMITATE_STRAY);
-        p_326979_.put(EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
-        p_326979_.put(EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
-        p_326979_.put(EntityType.WARDEN, SoundEvents.PARROT_IMITATE_WARDEN);
-        p_326979_.put(EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
-        p_326979_.put(EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
-        p_326979_.put(EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
-        p_326979_.put(EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
-        p_326979_.put(EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
-        p_326979_.put(EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
-    });
-    public float flap;
-    public float flapSpeed;
-    public float oFlapSpeed;
-    public float oFlap;
-    private float flapping = 1.0F;
-    private float nextFlap = 1.0F;
-    private boolean partyParrot;
-    @Nullable
-    private BlockPos jukebox;
-
-    public Parrot(EntityType<? extends Parrot> p_29362_, Level p_29363_) {
-        super(p_29362_, p_29363_);
-        this.moveControl = new FlyingMoveControl(this, 10, false);
-        this.setPathfindingMalus(PathType.DANGER_FIRE, -1.0F);
-        this.setPathfindingMalus(PathType.DAMAGE_FIRE, -1.0F);
-        this.setPathfindingMalus(PathType.COCOA, -1.0F);
-    }
-
-    @Nullable
-    @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor p_29389_, DifficultyInstance p_29390_, MobSpawnType p_29391_, @Nullable SpawnGroupData p_29392_) {
-        this.setVariant(Util.getRandom(Parrot.Variant.values(), p_29389_.getRandom()));
-        if (p_29392_ == null) {
-            p_29392_ = new AgeableMob.AgeableMobGroupData(false);
-        }
-
-        return super.finalizeSpawn(p_29389_, p_29390_, p_29391_, p_29392_);
-    }
-
-    @Override
-    public boolean isBaby() {
-        return false;
-    }
-
-    @Override
-    protected void registerGoals() {
-        this.goalSelector.addGoal(0, new PanicGoal(this, 1.25));
-        this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(1, new LookAtPlayerGoal(this, Player.class, 8.0F));
-        this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
-        this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0, 5.0F, 1.0F, true));
-        this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0));
-        this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
-        this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0, 3.0F, 7.0F));
-    }
-
-    public static AttributeSupplier.Builder createAttributes() {
-        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 6.0).add(Attributes.FLYING_SPEED, 0.4F).add(Attributes.MOVEMENT_SPEED, 0.2F);
-    }
-
-    @Override
-    protected PathNavigation createNavigation(Level p_29417_) {
-        FlyingPathNavigation flyingpathnavigation = new FlyingPathNavigation(this, p_29417_);
-        flyingpathnavigation.setCanOpenDoors(false);
-        flyingpathnavigation.setCanFloat(true);
-        flyingpathnavigation.setCanPassDoors(true);
-        return flyingpathnavigation;
-    }
-
-    @Override
-    public void aiStep() {
-        if (this.jukebox == null || !this.jukebox.closerToCenterThan(this.position(), 3.46) || !this.level().getBlockState(this.jukebox).is(Blocks.JUKEBOX)) {
-            this.partyParrot = false;
-            this.jukebox = null;
-        }
-
-        if (this.level().random.nextInt(400) == 0) {
-            imitateNearbyMobs(this.level(), this);
-        }
-
-        super.aiStep();
-        this.calculateFlapping();
-    }
-
-    @Override
-    public void setRecordPlayingNearby(BlockPos p_29395_, boolean p_29396_) {
-        this.jukebox = p_29395_;
-        this.partyParrot = p_29396_;
-    }
-
-    public boolean isPartyParrot() {
-        return this.partyParrot;
-    }
-
-    private void calculateFlapping() {
-        this.oFlap = this.flap;
-        this.oFlapSpeed = this.flapSpeed;
-        this.flapSpeed = this.flapSpeed + (float)(!this.onGround() && !this.isPassenger() ? 4 : -1) * 0.3F;
-        this.flapSpeed = Mth.clamp(this.flapSpeed, 0.0F, 1.0F);
-        if (!this.onGround() && this.flapping < 1.0F) {
-            this.flapping = 1.0F;
-        }
-
-        this.flapping *= 0.9F;
-        Vec3 vec3 = this.getDeltaMovement();
-        if (!this.onGround() && vec3.y < 0.0) {
-            this.setDeltaMovement(vec3.multiply(1.0, 0.6, 1.0));
-        }
-
-        this.flap = this.flap + this.flapping * 2.0F;
-    }
-
-    public static boolean imitateNearbyMobs(Level p_29383_, Entity p_29384_) {
-        if (p_29384_.isAlive() && !p_29384_.isSilent() && p_29383_.random.nextInt(2) == 0) {
-            List<Mob> list = p_29383_.getEntitiesOfClass(Mob.class, p_29384_.getBoundingBox().inflate(20.0), NOT_PARROT_PREDICATE);
-            if (!list.isEmpty()) {
-                Mob mob = list.get(p_29383_.random.nextInt(list.size()));
-                if (!mob.isSilent()) {
-                    SoundEvent soundevent = getImitatedSound(mob.getType());
-                    p_29383_.playSound(
-                        null, p_29384_.getX(), p_29384_.getY(), p_29384_.getZ(), soundevent, p_29384_.getSoundSource(), 0.7F, getPitch(p_29383_.random)
-                    );
-                    return true;
-                }
-            }
-
-            return false;
-        } else {
-            return false;
-        }
-    }
-
-    @Override
-    public InteractionResult mobInteract(Player p_29414_, InteractionHand p_29415_) {
-        ItemStack itemstack = p_29414_.getItemInHand(p_29415_);
-        if (!this.isTame() && itemstack.is(ItemTags.PARROT_FOOD)) {
-            itemstack.consume(1, p_29414_);
-            if (!this.isSilent()) {
-                this.level()
-                    .playSound(
-                        null,
-                        this.getX(),
-                        this.getY(),
-                        this.getZ(),
-                        SoundEvents.PARROT_EAT,
-                        this.getSoundSource(),
-                        1.0F,
-                        1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F
-                    );
-            }
-
-            if (!this.level().isClientSide) {
-                if (this.random.nextInt(10) == 0) {
-                    this.tame(p_29414_);
-                    this.level().broadcastEntityEvent(this, (byte)7);
-                } else {
-                    this.level().broadcastEntityEvent(this, (byte)6);
-                }
-            }
-
-            return InteractionResult.sidedSuccess(this.level().isClientSide);
-        } else if (!itemstack.is(ItemTags.PARROT_POISONOUS_FOOD)) {
-            if (!this.isFlying() && this.isTame() && this.isOwnedBy(p_29414_)) {
-                if (!this.level().isClientSide) {
-                    this.setOrderedToSit(!this.isOrderedToSit());
-                }
-
-                return InteractionResult.sidedSuccess(this.level().isClientSide);
+   private static final EntityDataAccessor<Integer> DATA_VARIANT_ID = SynchedEntityData.defineId(Parrot.class, EntityDataSerializers.INT);
+   private static final Predicate<Mob> NOT_PARROT_PREDICATE = new Predicate<Mob>() {
+      public boolean test(@Nullable Mob p_29453_) {
+         return p_29453_ != null && Parrot.MOB_SOUND_MAP.containsKey(p_29453_.getType());
+      }
+   };
+   private static final Item POISONOUS_FOOD = Items.COOKIE;
+   private static final Set<Item> TAME_FOOD = Sets.newHashSet(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS, Items.TORCHFLOWER_SEEDS, Items.PITCHER_POD);
+   static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = Util.make(Maps.newHashMap(), (p_309170_) -> {
+      p_309170_.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
+      p_309170_.put(EntityType.BREEZE, SoundEvents.PARROT_IMITATE_BREEZE);
+      p_309170_.put(EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
+      p_309170_.put(EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
+      p_309170_.put(EntityType.DROWNED, SoundEvents.PARROT_IMITATE_DROWNED);
+      p_309170_.put(EntityType.ELDER_GUARDIAN, SoundEvents.PARROT_IMITATE_ELDER_GUARDIAN);
+      p_309170_.put(EntityType.ENDER_DRAGON, SoundEvents.PARROT_IMITATE_ENDER_DRAGON);
+      p_309170_.put(EntityType.ENDERMITE, SoundEvents.PARROT_IMITATE_ENDERMITE);
+      p_309170_.put(EntityType.EVOKER, SoundEvents.PARROT_IMITATE_EVOKER);
+      p_309170_.put(EntityType.GHAST, SoundEvents.PARROT_IMITATE_GHAST);
+      p_309170_.put(EntityType.GUARDIAN, SoundEvents.PARROT_IMITATE_GUARDIAN);
+      p_309170_.put(EntityType.HOGLIN, SoundEvents.PARROT_IMITATE_HOGLIN);
+      p_309170_.put(EntityType.HUSK, SoundEvents.PARROT_IMITATE_HUSK);
+      p_309170_.put(EntityType.ILLUSIONER, SoundEvents.PARROT_IMITATE_ILLUSIONER);
+      p_309170_.put(EntityType.MAGMA_CUBE, SoundEvents.PARROT_IMITATE_MAGMA_CUBE);
+      p_309170_.put(EntityType.PHANTOM, SoundEvents.PARROT_IMITATE_PHANTOM);
+      p_309170_.put(EntityType.PIGLIN, SoundEvents.PARROT_IMITATE_PIGLIN);
+      p_309170_.put(EntityType.PIGLIN_BRUTE, SoundEvents.PARROT_IMITATE_PIGLIN_BRUTE);
+      p_309170_.put(EntityType.PILLAGER, SoundEvents.PARROT_IMITATE_PILLAGER);
+      p_309170_.put(EntityType.RAVAGER, SoundEvents.PARROT_IMITATE_RAVAGER);
+      p_309170_.put(EntityType.SHULKER, SoundEvents.PARROT_IMITATE_SHULKER);
+      p_309170_.put(EntityType.SILVERFISH, SoundEvents.PARROT_IMITATE_SILVERFISH);
+      p_309170_.put(EntityType.SKELETON, SoundEvents.PARROT_IMITATE_SKELETON);
+      p_309170_.put(EntityType.SLIME, SoundEvents.PARROT_IMITATE_SLIME);
+      p_309170_.put(EntityType.SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
+      p_309170_.put(EntityType.STRAY, SoundEvents.PARROT_IMITATE_STRAY);
+      p_309170_.put(EntityType.VEX, SoundEvents.PARROT_IMITATE_VEX);
+      p_309170_.put(EntityType.VINDICATOR, SoundEvents.PARROT_IMITATE_VINDICATOR);
+      p_309170_.put(EntityType.WARDEN, SoundEvents.PARROT_IMITATE_WARDEN);
+      p_309170_.put(EntityType.WITCH, SoundEvents.PARROT_IMITATE_WITCH);
+      p_309170_.put(EntityType.WITHER, SoundEvents.PARROT_IMITATE_WITHER);
+      p_309170_.put(EntityType.WITHER_SKELETON, SoundEvents.PARROT_IMITATE_WITHER_SKELETON);
+      p_309170_.put(EntityType.ZOGLIN, SoundEvents.PARROT_IMITATE_ZOGLIN);
+      p_309170_.put(EntityType.ZOMBIE, SoundEvents.PARROT_IMITATE_ZOMBIE);
+      p_309170_.put(EntityType.ZOMBIE_VILLAGER, SoundEvents.PARROT_IMITATE_ZOMBIE_VILLAGER);
+   });
+   public float flap;
+   public float flapSpeed;
+   public float oFlapSpeed;
+   public float oFlap;
+   private float flapping = 1.0F;
+   private float nextFlap = 1.0F;
+   private boolean partyParrot;
+   @Nullable
+   private BlockPos jukebox;
+
+   public Parrot(EntityType<? extends Parrot> p_29362_, Level p_29363_) {
+      super(p_29362_, p_29363_);
+      this.moveControl = new FlyingMoveControl(this, 10, false);
+      this.setPathfindingMalus(BlockPathTypes.DANGER_FIRE, -1.0F);
+      this.setPathfindingMalus(BlockPathTypes.DAMAGE_FIRE, -1.0F);
+      this.setPathfindingMalus(BlockPathTypes.COCOA, -1.0F);
+   }
+
+   @Nullable
+   public SpawnGroupData finalizeSpawn(ServerLevelAccessor p_29389_, DifficultyInstance p_29390_, MobSpawnType p_29391_, @Nullable SpawnGroupData p_29392_, @Nullable CompoundTag p_29393_) {
+      this.setVariant(Util.getRandom(Parrot.Variant.values(), p_29389_.getRandom()));
+      if (p_29392_ == null) {
+         p_29392_ = new AgeableMob.AgeableMobGroupData(false);
+      }
+
+      return super.finalizeSpawn(p_29389_, p_29390_, p_29391_, p_29392_, p_29393_);
+   }
+
+   public boolean isBaby() {
+      return false;
+   }
+
+   protected void registerGoals() {
+      this.goalSelector.addGoal(0, new PanicGoal(this, 1.25D));
+      this.goalSelector.addGoal(0, new FloatGoal(this));
+      this.goalSelector.addGoal(1, new LookAtPlayerGoal(this, Player.class, 8.0F));
+      this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
+      this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0D, 5.0F, 1.0F, true));
+      this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0D));
+      this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
+      this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F));
+   }
+
+   public static AttributeSupplier.Builder createAttributes() {
+      return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 6.0D).add(Attributes.FLYING_SPEED, (double)0.4F).add(Attributes.MOVEMENT_SPEED, (double)0.2F);
+   }
+
+   protected PathNavigation createNavigation(Level p_29417_) {
+      FlyingPathNavigation flyingpathnavigation = new FlyingPathNavigation(this, p_29417_);
+      flyingpathnavigation.setCanOpenDoors(false);
+      flyingpathnavigation.setCanFloat(true);
+      flyingpathnavigation.setCanPassDoors(true);
+      return flyingpathnavigation;
+   }
+
+   protected float getStandingEyeHeight(Pose p_29411_, EntityDimensions p_29412_) {
+      return p_29412_.height * 0.6F;
+   }
+
+   public void aiStep() {
+      if (this.jukebox == null || !this.jukebox.closerToCenterThan(this.position(), 3.46D) || !this.level().getBlockState(this.jukebox).is(Blocks.JUKEBOX)) {
+         this.partyParrot = false;
+         this.jukebox = null;
+      }
+
+      if (this.level().random.nextInt(400) == 0) {
+         imitateNearbyMobs(this.level(), this);
+      }
+
+      super.aiStep();
+      this.calculateFlapping();
+   }
+
+   public void setRecordPlayingNearby(BlockPos p_29395_, boolean p_29396_) {
+      this.jukebox = p_29395_;
+      this.partyParrot = p_29396_;
+   }
+
+   public boolean isPartyParrot() {
+      return this.partyParrot;
+   }
+
+   private void calculateFlapping() {
+      this.oFlap = this.flap;
+      this.oFlapSpeed = this.flapSpeed;
+      this.flapSpeed += (float)(!this.onGround() && !this.isPassenger() ? 4 : -1) * 0.3F;
+      this.flapSpeed = Mth.clamp(this.flapSpeed, 0.0F, 1.0F);
+      if (!this.onGround() && this.flapping < 1.0F) {
+         this.flapping = 1.0F;
+      }
+
+      this.flapping *= 0.9F;
+      Vec3 vec3 = this.getDeltaMovement();
+      if (!this.onGround() && vec3.y < 0.0D) {
+         this.setDeltaMovement(vec3.multiply(1.0D, 0.6D, 1.0D));
+      }
+
+      this.flap += this.flapping * 2.0F;
+   }
+
+   public static boolean imitateNearbyMobs(Level p_29383_, Entity p_29384_) {
+      if (p_29384_.isAlive() && !p_29384_.isSilent() && p_29383_.random.nextInt(2) == 0) {
+         List<Mob> list = p_29383_.getEntitiesOfClass(Mob.class, p_29384_.getBoundingBox().inflate(20.0D), NOT_PARROT_PREDICATE);
+         if (!list.isEmpty()) {
+            Mob mob = list.get(p_29383_.random.nextInt(list.size()));
+            if (!mob.isSilent()) {
+               SoundEvent soundevent = getImitatedSound(mob.getType());
+               p_29383_.playSound((Player)null, p_29384_.getX(), p_29384_.getY(), p_29384_.getZ(), soundevent, p_29384_.getSoundSource(), 0.7F, getPitch(p_29383_.random));
+               return true;
+            }
+         }
+
+         return false;
+      } else {
+         return false;
+      }
+   }
+
+   public InteractionResult mobInteract(Player p_29414_, InteractionHand p_29415_) {
+      ItemStack itemstack = p_29414_.getItemInHand(p_29415_);
+      if (!this.isTame() && TAME_FOOD.contains(itemstack.getItem())) {
+         if (!p_29414_.getAbilities().instabuild) {
+            itemstack.shrink(1);
+         }
+
+         if (!this.isSilent()) {
+            this.level().playSound((Player)null, this.getX(), this.getY(), this.getZ(), SoundEvents.PARROT_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+         }
+
+         if (!this.level().isClientSide) {
+            if (this.random.nextInt(10) == 0 && (!net.minecraftforge.event.ForgeEventFactory.onAnimalTame(this, p_29414_) || !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTameEvent(this, p_29414_).isCancelled())) {
+               this.tame(p_29414_);
+               this.level().broadcastEntityEvent(this, (byte)7);
             } else {
-                return super.mobInteract(p_29414_, p_29415_);
-            }
-        } else {
-            itemstack.consume(1, p_29414_);
-            this.addEffect(new MobEffectInstance(MobEffects.POISON, 900));
-            if (p_29414_.isCreative() || !this.isInvulnerable()) {
-                this.hurt(this.damageSources().playerAttack(p_29414_), Float.MAX_VALUE);
-            }
-
-            return InteractionResult.sidedSuccess(this.level().isClientSide);
-        }
-    }
-
-    @Override
-    public boolean isFood(ItemStack p_29446_) {
-        return false;
-    }
-
-    public static boolean checkParrotSpawnRules(EntityType<Parrot> p_218242_, LevelAccessor p_218243_, MobSpawnType p_218244_, BlockPos p_218245_, RandomSource p_218246_) {
-        return p_218243_.getBlockState(p_218245_.below()).is(BlockTags.PARROTS_SPAWNABLE_ON) && isBrightEnoughToSpawn(p_218243_, p_218245_);
-    }
-
-    @Override
-    protected void checkFallDamage(double p_29370_, boolean p_29371_, BlockState p_29372_, BlockPos p_29373_) {
-    }
-
-    @Override
-    public boolean canMate(Animal p_29381_) {
-        return false;
-    }
-
-    @Nullable
-    @Override
-    public AgeableMob getBreedOffspring(ServerLevel p_148993_, AgeableMob p_148994_) {
-        return null;
-    }
-
-    @Override
-    public boolean doHurtTarget(Entity p_29365_) {
-        return p_29365_.hurt(this.damageSources().mobAttack(this), 3.0F);
-    }
-
-    @Nullable
-    @Override
-    public SoundEvent getAmbientSound() {
-        return getAmbient(this.level(), this.level().random);
-    }
-
-    public static SoundEvent getAmbient(Level p_218239_, RandomSource p_218240_) {
-        if (p_218239_.getDifficulty() != Difficulty.PEACEFUL && p_218240_.nextInt(1000) == 0) {
-            List<EntityType<?>> list = Lists.newArrayList(MOB_SOUND_MAP.keySet());
-            return getImitatedSound(list.get(p_218240_.nextInt(list.size())));
-        } else {
-            return SoundEvents.PARROT_AMBIENT;
-        }
-    }
-
-    private static SoundEvent getImitatedSound(EntityType<?> p_29409_) {
-        return MOB_SOUND_MAP.getOrDefault(p_29409_, SoundEvents.PARROT_AMBIENT);
-    }
-
-    @Override
-    protected SoundEvent getHurtSound(DamageSource p_29437_) {
-        return SoundEvents.PARROT_HURT;
-    }
-
-    @Override
-    protected SoundEvent getDeathSound() {
-        return SoundEvents.PARROT_DEATH;
-    }
-
-    @Override
-    protected void playStepSound(BlockPos p_29419_, BlockState p_29420_) {
-        this.playSound(SoundEvents.PARROT_STEP, 0.15F, 1.0F);
-    }
-
-    @Override
-    protected boolean isFlapping() {
-        return this.flyDist > this.nextFlap;
-    }
-
-    @Override
-    protected void onFlap() {
-        this.playSound(SoundEvents.PARROT_FLY, 0.15F, 1.0F);
-        this.nextFlap = this.flyDist + this.flapSpeed / 2.0F;
-    }
-
-    @Override
-    public float getVoicePitch() {
-        return getPitch(this.random);
-    }
-
-    public static float getPitch(RandomSource p_218237_) {
-        return (p_218237_.nextFloat() - p_218237_.nextFloat()) * 0.2F + 1.0F;
-    }
-
-    @Override
-    public SoundSource getSoundSource() {
-        return SoundSource.NEUTRAL;
-    }
-
-    @Override
-    public boolean isPushable() {
-        return true;
-    }
-
-    @Override
-    protected void doPush(Entity p_29367_) {
-        if (!(p_29367_ instanceof Player)) {
-            super.doPush(p_29367_);
-        }
-    }
-
-    @Override
-    public boolean hurt(DamageSource p_29378_, float p_29379_) {
-        if (this.isInvulnerableTo(p_29378_)) {
-            return false;
-        } else {
-            if (!this.level().isClientSide) {
-                this.setOrderedToSit(false);
-            }
-
-            return super.hurt(p_29378_, p_29379_);
-        }
-    }
-
-    public Parrot.Variant getVariant() {
-        return Parrot.Variant.byId(this.entityData.get(DATA_VARIANT_ID));
-    }
-
-    public void setVariant(Parrot.Variant p_262613_) {
-        this.entityData.set(DATA_VARIANT_ID, p_262613_.id);
-    }
-
-    @Override
-    protected void defineSynchedData(SynchedEntityData.Builder p_335317_) {
-        super.defineSynchedData(p_335317_);
-        p_335317_.define(DATA_VARIANT_ID, 0);
-    }
-
-    @Override
-    public void addAdditionalSaveData(CompoundTag p_29422_) {
-        super.addAdditionalSaveData(p_29422_);
-        p_29422_.putInt("Variant", this.getVariant().id);
-    }
-
-    @Override
-    public void readAdditionalSaveData(CompoundTag p_29402_) {
-        super.readAdditionalSaveData(p_29402_);
-        this.setVariant(Parrot.Variant.byId(p_29402_.getInt("Variant")));
-    }
-
-    @Override
-    public boolean isFlying() {
-        return !this.onGround();
-    }
-
-    @Override
-    public Vec3 getLeashOffset() {
-        return new Vec3(0.0, (double)(0.5F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
-    }
-
-    static class ParrotWanderGoal extends WaterAvoidingRandomFlyingGoal {
-        public ParrotWanderGoal(PathfinderMob p_186224_, double p_186225_) {
-            super(p_186224_, p_186225_);
-        }
-
-        @Nullable
-        @Override
-        protected Vec3 getPosition() {
-            Vec3 vec3 = null;
-            if (this.mob.isInWater()) {
-                vec3 = LandRandomPos.getPos(this.mob, 15, 15);
-            }
-
-            if (this.mob.getRandom().nextFloat() >= this.probability) {
-                vec3 = this.getTreePos();
-            }
-
-            return vec3 == null ? super.getPosition() : vec3;
-        }
-
-        @Nullable
-        private Vec3 getTreePos() {
-            BlockPos blockpos = this.mob.blockPosition();
-            BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
-            BlockPos.MutableBlockPos blockpos$mutableblockpos1 = new BlockPos.MutableBlockPos();
-
-            for (BlockPos blockpos1 : BlockPos.betweenClosed(
-                Mth.floor(this.mob.getX() - 3.0),
-                Mth.floor(this.mob.getY() - 6.0),
-                Mth.floor(this.mob.getZ() - 3.0),
-                Mth.floor(this.mob.getX() + 3.0),
-                Mth.floor(this.mob.getY() + 6.0),
-                Mth.floor(this.mob.getZ() + 3.0)
-            )) {
-                if (!blockpos.equals(blockpos1)) {
-                    BlockState blockstate = this.mob.level().getBlockState(blockpos$mutableblockpos1.setWithOffset(blockpos1, Direction.DOWN));
-                    boolean flag = blockstate.getBlock() instanceof LeavesBlock || blockstate.is(BlockTags.LOGS);
-                    if (flag
-                        && this.mob.level().isEmptyBlock(blockpos1)
-                        && this.mob.level().isEmptyBlock(blockpos$mutableblockpos.setWithOffset(blockpos1, Direction.UP))) {
-                        return Vec3.atBottomCenterOf(blockpos1);
-                    }
-                }
-            }
-
-            return null;
-        }
-    }
-
-    public static enum Variant implements StringRepresentable {
-        RED_BLUE(0, "red_blue"),
-        BLUE(1, "blue"),
-        GREEN(2, "green"),
-        YELLOW_BLUE(3, "yellow_blue"),
-        GRAY(4, "gray");
-
-        public static final Codec<Parrot.Variant> CODEC = StringRepresentable.fromEnum(Parrot.Variant::values);
-        private static final IntFunction<Parrot.Variant> BY_ID = ByIdMap.continuous(Parrot.Variant::getId, values(), ByIdMap.OutOfBoundsStrategy.CLAMP);
-        final int id;
-        private final String name;
-
-        private Variant(final int p_262571_, final String p_262693_) {
-            this.id = p_262571_;
-            this.name = p_262693_;
-        }
-
-        public int getId() {
-            return this.id;
-        }
-
-        public static Parrot.Variant byId(int p_262643_) {
-            return BY_ID.apply(p_262643_);
-        }
-
-        @Override
-        public String getSerializedName() {
-            return this.name;
-        }
-    }
+               this.level().broadcastEntityEvent(this, (byte)6);
+            }
+         }
+
+         return InteractionResult.sidedSuccess(this.level().isClientSide);
+      } else if (itemstack.is(POISONOUS_FOOD)) {
+         if (!p_29414_.getAbilities().instabuild) {
+            itemstack.shrink(1);
+         }
+
+         this.addEffect(new MobEffectInstance(MobEffects.POISON, 900), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
+         if (p_29414_.isCreative() || !this.isInvulnerable()) {
+            this.hurt(this.damageSources().playerAttack(p_29414_), Float.MAX_VALUE);
+         }
+
+         return InteractionResult.sidedSuccess(this.level().isClientSide);
+      } else if (!this.isFlying() && this.isTame() && this.isOwnedBy(p_29414_)) {
+         if (!this.level().isClientSide) {
+            this.setOrderedToSit(!this.isOrderedToSit());
+         }
+
+         return InteractionResult.sidedSuccess(this.level().isClientSide);
+      } else {
+         return super.mobInteract(p_29414_, p_29415_);
+      }
+   }
+
+   public boolean isFood(ItemStack p_29446_) {
+      return false;
+   }
+
+   public static boolean checkParrotSpawnRules(EntityType<Parrot> p_218242_, LevelAccessor p_218243_, MobSpawnType p_218244_, BlockPos p_218245_, RandomSource p_218246_) {
+      return p_218243_.getBlockState(p_218245_.below()).is(BlockTags.PARROTS_SPAWNABLE_ON) && isBrightEnoughToSpawn(p_218243_, p_218245_);
+   }
+
+   protected void checkFallDamage(double p_29370_, boolean p_29371_, BlockState p_29372_, BlockPos p_29373_) {
+   }
+
+   public boolean canMate(Animal p_29381_) {
+      return false;
+   }
+
+   @Nullable
+   public AgeableMob getBreedOffspring(ServerLevel p_148993_, AgeableMob p_148994_) {
+      return null;
+   }
+
+   public boolean doHurtTarget(Entity p_29365_) {
+      return p_29365_.hurt(this.damageSources().mobAttack(this), 3.0F);
+   }
+
+   @Nullable
+   public SoundEvent getAmbientSound() {
+      return getAmbient(this.level(), this.level().random);
+   }
+
+   public static SoundEvent getAmbient(Level p_218239_, RandomSource p_218240_) {
+      if (p_218239_.getDifficulty() != Difficulty.PEACEFUL && p_218240_.nextInt(1000) == 0) {
+         List<EntityType<?>> list = Lists.newArrayList(MOB_SOUND_MAP.keySet());
+         return getImitatedSound(list.get(p_218240_.nextInt(list.size())));
+      } else {
+         return SoundEvents.PARROT_AMBIENT;
+      }
+   }
+
+   private static SoundEvent getImitatedSound(EntityType<?> p_29409_) {
+      return MOB_SOUND_MAP.getOrDefault(p_29409_, SoundEvents.PARROT_AMBIENT);
+   }
+
+   protected SoundEvent getHurtSound(DamageSource p_29437_) {
+      return SoundEvents.PARROT_HURT;
+   }
+
+   protected SoundEvent getDeathSound() {
+      return SoundEvents.PARROT_DEATH;
+   }
+
+   protected void playStepSound(BlockPos p_29419_, BlockState p_29420_) {
+      this.playSound(SoundEvents.PARROT_STEP, 0.15F, 1.0F);
+   }
+
+   protected boolean isFlapping() {
+      return this.flyDist > this.nextFlap;
+   }
+
+   protected void onFlap() {
+      this.playSound(SoundEvents.PARROT_FLY, 0.15F, 1.0F);
+      this.nextFlap = this.flyDist + this.flapSpeed / 2.0F;
+   }
+
+   public float getVoicePitch() {
+      return getPitch(this.random);
+   }
+
+   public static float getPitch(RandomSource p_218237_) {
+      return (p_218237_.nextFloat() - p_218237_.nextFloat()) * 0.2F + 1.0F;
+   }
+
+   public SoundSource getSoundSource() {
+      return SoundSource.NEUTRAL;
+   }
+
+   public boolean isPushable() {
+      return super.isPushable(); // CraftBukkit - collidable API
+   }
+
+   protected void doPush(Entity p_29367_) {
+      if (!(p_29367_ instanceof Player)) {
+         super.doPush(p_29367_);
+      }
+   }
+
+   public boolean hurt(DamageSource p_29378_, float p_29379_) {
+      if (this.isInvulnerableTo(p_29378_)) {
+         return false;
+      } else {
+         // CraftBukkit start
+         boolean result = super.hurt(p_29378_, p_29379_);
+         if (!this.level().isClientSide && result) {
+            // CraftBukkit end
+            this.setOrderedToSit(false);
+         }
+
+         return result;
+      }
+   }
+
+   public Parrot.Variant getVariant() {
+      return Parrot.Variant.byId(this.entityData.get(DATA_VARIANT_ID));
+   }
+
+   public void setVariant(Parrot.Variant p_262613_) {
+      this.entityData.set(DATA_VARIANT_ID, p_262613_.id);
+   }
+
+   protected void defineSynchedData() {
+      super.defineSynchedData();
+      this.entityData.define(DATA_VARIANT_ID, 0);
+   }
+
+   public void addAdditionalSaveData(CompoundTag p_29422_) {
+      super.addAdditionalSaveData(p_29422_);
+      p_29422_.putInt("Variant", this.getVariant().id);
+   }
+
+   public void readAdditionalSaveData(CompoundTag p_29402_) {
+      super.readAdditionalSaveData(p_29402_);
+      this.setVariant(Parrot.Variant.byId(p_29402_.getInt("Variant")));
+   }
+
+   public boolean isFlying() {
+      return !this.onGround();
+   }
+
+   public Vec3 getLeashOffset() {
+      return new Vec3(0.0D, (double)(0.5F * this.getEyeHeight()), (double)(this.getBbWidth() * 0.4F));
+   }
+
+   protected Vector3f getPassengerAttachmentPoint(Entity p_300270_, EntityDimensions p_300343_, float p_300235_) {
+      return new Vector3f(0.0F, p_300343_.height - 0.4375F * p_300235_, 0.0F);
+   }
+
+   static class ParrotWanderGoal extends WaterAvoidingRandomFlyingGoal {
+      public ParrotWanderGoal(PathfinderMob p_186224_, double p_186225_) {
+         super(p_186224_, p_186225_);
+      }
+
+      @Nullable
+      protected Vec3 getPosition() {
+         Vec3 vec3 = null;
+         if (this.mob.isInWater()) {
+            vec3 = LandRandomPos.getPos(this.mob, 15, 15);
+         }
+
+         if (this.mob.getRandom().nextFloat() >= this.probability) {
+            vec3 = this.getTreePos();
+         }
+
+         return vec3 == null ? super.getPosition() : vec3;
+      }
+
+      @Nullable
+      private Vec3 getTreePos() {
+         BlockPos blockpos = this.mob.blockPosition();
+         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+         BlockPos.MutableBlockPos blockpos$mutableblockpos1 = new BlockPos.MutableBlockPos();
+
+         for(BlockPos blockpos1 : BlockPos.betweenClosed(Mth.floor(this.mob.getX() - 3.0D), Mth.floor(this.mob.getY() - 6.0D), Mth.floor(this.mob.getZ() - 3.0D), Mth.floor(this.mob.getX() + 3.0D), Mth.floor(this.mob.getY() + 6.0D), Mth.floor(this.mob.getZ() + 3.0D))) {
+            if (!blockpos.equals(blockpos1)) {
+               BlockState blockstate = this.mob.level().getBlockState(blockpos$mutableblockpos1.setWithOffset(blockpos1, Direction.DOWN));
+               boolean flag = blockstate.getBlock() instanceof LeavesBlock || blockstate.is(BlockTags.LOGS);
+               if (flag && this.mob.level().isEmptyBlock(blockpos1) && this.mob.level().isEmptyBlock(blockpos$mutableblockpos.setWithOffset(blockpos1, Direction.UP))) {
+                  return Vec3.atBottomCenterOf(blockpos1);
+               }
+            }
+         }
+
+         return null;
+      }
+   }
+
+   public static enum Variant implements StringRepresentable {
+      RED_BLUE(0, "red_blue"),
+      BLUE(1, "blue"),
+      GREEN(2, "green"),
+      YELLOW_BLUE(3, "yellow_blue"),
+      GRAY(4, "gray");
+
+      public static final Codec<Parrot.Variant> CODEC = StringRepresentable.fromEnum(Parrot.Variant::values);
+      private static final IntFunction<Parrot.Variant> BY_ID = ByIdMap.continuous(Parrot.Variant::getId, values(), ByIdMap.OutOfBoundsStrategy.CLAMP);
+      final int id;
+      private final String name;
+
+      private Variant(int p_262571_, String p_262693_) {
+         this.id = p_262571_;
+         this.name = p_262693_;
+      }
+
+      public int getId() {
+         return this.id;
+      }
+
+      public static Parrot.Variant byId(int p_262643_) {
+         return BY_ID.apply(p_262643_);
+      }
+
+      public String getSerializedName() {
+         return this.name;
+      }
+   }
 }
