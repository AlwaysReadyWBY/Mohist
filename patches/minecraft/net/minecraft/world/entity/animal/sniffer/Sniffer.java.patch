--- a/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -141,7 +_,7 @@
         return this.position().add(this.getForward().scale(2.25));
     }
 
-    private Sniffer.State getState() {
+    public Sniffer.State getState() {
         return this.entityData.get(DATA_STATE);
     }
 
@@ -237,7 +_,7 @@
         return this;
     }
 
-    Optional<BlockPos> calculateDigPosition() {
+    public Optional<BlockPos> calculateDigPosition() {
         return IntStream.range(0, 5)
             .mapToObj(p_273771_ -> LandRandomPos.getPos(this, 10 + 2 * p_273771_, 3))
             .filter(Objects::nonNull)
@@ -248,7 +_,7 @@
             .findFirst();
     }
 
-    boolean canDig() {
+    public boolean canDig() {
         return !this.isPanicking()
             && !this.isTempted()
             && !this.isBaby()
@@ -300,8 +_,7 @@
                 }
 
                 if (this.tickCount % 10 == 0) {
-                    this.level()
-                        .playLocalSound(this.getX(), this.getY(), this.getZ(), blockstate.getSoundType().getHitSound(), this.getSoundSource(), 0.5F, 0.5F, false);
+                    this.level().playLocalSound(this.getX(), this.getY(), this.getZ(), blockstate.getSoundType(level(), blockpos.below(), this).getHitSound(), this.getSoundSource(), 0.5F, 0.5F, false);
                 }
             }
         }
@@ -313,19 +_,19 @@
         return this;
     }
 
-    private Sniffer storeExploredPosition(BlockPos p_273015_) {
+    public Sniffer storeExploredPosition(BlockPos p_273015_) {
         List<GlobalPos> list = this.getExploredPositions().limit(20L).collect(Collectors.toList());
         list.add(0, GlobalPos.of(this.level().dimension(), p_273015_));
         this.getBrain().setMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS, list);
         return this;
     }
 
-    private Stream<GlobalPos> getExploredPositions() {
+    public Stream<GlobalPos> getExploredPositions() {
         return this.getBrain().getMemory(MemoryModuleType.SNIFFER_EXPLORED_POSITIONS).stream().flatMap(Collection::stream);
     }
 
     @Override
-    public void jumpFromGround() {
+    protected void jumpFromGround() {
         super.jumpFromGround();
         double d0 = this.moveControl.getSpeedModifier();
         if (d0 > 0.0) {
