--- a/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -78,6 +_,9 @@
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.ticks.ContainerSingleItem;
+import org.joml.Vector3f;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
 
 public abstract class AbstractHorse extends Animal implements ContainerListener, HasCustomInventoryScreen, OwnableEntity, PlayerRideableJumping, Saddleable {
     public static final int EQUIPMENT_SLOT_OFFSET = 400;
@@ -143,6 +_,7 @@
             return p_335622_.getVehicle() == AbstractHorse.this || p_335622_.canInteractWithEntity(AbstractHorse.this, 4.0);
         }
     };
+   public int maxDomestication = 100; // CraftBukkit - store max domestication value
 
     protected AbstractHorse(EntityType<? extends AbstractHorse> p_30531_, Level p_30532_) {
         super(p_30531_, p_30532_);
@@ -303,6 +_,11 @@
 
     @Override
     public boolean causeFallDamage(float p_149499_, float p_149500_, DamageSource p_149501_) {
+        var event = net.minecraftforge.event.ForgeEventFactory.onLivingFall(this, p_149499_, p_149500_);
+        if (event.isCanceled()) return false;
+        p_149499_ = event.getDistance();
+        p_149500_ = event.getDamageMultiplier();
+
         if (p_149499_ > 1.0F) {
             this.playSound(SoundEvents.HORSE_LAND, 0.4F, 1.0F);
         }
@@ -331,9 +_,9 @@
         return p_345108_ * 3 + 1;
     }
 
-    protected void createInventory() {
-        SimpleContainer simplecontainer = this.inventory;
-        this.inventory = new SimpleContainer(this.getInventorySize());
+   public void createInventory() {
+      SimpleContainer simplecontainer = this.inventory;
+      this.inventory = new SimpleContainer(this.getInventorySize(), (org.bukkit.entity.AbstractHorse) this.getBukkitEntity()); // CraftBukkit
         if (simplecontainer != null) {
             simplecontainer.removeListener(this);
             int i = Math.min(simplecontainer.getContainerSize(), this.inventory.getContainerSize());
@@ -348,6 +_,7 @@
 
         this.inventory.addListener(this);
         this.syncSaddleToClients();
+        this.itemHandler = net.minecraftforge.common.util.LazyOptional.of(() -> new net.minecraftforge.items.wrapper.InvWrapper(this.inventory));
     }
 
     protected void syncSaddleToClients() {
@@ -393,9 +_,9 @@
     protected void playStepSound(BlockPos p_30584_, BlockState p_30585_) {
         if (!p_30585_.liquid()) {
             BlockState blockstate = this.level().getBlockState(p_30584_.above());
-            SoundType soundtype = p_30585_.getSoundType();
+            SoundType soundtype = p_30585_.getSoundType(level(), p_30584_, this);
             if (blockstate.is(Blocks.SNOW)) {
-                soundtype = blockstate.getSoundType();
+                soundtype = blockstate.getSoundType(level(), p_30584_.above(), this);
             }
 
             if (this.isVehicle() && this.canGallop) {
@@ -441,7 +_,7 @@
     }
 
     public int getMaxTemper() {
-        return 100;
+      return this.maxDomestication; // CraftBukkit - return stored max domestication instead of 100
     }
 
     @Override
@@ -513,7 +_,7 @@
         }
 
         if (this.getHealth() < this.getMaxHealth() && f > 0.0F) {
-            this.heal(f);
+         this.heal(f, EntityRegainHealthEvent.RegainReason.EATING); // CraftBukkit
             flag = true;
         }
 
@@ -584,7 +_,7 @@
         super.aiStep();
         if (!this.level().isClientSide && this.isAlive()) {
             if (this.random.nextInt(900) == 0 && this.deathTime == 0) {
-                this.heal(1.0F);
+            this.heal(1.0F, EntityRegainHealthEvent.RegainReason.REGEN); // CraftBukkit
             }
 
             if (this.canEatGrass()) {
@@ -818,6 +_,7 @@
             float f1 = Mth.cos(this.getYRot() * (float) (Math.PI / 180.0));
             this.setDeltaMovement(this.getDeltaMovement().add((double)(-0.4F * f * p_248808_), 0.0, (double)(0.4F * f1 * p_248808_)));
         }
+        net.minecraftforge.common.ForgeHooks.onLivingJump(this);
     }
 
     protected void playJumpSound() {
@@ -834,6 +_,7 @@
         if (this.getOwnerUUID() != null) {
             p_30589_.putUUID("Owner", this.getOwnerUUID());
         }
+      	p_30589_.putInt("Bukkit.MaxDomestication", this.maxDomestication); // CraftBukkit
 
         if (!this.inventory.getItem(0).isEmpty()) {
             p_30589_.put("SaddleItem", this.inventory.getItem(0).save(this.registryAccess()));
@@ -858,6 +_,11 @@
         if (uuid != null) {
             this.setOwnerUUID(uuid);
         }
+      // CraftBukkit start
+      if (p_30565_.contains("Bukkit.MaxDomestication")) {
+         this.maxDomestication = p_30565_.getInt("Bukkit.MaxDomestication");
+      }
+      // CraftBukkit end
 
         if (p_30565_.contains("SaddleItem", 10)) {
             ItemStack itemstack = ItemStack.parse(this.registryAccess(), p_30565_.getCompound("SaddleItem")).orElse(ItemStack.EMPTY);
@@ -955,6 +_,17 @@
 
     @Override
     public void handleStartJump(int p_30574_) {
+      // CraftBukkit start
+      float power;
+      if (p_30574_ >= 90) {
+         power = 1.0F;
+      } else {
+         power = 0.4F + 0.4F * (float) p_30574_ / 90.0F;
+      }
+      if (!CraftEventFactory.callHorseJumpEvent(this, power)) {
+         return;
+      }
+      // CraftBukkit end
         this.allowStandSliding = true;
         this.standIfPossible();
         this.playJumpSound();
@@ -1134,6 +_,26 @@
 
     public final Container getBodyArmorAccess() {
         return this.bodyArmorAccess;
+    }
+
+    private net.minecraftforge.common.util.LazyOptional<?> itemHandler = null;
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.core.Direction facing) {
+        if (capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && itemHandler != null && this.isAlive()) {
+            return itemHandler.cast();
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        super.invalidateCaps();
+        if (itemHandler != null) {
+           var oldHandler = itemHandler;
+           itemHandler = null;
+           oldHandler.invalidate();
+        }
     }
 
     public int getInventoryColumns() {
