--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.entity;
 
+import com.google.common.base.Function;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Objects;
 import com.google.common.collect.ImmutableList;
@@ -11,17 +_,20 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
-import it.unimi.dsi.fastutil.doubles.DoubleDoubleImmutablePair;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
 import java.util.Collection;
 import java.util.ConcurrentModificationException;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Optional;
 import java.util.Set;
-import java.util.Map.Entry;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -39,6 +_,8 @@
 import net.minecraft.core.particles.ParticleOptions;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.FloatTag;
+import net.minecraft.nbt.IntTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
@@ -68,6 +_,7 @@
 import net.minecraft.tags.ItemTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.CombatRules;
@@ -126,13 +_,32 @@
 import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
 import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
+import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
+import net.minecraftforge.common.ForgeHooks;
+import net.minecraftforge.event.ForgeEventFactory;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.event.entity.ArrowBodyCountChangeEvent;
+import org.bukkit.event.entity.EntityDamageEvent;
+import org.bukkit.event.entity.EntityKnockbackEvent;
+import org.bukkit.event.entity.EntityPotionEffectEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.EntityResurrectEvent;
+import org.bukkit.event.entity.EntityTeleportEvent;
+import org.bukkit.event.player.PlayerItemConsumeEvent;
 import org.slf4j.Logger;
+import org.spigotmc.AsyncCatcher;
 
-public abstract class LivingEntity extends Entity implements Attackable {
+public abstract class LivingEntity extends Entity implements Attackable, net.minecraftforge.common.extensions.IForgeLivingEntity {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final String TAG_ACTIVE_EFFECTS = "active_effects";
     private static final ResourceLocation SPEED_MODIFIER_POWDER_SNOW_ID = ResourceLocation.withDefaultNamespace("powder_snow");
@@ -155,8 +_,8 @@
     public static final float BASE_JUMP_POWER = 0.42F;
     private static final double MAX_LINE_OF_SIGHT_TEST_RANGE = 128.0;
     protected static final int LIVING_ENTITY_FLAG_IS_USING = 1;
-    protected static final int LIVING_ENTITY_FLAG_OFF_HAND = 2;
-    protected static final int LIVING_ENTITY_FLAG_SPIN_ATTACK = 4;
+    public static final int LIVING_ENTITY_FLAG_OFF_HAND = 2;
+    public static final int LIVING_ENTITY_FLAG_SPIN_ATTACK = 4;
     protected static final EntityDataAccessor<Byte> DATA_LIVING_ENTITY_FLAGS = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.BYTE);
     public static final EntityDataAccessor<Float> DATA_HEALTH_ID = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.FLOAT);
     private static final EntityDataAccessor<List<ParticleOptions>> DATA_EFFECT_PARTICLES = SynchedEntityData.defineId(LivingEntity.class, EntityDataSerializers.PARTICLES);
@@ -220,18 +_,17 @@
     protected double lerpXRot;
     protected double lerpYHeadRot;
     protected int lerpHeadSteps;
-    public boolean effectsDirty = true;
-    @Nullable
-    public LivingEntity lastHurtByMob;
-    private int lastHurtByMobTimestamp;
-    @Nullable
+   	public boolean effectsDirty = true;
+   	@Nullable
+   	public LivingEntity lastHurtByMob;
+   	public int lastHurtByMobTimestamp;
     private LivingEntity lastHurtMob;
     private int lastHurtMobTimestamp;
     private float speed;
     private int noJumpDelay;
     private float absorptionAmount;
     protected ItemStack useItem = ItemStack.EMPTY;
-    protected int useItemRemaining;
+   	public int useItemRemaining;
     protected int fallFlyTicks;
     private BlockPos lastPos;
     private Optional<BlockPos> lastClimbablePos = Optional.empty();
@@ -245,9 +_,22 @@
     private float swimAmount;
     private float swimAmountO;
     protected Brain<?> brain;
-    private boolean skipDropExperience;
+    public boolean skipDropExperience;
     private final Reference2ObjectMap<Enchantment, Set<EnchantmentLocationBasedEffect>> activeLocationDependentEnchantments = new Reference2ObjectArrayMap<>();
-    protected float appliedScale = 1.0F;
+	protected float appliedScale = 1.0F;
+    // CraftBukkit start
+    public int expToDrop;
+    public boolean forceDrops;
+    public CraftAttributeMap craftAttributes;
+    public boolean collides = true;
+    public Set<UUID> collidableExemptions = new HashSet<>();
+    public boolean bukkitPickUpLoot;
+
+    @Override
+    public float getBukkitYaw() {
+      return getYHeadRot();
+   }
+    // CraftBukkit end
 
     protected LivingEntity(EntityType<? extends LivingEntity> p_20966_, Level p_20967_) {
         super(p_20966_, p_20967_);
@@ -260,7 +_,9 @@
         this.setYRot((float)(Math.random() * (float) (Math.PI * 2)));
         this.yHeadRot = this.getYRot();
         NbtOps nbtops = NbtOps.INSTANCE;
-        this.brain = this.makeBrain(new Dynamic<>(nbtops, nbtops.createMap(ImmutableMap.of(nbtops.createString("memories"), nbtops.emptyMap()))));
+        var dyn = new Dynamic<>(nbtops, nbtops.createMap(ImmutableMap.of(nbtops.createString("memories"), nbtops.emptyMap())));
+        this.brain = net.minecraftforge.common.ForgeHooks.onLivingMakeBrain(this, this.makeBrain(dyn), dyn);
+      	this.craftAttributes = new CraftAttributeMap(attributes); // CraftBukkit
     }
 
     public Brain<?> getBrain() {
@@ -314,7 +_,10 @@
             .add(Attributes.EXPLOSION_KNOCKBACK_RESISTANCE)
             .add(Attributes.WATER_MOVEMENT_EFFICIENCY)
             .add(Attributes.MOVEMENT_EFFICIENCY)
-            .add(Attributes.ATTACK_KNOCKBACK);
+            .add(Attributes.ATTACK_KNOCKBACK)
+            .add(Attributes.JUMP_STRENGTH)
+            .add(net.minecraftforge.common.ForgeMod.SWIM_SPEED.getHolder().get())
+            .add(net.minecraftforge.common.ForgeMod.NAMETAG_DISTANCE.getHolder().get());
     }
 
     @Override
@@ -342,7 +_,8 @@
                 float f = (float)Mth.ceil((double)this.fallDistance - d7);
                 double d4 = Math.min((double)(0.2F + f / 15.0F), 2.5);
                 int i = (int)(150.0 * d4);
-                ((ServerLevel)this.level()).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, p_20992_), d0, d1, d2, i, 0.0, 0.0, 0.0, 0.15F);
+                if (!p_20992_.addLandingEffects((ServerLevel) this.level(), p_20993_, p_20992_, this, i))
+                ((ServerLevel)this.level()).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, p_20992_).setPos(p_20993_), d0, d1, d2, i, 0.0, 0.0, 0.0, 0.15F);
             }
         }
 
@@ -352,6 +_,7 @@
         }
     }
 
+    @Deprecated //FORGE: Use canDrownInFluidType instead
     public final boolean canBreatheUnderwater() {
         return this.getType().is(EntityTypeTags.CAN_BREATHE_UNDER_WATER);
     }
@@ -397,6 +_,10 @@
                 }
             }
 
+
+            int airSupply = this.getAirSupply();
+            net.minecraftforge.common.ForgeHooks.onLivingBreathe(this, airSupply - decreaseAirSupply(airSupply), increaseAirSupply(airSupply) - airSupply);
+            if (false) // Forge: Handled in ForgeHooks#onLivingBreathe(LivingEntity, int, int)
             if (this.isEyeInFluid(FluidTags.WATER)
                 && !this.level().getBlockState(BlockPos.containing(this.getX(), this.getEyeY(), this.getZ())).is(Blocks.BUBBLE_COLUMN)) {
                 boolean flag1 = !this.canBreatheUnderwater() && !MobEffectUtil.hasWaterBreathing(this) && (!flag || !((Player)this).getAbilities().invulnerable);
@@ -442,7 +_,7 @@
             }
         }
 
-        if (this.isAlive() && (this.isInWaterRainOrBubble() || this.isInPowderSnow)) {
+        if (this.isAlive() && (this.isInWaterRainOrBubble() || this.isInPowderSnow || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
             this.extinguishFire();
         }
 
@@ -646,42 +_,54 @@
         return true;
     }
 
-    public void onEquipItem(EquipmentSlot p_238393_, ItemStack p_238394_, ItemStack p_238395_) {
-        boolean flag = p_238395_.isEmpty() && p_238394_.isEmpty();
-        if (!flag && !ItemStack.isSameItemSameComponents(p_238394_, p_238395_) && !this.firstTick) {
-            Equipable equipable = Equipable.get(p_238395_);
-            if (!this.level().isClientSide() && !this.isSpectator()) {
-                if (!this.isSilent() && equipable != null && equipable.getEquipmentSlot() == p_238393_) {
-                    this.level()
+   // Mohist start
+   public AtomicBoolean silent0 = new AtomicBoolean(false);
+   public void onEquipItem(EquipmentSlot p_238393_, ItemStack p_238394_, ItemStack p_238395_) {
+      boolean flag = p_238395_.isEmpty() && p_238394_.isEmpty();
+      if (!flag && !ItemStack.isSameItemSameComponents(p_238394_, p_238395_) && !this.firstTick) {
+         Equipable equipable = Equipable.get(p_238395_);
+         if (!this.level().isClientSide() && !this.isSpectator()) {
+            if (!this.isSilent() && equipable != null && equipable.getEquipmentSlot() == p_238393_ && !silent0.getAndSet(false)) {
+                this.level()
                         .playSeededSound(
-                            null,
-                            this.getX(),
-                            this.getY(),
-                            this.getZ(),
-                            equipable.getEquipSound(),
-                            this.getSoundSource(),
-                            1.0F,
-                            1.0F,
-                            this.random.nextLong()
+                                null,
+                                this.getX(),
+                                this.getY(),
+                                this.getZ(),
+                                equipable.getEquipSound(),
+                                this.getSoundSource(),
+                                1.0F,
+                                1.0F,
+                                this.random.nextLong()
                         );
-                }
-
-                if (this.doesEmitEquipEvent(p_238393_)) {
-                    this.gameEvent(equipable != null ? GameEvent.EQUIP : GameEvent.UNEQUIP);
-                }
-            }
-        }
-    }
-
-    @Override
-    public void remove(Entity.RemovalReason p_276115_) {
-        if (p_276115_ == Entity.RemovalReason.KILLED || p_276115_ == Entity.RemovalReason.DISCARDED) {
-            this.triggerOnDeathMobEffects(p_276115_);
-        }
-
-        super.remove(p_276115_);
-        this.brain.clearMemories();
-    }
+            }
+
+            if (this.doesEmitEquipEvent(p_238393_)) {
+               this.gameEvent(equipable != null ? GameEvent.EQUIP : GameEvent.UNEQUIP);
+            }
+         }
+
+      }
+   }
+
+   // CraftBukkit start
+   // Mohist start
+   public void onEquipItem(EquipmentSlot pSlot, ItemStack pOldItem, ItemStack pNewItem, boolean silent) {
+      silent0.set(silent);
+      onEquipItem(pSlot, pOldItem, pNewItem);
+   }
+   // CraftBukkit end
+
+   public AtomicReference<EntityRemoveEvent.Cause> remove$cause = new AtomicReference<>(null);
+   public void remove$cause(EntityRemoveEvent.Cause reason) {
+      remove$cause.set(reason);
+   }
+   // Mohist end
+   
+   public void remove(Entity.RemovalReason p_276115_) {
+      super.remove(p_276115_);
+      this.brain.clearMemories();
+   }
 
     protected void triggerOnDeathMobEffects(Entity.RemovalReason p_344022_) {
         for (MobEffectInstance mobeffectinstance : this.getActiveEffects()) {
@@ -738,6 +_,18 @@
             }
         }
 
+      // CraftBukkit start
+      if (p_21096_.contains("Bukkit.MaxHealth")) {
+         Tag nbtbase = p_21096_.get("Bukkit.MaxHealth");
+         if (nbtbase.getId() == 5) {
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((FloatTag) nbtbase).getAsDouble());
+         } else if (nbtbase.getId() == 3) {
+            this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(((IntTag) nbtbase).getAsDouble());
+         }
+      }
+      // CraftBukkit end
+
+
         if (p_21096_.contains("Health", 99)) {
             this.setHealth(p_21096_.getFloat("Health"));
         }
@@ -769,9 +_,32 @@
         }
 
         if (p_21096_.contains("Brain", 10)) {
-            this.brain = this.makeBrain(new Dynamic<>(NbtOps.INSTANCE, p_21096_.get("Brain")));
+            var dyn = new Dynamic<>(NbtOps.INSTANCE, p_21096_.get("Brain"));
+            this.brain = net.minecraftforge.common.ForgeHooks.onLivingMakeBrain(this, this.makeBrain(dyn), dyn);
         }
     }
+
+   // CraftBukkit start
+   private boolean isTickingEffects = false;
+   private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+
+   private static class ProcessableEffect {
+
+      private Holder<MobEffect> type;
+      private MobEffectInstance effect;
+      private final EntityPotionEffectEvent.Cause cause;
+
+      private ProcessableEffect(MobEffectInstance effect, EntityPotionEffectEvent.Cause cause) {
+         this.effect = effect;
+         this.cause = cause;
+      }
+
+      private ProcessableEffect(Holder<MobEffect> type, EntityPotionEffectEvent.Cause cause) {
+         this.type = type;
+         this.cause = cause;
+      }
+   }
+    // CraftBukkit end
 
     protected void tickEffects() {
         Iterator<Holder<MobEffect>> iterator = this.activeEffects.keySet().iterator();
@@ -781,7 +_,7 @@
                 Holder<MobEffect> holder = iterator.next();
                 MobEffectInstance mobeffectinstance = this.activeEffects.get(holder);
                 if (!mobeffectinstance.tick(this, () -> this.onEffectUpdated(mobeffectinstance, true, null))) {
-                    if (!this.level().isClientSide) {
+                    if (!this.level().isClientSide && !net.minecraftforge.event.ForgeEventFactory.onLivingEffectExpire(this, mobeffectinstance)) {
                         iterator.remove();
                         this.onEffectRemoved(mobeffectinstance);
                     }
@@ -862,6 +_,7 @@
             }
         }
 
+        d0 = net.minecraftforge.common.ForgeHooks.getEntityVisibilityMultiplier(this, p_20969_, d0);
         return d0;
     }
 
@@ -895,21 +_,41 @@
         this.entityData.set(DATA_EFFECT_PARTICLES, List.of());
     }
 
-    public boolean removeAllEffects() {
-        if (this.level().isClientSide) {
-            return false;
-        } else {
-            Iterator<MobEffectInstance> iterator = this.activeEffects.values().iterator();
+   //Mohist start
+   public AtomicReference<EntityPotionEffectEvent.Cause> removeAllEffectsCause = new AtomicReference<>(EntityPotionEffectEvent.Cause.UNKNOWN);
+   public boolean removeAllEffects() {
+      if (this.level().isClientSide) {
+         return false;
+      } else {
+         Iterator<MobEffectInstance> iterator = this.activeEffects.values().iterator();
 
-            boolean flag;
-            for (flag = false; iterator.hasNext(); flag = true) {
-                this.onEffectRemoved(iterator.next());
-                iterator.remove();
+         boolean flag;
+         for(flag = false; iterator.hasNext(); flag = true) {
+            // CraftBukkit start
+            MobEffectInstance effect = iterator.next();
+            if(net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.MobEffectEvent.Remove(this, effect))) continue;
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, removeAllEffectsCause.getAndSet(EntityPotionEffectEvent.Cause.UNKNOWN), EntityPotionEffectEvent.Action.CLEARED);
+            if (event.isCancelled()) {
+               continue;
             }
-
-            return flag;
-        }
-    }
+            this.onEffectRemoved(effect);
+            // CraftBukkit end
+            iterator.remove();
+         }
+
+         return flag;
+      }
+   }
+
+   public void removeAllEffectsCause(EntityPotionEffectEvent.Cause cause){
+       removeAllEffectsCause.set(cause);
+   }
+
+   public boolean removeAllEffects(EntityPotionEffectEvent.Cause cause) {
+      removeAllEffectsCause.set(cause);
+      return removeAllEffects();
+   }
+   // Mohist end
 
     public Collection<MobEffectInstance> getActiveEffects() {
         return this.activeEffects.values();
@@ -929,31 +_,74 @@
     }
 
     public final boolean addEffect(MobEffectInstance p_21165_) {
-        return this.addEffect(p_21165_, null);
-    }
-
+        return this.addEffect(p_21165_, (Entity)null);
+    }
+
+    // CraftBukkit start
+    public boolean addEffect(MobEffectInstance pEffectInstance, EntityPotionEffectEvent.Cause cause) {
+        return addEffect(pEffectInstance, (Entity) null, cause);
+    }
+
+    // Mohist start
+    private static final AtomicReference<EntityPotionEffectEvent.Cause> addEffectCause = new AtomicReference<>(EntityPotionEffectEvent.Cause.UNKNOWN);
+    public void addEffectCause(EntityPotionEffectEvent.Cause cause) {
+       addEffectCause.set(cause);
+   }
+    public static void addEffectCausePublic(EntityPotionEffectEvent.Cause cause) {
+        addEffectCause.set(cause);
+    }
     public boolean addEffect(MobEffectInstance p_147208_, @Nullable Entity p_147209_) {
+        boolean isAsync = AsyncCatcher.catchAsync();
+        if (isTickingEffects) {
+            effectsToProcess.add(new ProcessableEffect(p_147208_, addEffectCause.getAndSet(EntityPotionEffectEvent.Cause.UNKNOWN)));
+            return true;
+        }
+        // CraftBukkit end
         if (!this.canBeAffected(p_147208_)) {
             return false;
         } else {
             MobEffectInstance mobeffectinstance = this.activeEffects.get(p_147208_.getEffect());
-            boolean flag = false;
+            net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.living.MobEffectEvent.Added(this, mobeffectinstance, p_147208_, p_147209_));
+            // CraftBukkit start
+            boolean override = false;
+            if (mobeffectinstance != null) {
+                override = new MobEffectInstance(mobeffectinstance).update(p_147208_);
+            }
+
+            if (!isAsync) {
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffectinstance, p_147208_, addEffectCause.getAndSet(EntityPotionEffectEvent.Cause.UNKNOWN), override);
+                if (event.isCancelled()) {
+                    return false;
+                }
+                override = event.isOverride();
+            }
+            // CraftBukkit end
             if (mobeffectinstance == null) {
                 this.activeEffects.put(p_147208_.getEffect(), p_147208_);
                 this.onEffectAdded(p_147208_, p_147209_);
-                flag = true;
-                p_147208_.onEffectAdded(this);
-            } else if (mobeffectinstance.update(p_147208_)) {
+                return true;
+            } else if (override) {
+                mobeffectinstance.update(p_147208_);
                 this.onEffectUpdated(mobeffectinstance, true, p_147209_);
-                flag = true;
+                // CraftBukkit end
+                return true;
+            } else {
+                return false;
             }
-
-            p_147208_.onEffectStarted(this);
-            return flag;
         }
     }
+
+    public boolean addEffect(MobEffectInstance pEffectInstance, @Nullable Entity pEntity, EntityPotionEffectEvent.Cause cause) {
+        addEffectCause.set(cause);
+        return addEffect(pEffectInstance, pEntity);
+    }
+    // Mohist end
 
     public boolean canBeAffected(MobEffectInstance p_21197_) {
+        var eventResult = net.minecraftforge.event.ForgeEventFactory.onLivingEffectCanApply(this, p_21197_).getResult();
+        if (!eventResult.isDefault()) {
+            return eventResult.isAllowed();
+        }
         if (this.getType().is(EntityTypeTags.IMMUNE_TO_INFESTED)) {
             return !p_21197_.is(MobEffects.INFESTED);
         } else if (this.getType().is(EntityTypeTags.IMMUNE_TO_OOZING)) {
@@ -981,12 +_,37 @@
         return this.getType().is(EntityTypeTags.INVERTED_HEALING_AND_HARM);
     }
 
-    @Nullable
-    public MobEffectInstance removeEffectNoUpdate(Holder<MobEffect> p_329442_) {
-        return this.activeEffects.remove(p_329442_);
-    }
+   // Mohist start
+   public AtomicReference<EntityPotionEffectEvent.Cause> removeEffectNoUpdateCause = new AtomicReference<>(EntityPotionEffectEvent.Cause.UNKNOWN);
+   @Nullable
+   public MobEffectInstance removeEffectNoUpdate(@Nullable Holder<MobEffect> p_21164_) {
+      if (isTickingEffects) {
+         effectsToProcess.add(new ProcessableEffect(p_21164_, removeEffectNoUpdateCause.getAndSet(EntityPotionEffectEvent.Cause.UNKNOWN)));
+         return null;
+      }
+
+      MobEffectInstance effect = this.activeEffects.get(p_21164_);
+      if (effect == null) {
+         return null;
+      }
+
+      EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, removeEffectNoUpdateCause.getAndSet(EntityPotionEffectEvent.Cause.UNKNOWN));
+      if (event.isCancelled()) {
+         return null;
+      }
+      return this.activeEffects.remove(p_21164_);
+   }
+
+   @Nullable
+   public MobEffectInstance c(@Nullable Holder<MobEffect> pEffect, EntityPotionEffectEvent.Cause cause) {
+      removeEffectNoUpdateCause.set(cause);
+      return removeEffectNoUpdate(pEffect);
+   }
 
     public boolean removeEffect(Holder<MobEffect> p_335910_) {
+        if (net.minecraftforge.event.ForgeEventFactory.onLivingEffectRemove(this, p_335910_.get())) {
+            return false;
+        }
         MobEffectInstance mobeffectinstance = this.removeEffectNoUpdate(p_335910_);
         if (mobeffectinstance != null) {
             this.onEffectRemoved(mobeffectinstance);
@@ -996,6 +_,12 @@
         }
     }
 
+   public boolean removeEffect(Holder<MobEffect> pEffect, EntityPotionEffectEvent.Cause cause) {
+      removeEffectNoUpdateCause.set(cause);
+      return removeEffect(pEffect);
+   }
+   // Mohist end
+
     protected void onEffectAdded(MobEffectInstance p_147190_, @Nullable Entity p_147191_) {
         this.effectsDirty = true;
         if (!this.level().isClientSide) {
@@ -1064,211 +_,286 @@
         }
     }
 
-    public void heal(float p_21116_) {
-        float f = this.getHealth();
-        if (f > 0.0F) {
-            this.setHealth(f + p_21116_);
-        }
-    }
-
-    public float getHealth() {
-        return this.entityData.get(DATA_HEALTH_ID);
-    }
-
-    public void setHealth(float p_21154_) {
-        this.entityData.set(DATA_HEALTH_ID, Mth.clamp(p_21154_, 0.0F, this.getMaxHealth()));
-    }
-
-    public boolean isDeadOrDying() {
-        return this.getHealth() <= 0.0F;
-    }
-
-    @Override
-    public boolean hurt(DamageSource p_21016_, float p_21017_) {
-        if (this.isInvulnerableTo(p_21016_)) {
-            return false;
-        } else if (this.level().isClientSide) {
-            return false;
-        } else if (this.isDeadOrDying()) {
-            return false;
-        } else if (p_21016_.is(DamageTypeTags.IS_FIRE) && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
-            return false;
-        } else {
-            if (this.isSleeping() && !this.level().isClientSide) {
-                this.stopSleeping();
-            }
-
-            this.noActionTime = 0;
-            float f = p_21017_;
-            boolean flag = false;
-            float f1 = 0.0F;
-            if (p_21017_ > 0.0F && this.isDamageSourceBlocked(p_21016_)) {
-                this.hurtCurrentlyUsedShield(p_21017_);
-                f1 = p_21017_;
-                p_21017_ = 0.0F;
-                if (!p_21016_.is(DamageTypeTags.IS_PROJECTILE) && p_21016_.getDirectEntity() instanceof LivingEntity livingentity) {
-                    this.blockUsingShield(livingentity);
-                }
-
-                flag = true;
-            }
-
-            if (p_21016_.is(DamageTypeTags.IS_FREEZING) && this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES)) {
-                p_21017_ *= 5.0F;
-            }
-
-            if (p_21016_.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
-                this.hurtHelmet(p_21016_, p_21017_);
-                p_21017_ *= 0.75F;
-            }
-
-            this.walkAnimation.setSpeed(1.5F);
-            boolean flag1 = true;
-            if ((float)this.invulnerableTime > 10.0F && !p_21016_.is(DamageTypeTags.BYPASSES_COOLDOWN)) {
-                if (p_21017_ <= this.lastHurt) {
-                    return false;
-                }
-
-                this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
-                this.lastHurt = p_21017_;
-                flag1 = false;
+   private AtomicReference<RegainReason> heal$regainReason = new AtomicReference<>(RegainReason.CUSTOM);
+   public void heal$regainReason(RegainReason reason) {
+       heal$regainReason.set(reason);
+   }
+   public void heal(float p_21116_) {
+      p_21116_ = net.minecraftforge.event.ForgeEventFactory.onLivingHeal(this, p_21116_);
+      if (p_21116_ <= 0) return;
+      float f = this.getHealth();
+      if (f > 0.0F) {
+         EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), p_21116_, heal$regainReason.getAndSet(RegainReason.CUSTOM));
+         // Suppress during worldgen
+         if (this.valid) {
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+         }
+
+         if (!event.isCancelled()) {
+            this.setHealth((float) (this.getHealth() + event.getAmount()));
+         }
+         // CraftBukkit end
+      }
+   }
+
+   public void heal(float pHealAmount, EntityRegainHealthEvent.RegainReason regainReason) {
+      this.heal$regainReason(regainReason);
+      this.heal(pHealAmount);
+   }
+
+   public float getHealth() {
+      if (this instanceof ServerPlayer serverPlayer && serverPlayer.initialized) {
+         return (float) serverPlayer.getBukkitEntity().getHealth();
+      }
+      return this.entityData.get(DATA_HEALTH_ID);
+   }
+
+   public void setHealth(float p_21154_) {
+      // CraftBukkit start - Handle scaled health
+      if (this instanceof ServerPlayer serverPlayer && serverPlayer.initialized) {
+         org.bukkit.craftbukkit.entity.CraftPlayer player = serverPlayer.getBukkitEntity();
+         // Squeeze
+         if (p_21154_ < 0.0F) {
+            player.setRealHealth(0.0D);
+         } else if (p_21154_ > player.getMaxHealth()) {
+            player.setRealHealth(player.getMaxHealth());
+         } else {
+            player.setRealHealth(p_21154_);
+         }
+
+         player.updateScaledHealth(false);
+         return;
+      }
+      // CraftBukkit end
+      this.entityData.set(DATA_HEALTH_ID, Mth.clamp(p_21154_, 0.0F, this.getMaxHealth()));
+   }
+
+   public boolean isDeadOrDying() {
+      return this.getHealth() <= 0.0F;
+   }
+
+   public boolean hurt(DamageSource p_21016_, float p_21017_) {
+      if (!net.minecraftforge.common.ForgeHooks.onLivingAttack(this, p_21016_, p_21017_)) return false;
+      if (this.isInvulnerableTo(p_21016_)) {
+         return false;
+      } else if (this.level().isClientSide) {
+         return false;
+      } else if (this.isRemoved() || this.dead || this.getHealth() <= 0.0F) { // CraftBukkit - Don't allow entities that got set to dead/killed elsewhere to get damaged and die
+         return false;
+      } else if (p_21016_.is(DamageTypeTags.IS_FIRE) && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
+         return false;
+      } else {
+         if (this.isSleeping() && !this.level.isClientSide) {
+            this.stopSleeping();
+         }
+
+         this.noActionTime = 0;
+         float f = p_21017_;
+         boolean flag = f > 0.0F && this.isDamageSourceBlocked(p_21016_); // Copied from below
+         float f1 = 0.0F;
+         if (false && p_21017_ > 0.0F && this.isDamageSourceBlocked(p_21016_)) {
+         var ev = net.minecraftforge.event.ForgeEventFactory.onShieldBlock(this, p_21016_, p_21017_);
+         if(!ev.isCanceled()) {
+            if(ev.shieldTakesDamage()) this.hurtCurrentlyUsedShield(p_21017_);
+            f1 = ev.getBlockedDamage();
+            p_21017_ -= ev.getBlockedDamage();
+            if (!p_21016_.is(DamageTypeTags.IS_PROJECTILE)) {
+               Entity entity = p_21016_.getDirectEntity();
+               if (entity instanceof LivingEntity) {
+                  LivingEntity livingentity = (LivingEntity)entity;
+                  this.blockUsingShield(livingentity);
+               }
+            }
+
+            flag = p_21017_ <= 0;
+         }
+         }
+
+         if (p_21016_.is(DamageTypeTags.IS_FREEZING) && this.getType().is(EntityTypeTags.FREEZE_HURTS_EXTRA_TYPES)) {
+            p_21017_ *= 5.0F;
+         }
+
+         this.walkAnimation.setSpeed(1.5F);
+         boolean flag1 = true;
+         if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F && !p_21016_.is(DamageTypeTags.BYPASSES_COOLDOWN)) { // CraftBukkit - restore use of maxNoDamageTicks
+            if (p_21017_ <= this.lastHurt) {
+               return false;
+            }
+
+            // CraftBukkit start
+            this.actuallyHurt(p_21016_, p_21017_ - this.lastHurt);
+            if (!this.canDamage()) {
+               return false;
+            }
+            // CraftBukkit end
+            this.lastHurt = p_21017_;
+            flag1 = false;
+         } else {
+            // CraftBukkit start
+            this.actuallyHurt(p_21016_, p_21017_);
+            if (!this.canDamage()) {
+               return false;
+            }
+            // CraftBukkit end
+
+            this.lastHurt = p_21017_;
+            this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
+            // CraftBukkit end
+            this.hurtDuration = 10;
+            this.hurtTime = this.hurtDuration;
+         }
+
+         if (false && p_21016_.is(DamageTypeTags.DAMAGES_HELMET) && !this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
+            this.hurtHelmet(p_21016_, p_21017_);
+            p_21017_ *= 0.75F;
+         }
+
+         Entity entity1 = p_21016_.getEntity();
+         if (entity1 != null) {
+            if (entity1 instanceof LivingEntity) {
+               LivingEntity livingentity1 = (LivingEntity)entity1;
+               if (!p_21016_.is(DamageTypeTags.NO_ANGER)) {
+                  this.setLastHurtByMob(livingentity1);
+               }
+            }
+
+            if (entity1 instanceof Player) {
+               Player player1 = (Player)entity1;
+               this.lastHurtByPlayerTime = 100;
+               this.lastHurtByPlayer = player1;
+            } else if (entity1 instanceof net.minecraft.world.entity.TamableAnimal tamableEntity) {
+               if (tamableEntity.isTame()) {
+                  this.lastHurtByPlayerTime = 100;
+                  LivingEntity livingentity2 = tamableEntity.getOwner();
+                  if (livingentity2 instanceof Player) {
+                     Player player = (Player)livingentity2;
+                     this.lastHurtByPlayer = player;
+                  } else {
+                     this.lastHurtByPlayer = null;
+                  }
+               }
+            }
+         }
+
+         if (flag1) {
+            if (flag) {
+               this.level().broadcastEntityEvent(this, (byte)29);
             } else {
-                this.lastHurt = p_21017_;
-                this.invulnerableTime = 20;
-                this.actuallyHurt(p_21016_, p_21017_);
-                this.hurtDuration = 10;
-                this.hurtTime = this.hurtDuration;
-            }
-
-            Entity entity = p_21016_.getEntity();
-            if (entity != null) {
-                if (entity instanceof LivingEntity livingentity1
-                    && !p_21016_.is(DamageTypeTags.NO_ANGER)
-                    && (!p_21016_.is(DamageTypes.WIND_CHARGE) || !this.getType().is(EntityTypeTags.NO_ANGER_FROM_WIND_CHARGE))) {
-                    this.setLastHurtByMob(livingentity1);
-                }
-
-                if (entity instanceof Player player1) {
-                    this.lastHurtByPlayerTime = 100;
-                    this.lastHurtByPlayer = player1;
-                } else if (entity instanceof Wolf wolf && wolf.isTame()) {
-                    this.lastHurtByPlayerTime = 100;
-                    if (wolf.getOwner() instanceof Player player) {
-                        this.lastHurtByPlayer = player;
-                    } else {
-                        this.lastHurtByPlayer = null;
-                    }
-                }
-            }
-
-            if (flag1) {
-                if (flag) {
-                    this.level().broadcastEntityEvent(this, (byte)29);
-                } else {
-                    this.level().broadcastDamageEvent(this, p_21016_);
-                }
-
-                if (!p_21016_.is(DamageTypeTags.NO_IMPACT) && (!flag || p_21017_ > 0.0F)) {
-                    this.markHurt();
-                }
-
-                if (!p_21016_.is(DamageTypeTags.NO_KNOCKBACK)) {
-                    double d0 = 0.0;
-                    double d1 = 0.0;
-                    if (p_21016_.getDirectEntity() instanceof Projectile projectile) {
-                        DoubleDoubleImmutablePair doubledoubleimmutablepair = projectile.calculateHorizontalHurtKnockbackDirection(this, p_21016_);
-                        d0 = -doubledoubleimmutablepair.leftDouble();
-                        d1 = -doubledoubleimmutablepair.rightDouble();
-                    } else if (p_21016_.getSourcePosition() != null) {
-                        d0 = p_21016_.getSourcePosition().x() - this.getX();
-                        d1 = p_21016_.getSourcePosition().z() - this.getZ();
-                    }
-
-                    this.knockback(0.4F, d0, d1);
-                    if (!flag) {
-                        this.indicateDamage(d0, d1);
-                    }
-                }
-            }
-
-            if (this.isDeadOrDying()) {
-                if (!this.checkTotemDeathProtection(p_21016_)) {
-                    if (flag1) {
-                        this.makeSound(this.getDeathSound());
-                    }
-
-                    this.die(p_21016_);
-                }
-            } else if (flag1) {
-                this.playHurtSound(p_21016_);
-            }
-
-            boolean flag2 = !flag || p_21017_ > 0.0F;
-            if (flag2) {
-                this.lastDamageSource = p_21016_;
-                this.lastDamageStamp = this.level().getGameTime();
-
-                for (MobEffectInstance mobeffectinstance : this.getActiveEffects()) {
-                    mobeffectinstance.onMobHurt(this, p_21016_, p_21017_);
-                }
-            }
-
-            if (this instanceof ServerPlayer) {
-                CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer)this, p_21016_, f, p_21017_, flag);
-                if (f1 > 0.0F && f1 < 3.4028235E37F) {
-                    ((ServerPlayer)this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f1 * 10.0F));
-                }
-            }
-
-            if (entity instanceof ServerPlayer) {
-                CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer)entity, this, p_21016_, f, p_21017_, flag);
-            }
-
-            return flag2;
-        }
-    }
-
-    protected void blockUsingShield(LivingEntity p_21200_) {
-        p_21200_.blockedByShield(this);
-    }
-
-    protected void blockedByShield(LivingEntity p_21246_) {
-        p_21246_.knockback(0.5, p_21246_.getX() - this.getX(), p_21246_.getZ() - this.getZ());
-    }
-
-    private boolean checkTotemDeathProtection(DamageSource p_21263_) {
-        if (p_21263_.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
-            return false;
-        } else {
-            ItemStack itemstack = null;
-
-            for (InteractionHand interactionhand : InteractionHand.values()) {
-                ItemStack itemstack1 = this.getItemInHand(interactionhand);
-                if (itemstack1.is(Items.TOTEM_OF_UNDYING)) {
-                    itemstack = itemstack1.copy();
-                    itemstack1.shrink(1);
-                    break;
-                }
-            }
-
-            if (itemstack != null) {
-                if (this instanceof ServerPlayer serverplayer) {
-                    serverplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
-                    CriteriaTriggers.USED_TOTEM.trigger(serverplayer, itemstack);
-                    this.gameEvent(GameEvent.ITEM_INTERACT_FINISH);
-                }
-
-                this.setHealth(1.0F);
-                this.removeAllEffects();
-                this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1));
-                this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1));
-                this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0));
-                this.level().broadcastEntityEvent(this, (byte)35);
-            }
-
-            return itemstack != null;
-        }
-    }
+               this.level().broadcastDamageEvent(this, p_21016_);
+            }
+
+            if (!p_21016_.is(DamageTypeTags.NO_IMPACT) && (!flag || p_21017_ > 0.0F)) {
+               this.markHurt();
+            }
+
+            if (entity1 != null && !p_21016_.is(DamageTypeTags.NO_KNOCKBACK)) {
+               double d0 = entity1.getX() - this.getX();
+
+               double d1;
+               for(d1 = entity1.getZ() - this.getZ(); d0 * d0 + d1 * d1 < 1.0E-4D; d1 = (Math.random() - Math.random()) * 0.01D) {
+                  d0 = (Math.random() - Math.random()) * 0.01D;
+               }
+
+               this.knockback((double)0.4F, d0, d1);
+               if (!flag) {
+                  this.attacker = entity1;
+                  this.knockbackcause(entity1 == null ? EntityKnockbackEvent.KnockbackCause.DAMAGE : EntityKnockbackEvent.KnockbackCause.ENTITY_ATTACK);
+                  this.indicateDamage(d0, d1);
+               }
+            }
+         }
+
+         if (this.isDeadOrDying()) {
+            if (!this.checkTotemDeathProtection(p_21016_)) {
+               SoundEvent soundevent = this.getDeathSound();
+               if (flag1 && soundevent != null) {
+                  this.playSound(soundevent, this.getSoundVolume(), this.getVoicePitch());
+               }
+
+               this.die(p_21016_);
+            }
+         } else if (flag1) {
+            this.playHurtSound(p_21016_);
+         }
+
+         boolean flag2 = !flag || p_21017_ > 0.0F;
+         if (flag2) {
+            this.lastDamageSource = p_21016_;
+            this.lastDamageStamp = this.level().getGameTime();
+         }
+
+         if (this instanceof ServerPlayer) {
+            CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer)this, p_21016_, f, p_21017_, flag);
+            if (f1 > 0.0F && f1 < 3.4028235E37F) {
+               ((ServerPlayer)this).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_BLOCKED_BY_SHIELD), Math.round(f1 * 10.0F));
+            }
+         }
+
+         if (entity1 instanceof ServerPlayer) {
+            CriteriaTriggers.PLAYER_HURT_ENTITY.trigger((ServerPlayer)entity1, this, p_21016_, f, p_21017_, flag);
+         }
+
+         return flag2;
+      }
+   }
+
+   protected void blockUsingShield(LivingEntity p_21200_) {
+      p_21200_.blockedByShield(this);
+   }
+
+   protected void blockedByShield(LivingEntity p_21246_) {
+      knockbackcause(EntityKnockbackEvent.KnockbackCause.SHIELD_BLOCK);
+      p_21246_.knockback(0.5D, p_21246_.getX() - this.getX(), p_21246_.getZ() - this.getZ());
+   }
+
+   private boolean checkTotemDeathProtection(DamageSource p_21263_) {
+      if (p_21263_.is(DamageTypeTags.BYPASSES_INVULNERABILITY)) {
+         return false;
+      } else {
+         ItemStack itemstack = null;
+
+         // CraftBukkit start
+         InteractionHand hand = null;
+         ItemStack itemstack1 = ItemStack.EMPTY;
+         for(InteractionHand interactionhand : InteractionHand.values()) {
+            itemstack1 = this.getItemInHand(interactionhand);
+            if (itemstack1.is(Items.TOTEM_OF_UNDYING) && net.minecraftforge.common.ForgeHooks.onLivingUseTotem(this, p_21263_, itemstack1, interactionhand)) {
+               hand = interactionhand; // CraftBukkit
+               itemstack = itemstack1.copy();
+               break;
+            }
+         }
+
+         org.bukkit.inventory.EquipmentSlot handSlot = (hand != null) ? org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(hand) : null;
+         EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity(), handSlot);
+         event.setCancelled(itemstack == null);
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+
+         if (!event.isCancelled()) {
+            if (!itemstack1.isEmpty()) {
+               itemstack1.shrink(1);
+            }
+            if (itemstack != null && this instanceof ServerPlayer serverplayer) {
+               // CraftBukkit end
+               serverplayer.awardStat(Stats.ITEM_USED.get(Items.TOTEM_OF_UNDYING), 1);
+               CriteriaTriggers.USED_TOTEM.trigger(serverplayer, itemstack);
+            }
+
+            this.setHealth(1.0F);
+            removeAllEffectsCause.set(EntityPotionEffectEvent.Cause.TOTEM);
+            this.removeAllEffects();
+            addEffectCause.set(EntityPotionEffectEvent.Cause.TOTEM);
+            this.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1));
+            addEffectCause.set(EntityPotionEffectEvent.Cause.TOTEM);
+            this.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1));
+            addEffectCause.set(EntityPotionEffectEvent.Cause.TOTEM);
+            this.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0));
+            this.level.broadcastEntityEvent(this, (byte)35);
+         }
+
+         return !event.isCancelled();
+      }
+   }
 
     @Nullable
     public DamageSource getLastDamageSource() {
@@ -1330,6 +_,7 @@
     }
 
     public void die(DamageSource p_21014_) {
+        if (net.minecraftforge.event.ForgeEventFactory.onLivingDeath(this, p_21014_)) return;
         if (!this.isRemoved() && !this.dead) {
             Entity entity = p_21014_.getEntity();
             LivingEntity livingentity = this.getKillCredit();
@@ -1361,28 +_,39 @@
         }
     }
 
-    protected void createWitherRose(@Nullable LivingEntity p_21269_) {
-        if (!this.level().isClientSide) {
-            boolean flag = false;
-            if (p_21269_ instanceof WitherBoss) {
-                if (this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
-                    BlockPos blockpos = this.blockPosition();
-                    BlockState blockstate = Blocks.WITHER_ROSE.defaultBlockState();
-                    if (this.level().getBlockState(blockpos).isAir() && blockstate.canSurvive(this.level(), blockpos)) {
-                        this.level().setBlock(blockpos, blockstate, 3);
-                        flag = true;
-                    }
-                }
-
-                if (!flag) {
-                    ItemEntity itementity = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
-                    this.level().addFreshEntity(itementity);
-                }
-            }
-        }
-    }
+   protected void createWitherRose(@Nullable LivingEntity p_21269_) {
+      if (!this.level().isClientSide) {
+         boolean flag = false;
+         if (p_21269_ instanceof WitherBoss) {
+            if (net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level(), p_21269_)) {
+               BlockPos blockpos = this.blockPosition();
+               BlockState blockstate = Blocks.WITHER_ROSE.defaultBlockState();
+               if (this.level().isEmptyBlock(blockpos) && blockstate.canSurvive(this.level(), blockpos)) {
+                  // CraftBukkit start - call EntityBlockFormEvent for Wither Rose
+                  flag = org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this.level, blockpos, blockstate, 3, this);
+                  // CraftBukkit end
+               }
+            }
+
+            if (!flag) {
+               ItemEntity itementity = new ItemEntity(this.level(), this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
+
+               // CraftBukkit start
+               org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+               CraftEventFactory.callEvent(event);
+               if (event.isCancelled()) {
+                  return;
+               }
+               // CraftBukkit end
+               this.level().addFreshEntity(itementity);
+            }
+         }
+
+      }
+   }
 
     protected void dropAllDeathLoot(ServerLevel p_342160_, DamageSource p_21192_) {
+        this.captureDrops(new java.util.ArrayList<>());
         boolean flag = this.lastHurtByPlayerTime > 0;
         if (this.shouldDropLoot() && p_342160_.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
             this.dropFromLootTable(p_21192_, flag);
@@ -1391,16 +_,33 @@
 
         this.dropEquipment();
         this.dropExperience(p_21192_.getEntity());
+
+        var drops = captureDrops(null);
+        if (!net.minecraftforge.event.ForgeEventFactory.onLivingDrops(this, p_21192_, drops, lastHurtByPlayerTime > 0)) {
+            drops.forEach(e -> level().addFreshEntity(e));
+        }
     }
 
     protected void dropEquipment() {
     }
 
+    // CraftBukkit start
+    public int getExpReward(@Nullable Entity entity) {
+        if (this.level() instanceof ServerLevel serverlevel
+                && !this.wasExperienceConsumed()
+                && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
+                return this.getExperienceReward(serverlevel, entity);
+        }
+        return 0;
+    }
+    // CraftBukkit end
+
     protected void dropExperience(@Nullable Entity p_342525_) {
         if (this.level() instanceof ServerLevel serverlevel
             && !this.wasExperienceConsumed()
             && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
-            ExperienceOrb.award(serverlevel, this.position(), this.getExperienceReward(serverlevel, p_342525_));
+            int reward = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.lastHurtByPlayer, this.getExperienceReward(serverlevel, p_342525_));
+            ExperienceOrb.award(serverlevel, this.position(), reward);
         }
     }
 
@@ -1437,23 +_,33 @@
         loottable.getRandomItems(lootparams, this.getLootTableSeed(), this::spawnAtLocation);
     }
 
+    // Mohist start
+    public Entity attacker;
+    public EntityKnockbackEvent.KnockbackCause knockbackcause = EntityKnockbackEvent.KnockbackCause.UNKNOWN;
+    public void knockbackcause(EntityKnockbackEvent.KnockbackCause knockbackcause) {
+       this.knockbackcause = knockbackcause;
+    }
+
     public void knockback(double p_147241_, double p_147242_, double p_147243_) {
-        p_147241_ *= 1.0 - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
-        if (!(p_147241_ <= 0.0)) {
-            this.hasImpulse = true;
+        var event = net.minecraftforge.event.ForgeEventFactory.onLivingKnockBack(this, (float) p_147241_, p_147242_, p_147243_);
+        if (event.isCanceled()) return;
+        p_147241_ = event.getStrength();
+        p_147242_ = event.getRatioX();
+        p_147243_ = event.getRatioZ();
+        p_147241_ *= 1.0D - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
+        if (true || !(p_147241_ <= 0.0D)) { // CraftBukkit - Call event even when force is 0
+            // this.hasImpulse = true; // CraftBukkit - Move down
             Vec3 vec3 = this.getDeltaMovement();
-
-            while (p_147242_ * p_147242_ + p_147243_ * p_147243_ < 1.0E-5F) {
-                p_147242_ = (Math.random() - Math.random()) * 0.01;
-                p_147243_ = (Math.random() - Math.random()) * 0.01;
+            Vec3 vec31 = (new Vec3(p_147242_, 0.0D, p_147243_)).normalize().scale(p_147241_);
+            // this.setDeltaMovement(vec3.x / 2.0D - vec31.x, this.onGround() ? Math.min(0.4D, vec3.y / 2.0D + p_147241_) : vec3.y, vec3.z / 2.0D - vec31.z);
+            EntityKnockbackEvent bukkit_event = CraftEventFactory.callEntityKnockbackEvent((org.bukkit.craftbukkit.entity.CraftLivingEntity) this.getBukkitEntity(), attacker, knockbackcause, p_147241_, vec31, vec3.x / 2.0D - vec31.x, this.onGround() ? Math.min(0.4D, vec3.y / 2.0D + p_147241_) : vec3.y, vec3.z / 2.0D - vec31.z);
+            if (bukkit_event.isCancelled()) {
+                return;
             }
 
-            Vec3 vec31 = new Vec3(p_147242_, 0.0, p_147243_).normalize().scale(p_147241_);
-            this.setDeltaMovement(
-                vec3.x / 2.0 - vec31.x,
-                this.onGround() ? Math.min(0.4, vec3.y / 2.0 + p_147241_) : vec3.y,
-                vec3.z / 2.0 - vec31.z
-            );
+            this.hasImpulse = true;
+            this.setDeltaMovement(bukkit_event.getFinalKnockback().getX(), bukkit_event.getFinalKnockback().getY(), bukkit_event.getFinalKnockback().getZ());
+            // CraftBukkit end
         }
     }
 
@@ -1513,6 +_,28 @@
         return p_21202_.getEatingSound();
     }
 
+   // CraftBukkit start - Add delegate methods
+   public SoundEvent getHurtSound0(DamageSource damagesource) {
+      return getHurtSound(damagesource);
+   }
+
+   public SoundEvent getDeathSound0() {
+      return getDeathSound();
+   }
+
+   public SoundEvent getFallDamageSound0(int fallHeight) {
+      return getFallDamageSound(fallHeight);
+   }
+
+   public SoundEvent getDrinkingSound0(ItemStack itemstack) {
+      return getDrinkingSound(itemstack);
+   }
+
+   public SoundEvent getEatingSound0(ItemStack itemstack) {
+      return getEatingSound(itemstack);
+   }
+   // CraftBukkit end
+
     public Optional<BlockPos> getLastClimbablePos() {
         return this.lastClimbablePos;
     }
@@ -1523,6 +_,13 @@
         } else {
             BlockPos blockpos = this.blockPosition();
             BlockState blockstate = this.getInBlockState();
+            var ladderPos = net.minecraftforge.common.ForgeHooks.isLivingOnLadder(blockstate, level(), blockpos, this);
+            if (ladderPos.isPresent()) {
+                this.lastClimbablePos = ladderPos;
+                return true;
+            } else if (ladderPos != null) {
+                return false;
+            }
             if (blockstate.is(BlockTags.CLIMBABLE)) {
                 this.lastClimbablePos = Optional.of(blockpos);
                 return true;
@@ -1560,17 +_,26 @@
 
     @Override
     public boolean causeFallDamage(float p_147187_, float p_147188_, DamageSource p_147189_) {
+        var event = net.minecraftforge.event.ForgeEventFactory.onLivingFall(this, p_147187_, p_147188_);
+        if (event.isCanceled()) return false;
+        p_147187_ = event.getDistance();
+        p_147188_ = event.getDamageMultiplier();
         boolean flag = super.causeFallDamage(p_147187_, p_147188_, p_147189_);
         int i = this.calculateFallDamage(p_147187_, p_147188_);
         if (i > 0) {
-            this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
-            this.playBlockFallSound();
-            this.hurt(p_147189_, (float)i);
+         // CraftBukkit start
+         if (!this.hurt(p_147189_, (float) i)) {
             return true;
-        } else {
-            return flag;
-        }
-    }
+         }
+         // CraftBukkit end
+         this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
+         this.playBlockFallSound();
+         // this.hurt(pSource, (float)i); // CraftBukkit - moved up
+         return true;
+      } else {
+         return flag;
+      }
+   }
 
     protected int calculateFallDamage(float p_21237_, float p_21238_) {
         if (this.getType().is(EntityTypeTags.FALL_DAMAGE_IMMUNE)) {
@@ -1587,9 +_,10 @@
             int i = Mth.floor(this.getX());
             int j = Mth.floor(this.getY() - 0.2F);
             int k = Mth.floor(this.getZ());
-            BlockState blockstate = this.level().getBlockState(new BlockPos(i, j, k));
+            BlockPos pos = new BlockPos(i, j, k);
+            BlockState blockstate = this.level().getBlockState(pos);
             if (!blockstate.isAir()) {
-                SoundType soundtype = blockstate.getSoundType();
+                SoundType soundtype = blockstate.getSoundType(level(), pos, this);
                 this.playSound(soundtype.getFallSound(), soundtype.getVolume() * 0.5F, soundtype.getPitch() * 0.75F);
             }
         }
@@ -1626,56 +_,58 @@
             }
         }
     }
-
-    protected float getDamageAfterArmorAbsorb(DamageSource p_21162_, float p_21163_) {
-        if (!p_21162_.is(DamageTypeTags.BYPASSES_ARMOR)) {
-            this.hurtArmor(p_21162_, p_21163_);
-            p_21163_ = CombatRules.getDamageAfterAbsorb(this, p_21163_, p_21162_, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
-        }
+   protected float getDamageAfterArmorAbsorb(DamageSource p_21162_, float p_21163_) {
+      if (!p_21162_.is(DamageTypeTags.BYPASSES_ARMOR)) {
+         // this.hurtArmor(pDamageSource, pDamageAmount); // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+          p_21163_ = CombatRules.getDamageAfterAbsorb(this, p_21163_, p_21162_, (float)this.getArmorValue(), (float)this.getAttributeValue(Attributes.ARMOR_TOUGHNESS));
+      }
 
         return p_21163_;
     }
 
-    protected float getDamageAfterMagicAbsorb(DamageSource p_21193_, float p_21194_) {
-        if (p_21193_.is(DamageTypeTags.BYPASSES_EFFECTS)) {
-            return p_21194_;
-        } else {
-            if (this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !p_21193_.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
-                int i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
-                int j = 25 - i;
-                float f = p_21194_ * (float)j;
-                float f1 = p_21194_;
-                p_21194_ = Math.max(f / 25.0F, 0.0F);
-                float f2 = f1 - p_21194_;
-                if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                    if (this instanceof ServerPlayer) {
-                        ((ServerPlayer)this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f2 * 10.0F));
-                    } else if (p_21193_.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer)p_21193_.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f2 * 10.0F));
-                    }
-                }
-            }
-
-            if (p_21194_ <= 0.0F) {
-                return 0.0F;
-            } else if (p_21193_.is(DamageTypeTags.BYPASSES_ENCHANTMENTS)) {
-                return p_21194_;
-            } else {
-                float f3;
-                if (this.level() instanceof ServerLevel serverlevel) {
-                    f3 = EnchantmentHelper.getDamageProtection(serverlevel, this, p_21193_);
-                } else {
-                    f3 = 0.0F;
-                }
-
-                if (f3 > 0.0F) {
-                    p_21194_ = CombatRules.getDamageAfterMagicAbsorb(p_21194_, f3);
-                }
-
-                return p_21194_;
-            }
-        }
-    }
+   protected float getDamageAfterMagicAbsorb(DamageSource p_21193_, float p_21194_) {
+      if (p_21193_.is(DamageTypeTags.BYPASSES_EFFECTS)) {
+         return p_21194_;
+      } else {
+         if (this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && !p_21193_.is(DamageTypeTags.BYPASSES_RESISTANCE)) {
+            int i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+            int j = 25 - i;
+            float f = p_21194_ * (float)j;
+            float f1 = p_21194_;
+            p_21194_ = Math.max(f / 25.0F, 0.0F);
+            // CraftBukkit - Moved to damageEntity0(DamageSource, float)
+            /*
+            float f2 = f1 - pDamageAmount;
+            if (f2 > 0.0F && f2 < 3.4028235E37F) {
+               if (this instanceof ServerPlayer) {
+                  ((ServerPlayer)this).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_RESISTED), Math.round(f2 * 10.0F));
+               } else if (pDamageSource.getEntity() instanceof ServerPlayer) {
+                  ((ServerPlayer)pDamageSource.getEntity()).awardStat(Stats.CUSTOM.get(Stats.DAMAGE_DEALT_RESISTED), Math.round(f2 * 10.0F));
+               }
+            }
+            */
+         }
+
+          if (p_21194_ <= 0.0F) {
+              return 0.0F;
+          } else if (p_21193_.is(DamageTypeTags.BYPASSES_ENCHANTMENTS)) {
+              return p_21194_;
+          } else {
+              float f3;
+              if (this.level() instanceof ServerLevel serverlevel) {
+                  f3 = EnchantmentHelper.getDamageProtection(serverlevel, this, p_21193_);
+              } else {
+                  f3 = 0.0F;
+              }
+
+              if (f3 > 0.0F) {
+                  p_21194_ = CombatRules.getDamageAfterMagicAbsorb(p_21194_, f3);
+              }
+
+              return p_21194_;
+          }
+      }
+   }
 
     protected void actuallyHurt(DamageSource p_21240_, float p_21241_) {
         if (!this.isInvulnerableTo(p_21240_)) {
@@ -1697,6 +_,18 @@
         }
     }
 
+   public AtomicBoolean canDamage = new AtomicBoolean(true);
+   public boolean canDamage() {
+      return canDamage.getAndSet(true);
+   }
+   // Mohist end
+
+   // CraftBukkit start
+   protected boolean damageEntity0(final DamageSource pDamageSource, float pDamageAmount) { // void -> boolean, add final
+      this.actuallyHurt(pDamageSource, pDamageAmount);
+      return canDamage();
+   }
+
     public CombatTracker getCombatTracker() {
         return this.combatTracker;
     }
@@ -1722,9 +_,25 @@
         return this.entityData.get(DATA_ARROW_COUNT_ID);
     }
 
-    public final void setArrowCount(int p_21318_) {
-        this.entityData.set(DATA_ARROW_COUNT_ID, p_21318_);
-    }
+   public final void setArrowCount(int p_21318_) {
+         ArrowBodyCountChangeEvent event = CraftEventFactory.callArrowBodyCountChangeEvent( this, getArrowCount(), p_21318_, false);
+         if(event.isCancelled()){
+            return;
+         }
+
+      // CraftBukkit end
+      this.entityData.set(DATA_ARROW_COUNT_ID, p_21318_);
+   }
+
+   public final void setArrowCount(int pCount, boolean flag){
+      ArrowBodyCountChangeEvent event = CraftEventFactory.callArrowBodyCountChangeEvent( this, getArrowCount(), pCount, flag );
+      if(event.isCancelled()){
+         return;
+      }
+
+      this.entityData.set(DATA_ARROW_COUNT_ID, event.getNewAmount());
+   }
+   // CraftBukkit end
 
     public final int getStingerCount() {
         return this.entityData.get(DATA_STINGER_COUNT_ID);
@@ -1747,6 +_,8 @@
     }
 
     public void swing(InteractionHand p_21012_, boolean p_21013_) {
+        ItemStack stack = this.getItemInHand(p_21012_);
+        if (!stack.isEmpty() && stack.onEntitySwing(this)) return;
         if (!this.swinging || this.swingTime >= this.getCurrentSwingDuration() / 2 || this.swingTime < 0) {
             this.swingTime = -1;
             this.swinging = true;
@@ -1858,9 +_,10 @@
     }
 
     private void swapHandItems() {
-        ItemStack itemstack = this.getItemBySlot(EquipmentSlot.OFFHAND);
-        this.setItemSlot(EquipmentSlot.OFFHAND, this.getItemBySlot(EquipmentSlot.MAINHAND));
-        this.setItemSlot(EquipmentSlot.MAINHAND, itemstack);
+        var event = net.minecraftforge.event.ForgeEventFactory.onLivingSwapHandItems(this);
+        if (event.isCanceled()) return;
+        this.setItemSlot(EquipmentSlot.OFFHAND, event.getItemSwappedToOffHand());
+        this.setItemSlot(EquipmentSlot.MAINHAND, event.getItemSwappedToMainHand());
     }
 
     @Override
@@ -1958,6 +_,12 @@
 
     public abstract void setItemSlot(EquipmentSlot p_21036_, ItemStack p_21037_);
 
+    // CraftBukkit start
+    public void setItemSlot(EquipmentSlot enumitemslot, ItemStack itemstack, boolean silent) {
+        this.setItemSlot(enumitemslot, itemstack);
+    }
+    // CraftBukkit end
+
     public Iterable<ItemStack> getHandSlots() {
         return List.of();
     }
@@ -2064,15 +_,18 @@
             }
 
             this.hasImpulse = true;
+            net.minecraftforge.common.ForgeHooks.onLivingJump(this);
         }
     }
 
+    @Deprecated // FORGE: use sinkInFluid instead
     protected void goDownInWater() {
-        this.setDeltaMovement(this.getDeltaMovement().add(0.0, -0.04F, 0.0));
+        this.sinkInFluid(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
     }
 
+    @Deprecated // FORGE: use jumpInFluid instead
     protected void jumpInLiquid(TagKey<Fluid> p_204043_) {
-        this.setDeltaMovement(this.getDeltaMovement().add(0.0, 0.04F, 0.0));
+        this.setDeltaMovement(this.getDeltaMovement().add(0.0, 0.04F * this.getAttributeValue(net.minecraftforge.common.ForgeMod.SWIM_SPEED.getHolder().get()), 0.0));
     }
 
     protected float getWaterSlowDown() {
@@ -2097,7 +_,8 @@
             }
 
             FluidState fluidstate = this.level().getFluidState(this.blockPosition());
-            if (this.isInWater() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
+            if ((this.isInWater() || (this.isInFluidType(fluidstate) && fluidstate.getFluidType() != net.minecraftforge.common.ForgeMod.LAVA_TYPE.get())) && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
+                if (this.isInWater() || (this.isInFluidType(fluidstate) && !this.moveInFluid(fluidstate, p_21280_, d0))) {
                 double d9 = this.getY();
                 float f4 = this.isSprinting() ? 0.9F : this.getWaterSlowDown();
                 float f5 = 0.02F;
@@ -2115,6 +_,7 @@
                     f4 = 0.96F;
                 }
 
+                f5 *= this.getAttributeValue(net.minecraftforge.common.ForgeMod.SWIM_SPEED.getHolder().get());
                 this.moveRelative(f5, p_21280_);
                 this.move(MoverType.SELF, this.getDeltaMovement());
                 Vec3 vec36 = this.getDeltaMovement();
@@ -2128,6 +_,7 @@
                 if (this.horizontalCollision && this.isFree(vec32.x, vec32.y + 0.6F - this.getY() + d9, vec32.z)) {
                     this.setDeltaMovement(vec32.x, 0.3F, vec32.z);
                 }
+                }
             } else if (this.isInLava() && this.isAffectedByFluids() && !this.canStandOnFluid(fluidstate)) {
                 double d8 = this.getY();
                 this.moveRelative(0.02F, p_21280_);
@@ -2190,7 +_,7 @@
                 }
             } else {
                 BlockPos blockpos = this.getBlockPosBelowThatAffectsMyMovement();
-                float f2 = this.level().getBlockState(blockpos).getBlock().getFriction();
+                float f2 = this.level().getBlockState(blockpos).getFriction(level(), blockpos, this);
                 float f3 = this.onGround() ? f2 * 0.91F : 0.91F;
                 Vec3 vec35 = this.handleRelativeFrictionAndCalculateMovement(p_21280_, f2);
                 double d2 = vec35.y;
@@ -2283,7 +_,7 @@
             double d0 = Mth.clamp(p_21298_.x, -0.15F, 0.15F);
             double d1 = Mth.clamp(p_21298_.z, -0.15F, 0.15F);
             double d2 = Math.max(p_21298_.y, -0.15F);
-            if (d2 < 0.0 && !this.getInBlockState().is(Blocks.SCAFFOLDING) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
+            if (d2 < 0.0 && !this.getInBlockState().isScaffolding(this) && this.isSuppressingSlidingDownLadder() && this instanceof Player) {
                 d2 = 0.0;
             }
 
@@ -2316,6 +_,7 @@
 
     @Override
     public void tick() {
+        if (net.minecraftforge.event.ForgeEventFactory.onLivingTick(this)) return;
         super.tick();
         this.updatingUsingItem();
         this.updateSwimAmount();
@@ -2443,7 +_,13 @@
         }
     }
 
-    private void detectEquipmentUpdates() {
+    // CraftBukkit start
+    public void detectEquipmentUpdatesPublic() {
+        detectEquipmentUpdates();
+    }
+    // CraftBukkit end
+
+    public void detectEquipmentUpdates() {
         Map<EquipmentSlot, ItemStack> map = this.collectEquipmentChanges();
         if (map != null) {
             this.handleHandSwap(map);
@@ -2465,6 +_,7 @@
             };
             ItemStack itemstack1 = this.getItemBySlot(equipmentslot);
             if (this.equipmentHasChanged(itemstack, itemstack1)) {
+                net.minecraftforge.event.ForgeEventFactory.onLivingEquipmentChange(this, equipmentslot, itemstack, itemstack1);
                 if (map == null) {
                     map = Maps.newEnumMap(EquipmentSlot.class);
                 }
@@ -2636,6 +_,10 @@
         this.level().getProfiler().push("jump");
         if (this.jumping && this.isAffectedByFluids()) {
             double d3;
+            var fluidType = this.getMaxHeightFluidType();
+            if (!fluidType.isAir()) {
+                d3 = this.getFluidTypeHeight(fluidType);
+            } else
             if (this.isInLava()) {
                 d3 = this.getFluidHeight(FluidTags.LAVA);
             } else {
@@ -2646,15 +_,19 @@
             double d4 = this.getFluidJumpThreshold();
             if (!flag || this.onGround() && !(d3 > d4)) {
                 if (!this.isInLava() || this.onGround() && !(d3 > d4)) {
+                    if (fluidType.isAir() || this.onGround() && !(d3 > d4)) {
                     if ((this.onGround() || flag && d3 <= d4) && this.noJumpDelay == 0) {
                         this.jumpFromGround();
                         this.noJumpDelay = 10;
                     }
+                    } else {
+                        this.jumpInFluid(fluidType);
+                    }
                 } else {
-                    this.jumpInLiquid(FluidTags.LAVA);
+                    this.jumpInFluid(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
                 }
             } else {
-                this.jumpInLiquid(FluidTags.WATER);
+                this.jumpInFluid(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
             }
         } else {
             this.noJumpDelay = 0;
@@ -2719,6 +_,8 @@
         boolean flag = this.getSharedFlag(7);
         if (flag && !this.onGround() && !this.isPassenger() && !this.hasEffect(MobEffects.LEVITATION)) {
             ItemStack itemstack = this.getItemBySlot(EquipmentSlot.CHEST);
+            flag = itemstack.canElytraFly(this) && itemstack.elytraFlightTick(this, this.fallFlyTicks);
+            if (false) //Forge: Moved to ElytraItem
             if (itemstack.is(Items.ELYTRA) && ElytraItem.isFlyEnabled(itemstack)) {
                 flag = true;
                 int i = this.fallFlyTicks + 1;
@@ -2738,6 +_,7 @@
         }
 
         if (!this.level().isClientSide) {
+         if (flag != this.getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
             this.setSharedFlag(7, flag);
         }
     }
@@ -2913,15 +_,20 @@
 
     @Override
     public boolean isPickable() {
-        return !this.isRemoved();
-    }
+      return !this.isRemoved() && this.collides; // CraftBukkit
+   }
 
-    @Override
     public boolean isPushable() {
-        return this.isAlive() && !this.isSpectator() && !this.onClimbable();
+        return this.isAlive() && !this.isSpectator() && !this.onClimbable() && this.collides; // CraftBukkit
     }
 
+    // CraftBukkit start - collidable API
     @Override
+    public boolean canCollideWithBukkit(Entity entity) {
+        return isPushable() && this.collides != this.collidableExemptions.contains(entity.getUUID());
+    }
+    // CraftBukkit end
+
     public float getYHeadRot() {
         return this.yHeadRot;
     }
@@ -2979,8 +_,11 @@
 
     private void updatingUsingItem() {
         if (this.isUsingItem()) {
-            if (ItemStack.isSameItem(this.getItemInHand(this.getUsedItemHand()), this.useItem)) {
+            var current = this.getItemInHand(this.getUsedItemHand());
+            if (net.minecraftforge.common.ForgeHooks.canContinueUsing(this.useItem, current)) {
                 this.useItem = this.getItemInHand(this.getUsedItemHand());
+            }
+            if (this.useItem == current) {
                 this.updateUsingItem(this.useItem);
             } else {
                 this.stopUsingItem();
@@ -2989,12 +_,16 @@
     }
 
     protected void updateUsingItem(ItemStack p_147201_) {
+        if (!p_147201_.isEmpty()) {
+            this.useItemRemaining = net.minecraftforge.event.ForgeEventFactory.onItemUseTick(this, p_147201_, this.getUseItemRemainingTicks());
+        }
+        if (this.getUseItemRemainingTicks() > 0)
         p_147201_.onUseTick(this.level(), this, this.getUseItemRemainingTicks());
         if (this.shouldTriggerItemUseEffects()) {
             this.triggerItemUseEffects(p_147201_, 5);
         }
 
-        if (--this.useItemRemaining == 0 && !this.level().isClientSide && !p_147201_.useOnRelease()) {
+        if (--this.useItemRemaining <= 0 && !this.level().isClientSide && !p_147201_.useOnRelease()) {
             this.completeUsingItem();
         }
     }
@@ -3015,7 +_,7 @@
         }
     }
 
-    protected void setLivingEntityFlag(int p_21156_, boolean p_21157_) {
+    public void setLivingEntityFlag(int p_21156_, boolean p_21157_) {
         int i = this.entityData.get(DATA_LIVING_ENTITY_FLAGS);
         if (p_21157_) {
             i |= p_21156_;
@@ -3029,8 +_,12 @@
     public void startUsingItem(InteractionHand p_21159_) {
         ItemStack itemstack = this.getItemInHand(p_21159_);
         if (!itemstack.isEmpty() && !this.isUsingItem()) {
+            int duration = net.minecraftforge.event.ForgeEventFactory.onItemUseStart(this, itemstack, itemstack.getUseDuration(this));
+            if (duration <= 0) {
+                return;
+            }
             this.useItem = itemstack;
-            this.useItemRemaining = itemstack.getUseDuration(this);
+            this.useItemRemaining = duration;
             if (!this.level().isClientSide) {
                 this.setLivingEntityFlag(1, true);
                 this.setLivingEntityFlag(2, p_21159_ == InteractionHand.OFF_HAND);
@@ -3099,6 +_,9 @@
             vec31 = vec31.xRot(-this.getXRot() * (float) (Math.PI / 180.0));
             vec31 = vec31.yRot(-this.getYRot() * (float) (Math.PI / 180.0));
             vec31 = vec31.add(this.getX(), this.getEyeY(), this.getZ());
+            if (this.level() instanceof ServerLevel serverLevel) //Forge: Fix MC-2518 spawnParticle is nooped on server, need to use server specific variant
+                serverLevel.sendParticles(new ItemParticleOption(ParticleTypes.ITEM, p_21061_), vec31.x, vec31.y, vec31.z, 1, vec3.x, vec3.y + 0.05D, vec3.z, 0.0D);
+            else
             this.level()
                 .addParticle(
                     new ItemParticleOption(ParticleTypes.ITEM, p_21061_),
@@ -3112,24 +_,47 @@
         }
     }
 
-    protected void completeUsingItem() {
-        if (!this.level().isClientSide || this.isUsingItem()) {
-            InteractionHand interactionhand = this.getUsedItemHand();
-            if (!this.useItem.equals(this.getItemInHand(interactionhand))) {
-                this.releaseUsingItem();
-            } else {
-                if (!this.useItem.isEmpty() && this.isUsingItem()) {
-                    this.triggerItemUseEffects(this.useItem, 16);
-                    ItemStack itemstack = this.useItem.finishUsingItem(this.level(), this);
-                    if (itemstack != this.useItem) {
-                        this.setItemInHand(interactionhand, itemstack);
-                    }
-
-                    this.stopUsingItem();
-                }
+   protected void completeUsingItem() {
+      if (!this.level().isClientSide || this.isUsingItem()) {
+         InteractionHand interactionhand = this.getUsedItemHand();
+         if (!this.useItem.equals(this.getItemInHand(interactionhand))) {
+            this.releaseUsingItem();
+         } else {
+            if (!this.useItem.isEmpty() && this.isUsingItem()) {
+               this.triggerItemUseEffects(this.useItem, 16);
+               ItemStack copy = this.useItem.copy();
+               ItemStack itemstackForge = net.minecraftforge.event.ForgeEventFactory.onItemUseFinish(this, copy, getUseItemRemainingTicks(), this.useItem.finishUsingItem(this.level, this));
+
+               // CraftBukkit start - fire PlayerItemConsumeEvent
+               ItemStack itemstack;
+               if (this instanceof ServerPlayer) {
+                  org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.useItem);
+                  org.bukkit.inventory.EquipmentSlot hand = org.bukkit.craftbukkit.CraftEquipmentSlot.getHand(interactionhand);
+                  PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((org.bukkit.entity.Player) this.getBukkitEntity(), craftItem, hand);
+                  level.getCraftServer().getPluginManager().callEvent(event);
+
+                  if (event.isCancelled()) {
+                     // Update client
+                     ((ServerPlayer) this).getBukkitEntity().updateInventory();
+                     ((ServerPlayer) this).getBukkitEntity().updateScaledHealth();
+                     return;
+                  }
+
+                  itemstack = (craftItem.equals(event.getItem())) ? itemstackForge : CraftItemStack.asNMSCopy(event.getItem()).finishUsingItem(level, this);
+               } else {
+                  itemstack = itemstackForge;
+               }
+               // CraftBukkit end
+               if (itemstack != this.useItem) {
+                  this.setItemInHand(interactionhand, itemstack);
+               }
+
+               this.stopUsingItem();
             }
-        }
-    }
+
+         }
+      }
+   }
 
     public ItemStack getUseItem() {
         return this.useItem;
@@ -3145,7 +_,13 @@
 
     public void releaseUsingItem() {
         if (!this.useItem.isEmpty()) {
+            if (!net.minecraftforge.event.ForgeEventFactory.onUseItemStop(this, useItem, this.getUseItemRemainingTicks())) {
+               ItemStack copy = this instanceof Player ? useItem.copy() : null;
             this.useItem.releaseUsing(this.level(), this, this.getUseItemRemainingTicks());
+               if (copy != null && useItem.isEmpty()) {
+                   net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem((Player)this, copy, getUsedItemHand());
+               }
+            }
             if (this.useItem.useOnRelease()) {
                 this.updatingUsingItem();
             }
@@ -3155,6 +_,7 @@
     }
 
     public void stopUsingItem() {
+        if (this.isUsingItem() && !this.useItem.isEmpty()) this.useItem.onStopUsing(this, useItemRemaining);
         if (!this.level().isClientSide) {
             boolean flag = this.isUsingItem();
             this.setLivingEntityFlag(1, false);
@@ -3170,11 +_,59 @@
     public boolean isBlocking() {
         if (this.isUsingItem() && !this.useItem.isEmpty()) {
             Item item = this.useItem.getItem();
-            return item.getUseAnimation(this.useItem) != UseAnim.BLOCK ? false : item.getUseDuration(this.useItem, this) - this.useItemRemaining >= 5;
+            boolean canBlock = this.useItem.canPerformAction(net.minecraftforge.common.ToolActions.SHIELD_BLOCK);
+            return !canBlock ? false : item.getUseDuration(this.useItem, this) - this.useItemRemaining >= 5;
         } else {
             return false;
         }
     }
+
+    // Paper start
+    public HitResult getRayTrace(int maxDistance, ClipContext.Fluid fluidCollisionOption) {
+        if (maxDistance < 1 || maxDistance > 120) {
+            throw new IllegalArgumentException("maxDistance must be between 1-120");
+        }
+
+        Vec3 start = new Vec3(getX(), getY() + getEyeHeight(), getZ());
+        org.bukkit.util.Vector dir = getBukkitEntity().getLocation().getDirection().multiply(maxDistance);
+        Vec3 end = new Vec3(start.x + dir.getX(), start.y + dir.getY(), start.z + dir.getZ());
+        ClipContext raytrace = new ClipContext(start, end, ClipContext.Block.OUTLINE, fluidCollisionOption, this);
+
+        return this.level().clip(raytrace);
+    }
+
+    public @Nullable EntityHitResult getTargetEntity(int maxDistance) {
+        if (maxDistance < 1 || maxDistance > 120) {
+            throw new IllegalArgumentException("maxDistance must be between 1-120");
+        }
+
+        Vec3 start = this.getEyePosition(1.0F);
+        Vec3 direction = this.getLookAngle();
+        Vec3 end = start.add(direction.x * maxDistance, direction.y * maxDistance, direction.z * maxDistance);
+
+        List<Entity> entityList = this.level().getEntities(this, getBoundingBox().expandTowards(direction.x * maxDistance, direction.y * maxDistance, direction.z * maxDistance).inflate(1.0D, 1.0D, 1.0D), EntitySelector.NO_SPECTATORS.and(Entity::isPickable));
+
+        double distance = 0.0D;
+        EntityHitResult result = null;
+
+        for (Entity entity : entityList) {
+            final double inflationAmount = (double) entity.getPickRadius();
+            AABB aabb = entity.getBoundingBox().inflate(inflationAmount, inflationAmount, inflationAmount);
+            Optional<Vec3> rayTraceResult = aabb.clip(start, end);
+
+            if (rayTraceResult.isPresent()) {
+                Vec3 rayTrace = rayTraceResult.get();
+                double distanceTo = start.distanceToSqr(rayTrace);
+                if (distanceTo < distance || distance == 0.0D) {
+                    result = new EntityHitResult(entity, rayTrace);
+                    distance = distanceTo;
+                }
+            }
+        }
+
+        return result;
+    }
+    // Paper end
 
     public boolean isSuppressingSlidingDownLadder() {
         return this.isShiftKeyDown();
@@ -3193,51 +_,77 @@
         return this.fallFlyTicks;
     }
 
-    public boolean randomTeleport(double p_20985_, double p_20986_, double p_20987_, boolean p_20988_) {
-        double d0 = this.getX();
-        double d1 = this.getY();
-        double d2 = this.getZ();
-        double d3 = p_20986_;
-        boolean flag = false;
-        BlockPos blockpos = BlockPos.containing(p_20985_, p_20986_, p_20987_);
-        Level level = this.level();
-        if (level.hasChunkAt(blockpos)) {
-            boolean flag1 = false;
-
-            while (!flag1 && blockpos.getY() > level.getMinBuildHeight()) {
-                BlockPos blockpos1 = blockpos.below();
-                BlockState blockstate = level.getBlockState(blockpos1);
-                if (blockstate.blocksMotion()) {
-                    flag1 = true;
-                } else {
-                    d3--;
-                    blockpos = blockpos1;
-                }
-            }
+   public boolean randomTeleport(double p_20985_, double p_20986_, double p_20987_, boolean p_20988_) {
+      // CraftBukkit end
+      return randomTeleport(p_20985_, p_20986_, p_20987_, p_20988_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(false);
+   }
+
+   public Optional<Boolean> randomTeleport(double pX, double pY, double pZ, boolean pBroadcastTeleport, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      double d0 = this.getX();
+      double d1 = this.getY();
+      double d2 = this.getZ();
+      double d3 = pY;
+      boolean flag = false;
+      BlockPos blockpos = BlockPos.containing(pX, pY, pZ);
+      Level level = this.level();
+      if (level.hasChunkAt(blockpos)) {
+         boolean flag1 = false;
+
+         while(!flag1 && blockpos.getY() > level.getMinBuildHeight()) {
+            BlockPos blockpos1 = blockpos.below();
+            BlockState blockstate = level.getBlockState(blockpos1);
+            if (blockstate.blocksMotion()) {
+               flag1 = true;
+            } else {
+               --d3;
+               blockpos = blockpos1;
+            }
+         }
+
+         if (flag1) {
+            // CraftBukkit start - Teleport event
+            this.setPos(pX, d3, pZ);
+            if (level.noCollision(this) && !level.containsAnyLiquid(this.getBoundingBox())) {
+               flag = true;
+            }
+            // now revert and call event if the teleport place is valid
+            this.setPos(d0, d1, d2);
 
             if (flag1) {
-                this.teleportTo(p_20985_, d3, p_20987_);
-                if (level.noCollision(this) && !level.containsAnyLiquid(this.getBoundingBox())) {
-                    flag = true;
-                }
-            }
-        }
-
-        if (!flag) {
-            this.teleportTo(d0, d1, d2);
-            return false;
-        } else {
-            if (p_20988_) {
-                level.broadcastEntityEvent(this, (byte)46);
-            }
-
-            if (this instanceof PathfinderMob pathfindermob) {
-                pathfindermob.getNavigation().stop();
-            }
-
-            return true;
-        }
-    }
+               if (!(this instanceof ServerPlayer)) {
+                  EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.level.getWorld(), d0, d1, d2), new Location(this.level.getWorld(), pX, d3, pZ));
+                  this.level.getCraftServer().getPluginManager().callEvent(teleport);
+                  if (!teleport.isCancelled()) {
+                     Location to = teleport.getTo();
+                     this.teleportTo(to.getX(), to.getY(), to.getZ());
+                  } else {
+                     return Optional.empty();
+                  }
+               } else {
+                  // player teleport event is called in the underlining code
+                  if (((ServerPlayer) this).connection.teleport(pX, d3, pZ, this.getYRot(), this.getXRot(), java.util.Collections.emptySet(), cause)) {
+                     return Optional.empty();
+                  }
+               }
+            }
+            // CraftBukkit end
+         }
+      }
+
+      if (!flag) {
+         return Optional.of(false); // CraftBukkit
+      } else {
+         if (pBroadcastTeleport) {
+            level.broadcastEntityEvent(this, (byte)46);
+         }
+
+         if (this instanceof PathfinderMob) {
+            ((PathfinderMob)this).getNavigation().stop();
+         }
+
+         return Optional.of(true); // CraftBukkit
+      }
+   }
 
     public boolean isAffectedByPotions() {
         return !this.isDeadOrDying();
@@ -3311,8 +_,8 @@
         }
 
         BlockState blockstate = this.level().getBlockState(p_21141_);
-        if (blockstate.getBlock() instanceof BedBlock) {
-            this.level().setBlock(p_21141_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(true)), 3);
+        if (blockstate.isBed(level(), p_21141_, this)) {
+            blockstate.setBedOccupied(level(), p_21141_, this, true);
         }
 
         this.setPose(Pose.SLEEPING);
@@ -3327,15 +_,15 @@
     }
 
     private boolean checkBedExists() {
-        return this.getSleepingPos().map(p_341272_ -> this.level().getBlockState(p_341272_).getBlock() instanceof BedBlock).orElse(false);
+        return this.getSleepingPos().map(p_341272_ -> net.minecraftforge.event.ForgeEventFactory.fireSleepingLocationCheck(this, p_341272_)).orElse(false);
     }
 
     public void stopSleeping() {
         this.getSleepingPos().filter(this.level()::hasChunkAt).ifPresent(p_261435_ -> {
             BlockState blockstate = this.level().getBlockState(p_261435_);
-            if (blockstate.getBlock() instanceof BedBlock) {
+            if (blockstate.isBed(level(), p_261435_, this)) {
                 Direction direction = blockstate.getValue(BedBlock.FACING);
-                this.level().setBlock(p_261435_, blockstate.setValue(BedBlock.OCCUPIED, Boolean.valueOf(false)), 3);
+                blockstate.setBedOccupied(level(), p_261435_, this, false);
                 Vec3 vec31 = BedBlock.findStandUpPosition(this.getType(), this.level(), p_261435_, direction, this.getYRot()).orElseGet(() -> {
                     BlockPos blockpos = p_261435_.above();
                     return new Vec3((double)blockpos.getX() + 0.5, (double)blockpos.getY() + 0.1, (double)blockpos.getZ() + 0.5);
@@ -3356,7 +_,9 @@
     @Nullable
     public Direction getBedOrientation() {
         BlockPos blockpos = this.getSleepingPos().orElse(null);
-        return blockpos != null ? BedBlock.getBedOrientation(this.level(), blockpos) : null;
+        if (blockpos == null) return Direction.UP;
+        BlockState state = this.level().getBlockState(blockpos);
+        return !state.isBed(level(), blockpos, this) ? Direction.UP : state.getBedDirection(level(), blockpos);
     }
 
     @Override
@@ -3365,7 +_,7 @@
     }
 
     public ItemStack getProjectile(ItemStack p_21272_) {
-        return ItemStack.EMPTY;
+        return net.minecraftforge.common.ForgeHooks.getProjectile(this, p_21272_, ItemStack.EMPTY);
     }
 
     public final ItemStack eat(Level p_21067_, ItemStack p_21068_) {
@@ -3431,6 +_,8 @@
     }
 
     public EquipmentSlot getEquipmentSlotForItem(ItemStack p_147234_) {
+        final EquipmentSlot slot = p_147234_.getEquipmentSlot();
+        if (slot != null) return slot; // FORGE: Allow modders to set a non-default equipment slot for a stack; e.g. a non-armor chestplate-slot item
         Equipable equipable = Equipable.get(p_147234_);
         if (equipable != null) {
             EquipmentSlot equipmentslot = equipable.getEquipmentSlot();
@@ -3558,4 +_,46 @@
 
     public static record Fallsounds(SoundEvent small, SoundEvent big) {
     }
+
+    /**
+     * Returns true if the entity's rider (EntityPlayer) should face forward when mounted.
+     * currently only used in vanilla code by pigs.
+     *
+     * @param player The player who is riding the entity.
+     * @return If the player should orient the same direction as this entity.
+     */
+    public boolean shouldRiderFaceForward(Player player) {
+        return this instanceof net.minecraft.world.entity.animal.Pig;
+    }
+
+    private net.minecraftforge.common.util.LazyOptional<?>[] handlers = net.minecraftforge.items.wrapper.EntityEquipmentInvWrapper.create(this);
+
+    @Override
+    public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable Direction facing) {
+        if (capability == net.minecraftforge.common.capabilities.ForgeCapabilities.ITEM_HANDLER && this.isAlive()) {
+             if (facing == null) return handlers[2].cast();
+             else if (facing.getAxis().isVertical()) return handlers[0].cast();
+             else if (facing.getAxis().isHorizontal()) return handlers[1].cast();
+        }
+        return super.getCapability(capability, facing);
+    }
+
+    @Override
+    public void invalidateCaps() {
+        super.invalidateCaps();
+        for (int x = 0; x < handlers.length; x++) {
+             handlers[x].invalidate();
+        }
+    }
+
+    @Override
+    public void reviveCaps() {
+        super.reviveCaps();
+        handlers = net.minecraftforge.items.wrapper.EntityEquipmentInvWrapper.create(this);
+    }
+
+   // CraftBukkit start
+
+   public CraftLivingEntity getBukkitLivingEntity() { return (CraftLivingEntity) super.getBukkitEntity(); }
+   // CraftBukkit end
 }
