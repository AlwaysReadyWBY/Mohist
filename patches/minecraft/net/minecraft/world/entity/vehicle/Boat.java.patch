--- a/net/minecraft/world/entity/vehicle/Boat.java
+++ b/net/minecraft/world/entity/vehicle/Boat.java
@@ -23,6 +_,7 @@
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
@@ -51,8 +_,16 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.event.vehicle.VehicleMoveEvent;
+import org.joml.Vector3f;
 
-public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat.Type> {
+public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat.Type>, net.minecraftforge.common.extensions.IForgeBoat {
     private static final EntityDataAccessor<Integer> DATA_ID_TYPE = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_LEFT = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_ID_PADDLE_RIGHT = SynchedEntityData.defineId(Boat.class, EntityDataSerializers.BOOLEAN);
@@ -90,6 +_,14 @@
     @Nullable
     private Leashable.LeashData leashData;
 
+   // CraftBukkit start
+   // PAIL: Some of these haven't worked since a few updates, and since 1.9 they are less and less applicable.
+   public double maxSpeed = 0.4D;
+   public double occupiedDeceleration = 0.2D;
+   public double unoccupiedDeceleration = -1;
+   public boolean landBoats = false;
+   // CraftBukkit end
+
     public Boat(EntityType<? extends Boat> p_38290_, Level p_38291_) {
         super(p_38290_, p_38291_);
         this.blocksBuilding = true;
@@ -161,9 +_,55 @@
                 0.0, this.getVariant() == Boat.Type.BAMBOO ? (double)(p_299244_.height() * 0.8888889F) : (double)(p_299244_.height() / 3.0F), (double)f
             )
             .yRot(-this.getYRot() * (float) (Math.PI / 180.0));
-    }
-
-    @Override
+   }
+
+   public boolean hurt(DamageSource p_38319_, float p_38320_) {
+      if (this.isInvulnerableTo(p_38319_)) {
+         return false;
+      } else if (!this.level().isClientSide && !this.isRemoved()) {
+         // CraftBukkit start
+         Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+         org.bukkit.entity.Entity attacker = (p_38319_.getEntity() == null) ? null : p_38319_.getEntity().getBukkitEntity();
+
+         VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) p_38320_);
+         this.level.getCraftServer().getPluginManager().callEvent(event);
+
+         if (event.isCancelled()) {
+            return false;
+         }
+         // f = event.getDamage(); // TODO Why don't we do this?
+         // CraftBukkit end
+
+         this.setHurtDir(-this.getHurtDir());
+         this.setHurtTime(10);
+         this.setDamage(this.getDamage() + p_38320_ * 10.0F);
+         this.markHurt();
+         this.gameEvent(GameEvent.ENTITY_DAMAGE, p_38319_.getEntity());
+         boolean flag = p_38319_.getEntity() instanceof Player && ((Player)p_38319_.getEntity()).getAbilities().instabuild;
+         if (flag || this.getDamage() > 40.0F) {
+            // CraftBukkit start
+            VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, attacker);
+            this.level.getCraftServer().getPluginManager().callEvent(destroyEvent);
+
+            if (destroyEvent.isCancelled()) {
+               this.setDamage(40F); // Maximize damage so this doesn't get triggered again right away
+               return true;
+            }
+            // CraftBukkit end
+            if (!flag && this.level().getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
+               this.destroy(p_38319_);
+            }
+
+            this.discard();
+         }
+
+         return true;
+      } else {
+         return true;
+      }
+   }
+	
+	@Override
     public void onAboveBubbleCol(boolean p_38381_) {
         if (!this.level().isClientSide) {
             this.isAboveBubbleColumn = true;
@@ -195,13 +_,34 @@
     @Override
     public void push(Entity p_38373_) {
         if (p_38373_ instanceof Boat) {
-            if (p_38373_.getBoundingBox().minY < this.getBoundingBox().maxY) {
-                super.push(p_38373_);
+         if (p_38373_.getBoundingBox().minY < this.getBoundingBox().maxY) {
+            // CraftBukkit start
+            if (!this.isPassengerOfSameVehicle(p_38373_)) {
+               VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), p_38373_.getBukkitEntity());
+               this.level.getCraftServer().getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  return;
+               }
             }
-        } else if (p_38373_.getBoundingBox().minY <= this.getBoundingBox().minY) {
+            // CraftBukkit end
             super.push(p_38373_);
-        }
-    }
+         }
+      } else if (p_38373_.getBoundingBox().minY <= this.getBoundingBox().minY) {
+         // CraftBukkit start
+         if (!this.isPassengerOfSameVehicle(p_38373_)) {
+            VehicleEntityCollisionEvent event = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), p_38373_.getBukkitEntity());
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+               return;
+            }
+         }
+         // CraftBukkit end
+         super.push(p_38373_);
+      }
+
+   }
 
     @Override
     public Item getDropItem() {
@@ -270,7 +_,8 @@
         return this.getDirection().getClockWise();
     }
 
-    @Override
+   	private Location lastLocation; // CraftBukkit
+   	@Override
     public void tick() {
         this.oldStatus = this.status;
         this.status = this.getStatus();
@@ -310,6 +_,22 @@
             this.setDeltaMovement(Vec3.ZERO);
         }
 
+      // CraftBukkit start
+      org.bukkit.Server server = this.level.getCraftServer();
+      org.bukkit.World bworld = this.level.getWorld();
+
+      Location to = CraftLocation.toBukkit(this.position(), bworld, this.getYRot(), this.getXRot());
+      Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+      server.getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+      if (lastLocation != null && !lastLocation.equals(to)) {
+         VehicleMoveEvent event = new VehicleMoveEvent(vehicle, lastLocation, to);
+         server.getPluginManager().callEvent(event);
+      }
+      lastLocation = vehicle.getLocation();
+      // CraftBukkit end
+
         this.tickBubbleColumn();
 
         for (int i = 0; i <= 1; i++) {
@@ -498,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(l1, k1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)) {
+                    if (this.canBoatInFluid(fluidstate)) {
                         f = Math.max(f, fluidstate.getHeight(this.level(), blockpos$mutableblockpos));
                     }
 
@@ -544,7 +_,7 @@
                                     voxelshape,
                                     BooleanOp.AND
                                 )) {
-                                f += blockstate.getBlock().getFriction();
+                                f += blockstate.getFriction(this.level(), blockpos$mutableblockpos, this);
                                 k1++;
                             }
                         }
@@ -573,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(k1, l1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)) {
+                    if (this.canBoatInFluid(fluidstate)) {
                         float f = (float)l1 + fluidstate.getHeight(this.level(), blockpos$mutableblockpos);
                         this.waterLevel = Math.max((double)f, this.waterLevel);
                         flag |= aabb.minY < (double)f;
@@ -603,7 +_,7 @@
                 for (int i2 = i1; i2 < j1; i2++) {
                     blockpos$mutableblockpos.set(k1, l1, i2);
                     FluidState fluidstate = this.level().getFluidState(blockpos$mutableblockpos);
-                    if (fluidstate.is(FluidTags.WATER)
+                    if (this.canBoatInFluid(fluidstate)
                         && d0 < (double)((float)blockpos$mutableblockpos.getY() + fluidstate.getHeight(this.level(), blockpos$mutableblockpos))) {
                         if (!fluidstate.isSource()) {
                             return Boat.Status.UNDER_FLOWING_WATER;
@@ -825,6 +_,11 @@
 
                     this.causeFallDamage(this.fallDistance, 1.0F, this.damageSources().fall());
                     if (!this.level().isClientSide && !this.isRemoved()) {
+                  // CraftBukkit start
+                  Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                  VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, null);
+                  this.level.getCraftServer().getPluginManager().callEvent(destroyEvent);
+                  if (!destroyEvent.isCancelled()) {
                         this.kill();
                         if (this.level().getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                             for (int i = 0; i < 3; i++) {
@@ -834,12 +_,13 @@
                             for (int j = 0; j < 2; j++) {
                                 this.spawnAtLocation(Items.STICK);
                             }
+                            }
                         }
                     }
                 }
 
                 this.resetFallDistance();
-            } else if (!this.level().getFluidState(this.blockPosition().below()).is(FluidTags.WATER) && p_38307_ < 0.0) {
+            } else if (!this.canBoatInFluid(this.level().getFluidState(this.blockPosition().below())) && p_38307_ < 0.0) {
                 this.fallDistance -= (float)p_38307_;
             }
         }
@@ -871,7 +_,7 @@
 
     @Override
     protected boolean canAddPassenger(Entity p_38390_) {
-        return this.getPassengers().size() < this.getMaxPassengers() && !this.isEyeInFluid(FluidTags.WATER);
+        return this.getPassengers().size() < this.getMaxPassengers() && !this.canBoatInFluid(this.getEyeInFluidType());
     }
 
     protected int getMaxPassengers() {
