--- a/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -22,6 +_,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
+import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
@@ -33,6 +_,7 @@
 import net.minecraft.world.entity.npc.Villager;
 import net.minecraft.world.entity.npc.WanderingTrader;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
@@ -42,10 +_,19 @@
 import net.minecraft.world.level.block.PoweredRailBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.block.state.properties.RailShape;
+import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
+import org.joml.Vector3f;
 
-public abstract class AbstractMinecart extends VehicleEntity {
+public abstract class AbstractMinecart extends VehicleEntity implements net.minecraftforge.common.extensions.IForgeAbstractMinecart {
     private static final Vec3 LOWERED_PASSENGER_ATTACHMENT = new Vec3(0.0, 0.0, 0.0);
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_OFFSET = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
@@ -83,6 +_,18 @@
         p_38135_.put(RailShape.NORTH_WEST, Pair.of(vec3i2, vec3i));
         p_38135_.put(RailShape.NORTH_EAST, Pair.of(vec3i2, vec3i1));
     });
+    private boolean canBePushed = true;
+
+   // CraftBukkit start
+   public boolean slowWhenEmpty = true;
+   private double derailedX = 0.5;
+   private double derailedY = 0.5;
+   private double derailedZ = 0.5;
+   private double flyingX = 0.95;
+   private double flyingY = 0.95;
+   private double flyingZ = 0.95;
+   public double maxSpeed = 0.4D;
+   // CraftBukkit end
 
     protected AbstractMinecart(EntityType<?> p_38087_, Level p_38088_) {
         super(p_38087_, p_38088_);
@@ -139,11 +_,11 @@
 
     @Override
     public boolean isPushable() {
-        return true;
+        return canBePushed;
     }
 
     @Override
-    public Vec3 getRelativePortalPosition(Direction.Axis p_38132_, BlockUtil.FoundRectangle p_38133_) {
+    protected Vec3 getRelativePortalPosition(Direction.Axis p_38132_, BlockUtil.FoundRectangle p_38133_) {
         return LivingEntity.resetForwardDirectionOfRelativePortalPosition(super.getRelativePortalPosition(p_38132_, p_38133_));
     }
 
@@ -207,7 +_,55 @@
         }
     }
 
-    @Override
+   public boolean hurt(DamageSource p_38117_, float p_38118_) {
+      if (!this.level().isClientSide && !this.isRemoved()) {
+         if (this.isInvulnerableTo(p_38117_)) {
+            return false;
+         } else {
+            // CraftBukkit start - fire VehicleDamageEvent
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+            org.bukkit.entity.Entity passenger = (p_38117_.getEntity() == null) ? null : p_38117_.getEntity().getBukkitEntity();
+
+            VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, p_38118_);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+               return false;
+            }
+
+            p_38118_ = (float) event.getDamage();
+            // CraftBukkit end
+            this.setHurtDir(-this.getHurtDir());
+            this.setHurtTime(10);
+            this.markHurt();
+            this.setDamage(this.getDamage() + p_38118_ * 10.0F);
+            this.gameEvent(GameEvent.ENTITY_DAMAGE, p_38117_.getEntity());
+            boolean flag = p_38117_.getEntity() instanceof Player && ((Player)p_38117_.getEntity()).getAbilities().instabuild;
+            if (flag || this.getDamage() > 40.0F) {
+               // CraftBukkit start
+               VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+               this.level.getCraftServer().getPluginManager().callEvent(destroyEvent);
+
+               if (destroyEvent.isCancelled()) {
+                  this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
+                  return true;
+               }
+               // CraftBukkit end
+               this.ejectPassengers();
+               if (flag && !this.hasCustomName()) {
+                  this.discard();
+               } else {
+                  this.destroy(p_38117_);
+               }
+            }
+
+            return true;
+         }
+      } else {
+         return true;
+      }
+   }
+
     protected float getBlockSpeedFactor() {
         BlockState blockstate = this.level().getBlockState(this.blockPosition());
         return blockstate.is(BlockTags.RAILS) ? 1.0F : super.getBlockSpeedFactor();
@@ -234,13 +_,30 @@
         return this.flipped ? this.getDirection().getOpposite().getClockWise() : this.getDirection().getClockWise();
     }
 
+   // Mohist start - Fix mixin (locals = LocalCapture.CAPTURE_FAILSOFT)
+   double prevX;
+   double prevY;
+   double prevZ;
+   float prevYaw;
+   float prevPitch;
+   // Mohist end
+
+
     @Override
     protected double getDefaultGravity() {
         return this.isInWater() ? 0.005 : 0.04;
     }
 
     @Override
-    public void tick() {
+	public void tick() {
+      // CraftBukkit start
+      prevX = this.getX();
+      prevY = this.getY();
+      prevZ = this.getZ();
+      prevYaw = this.getYRot();
+      prevPitch = this.getXRot();
+      // CraftBukkit end
+
         if (this.getHurtTime() > 0) {
             this.setHurtTime(this.getHurtTime() - 1);
         }
@@ -250,7 +_,7 @@
         }
 
         this.checkBelowWorld();
-        this.handlePortal();
+      // this.handleNetherPortal(); // CraftBukkit - handled in postTick
         if (this.level().isClientSide) {
             if (this.lerpSteps > 0) {
                 this.lerpPositionAndRotationStep(this.lerpSteps, this.lerpX, this.lerpY, this.lerpZ, this.lerpYRot, this.lerpXRot);
@@ -271,9 +_,9 @@
             BlockPos blockpos = new BlockPos(i, j, k);
             BlockState blockstate = this.level().getBlockState(blockpos);
             this.onRails = BaseRailBlock.isRail(blockstate);
-            if (this.onRails) {
+            if (canUseRail() && this.onRails) {
                 this.moveAlongTrack(blockpos, blockstate);
-                if (blockstate.is(Blocks.ACTIVATOR_RAIL)) {
+                if (blockstate.getBlock() instanceof PoweredRailBlock power && power.isActivatorRail()) {
                     this.activateMinecart(i, j, k, blockstate.getValue(PoweredRailBlock.POWERED));
                 }
             } else {
@@ -298,23 +_,53 @@
             }
 
             this.setRot(this.getYRot(), this.getXRot());
-            if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01) {
-                List<Entity> list = this.level().getEntities(this, this.getBoundingBox().inflate(0.2F, 0.0, 0.2F), EntitySelector.pushableBy(this));
-                if (!list.isEmpty()) {
-                    for (Entity entity1 : list) {
-                        if (!(entity1 instanceof Player)
-                            && !(entity1 instanceof IronGolem)
-                            && !(entity1 instanceof AbstractMinecart)
-                            && !this.isVehicle()
-                            && !entity1.isPassenger()) {
-                            entity1.startRiding(this);
-                        } else {
+         // CraftBukkit start
+         org.bukkit.World bworld = this.level.getWorld();
+         Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+         Location to = CraftLocation.toBukkit(this.position(), bworld, this.getYRot(), this.getXRot());
+         Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+         this.level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+         if (!from.equals(to)) {
+            this.level.getCraftServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+         }
+         // CraftBukkit end
+         AABB box;
+         if (getCollisionHandler() != null) box = getCollisionHandler().getMinecartCollisionBox(this);
+         else                               box = this.getBoundingBox().inflate(0.2F, 0.0D, 0.2F);
+         if (canBeRidden() && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
+            List<Entity> list = this.level().getEntities(this, box, EntitySelector.pushableBy(this));
+            if (!list.isEmpty()) {
+               for(int l = 0; l < list.size(); ++l) {
+                  Entity entity1 = list.get(l);
+                  if (!(entity1 instanceof Player) && !(entity1 instanceof IronGolem) && !(entity1 instanceof AbstractMinecart) && !this.isVehicle() && !entity1.isPassenger()) {
+                     // CraftBukkit start
+                     VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                     this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                     if (collisionEvent.isCancelled()) {
+                        continue;
+                     }
+                     // CraftBukkit end
+                     entity1.startRiding(this);
+                  } else {
+                     // CraftBukkit start
+                     if (!this.isPassengerOfSameVehicle(entity1)) {
+                        VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                        this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+                        if (collisionEvent.isCancelled()) {
+                           continue;
+                        }
+                     }
+                     // CraftBukkit end
                             entity1.push(this);
                         }
                     }
                 }
             } else {
-                for (Entity entity : this.level().getEntities(this, this.getBoundingBox().inflate(0.2F, 0.0, 0.2F))) {
+                for (Entity entity : this.level().getEntities(this, box)) {
                     if (!this.hasPassenger(entity) && entity.isPushable() && entity instanceof AbstractMinecart) {
                         entity.push(this);
                     }
@@ -331,26 +_,38 @@
         }
     }
 
-    protected double getMaxSpeed() {
-        return (this.isInWater() ? 4.0 : 8.0) / 20.0;
-    }
-
-    public void activateMinecart(int p_38111_, int p_38112_, int p_38113_, boolean p_38114_) {
-    }
-
-    protected void comeOffTrack() {
-        double d0 = this.getMaxSpeed();
-        Vec3 vec3 = this.getDeltaMovement();
-        this.setDeltaMovement(Mth.clamp(vec3.x, -d0, d0), vec3.y, Mth.clamp(vec3.z, -d0, d0));
-        if (this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.5));
-        }
-
-        this.move(MoverType.SELF, this.getDeltaMovement());
-        if (!this.onGround()) {
-            this.setDeltaMovement(this.getDeltaMovement().scale(0.95));
-        }
-    }
+   protected double getMaxSpeed() {
+      return (this.isInWater() ? this.maxSpeed / 2.0D: this.maxSpeed); // CraftBukkit
+   }
+
+   public void activateMinecart(int p_38111_, int p_38112_, int p_38113_, boolean p_38114_) {
+   }
+
+   protected void comeOffTrack() {
+      double d0 = this.onGround() ? this.getMaxSpeed() : getMaxSpeedAirLateral();
+      Vec3 vec3 = this.getDeltaMovement();
+      this.setDeltaMovement(Mth.clamp(vec3.x, -d0, d0), vec3.y, Mth.clamp(vec3.z, -d0, d0));
+      if (this.onGround()) {
+         // CraftBukkit start - replace magic numbers with our variables
+         this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.derailedX, this.getDeltaMovement().y * this.derailedY, this.getDeltaMovement().z * this.derailedZ));
+         // CraftBukkit end
+      }
+
+      if (getMaxSpeedAirVertical() > 0 && getDeltaMovement().y > getMaxSpeedAirVertical()) {
+          if(Math.abs(getDeltaMovement().x) < 0.3f && Math.abs(getDeltaMovement().z) < 0.3f)
+              setDeltaMovement(new Vec3(getDeltaMovement().x, 0.15f, getDeltaMovement().z));
+          else
+              setDeltaMovement(new Vec3(getDeltaMovement().x, getMaxSpeedAirVertical(), getDeltaMovement().z));
+      }
+
+      this.move(MoverType.SELF, this.getDeltaMovement());
+      if (!this.onGround()) {
+         // CraftBukkit start - replace magic numbers with our variables
+         this.setDeltaMovement(new Vec3(this.getDeltaMovement().x * this.flyingX, this.getDeltaMovement().y * this.flyingY, this.getDeltaMovement().z * this.flyingZ));
+         // CraftBukkit end
+      }
+
+   }
 
     protected void moveAlongTrack(BlockPos p_38156_, BlockState p_38157_) {
         this.resetFallDistance();
@@ -361,18 +_,19 @@
         d1 = (double)p_38156_.getY();
         boolean flag = false;
         boolean flag1 = false;
-        if (p_38157_.is(Blocks.POWERED_RAIL)) {
+        BaseRailBlock baserailblock = (BaseRailBlock) p_38157_.getBlock();
+        if (baserailblock instanceof PoweredRailBlock power && !power.isActivatorRail()) {
             flag = p_38157_.getValue(PoweredRailBlock.POWERED);
             flag1 = !flag;
         }
 
-        double d3 = 0.0078125;
+        double d3 = getSlopeAdjustment();
         if (this.isInWater()) {
             d3 *= 0.2;
         }
 
         Vec3 vec31 = this.getDeltaMovement();
-        RailShape railshape = p_38157_.getValue(((BaseRailBlock)p_38157_.getBlock()).getShapeProperty());
+        RailShape railshape = baserailblock.getRailDirection(p_38157_, this.level(), p_38156_, this);
         switch (railshape) {
             case ASCENDING_EAST:
                 this.setDeltaMovement(vec31.add(-d3, 0.0, 0.0));
@@ -418,7 +_,7 @@
             }
         }
 
-        if (flag1) {
+        if (flag1 && shouldDoRailFunctions()) {
             double d22 = this.getDeltaMovement().horizontalDistance();
             if (d22 < 0.03) {
                 this.setDeltaMovement(Vec3.ZERO);
@@ -447,10 +_,7 @@
         d0 = d23 + d4 * d14;
         d2 = d10 + d5 * d14;
         this.setPos(d0, d1, d2);
-        double d24 = this.isVehicle() ? 0.75 : 1.0;
-        double d25 = this.getMaxSpeed();
-        vec31 = this.getDeltaMovement();
-        this.move(MoverType.SELF, new Vec3(Mth.clamp(d24 * vec31.x, -d25, d25), 0.0, Mth.clamp(d24 * vec31.z, -d25, d25)));
+        this.moveMinecartOnRail(p_38156_);
         if (vec3i.getY() != 0
             && Mth.floor(this.getX()) - p_38156_.getX() == vec3i.getX()
             && Mth.floor(this.getZ()) - p_38156_.getZ() == vec3i.getZ()) {
@@ -482,7 +_,11 @@
             this.setDeltaMovement(d26 * (double)(j - p_38156_.getX()), vec35.y, d26 * (double)(i - p_38156_.getZ()));
         }
 
-        if (flag) {
+        if (shouldDoRailFunctions()) {
+            baserailblock.onMinecartPass(p_38157_, level(), p_38156_, this);
+        }
+
+        if (flag && shouldDoRailFunctions()) {
             Vec3 vec36 = this.getDeltaMovement();
             double d27 = vec36.horizontalDistance();
             if (d27 > 0.01) {
@@ -525,7 +_,7 @@
     }
 
     protected void applyNaturalSlowdown() {
-        double d0 = this.isVehicle() ? 0.997 : 0.96;
+      double d0 = this.isVehicle() || !this.slowWhenEmpty ? 0.997D : 0.96D; // CraftBukkit - add !this.slowWhenEmpty
         Vec3 vec3 = this.getDeltaMovement();
         vec3 = vec3.multiply(d0, 0.0, d0);
         if (this.isInWater()) {
@@ -546,7 +_,7 @@
 
         BlockState blockstate = this.level().getBlockState(new BlockPos(i, j, k));
         if (BaseRailBlock.isRail(blockstate)) {
-            RailShape railshape = blockstate.getValue(((BaseRailBlock)blockstate.getBlock()).getShapeProperty());
+            RailShape railshape = ((BaseRailBlock)blockstate.getBlock()).getRailDirection(blockstate, this.level(), new BlockPos(i, j, k), this);
             p_38098_ = (double)j;
             if (railshape.isAscending()) {
                 p_38098_ = (double)(j + 1);
@@ -585,7 +_,7 @@
 
         BlockState blockstate = this.level().getBlockState(new BlockPos(i, j, k));
         if (BaseRailBlock.isRail(blockstate)) {
-            RailShape railshape = blockstate.getValue(((BaseRailBlock)blockstate.getBlock()).getShapeProperty());
+            RailShape railshape = ((BaseRailBlock)blockstate.getBlock()).getRailDirection(blockstate, this.level(), new BlockPos(i, j, k), this);
             Pair<Vec3i, Vec3i> pair = exits(railshape);
             Vec3i vec3i = pair.getFirst();
             Vec3i vec3i1 = pair.getSecond();
@@ -649,9 +_,21 @@
 
     @Override
     public void push(Entity p_38165_) {
+        if (getCollisionHandler() != null) {
+            getCollisionHandler().onEntityCollision(this, p_38165_);
+            return;
+        }
         if (!this.level().isClientSide) {
             if (!p_38165_.noPhysics && !this.noPhysics) {
                 if (!this.hasPassenger(p_38165_)) {
+               // CraftBukkit start
+               VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), p_38165_.getBukkitEntity());
+               this.level.getCraftServer().getPluginManager().callEvent(collisionEvent);
+
+               if (collisionEvent.isCancelled()) {
+                  return;
+               }
+               // CraftBukkit end
                     double d0 = p_38165_.getX() - this.getX();
                     double d1 = p_38165_.getZ() - this.getZ();
                     double d2 = d0 * d0 + d1 * d1;
@@ -670,7 +_,7 @@
                         d1 *= 0.1F;
                         d0 *= 0.5;
                         d1 *= 0.5;
-                        if (p_38165_ instanceof AbstractMinecart) {
+                        if (p_38165_ instanceof AbstractMinecart oMinecart) {
                             double d4 = p_38165_.getX() - this.getX();
                             double d5 = p_38165_.getZ() - this.getZ();
                             Vec3 vec3 = new Vec3(d4, 0.0, d5).normalize();
@@ -687,12 +_,11 @@
 
                             Vec3 vec32 = this.getDeltaMovement();
                             Vec3 vec33 = p_38165_.getDeltaMovement();
-                            if (((AbstractMinecart)p_38165_).getMinecartType() == AbstractMinecart.Type.FURNACE && this.getMinecartType() != AbstractMinecart.Type.FURNACE) {
+                            if (oMinecart.isPoweredCart() && !this.isPoweredCart()) {
                                 this.setDeltaMovement(vec32.multiply(0.2, 1.0, 0.2));
                                 this.push(vec33.x - d0, 0.0, vec33.z - d1);
                                 p_38165_.setDeltaMovement(vec33.multiply(0.95, 1.0, 0.95));
-                            } else if (((AbstractMinecart)p_38165_).getMinecartType() != AbstractMinecart.Type.FURNACE
-                                && this.getMinecartType() == AbstractMinecart.Type.FURNACE) {
+                            } else if (!oMinecart.isPoweredCart() && this.isPoweredCart()) {
                                 p_38165_.setDeltaMovement(vec33.multiply(0.2, 1.0, 0.2));
                                 p_38165_.push(vec32.x + d0, 0.0, vec32.z + d1);
                                 this.setDeltaMovement(vec32.multiply(0.95, 1.0, 0.95));
@@ -804,6 +_,50 @@
         });
     }
 
+
+    private static net.minecraftforge.common.IMinecartCollisionHandler COLLISIONS = null;
+    public net.minecraftforge.common.IMinecartCollisionHandler getCollisionHandler() { return COLLISIONS; }
+    public static void registerCollisionHandler(@Nullable net.minecraftforge.common.IMinecartCollisionHandler handler) { COLLISIONS = handler; }
+              private boolean canUseRail = true;
+    @Override public  boolean canUseRail() { return canUseRail; }
+    @Override public  void    setCanUseRail(boolean value) { this.canUseRail = value; }
+              private float    currentSpeedCapOnRail = getMaxCartSpeedOnRail();
+    @Override public  float getCurrentCartSpeedCapOnRail() { return currentSpeedCapOnRail; }
+    @Override public  void  setCurrentCartSpeedCapOnRail(float value) { currentSpeedCapOnRail = Math.min(value, getMaxCartSpeedOnRail()); }
+              private Float    maxSpeedAirLateral = null;
+    @Override public  float getMaxSpeedAirLateral() { return maxSpeedAirLateral == null ? (float)this.getMaxSpeed() : maxSpeedAirLateral; }
+    @Override public  void  setMaxSpeedAirLateral(float value) { maxSpeedAirLateral = value; }
+              private float    maxSpeedAirVertical = DEFAULT_MAX_SPEED_AIR_VERTICAL;
+    @Override public  float getMaxSpeedAirVertical() { return maxSpeedAirVertical; }
+    @Override public  void  setMaxSpeedAirVertical(float value) { maxSpeedAirVertical = value; }
+              private double    dragAir = DEFAULT_AIR_DRAG;
+    @Override public  double getDragAir() { return dragAir; }
+    @Override public  void   setDragAir(double value) { dragAir = value; }
+    @Override
+    public double getMaxSpeedWithRail() { //Non-default because getMaximumSpeed is protected
+        if (!canUseRail()) {
+            return getMaxSpeed();
+        }
+        BlockPos pos = this.getCurrentRailPosition();
+        BlockState state = this.level().getBlockState(pos);
+
+        if (!state.is(BlockTags.RAILS)) {
+            return getMaxSpeed();
+        }
+
+        float railMaxSpeed = ((BaseRailBlock)state.getBlock()).getRailMaxSpeed(state, this.level(), pos, this);
+        return Math.min(railMaxSpeed, getCurrentCartSpeedCapOnRail());
+    }
+
+    @Override
+    public void moveMinecartOnRail(BlockPos pos) { //Non-default because getMaximumSpeed is protected
+        AbstractMinecart mc = this;
+        double d24 = mc.isVehicle() ? 0.75D : 1.0D;
+        double d25 = mc.getMaxSpeedWithRail();
+        Vec3 vec3d1 = mc.getDeltaMovement();
+        mc.move(MoverType.SELF, new Vec3(Mth.clamp(d24 * vec3d1.x, -d25, d25), 0.0D, Mth.clamp(d24 * vec3d1.z, -d25, d25)));
+    }
+
     public static enum Type {
         RIDEABLE,
         CHEST,
@@ -813,4 +_,26 @@
         HOPPER,
         COMMAND_BLOCK;
     }
+
+   // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+   public Vector getFlyingVelocityMod() {
+      return new Vector(flyingX, flyingY, flyingZ);
+   }
+
+   public void setFlyingVelocityMod(Vector flying) {
+      flyingX = flying.getX();
+      flyingY = flying.getY();
+      flyingZ = flying.getZ();
+   }
+
+   public Vector getDerailedVelocityMod() {
+      return new Vector(derailedX, derailedY, derailedZ);
+   }
+
+   public void setDerailedVelocityMod(Vector derailed) {
+      derailedX = derailed.getX();
+      derailedY = derailed.getY();
+      derailedZ = derailed.getZ();
+   }
+   // CraftBukkit end
 }
