--- a/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -38,6 +_,7 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.item.enchantment.Enchantments;
 import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Blocks;
@@ -48,6 +_,10 @@
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.player.PlayerPickupArrowEvent;
 
 public abstract class AbstractArrow extends Projectile {
     private static final double ARROW_BASE_DAMAGE = 2.0;
@@ -55,6 +_,7 @@
     private static final EntityDataAccessor<Byte> PIERCE_LEVEL = SynchedEntityData.defineId(AbstractArrow.class, EntityDataSerializers.BYTE);
     private static final int FLAG_CRIT = 1;
     private static final int FLAG_NOPHYSICS = 2;
+    private static final int FLAG_CROSSBOW = 4;
     @Nullable
     private BlockState lastState;
     public boolean inGround;
@@ -63,14 +_,16 @@
     public int shakeTime;
     public int life;
     private double baseDamage = 2.0;
+    private int knockback;
     private SoundEvent soundEvent = this.getDefaultHitGroundSoundEvent();
     @Nullable
     private IntOpenHashSet piercingIgnoreEntityIds;
     @Nullable
     private List<Entity> piercedAndKilledEntities;
-    private ItemStack pickupItemStack = this.getDefaultPickupItem();
+    public ItemStack pickupItemStack = this.getDefaultPickupItem();
     @Nullable
-    private ItemStack firedFromWeapon = null;
+    public ItemStack firedFromWeapon = null;
+    private final IntOpenHashSet ignoredEntities = new IntOpenHashSet();
 
     protected AbstractArrow(EntityType<? extends AbstractArrow> p_332730_, Level p_335646_) {
         super(p_332730_, p_335646_);
@@ -188,7 +_,7 @@
             this.shakeTime--;
         }
 
-        if (this.isInWaterOrRain() || blockstate.is(Blocks.POWDER_SNOW)) {
+        if (this.isInWaterOrRain() || blockstate.is(Blocks.POWDER_SNOW) || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType))) {
             this.clearFire();
         }
 
@@ -224,11 +_,27 @@
                     }
                 }
 
-                if (hitresult != null && !flag) {
-                    ProjectileDeflection projectiledeflection = this.hitTargetOrDeflectSelf(hitresult);
-                    this.hasImpulse = true;
-                    if (projectiledeflection != ProjectileDeflection.NONE) {
-                        break;
+                if (hitresult != null && hitresult.getType() != HitResult.Type.MISS && !flag) {
+                    switch (net.minecraftforge.event.ForgeEventFactory.onProjectileImpactResult(this, hitresult)) {
+                        case SKIP_ENTITY:
+                            if (hitresult.getType() != HitResult.Type.ENTITY) { // If there is no entity, we just return default behaviour
+                                this.onHit(hitresult);
+                                this.hasImpulse = true;
+                                break;
+                            }
+                            ignoredEntities.add(entityhitresult.getEntity().getId());
+                            entityhitresult = null; // Don't process any further
+                            break;
+                        case STOP_AT_CURRENT_NO_DAMAGE:
+                            this.discard();
+                            entityhitresult = null; // Don't process any further
+                            break;
+                        case STOP_AT_CURRENT:
+                            this.setPierceLevel((byte) 0);
+                        case DEFAULT:
+                            this.onHit(hitresult);
+                            this.hasImpulse = true;
+                            break;
                     }
                 }
 
@@ -239,6 +_,9 @@
                 hitresult = null;
             }
 
+            if (this.isRemoved())
+                return;
+
             vec3 = this.getDeltaMovement();
             double d5 = vec3.x;
             double d6 = vec3.y;
@@ -320,6 +_,7 @@
     protected void tickDespawn() {
         this.life++;
         if (this.life >= 1200) {
+            this.putRemoveCause(EntityRemoveEvent.Cause.DESPAWN);
             this.discard();
         }
     }
@@ -357,6 +_,7 @@
             }
 
             if (this.piercingIgnoreEntityIds.size() >= this.getPierceLevel() + 1) {
+                this.putRemoveCause(EntityRemoveEvent.Cause.HIT);
                 this.discard();
                 return;
             }
@@ -376,7 +_,13 @@
         boolean flag = entity.getType() == EntityType.ENDERMAN;
         int i = entity.getRemainingFireTicks();
         if (this.isOnFire() && !flag) {
-            entity.igniteForSeconds(5.0F);
+            // CraftBukkit start
+            EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+            org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+            if (!combustEvent.isCancelled()) {
+                entity.igniteForSeconds(combustEvent.getDuration(), false);
+            }
+            // CraftBukkit end
         }
 
         if (entity.hurt(damagesource, (float)j)) {
@@ -504,7 +_,7 @@
 
     @Override
     protected boolean canHitEntity(Entity p_36743_) {
-        return super.canHitEntity(p_36743_) && (this.piercingIgnoreEntityIds == null || !this.piercingIgnoreEntityIds.contains(p_36743_.getId()));
+        return super.canHitEntity(p_36743_) && (this.piercingIgnoreEntityIds == null || !this.piercingIgnoreEntityIds.contains(p_36743_.getId())) && !this.ignoredEntities.contains(p_36743_.getId());
     }
 
     @Override
@@ -576,8 +_,24 @@
     @Override
     public void playerTouch(Player p_36766_) {
         if (!this.level().isClientSide && (this.inGround || this.isNoPhysics()) && this.shakeTime <= 0) {
-            if (this.tryPickup(p_36766_)) {
+            // CraftBukkit start
+            ItemStack itemstack = this.getPickupItem();
+            if (this.pickup == Pickup.ALLOWED && !itemstack.isEmpty() && p_36766_.getInventory().canHold(itemstack) > 0) {
+                ItemEntity item = new ItemEntity(this.level, this.getX(), this.getY(), this.getZ(), itemstack);
+                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) p_36766_.getBukkitEntity(), new CraftItem(this.level.getCraftServer(), item), (org.bukkit.entity.AbstractArrow) this.getBukkitEntity());
+                // event.setCancelled(!entityhuman.canPickUpLoot); TODO
+                this.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return;
+                }
+                itemstack = item.getItem();
+            }
+
+            if ((this.pickup == AbstractArrow.Pickup.ALLOWED && p_36766_.getInventory().add(itemstack)) || (this.pickup == AbstractArrow.Pickup.CREATIVE_ONLY && p_36766_.getAbilities().instabuild)) {
+                // CraftBukkit end
                 p_36766_.take(this, 1);
+                this.putRemoveCause(EntityRemoveEvent.Cause.PICKUP);
                 this.discard();
             }
         }
@@ -623,7 +_,7 @@
         this.setFlag(1, p_36763_);
     }
 
-    private void setPierceLevel(byte p_36768_) {
+    public void setPierceLevel(byte p_36768_) {
         this.entityData.set(PIERCE_LEVEL, p_36768_);
     }
 
