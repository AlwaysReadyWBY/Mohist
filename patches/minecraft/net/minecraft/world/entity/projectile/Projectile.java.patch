--- a/net/minecraft/world/entity/projectile/Projectile.java
+++ b/net/minecraft/world/entity/projectile/Projectile.java
@@ -23,262 +_,238 @@
 import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.projectiles.ProjectileSource;
 
 public abstract class Projectile extends Entity implements TraceableEntity {
-    @Nullable
-    private UUID ownerUUID;
-    @Nullable
-    private Entity cachedOwner;
-    private boolean leftOwner;
-    private boolean hasBeenShot;
-
-    protected Projectile(EntityType<? extends Projectile> p_37248_, Level p_37249_) {
-        super(p_37248_, p_37249_);
-    }
-
-    public void setOwner(@Nullable Entity p_37263_) {
-        if (p_37263_ != null) {
-            this.ownerUUID = p_37263_.getUUID();
-            this.cachedOwner = p_37263_;
-        }
-    }
-
-    @Nullable
-    @Override
-    public Entity getOwner() {
-        if (this.cachedOwner != null && !this.cachedOwner.isRemoved()) {
-            return this.cachedOwner;
-        } else if (this.ownerUUID != null && this.level() instanceof ServerLevel serverlevel) {
-            this.cachedOwner = serverlevel.getEntity(this.ownerUUID);
-            return this.cachedOwner;
-        } else {
-            return null;
-        }
-    }
-
-    public Entity getEffectSource() {
-        return MoreObjects.firstNonNull(this.getOwner(), this);
-    }
-
-    @Override
-    protected void addAdditionalSaveData(CompoundTag p_37265_) {
-        if (this.ownerUUID != null) {
-            p_37265_.putUUID("Owner", this.ownerUUID);
-        }
-
-        if (this.leftOwner) {
-            p_37265_.putBoolean("LeftOwner", true);
-        }
-
-        p_37265_.putBoolean("HasBeenShot", this.hasBeenShot);
-    }
-
-    protected boolean ownedBy(Entity p_150172_) {
-        return p_150172_.getUUID().equals(this.ownerUUID);
-    }
-
-    @Override
-    protected void readAdditionalSaveData(CompoundTag p_37262_) {
-        if (p_37262_.hasUUID("Owner")) {
-            this.ownerUUID = p_37262_.getUUID("Owner");
-            this.cachedOwner = null;
-        }
-
-        this.leftOwner = p_37262_.getBoolean("LeftOwner");
-        this.hasBeenShot = p_37262_.getBoolean("HasBeenShot");
-    }
-
-    @Override
-    public void restoreFrom(Entity p_310133_) {
-        super.restoreFrom(p_310133_);
-        if (p_310133_ instanceof Projectile projectile) {
-            this.cachedOwner = projectile.cachedOwner;
-        }
-    }
-
-    @Override
-    public void tick() {
-        if (!this.hasBeenShot) {
-            this.gameEvent(GameEvent.PROJECTILE_SHOOT, this.getOwner());
-            this.hasBeenShot = true;
-        }
-
-        if (!this.leftOwner) {
-            this.leftOwner = this.checkLeftOwner();
-        }
-
-        super.tick();
-    }
-
-    private boolean checkLeftOwner() {
-        Entity entity = this.getOwner();
-        if (entity != null) {
-            for (Entity entity1 : this.level()
-                .getEntities(this, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0), p_37272_ -> !p_37272_.isSpectator() && p_37272_.isPickable())) {
-                if (entity1.getRootVehicle() == entity.getRootVehicle()) {
-                    return false;
-                }
-            }
-        }
-
-        return true;
-    }
-
-    public Vec3 getMovementToShoot(double p_335302_, double p_334829_, double p_334312_, float p_331363_, float p_330173_) {
-        return new Vec3(p_335302_, p_334829_, p_334312_)
-            .normalize()
-            .add(
-                this.random.triangle(0.0, 0.0172275 * (double)p_330173_),
-                this.random.triangle(0.0, 0.0172275 * (double)p_330173_),
-                this.random.triangle(0.0, 0.0172275 * (double)p_330173_)
-            )
-            .scale((double)p_331363_);
-    }
-
-    public void shoot(double p_37266_, double p_37267_, double p_37268_, float p_37269_, float p_37270_) {
-        Vec3 vec3 = this.getMovementToShoot(p_37266_, p_37267_, p_37268_, p_37269_, p_37270_);
-        this.setDeltaMovement(vec3);
-        double d0 = vec3.horizontalDistance();
-        this.setYRot((float)(Mth.atan2(vec3.x, vec3.z) * 180.0F / (float)Math.PI));
-        this.setXRot((float)(Mth.atan2(vec3.y, d0) * 180.0F / (float)Math.PI));
-        this.yRotO = this.getYRot();
-        this.xRotO = this.getXRot();
-    }
-
-    public void shootFromRotation(Entity p_37252_, float p_37253_, float p_37254_, float p_37255_, float p_37256_, float p_37257_) {
-        float f = -Mth.sin(p_37254_ * (float) (Math.PI / 180.0)) * Mth.cos(p_37253_ * (float) (Math.PI / 180.0));
-        float f1 = -Mth.sin((p_37253_ + p_37255_) * (float) (Math.PI / 180.0));
-        float f2 = Mth.cos(p_37254_ * (float) (Math.PI / 180.0)) * Mth.cos(p_37253_ * (float) (Math.PI / 180.0));
-        this.shoot((double)f, (double)f1, (double)f2, p_37256_, p_37257_);
-        Vec3 vec3 = p_37252_.getDeltaMovement();
-        this.setDeltaMovement(this.getDeltaMovement().add(vec3.x, p_37252_.onGround() ? 0.0 : vec3.y, vec3.z));
-    }
-
-    protected ProjectileDeflection hitTargetOrDeflectSelf(HitResult p_329816_) {
-        if (p_329816_.getType() == HitResult.Type.ENTITY) {
-            EntityHitResult entityhitresult = (EntityHitResult)p_329816_;
-            ProjectileDeflection projectiledeflection = entityhitresult.getEntity().deflection(this);
-            if (projectiledeflection != ProjectileDeflection.NONE) {
-                this.deflect(projectiledeflection, entityhitresult.getEntity(), this.getOwner(), false);
-                return projectiledeflection;
-            }
-        }
-
-        this.onHit(p_329816_);
-        return ProjectileDeflection.NONE;
-    }
-
-    public void deflect(ProjectileDeflection p_328550_, @Nullable Entity p_330074_, @Nullable Entity p_333528_, boolean p_328333_) {
-        if (!this.level().isClientSide) {
-            p_328550_.deflect(this, p_330074_, this.random);
-            this.setOwner(p_333528_);
-            this.onDeflection(p_330074_, p_328333_);
-        }
-    }
-
-    protected void onDeflection(@Nullable Entity p_327965_, boolean p_335911_) {
-    }
-
-    protected void onHit(HitResult p_37260_) {
-        HitResult.Type hitresult$type = p_37260_.getType();
-        if (hitresult$type == HitResult.Type.ENTITY) {
-            EntityHitResult entityhitresult = (EntityHitResult)p_37260_;
-            Entity entity = entityhitresult.getEntity();
-            if (entity.getType().is(EntityTypeTags.REDIRECTABLE_PROJECTILE) && entity instanceof Projectile projectile) {
-                projectile.deflect(ProjectileDeflection.AIM_DEFLECT, this.getOwner(), this.getOwner(), true);
-            }
-
-            this.onHitEntity(entityhitresult);
-            this.level().gameEvent(GameEvent.PROJECTILE_LAND, p_37260_.getLocation(), GameEvent.Context.of(this, null));
-        } else if (hitresult$type == HitResult.Type.BLOCK) {
-            BlockHitResult blockhitresult = (BlockHitResult)p_37260_;
-            this.onHitBlock(blockhitresult);
-            BlockPos blockpos = blockhitresult.getBlockPos();
-            this.level().gameEvent(GameEvent.PROJECTILE_LAND, blockpos, GameEvent.Context.of(this, this.level().getBlockState(blockpos)));
-        }
-    }
-
-    protected void onHitEntity(EntityHitResult p_37259_) {
-    }
-
-    protected void onHitBlock(BlockHitResult p_37258_) {
-        BlockState blockstate = this.level().getBlockState(p_37258_.getBlockPos());
-        blockstate.onProjectileHit(this.level(), blockstate, p_37258_, this);
-    }
-
-    @Override
-    public void lerpMotion(double p_37279_, double p_37280_, double p_37281_) {
-        this.setDeltaMovement(p_37279_, p_37280_, p_37281_);
-        if (this.xRotO == 0.0F && this.yRotO == 0.0F) {
-            double d0 = Math.sqrt(p_37279_ * p_37279_ + p_37281_ * p_37281_);
-            this.setXRot((float)(Mth.atan2(p_37280_, d0) * 180.0F / (float)Math.PI));
-            this.setYRot((float)(Mth.atan2(p_37279_, p_37281_) * 180.0F / (float)Math.PI));
-            this.xRotO = this.getXRot();
-            this.yRotO = this.getYRot();
-            this.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-        }
-    }
-
-    protected boolean canHitEntity(Entity p_37250_) {
-        if (!p_37250_.canBeHitByProjectile()) {
-            return false;
-        } else {
-            Entity entity = this.getOwner();
-            return entity == null || this.leftOwner || !entity.isPassengerOfSameVehicle(p_37250_);
-        }
-    }
-
-    protected void updateRotation() {
-        Vec3 vec3 = this.getDeltaMovement();
-        double d0 = vec3.horizontalDistance();
-        this.setXRot(lerpRotation(this.xRotO, (float)(Mth.atan2(vec3.y, d0) * 180.0F / (float)Math.PI)));
-        this.setYRot(lerpRotation(this.yRotO, (float)(Mth.atan2(vec3.x, vec3.z) * 180.0F / (float)Math.PI)));
-    }
-
-    protected static float lerpRotation(float p_37274_, float p_37275_) {
-        while (p_37275_ - p_37274_ < -180.0F) {
-            p_37274_ -= 360.0F;
-        }
-
-        while (p_37275_ - p_37274_ >= 180.0F) {
-            p_37274_ += 360.0F;
-        }
-
-        return Mth.lerp(0.2F, p_37274_, p_37275_);
-    }
-
-    @Override
-    public Packet<ClientGamePacketListener> getAddEntityPacket() {
-        Entity entity = this.getOwner();
-        return new ClientboundAddEntityPacket(this, entity == null ? 0 : entity.getId());
-    }
-
-    @Override
-    public void recreateFromPacket(ClientboundAddEntityPacket p_150170_) {
-        super.recreateFromPacket(p_150170_);
-        Entity entity = this.level().getEntity(p_150170_.getData());
-        if (entity != null) {
-            this.setOwner(entity);
-        }
-    }
-
-    @Override
-    public boolean mayInteract(Level p_150167_, BlockPos p_150168_) {
-        Entity entity = this.getOwner();
-        return entity instanceof Player ? entity.mayInteract(p_150167_, p_150168_) : entity == null || p_150167_.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING);
-    }
-
-    public boolean mayBreak(Level p_313184_) {
-        return this.getType().is(EntityTypeTags.IMPACT_PROJECTILES) && p_313184_.getGameRules().getBoolean(GameRules.RULE_PROJECTILESCANBREAKBLOCKS);
-    }
-
-    @Override
-    public boolean isPickable() {
-        return this.getType().is(EntityTypeTags.REDIRECTABLE_PROJECTILE);
-    }
-
-    @Override
-    public float getPickRadius() {
-        return this.isPickable() ? 1.0F : 0.0F;
-    }
+   @Nullable
+   private UUID ownerUUID;
+   @Nullable
+   private Entity cachedOwner;
+   private boolean leftOwner;
+   private boolean hasBeenShot;
+
+   // CraftBukkit start
+   private boolean hitCancelled = false;
+   // CraftBukkit end
+
+   protected Projectile(EntityType<? extends Projectile> p_37248_, Level p_37249_) {
+      super(p_37248_, p_37249_);
+   }
+
+   public void setOwner(@Nullable Entity p_37263_) {
+      if (p_37263_ != null) {
+         this.ownerUUID = p_37263_.getUUID();
+         this.cachedOwner = p_37263_;
+      }
+      this.projectileSource = (p_37263_ != null && p_37263_.getBukkitEntity() instanceof ProjectileSource) ? (ProjectileSource) p_37263_.getBukkitEntity() : null; // CraftBukkit
+
+   }
+
+   @Nullable
+   public Entity getOwner() {
+      if (this.cachedOwner != null && !this.cachedOwner.isRemoved()) {
+         return this.cachedOwner;
+      } else {
+         if (this.ownerUUID != null) {
+            Level level = this.level();
+            if (level instanceof ServerLevel) {
+               ServerLevel serverlevel = (ServerLevel)level;
+               this.cachedOwner = serverlevel.getEntity(this.ownerUUID);
+               return this.cachedOwner;
+            }
+         }
+
+         return null;
+      }
+   }
+
+   public Entity getEffectSource() {
+      return MoreObjects.firstNonNull(this.getOwner(), this);
+   }
+
+   protected void addAdditionalSaveData(CompoundTag p_37265_) {
+      if (this.ownerUUID != null) {
+         p_37265_.putUUID("Owner", this.ownerUUID);
+      }
+
+      if (this.leftOwner) {
+         p_37265_.putBoolean("LeftOwner", true);
+      }
+
+      p_37265_.putBoolean("HasBeenShot", this.hasBeenShot);
+   }
+
+   protected boolean ownedBy(Entity p_150172_) {
+      return p_150172_.getUUID().equals(this.ownerUUID);
+   }
+
+   protected void readAdditionalSaveData(CompoundTag p_37262_) {
+      if (p_37262_.hasUUID("Owner")) {
+         this.ownerUUID = p_37262_.getUUID("Owner");
+         this.cachedOwner = null;
+      }
+
+      this.leftOwner = p_37262_.getBoolean("LeftOwner");
+      this.hasBeenShot = p_37262_.getBoolean("HasBeenShot");
+   }
+
+   public void restoreFrom(Entity p_310133_) {
+      super.restoreFrom(p_310133_);
+      if (p_310133_ instanceof Projectile projectile) {
+         this.cachedOwner = projectile.cachedOwner;
+      }
+
+   }
+
+   public void tick() {
+      if (!this.hasBeenShot) {
+         this.gameEvent(GameEvent.PROJECTILE_SHOOT, this.getOwner());
+         this.hasBeenShot = true;
+      }
+
+      if (!this.leftOwner) {
+         this.leftOwner = this.checkLeftOwner();
+      }
+
+      super.tick();
+   }
+
+   private boolean checkLeftOwner() {
+      Entity entity = this.getOwner();
+      if (entity != null) {
+         for(Entity entity1 : this.level().getEntities(this, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), (p_37272_) -> {
+            return !p_37272_.isSpectator() && p_37272_.isPickable();
+         })) {
+            if (entity1.getRootVehicle() == entity.getRootVehicle()) {
+               return false;
+            }
+         }
+      }
+
+      return true;
+   }
+
+   public void shoot(double p_37266_, double p_37267_, double p_37268_, float p_37269_, float p_37270_) {
+      Vec3 vec3 = (new Vec3(p_37266_, p_37267_, p_37268_)).normalize().add(this.random.triangle(0.0D, 0.0172275D * (double)p_37270_), this.random.triangle(0.0D, 0.0172275D * (double)p_37270_), this.random.triangle(0.0D, 0.0172275D * (double)p_37270_)).scale((double)p_37269_);
+      this.setDeltaMovement(vec3);
+      double d0 = vec3.horizontalDistance();
+      this.setYRot((float)(Mth.atan2(vec3.x, vec3.z) * (double)(180F / (float)Math.PI)));
+      this.setXRot((float)(Mth.atan2(vec3.y, d0) * (double)(180F / (float)Math.PI)));
+      this.yRotO = this.getYRot();
+      this.xRotO = this.getXRot();
+   }
+
+   public void shootFromRotation(Entity p_37252_, float p_37253_, float p_37254_, float p_37255_, float p_37256_, float p_37257_) {
+      float f = -Mth.sin(p_37254_ * ((float)Math.PI / 180F)) * Mth.cos(p_37253_ * ((float)Math.PI / 180F));
+      float f1 = -Mth.sin((p_37253_ + p_37255_) * ((float)Math.PI / 180F));
+      float f2 = Mth.cos(p_37254_ * ((float)Math.PI / 180F)) * Mth.cos(p_37253_ * ((float)Math.PI / 180F));
+      this.shoot((double)f, (double)f1, (double)f2, p_37256_, p_37257_);
+      Vec3 vec3 = p_37252_.getDeltaMovement();
+      this.setDeltaMovement(this.getDeltaMovement().add(vec3.x, p_37252_.onGround() ? 0.0D : vec3.y, vec3.z));
+   }
+
+   // CraftBukkit start - call projectile hit event
+   protected void preOnHit(HitResult movingobjectposition) {
+      org.bukkit.event.entity.ProjectileHitEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, movingobjectposition);
+      this.hitCancelled = event != null && event.isCancelled();
+      if (movingobjectposition.getType() == HitResult.Type.BLOCK || !this.hitCancelled) {
+         this.onHit(movingobjectposition);
+      }
+   }
+   // CraftBukkit end
+
+   protected void onHit(HitResult p_37260_) {
+      HitResult.Type hitresult$type = p_37260_.getType();
+      if (hitresult$type == HitResult.Type.ENTITY) {
+         this.onHitEntity((EntityHitResult)p_37260_);
+         this.level().gameEvent(GameEvent.PROJECTILE_LAND, p_37260_.getLocation(), GameEvent.Context.of(this, (BlockState)null));
+      } else if (hitresult$type == HitResult.Type.BLOCK) {
+         BlockHitResult blockhitresult = (BlockHitResult)p_37260_;
+         this.onHitBlock(blockhitresult);
+         BlockPos blockpos = blockhitresult.getBlockPos();
+         this.level().gameEvent(GameEvent.PROJECTILE_LAND, blockpos, GameEvent.Context.of(this, this.level().getBlockState(blockpos)));
+      }
+
+   }
+
+   protected void onHitEntity(EntityHitResult p_37259_) {
+   }
+
+   protected void onHitBlock(BlockHitResult p_37258_) {
+      // CraftBukkit start - cancellable hit event
+      if (hitCancelled) {
+         return;
+      }
+      // CraftBukkit end
+      BlockState blockstate = this.level().getBlockState(p_37258_.getBlockPos());
+      blockstate.onProjectileHit(this.level(), blockstate, p_37258_, this);
+   }
+
+   public void lerpMotion(double p_37279_, double p_37280_, double p_37281_) {
+      this.setDeltaMovement(p_37279_, p_37280_, p_37281_);
+      if (this.xRotO == 0.0F && this.yRotO == 0.0F) {
+         double d0 = Math.sqrt(p_37279_ * p_37279_ + p_37281_ * p_37281_);
+         this.setXRot((float)(Mth.atan2(p_37280_, d0) * (double)(180F / (float)Math.PI)));
+         this.setYRot((float)(Mth.atan2(p_37279_, p_37281_) * (double)(180F / (float)Math.PI)));
+         this.xRotO = this.getXRot();
+         this.yRotO = this.getYRot();
+         this.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+      }
+
+   }
+
+   protected boolean canHitEntity(Entity p_37250_) {
+      if (!p_37250_.canBeHitByProjectile()) {
+         return false;
+      } else {
+         Entity entity = this.getOwner();
+         return entity == null || this.leftOwner || !entity.isPassengerOfSameVehicle(p_37250_);
+      }
+   }
+
+   protected void updateRotation() {
+      Vec3 vec3 = this.getDeltaMovement();
+      double d0 = vec3.horizontalDistance();
+      this.setXRot(lerpRotation(this.xRotO, (float)(Mth.atan2(vec3.y, d0) * (double)(180F / (float)Math.PI))));
+      this.setYRot(lerpRotation(this.yRotO, (float)(Mth.atan2(vec3.x, vec3.z) * (double)(180F / (float)Math.PI))));
+   }
+
+   protected static float lerpRotation(float p_37274_, float p_37275_) {
+      while(p_37275_ - p_37274_ < -180.0F) {
+         p_37274_ -= 360.0F;
+      }
+
+      while(p_37275_ - p_37274_ >= 180.0F) {
+         p_37274_ += 360.0F;
+      }
+
+      return Mth.lerp(0.2F, p_37274_, p_37275_);
+   }
+
+   public Packet<ClientGamePacketListener> getAddEntityPacket() {
+      Entity entity = this.getOwner();
+      return new ClientboundAddEntityPacket(this, entity == null ? 0 : entity.getId());
+   }
+
+   public void recreateFromPacket(ClientboundAddEntityPacket p_150170_) {
+      super.recreateFromPacket(p_150170_);
+      Entity entity = this.level().getEntity(p_150170_.getData());
+      if (entity != null) {
+         this.setOwner(entity);
+      }
+
+   }
+
+   public boolean mayInteract(Level p_150167_, BlockPos p_150168_) {
+      Entity entity = this.getOwner();
+      if (entity instanceof Player) {
+         return entity.mayInteract(p_150167_, p_150168_);
+      } else {
+         return entity == null || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(p_150167_, entity);
+      }
+   }
+
+   public boolean mayBreak(Level p_313184_) {
+      return this.getType().is(EntityTypeTags.IMPACT_PROJECTILES) && p_313184_.getGameRules().getBoolean(GameRules.RULE_PROJECTILESCANBREAKBLOCKS);
+   }
 }
