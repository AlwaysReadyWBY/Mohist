--- a/net/minecraft/world/entity/monster/Zombie.java
+++ b/net/minecraft/world/entity/monster/Zombie.java
@@ -12,6 +_,7 @@
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
@@ -59,54 +_,63 @@
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelAccessor;
+import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTransformEvent;
+import org.joml.Vector3f;
 
 public class Zombie extends Monster {
-    private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
-    private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.5, AttributeModifier.Operation.ADD_MULTIPLIED_BASE);
-    private static final EntityDataAccessor<Boolean> DATA_BABY_ID = SynchedEntityData.defineId(Zombie.class, EntityDataSerializers.BOOLEAN);
-    private static final EntityDataAccessor<Integer> DATA_SPECIAL_TYPE_ID = SynchedEntityData.defineId(Zombie.class, EntityDataSerializers.INT);
-    public static final EntityDataAccessor<Boolean> DATA_DROWNED_CONVERSION_ID = SynchedEntityData.defineId(Zombie.class, EntityDataSerializers.BOOLEAN);
-    public static final float ZOMBIE_LEADER_CHANCE = 0.05F;
-    public static final int REINFORCEMENT_ATTEMPTS = 50;
-    public static final int REINFORCEMENT_RANGE_MAX = 40;
-    public static final int REINFORCEMENT_RANGE_MIN = 7;
-    private static final EntityDimensions BABY_DIMENSIONS = EntityType.ZOMBIE.getDimensions().scale(0.5F).withEyeHeight(0.93F);
-    private static final float BREAK_DOOR_CHANCE = 0.1F;
-    private static final Predicate<Difficulty> DOOR_BREAKING_PREDICATE = p_34284_ -> p_34284_ == Difficulty.HARD;
-    private final BreakDoorGoal breakDoorGoal = new BreakDoorGoal(this, DOOR_BREAKING_PREDICATE);
-    private boolean canBreakDoors;
-    private int inWaterTime;
-    public int conversionTime;
-
-    public Zombie(EntityType<? extends Zombie> p_34271_, Level p_34272_) {
-        super(p_34271_, p_34272_);
-    }
-
-    public Zombie(Level p_34274_) {
-        this(EntityType.ZOMBIE, p_34274_);
-    }
-
-    @Override
-    protected void registerGoals() {
-        this.goalSelector.addGoal(4, new Zombie.ZombieAttackTurtleEggGoal(this, 1.0, 3));
-        this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
-        this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
-        this.addBehaviourGoals();
-    }
-
-    protected void addBehaviourGoals() {
-        this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0, false));
-        this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0, true, 4, this::canBreakDoors));
-        this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0));
-        this.targetSelector.addGoal(1, new HurtByTargetGoal(this).setAlertOthers(ZombifiedPiglin.class));
-        this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
-        this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
-        this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
-    }
+   private static final UUID SPEED_MODIFIER_BABY_UUID = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
+   private static final AttributeModifier SPEED_MODIFIER_BABY = new AttributeModifier(SPEED_MODIFIER_BABY_UUID, "Baby speed boost", 0.5D, AttributeModifier.Operation.MULTIPLY_BASE);
+   private static final EntityDataAccessor<Boolean> DATA_BABY_ID = SynchedEntityData.defineId(Zombie.class, EntityDataSerializers.BOOLEAN);
+   private static final EntityDataAccessor<Integer> DATA_SPECIAL_TYPE_ID = SynchedEntityData.defineId(Zombie.class, EntityDataSerializers.INT);
+   public static final EntityDataAccessor<Boolean> DATA_DROWNED_CONVERSION_ID = SynchedEntityData.defineId(Zombie.class, EntityDataSerializers.BOOLEAN);
+   public static final float ZOMBIE_LEADER_CHANCE = 0.05F;
+   public static final int REINFORCEMENT_ATTEMPTS = 50;
+   public static final int REINFORCEMENT_RANGE_MAX = 40;
+   public static final int REINFORCEMENT_RANGE_MIN = 7;
+   protected static final float BABY_EYE_HEIGHT_ADJUSTMENT = 0.81F;
+   private static final float BREAK_DOOR_CHANCE = 0.1F;
+   private static final Predicate<Difficulty> DOOR_BREAKING_PREDICATE = (p_34284_) -> {
+      return p_34284_ == Difficulty.HARD;
+   };
+   private final BreakDoorGoal breakDoorGoal = new BreakDoorGoal(this, DOOR_BREAKING_PREDICATE);
+   private boolean canBreakDoors;
+   private int inWaterTime;
+   public int conversionTime;
+   private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
+
+   public Zombie(EntityType<? extends Zombie> p_34271_, Level p_34272_) {
+      super(p_34271_, p_34272_);
+   }
+
+   public Zombie(Level p_34274_) {
+      this(EntityType.ZOMBIE, p_34274_);
+   }
+
+   protected void registerGoals() {
+      this.goalSelector.addGoal(4, new Zombie.ZombieAttackTurtleEggGoal(this, 1.0D, 3));
+      this.goalSelector.addGoal(8, new LookAtPlayerGoal(this, Player.class, 8.0F));
+      this.goalSelector.addGoal(8, new RandomLookAroundGoal(this));
+      this.addBehaviourGoals();
+   }
+
+   protected void addBehaviourGoals() {
+      this.goalSelector.addGoal(2, new ZombieAttackGoal(this, 1.0D, false));
+      this.goalSelector.addGoal(6, new MoveThroughVillageGoal(this, 1.0D, true, 4, this::canBreakDoors));
+      this.goalSelector.addGoal(7, new WaterAvoidingRandomStrollGoal(this, 1.0D));
+      this.targetSelector.addGoal(1, (new HurtByTargetGoal(this)).setAlertOthers(ZombifiedPiglin.class));
+      this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, true));
+      if ( level.spigotConfig.zombieAggressiveTowardsVillager ) this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, AbstractVillager.class, false));
+      this.targetSelector.addGoal(3, new NearestAttackableTargetGoal<>(this, IronGolem.class, true));
+      this.targetSelector.addGoal(5, new NearestAttackableTargetGoal<>(this, Turtle.class, 10, true, false, Turtle.BABY_ON_LAND_SELECTOR));
+   }
 
     public static AttributeSupplier.Builder createAttributes() {
         return Monster.createMonsterAttributes()
@@ -197,7 +_,10 @@
     public void tick() {
         if (!this.level().isClientSide && this.isAlive() && !this.isNoAi()) {
             if (this.isUnderWaterConverting()) {
-                this.conversionTime--;
+            // CraftBukkit start - Use wall time instead of ticks for conversion
+            int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+            this.conversionTime -= elapsedTicks;
+            // CraftBukkit end
                 if (this.conversionTime < 0) {
                     this.doUnderWaterConversion();
                 }
@@ -214,7 +_,8 @@
         }
 
         super.tick();
-    }
+      	this.lastTick = MinecraftServer.currentTick; // CraftBukkit
+   }
 
     @Override
     public void aiStep() {
@@ -243,23 +_,30 @@
         super.aiStep();
     }
 
-    private void startUnderWaterConversion(int p_34279_) {
+   public void startUnderWaterConversion(int p_34279_) {
+      this.lastTick = MinecraftServer.currentTick; // CraftBukkit
         this.conversionTime = p_34279_;
         this.getEntityData().set(DATA_DROWNED_CONVERSION_ID, true);
     }
 
     protected void doUnderWaterConversion() {
+        if (!net.minecraftforge.event.ForgeEventFactory.canLivingConvert(this, EntityType.DROWNED, (timer) -> this.conversionTime = timer)) return;
         this.convertToZombieType(EntityType.DROWNED);
         if (!this.isSilent()) {
             this.level().levelEvent(null, 1040, this.blockPosition(), 0);
         }
     }
 
-    protected void convertToZombieType(EntityType<? extends Zombie> p_34311_) {
-        Zombie zombie = this.convertTo(p_34311_, true);
-        if (zombie != null) {
-            zombie.handleAttributes(zombie.level().getCurrentDifficultyAt(zombie.blockPosition()).getSpecialMultiplier());
-            zombie.setCanBreakDoors(zombie.supportsBreakDoorGoal() && this.canBreakDoors());
+   protected void convertToZombieType(EntityType<? extends Zombie> p_34311_) {
+      Zombie zombie = this.convertTo(p_34311_, true, EntityTransformEvent.TransformReason.DROWNED, CreatureSpawnEvent.SpawnReason.DROWNED);
+      if (zombie != null) {
+         zombie.handleAttributes(zombie.level().getCurrentDifficultyAt(zombie.blockPosition()).getSpecialMultiplier());
+         zombie.setCanBreakDoors(zombie.supportsBreakDoorGoal() && this.canBreakDoors());
+         net.minecraftforge.event.ForgeEventFactory.onLivingConvert(this, zombie);
+         // CraftBukkit start - SPIGOT-5208: End conversion to stop event spam
+      } else {
+         ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1);
+         // CraftBukkit end
         }
     }
 
@@ -280,15 +_,25 @@
                 livingentity = (LivingEntity)p_34288_.getEntity();
             }
 
-            if (livingentity != null
+            var vanilla = (livingentity != null
                 && this.level().getDifficulty() == Difficulty.HARD
                 && (double)this.random.nextFloat() < this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE)
-                && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
+                && this.level().getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING));
+
                 int i = Mth.floor(this.getX());
                 int j = Mth.floor(this.getY());
                 int k = Mth.floor(this.getZ());
-                Zombie zombie = new Zombie(this.level());
-
+
+            var event = net.minecraftforge.event.ForgeEventFactory.fireZombieSummonAid(this, level(), i, j, k, livingentity, this.getAttributeValue(Attributes.SPAWN_REINFORCEMENTS_CHANCE));
+
+            Zombie zombie = null;
+            if (event.getResult() == net.minecraftforge.eventbus.api.Event.Result.ALLOW) {
+                zombie = event.getCustomSummonedAid() != null ? event.getCustomSummonedAid() : EntityType.ZOMBIE.create(this.level());
+            } else if (event.getResult() == net.minecraftforge.eventbus.api.Event.Result.DEFAULT && vanilla) {
+                zombie = EntityType.ZOMBIE.create(this.level());
+            }
+
+            if (zombie != null) {
                 for (int l = 0; l < 50; l++) {
                     int i1 = i + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
                     int j1 = j + Mth.nextInt(this.random, 7, 40) * Mth.nextInt(this.random, -1, 1);
@@ -302,6 +_,7 @@
                             && this.level().isUnobstructed(zombie)
                             && this.level().noCollision(zombie)
                             && !this.level().containsAnyLiquid(zombie.getBoundingBox())) {
+                            if (livingentity != null)
                             zombie.setTarget(livingentity);
                             zombie.finalizeSpawn(serverlevel, this.level().getCurrentDifficultyAt(zombie.blockPosition()), MobSpawnType.REINFORCEMENT, null);
                             serverlevel.addFreshEntityWithPassengers(zombie);
@@ -325,12 +_,19 @@
         if (flag) {
             float f = this.level().getCurrentDifficultyAt(this.blockPosition()).getEffectiveDifficulty();
             if (this.getMainHandItem().isEmpty() && this.isOnFire() && this.random.nextFloat() < f * 0.3F) {
-                p_34276_.igniteForSeconds(2 * (int)f);
+            // CraftBukkit start
+            EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), p_34276_.getBukkitEntity(), 2 * (int) f); // PAIL: fixme
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+               p_34276_.setSecondsOnFire(event.getDuration(), false);
             }
-        }
+            // CraftBukkit end
+         }
+      }
 
-        return flag;
-    }
+      return flag;
+   }
 
     @Override
     protected SoundEvent getAmbientSound() {
@@ -396,31 +_,48 @@
             if (p_219160_.getDifficulty() != Difficulty.HARD && this.random.nextBoolean()) {
                 return flag;
             }
-
-            ZombieVillager zombievillager = villager.convertTo(EntityType.ZOMBIE_VILLAGER, false);
-            if (zombievillager != null) {
-                zombievillager.finalizeSpawn(
-                    p_219160_, p_219160_.getCurrentDifficultyAt(zombievillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true)
-                );
-                zombievillager.setVillagerData(villager.getVillagerData());
-                zombievillager.setGossips(villager.getGossips().store(NbtOps.INSTANCE));
-                zombievillager.setTradeOffers(villager.getOffers().copy());
-                zombievillager.setVillagerXp(villager.getVillagerXp());
-                if (!this.isSilent()) {
-                    p_219160_.levelEvent(null, 1026, this.blockPosition(), 0);
-                }
-
-                flag = false;
+         if (!net.minecraftforge.event.ForgeEventFactory.canLivingConvert(p_219161_, EntityType.ZOMBIE_VILLAGER, (timer) -> {}))
+            return flag;
+
+         villager.transformReasonAndspawnReason(EntityTransformEvent.TransformReason.INFECTION, CreatureSpawnEvent.SpawnReason.INFECTION); // Mohist
+         ZombieVillager zombievillager = villager.convertTo(EntityType.ZOMBIE_VILLAGER, false);
+         if (zombievillager != null) {
+            zombievillager.finalizeSpawn(p_219160_, p_219160_.getCurrentDifficultyAt(zombievillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag)null);
+            zombievillager.setVillagerData(villager.getVillagerData());
+            zombievillager.setGossips(villager.getGossips().store(NbtOps.INSTANCE));
+            zombievillager.setTradeOffers(villager.getOffers().createTag());
+            zombievillager.setVillagerXp(villager.getVillagerXp());
+            net.minecraftforge.event.ForgeEventFactory.onLivingConvert(p_219161_, zombievillager);
+            if (!this.isSilent()) {
+               p_219160_.levelEvent((Player)null, 1026, this.blockPosition(), 0);
             }
-        }
-
-        return flag;
-    }
-
-    @Override
-    public EntityDimensions getDefaultDimensions(Pose p_328975_) {
-        return this.isBaby() ? BABY_DIMENSIONS : super.getDefaultDimensions(p_328975_);
-    }
+
+            flag = false;
+         }
+      }
+
+      return flag;
+   }
+
+   public static ZombieVillager zombifyVillager(ServerLevel worldserver, Villager entityvillager, BlockPos blockPosition, boolean silent, SpawnReason spawnReason) {
+      ZombieVillager zombievillager = entityvillager.convertTo(EntityType.ZOMBIE_VILLAGER, false, EntityTransformEvent.TransformReason.INFECTION, spawnReason);
+      if (zombievillager != null) {
+         zombievillager.finalizeSpawn(worldserver, worldserver.getCurrentDifficultyAt(zombievillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag) null);
+         zombievillager.setVillagerData(entityvillager.getVillagerData());
+         zombievillager.setGossips(entityvillager.getGossips().store(NbtOps.INSTANCE));
+         zombievillager.setTradeOffers(entityvillager.getOffers().createTag());
+         zombievillager.setVillagerXp(entityvillager.getVillagerXp());
+         // CraftBukkit start
+         if (!silent) {
+            worldserver.levelEvent(null, 1026, blockPosition, 0);
+         }
+      }
+      return zombievillager;
+   }
+
+   protected float getStandingEyeHeight(Pose p_34313_, EntityDimensions p_34314_) {
+      return this.isBaby() ? 0.93F : 1.74F;
+   }
 
     @Override
     public boolean canHoldItem(ItemStack p_34332_) {
@@ -461,6 +_,7 @@
                             chicken1.finalizeSpawn(p_34297_, p_34298_, MobSpawnType.JOCKEY, null);
                             chicken1.setChickenJockey(true);
                             this.startRiding(chicken1);
+                     		chicken1.spawnReason(CreatureSpawnEvent.SpawnReason.MOUNT);
                             p_34297_.addFreshEntity(chicken1);
                         }
                     }
