--- a/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -2,10 +_,18 @@
 
 import com.google.common.collect.ImmutableList;
 import com.mojang.serialization.Dynamic;
+import java.util.HashSet;
 import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Registry;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.ListTag;
+import net.minecraft.nbt.StringTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
 import net.minecraft.network.syncher.EntityDataSerializers;
 import net.minecraft.network.syncher.SynchedEntityData;
@@ -25,6 +_,7 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.EquipmentSlot;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MobSpawnType;
 import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.SpawnGroupData;
@@ -42,6 +_,9 @@
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.npc.InventoryCarrier;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.projectile.Projectile;
+import net.minecraft.world.flag.FeatureFlags;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.ProjectileWeaponItem;
@@ -68,8 +_,8 @@
     private static final float PROBABILITY_OF_SPAWNING_AS_BABY = 0.2F;
     private static final EntityDimensions BABY_DIMENSIONS = EntityType.PIGLIN.getDimensions().scale(0.5F).withEyeHeight(0.97F);
     private static final double PROBABILITY_OF_SPAWNING_WITH_CROSSBOW_INSTEAD_OF_SWORD = 0.5;
-    public final SimpleContainer inventory = new SimpleContainer(8);
-    public boolean cannotHunt;
+   	public final SimpleContainer inventory = new SimpleContainer(8);
+   	public boolean cannotHunt;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Piglin>>> SENSOR_TYPES = ImmutableList.of(
         SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.HURT_BY, SensorType.PIGLIN_SPECIFIC_SENSOR
     );
@@ -114,6 +_,10 @@
         MemoryModuleType.ATE_RECENTLY,
         MemoryModuleType.NEAREST_REPELLENT
     );
+   // CraftBukkit start - Custom bartering and interest list
+   public Set<Item> allowedBarterItems = new HashSet<>();
+   public Set<Item> interestItems = new HashSet<>();
+   // CraftBukkit end
 
     public Piglin(EntityType<? extends AbstractPiglin> p_34683_, Level p_34684_) {
         super(p_34683_, p_34684_);
@@ -132,7 +_,15 @@
         }
 
         this.writeInventoryToTag(p_34751_, this.registryAccess());
-    }
+      // CraftBukkit start
+      ListTag barterList = new ListTag();
+      allowedBarterItems.stream().map(BuiltInRegistries.ITEM::getKey).map( ResourceLocation::toString).map( StringTag::valueOf).forEach(barterList::add);
+      p_34751_.put("Bukkit.BarterList", barterList);
+      ListTag interestList = new ListTag();
+      interestItems.stream().map(BuiltInRegistries.ITEM::getKey).map(ResourceLocation::toString).map(StringTag::valueOf).forEach(interestList::add);
+      p_34751_.put("Bukkit.InterestList", interestList);
+      // CraftBukkit end
+   }
 
     @Override
     public void readAdditionalSaveData(CompoundTag p_34725_) {
@@ -140,7 +_,11 @@
         this.setBaby(p_34725_.getBoolean("IsBaby"));
         this.setCannotHunt(p_34725_.getBoolean("CannotHunt"));
         this.readInventoryFromTag(p_34725_, this.registryAccess());
-    }
+      // CraftBukkit start
+      this.allowedBarterItems = p_34725_.getList("Bukkit.BarterList", 8).stream().map(net.minecraft.nbt.Tag::getAsString).map(ResourceLocation::tryParse).map(BuiltInRegistries.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+      this.interestItems = p_34725_.getList("Bukkit.InterestList", 8).stream().map(net.minecraft.nbt.Tag::getAsString).map(ResourceLocation::tryParse).map(BuiltInRegistries.ITEM::get).collect(Collectors.toCollection(HashSet::new));
+      // CraftBukkit end
+   }
 
     @VisibleForDebug
     @Override
@@ -345,7 +_,7 @@
         } else if (this.isChargingCrossbow()) {
             return PiglinArmPose.CROSSBOW_CHARGE;
         } else {
-            return this.isAggressive() && this.isHolding(Items.CROSSBOW) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT;
+            return this.isAggressive() && this.isHolding(is -> is.getItem() instanceof net.minecraft.world.item.CrossbowItem) ? PiglinArmPose.CROSSBOW_HOLD : PiglinArmPose.DEFAULT;
         }
     }
 
@@ -386,7 +_,7 @@
     }
 
     protected void holdInOffHand(ItemStack p_34786_) {
-        if (p_34786_.is(PiglinAi.BARTERING_ITEM)) {
+      if (p_34786_.isPiglinCurrency() || allowedBarterItems.contains(p_34786_.getItem())) { // CraftBukkit - Changes to accept custom payment items
             this.setItemSlot(EquipmentSlot.OFFHAND, p_34786_);
             this.setGuaranteedDrop(EquipmentSlot.OFFHAND);
         } else {
@@ -396,7 +_,7 @@
 
     @Override
     public boolean wantsToPickUp(ItemStack p_34777_) {
-        return this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, p_34777_);
+        return net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(this.level(), this) && this.canPickUpLoot() && PiglinAi.wantsToPickup(this, p_34777_);
     }
 
     protected boolean canReplaceCurrentItem(ItemStack p_34788_) {
@@ -410,8 +_,8 @@
         if (EnchantmentHelper.has(p_34713_, EnchantmentEffectComponents.PREVENT_ARMOR_CHANGE)) {
             return false;
         } else {
-            boolean flag = PiglinAi.isLovedItem(p_34712_) || p_34712_.is(Items.CROSSBOW);
-            boolean flag1 = PiglinAi.isLovedItem(p_34713_) || p_34713_.is(Items.CROSSBOW);
+         boolean flag = PiglinAi.isLovedItem(p_34712_, this) || p_34712_.is(Items.CROSSBOW); // CraftBukkit
+         boolean flag1 = PiglinAi.isLovedItem(p_34713_, this) || p_34713_.is(Items.CROSSBOW); // CraftBukkit
             if (flag && !flag1) {
                 return true;
             } else if (!flag && flag1) {
