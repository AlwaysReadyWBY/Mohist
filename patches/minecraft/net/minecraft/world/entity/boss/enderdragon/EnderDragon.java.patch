--- a/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -21,6 +_,7 @@
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.entity.Entity;
+import net.minecraft.world.entity.EntityDimensions;
 import net.minecraft.world.entity.EntitySelector;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ExperienceOrb;
@@ -36,9 +_,12 @@
 import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhaseManager;
 import net.minecraft.world.entity.monster.Enemy;
 import net.minecraft.world.entity.player.Player;
-import net.minecraft.world.item.enchantment.EnchantmentHelper;
+import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.dimension.end.EndDragonFight;
 import net.minecraft.world.level.gameevent.GameEvent;
@@ -47,64 +_,79 @@
 import net.minecraft.world.level.pathfinder.BinaryHeap;
 import net.minecraft.world.level.pathfinder.Node;
 import net.minecraft.world.level.pathfinder.Path;
+import net.minecraft.world.level.storage.loot.LootParams;
+import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.entity.EntityExplodeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.joml.Vector3f;
 import org.slf4j.Logger;
 
 public class EnderDragon extends Mob implements Enemy {
-    private static final Logger LOGGER = LogUtils.getLogger();
-    public static final EntityDataAccessor<Integer> DATA_PHASE = SynchedEntityData.defineId(EnderDragon.class, EntityDataSerializers.INT);
-    private static final TargetingConditions CRYSTAL_DESTROY_TARGETING = TargetingConditions.forCombat().range(64.0);
-    private static final int GROWL_INTERVAL_MIN = 200;
-    private static final int GROWL_INTERVAL_MAX = 400;
-    private static final float SITTING_ALLOWED_DAMAGE_PERCENTAGE = 0.25F;
-    private static final String DRAGON_DEATH_TIME_KEY = "DragonDeathTime";
-    private static final String DRAGON_PHASE_KEY = "DragonPhase";
-    public final double[][] positions = new double[64][3];
-    public int posPointer = -1;
-    public final EnderDragonPart[] subEntities;
-    public final EnderDragonPart head;
-    private final EnderDragonPart neck;
-    private final EnderDragonPart body;
-    private final EnderDragonPart tail1;
-    private final EnderDragonPart tail2;
-    private final EnderDragonPart tail3;
-    private final EnderDragonPart wing1;
-    private final EnderDragonPart wing2;
-    public float oFlapTime;
-    public float flapTime;
-    public boolean inWall;
-    public int dragonDeathTime;
-    public float yRotA;
-    @Nullable
-    public EndCrystal nearestCrystal;
-    @Nullable
-    private EndDragonFight dragonFight;
-    private BlockPos fightOrigin = BlockPos.ZERO;
-    private final EnderDragonPhaseManager phaseManager;
-    private int growlTime = 100;
-    private float sittingDamageReceived;
-    private final Node[] nodes = new Node[24];
-    private final int[] nodeAdjacency = new int[24];
-    private final BinaryHeap openSet = new BinaryHeap();
-
-    public EnderDragon(EntityType<? extends EnderDragon> p_31096_, Level p_31097_) {
-        super(EntityType.ENDER_DRAGON, p_31097_);
-        this.head = new EnderDragonPart(this, "head", 1.0F, 1.0F);
-        this.neck = new EnderDragonPart(this, "neck", 3.0F, 3.0F);
-        this.body = new EnderDragonPart(this, "body", 5.0F, 3.0F);
-        this.tail1 = new EnderDragonPart(this, "tail", 2.0F, 2.0F);
-        this.tail2 = new EnderDragonPart(this, "tail", 2.0F, 2.0F);
-        this.tail3 = new EnderDragonPart(this, "tail", 2.0F, 2.0F);
-        this.wing1 = new EnderDragonPart(this, "wing", 4.0F, 2.0F);
-        this.wing2 = new EnderDragonPart(this, "wing", 4.0F, 2.0F);
-        this.subEntities = new EnderDragonPart[]{
-            this.head, this.neck, this.body, this.tail1, this.tail2, this.tail3, this.wing1, this.wing2
-        };
-        this.setHealth(this.getMaxHealth());
-        this.noPhysics = true;
-        this.noCulling = true;
-        this.phaseManager = new EnderDragonPhaseManager(this);
+   private static final Logger LOGGER = LogUtils.getLogger();
+   public static final EntityDataAccessor<Integer> DATA_PHASE = SynchedEntityData.defineId(EnderDragon.class, EntityDataSerializers.INT);
+   private static final TargetingConditions CRYSTAL_DESTROY_TARGETING = TargetingConditions.forCombat().range(64.0D);
+   private static final int GROWL_INTERVAL_MIN = 200;
+   private static final int GROWL_INTERVAL_MAX = 400;
+   private static final float SITTING_ALLOWED_DAMAGE_PERCENTAGE = 0.25F;
+   private static final String DRAGON_DEATH_TIME_KEY = "DragonDeathTime";
+   private static final String DRAGON_PHASE_KEY = "DragonPhase";
+   public final double[][] positions = new double[64][3];
+   public int posPointer = -1;
+   public final EnderDragonPart[] subEntities;
+   public final EnderDragonPart head;
+   private final EnderDragonPart neck;
+   private final EnderDragonPart body;
+   private final EnderDragonPart tail1;
+   private final EnderDragonPart tail2;
+   private final EnderDragonPart tail3;
+   private final EnderDragonPart wing1;
+   private final EnderDragonPart wing2;
+   public float oFlapTime;
+   public float flapTime;
+   public boolean inWall;
+   public int dragonDeathTime;
+   public float yRotA;
+   @Nullable
+   public EndCrystal nearestCrystal;
+   @Nullable
+   private EndDragonFight dragonFight;
+   private BlockPos fightOrigin = BlockPos.ZERO;
+   private final EnderDragonPhaseManager phaseManager;
+   private int growlTime = 100;
+   private float sittingDamageReceived;
+   private final Node[] nodes = new Node[24];
+   private final int[] nodeAdjacency = new int[24];
+   private final BinaryHeap openSet = new BinaryHeap();
+   private final Explosion explosionSource; // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
+
+   public EnderDragon(EntityType<? extends EnderDragon> p_31096_, Level p_31097_) {
+      super(EntityType.ENDER_DRAGON, p_31097_);
+      this.head = new EnderDragonPart(this, "head", 1.0F, 1.0F);
+      this.neck = new EnderDragonPart(this, "neck", 3.0F, 3.0F);
+      this.body = new EnderDragonPart(this, "body", 5.0F, 3.0F);
+      this.tail1 = new EnderDragonPart(this, "tail", 2.0F, 2.0F);
+      this.tail2 = new EnderDragonPart(this, "tail", 2.0F, 2.0F);
+      this.tail3 = new EnderDragonPart(this, "tail", 2.0F, 2.0F);
+      this.wing1 = new EnderDragonPart(this, "wing", 4.0F, 2.0F);
+      this.wing2 = new EnderDragonPart(this, "wing", 4.0F, 2.0F);
+      this.subEntities = new EnderDragonPart[]{this.head, this.neck, this.body, this.tail1, this.tail2, this.tail3, this.wing1, this.wing2};
+      this.setHealth(this.getMaxHealth());
+      this.noPhysics = true;
+      this.noCulling = true;
+      this.phaseManager = new EnderDragonPhaseManager(this);
+      this.setId(ENTITY_COUNTER.getAndAdd(this.subEntities.length + 1) + 1); // Forge: Fix MC-158205: Make sure part ids are successors of parent mob id
+      this.explosionSource = new Explosion(p_31097_, this, null, null, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, Explosion.BlockInteraction.DESTROY, ParticleTypes.EXPLOSION, ParticleTypes.EXPLOSION_EMITTER, SoundEvents.GENERIC_EXPLODE); // CraftBukkit
+   }
+
+    @Override
+    public void setId(int p_20235_) {
+        super.setId(p_20235_);
+        for (int i = 0; i < this.subEntities.length; i++) { // Forge: Fix MC-158205: Set part ids to successors of parent mob id
+            this.subEntities[i].setId(p_20235_ + i + 1);
+        }
     }
 
     public void setDragonFight(EndDragonFight p_287736_) {
@@ -172,8 +_,19 @@
         return adouble;
     }
 
+    @org.jetbrains.annotations.Nullable private Player unlimitedLastHurtByPlayer = null;
+
     @Override
     public void aiStep() {
+        // lastHurtByPlayer is cleared after 100 ticks, capture it indefinitely in unlimitedLastHurtByPlayer for LivingExperienceDropEvent
+        if (this.lastHurtByPlayer != null) {
+            this.unlimitedLastHurtByPlayer = lastHurtByPlayer;
+        }
+
+        if (this.unlimitedLastHurtByPlayer != null && this.unlimitedLastHurtByPlayer.isRemoved()) {
+            this.unlimitedLastHurtByPlayer = null;
+        }
+
         this.processFlappingMovement();
         if (this.level().isClientSide) {
             this.setHealth(this.getHealth());
@@ -402,9 +_,16 @@
             if (this.nearestCrystal.isRemoved()) {
                 this.nearestCrystal = null;
             } else if (this.tickCount % 10 == 0 && this.getHealth() < this.getMaxHealth()) {
-                this.setHealth(this.getHealth() + 1.0F);
+            // CraftBukkit start
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), 1.0F, EntityRegainHealthEvent.RegainReason.ENDER_CRYSTAL);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+               this.setHealth((float) (this.getHealth() + event.getAmount()));
             }
-        }
+            // CraftBukkit end
+         }
+      }
 
         if (this.random.nextInt(10) == 0) {
             List<EndCrystal> list = this.level().getEntitiesOfClass(EndCrystal.class, this.getBoundingBox().inflate(32.0));
@@ -468,32 +_,82 @@
         int j1 = Mth.floor(p_31140_.maxZ);
         boolean flag = false;
         boolean flag1 = false;
-
-        for (int k1 = i; k1 <= l; k1++) {
-            for (int l1 = j; l1 <= i1; l1++) {
-                for (int i2 = k; i2 <= j1; i2++) {
-                    BlockPos blockpos = new BlockPos(k1, l1, i2);
-                    BlockState blockstate = this.level().getBlockState(blockpos);
-                    if (!blockstate.isAir() && !blockstate.is(BlockTags.DRAGON_TRANSPARENT)) {
-                        if (this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && !blockstate.is(BlockTags.DRAGON_IMMUNE)) {
-                            flag1 = this.level().removeBlock(blockpos, false) || flag1;
-                        } else {
-                            flag = true;
-                        }
-                    }
-                }
-            }
-        }
-
-        if (flag1) {
-            BlockPos blockpos1 = new BlockPos(
-                i + this.random.nextInt(l - i + 1), j + this.random.nextInt(i1 - j + 1), k + this.random.nextInt(j1 - k + 1)
-            );
-            this.level().levelEvent(2008, blockpos1, 0);
-        }
-
-        return flag;
-    }
+      // CraftBukkit start - Create a list to hold all the destroyed blocks
+      List<org.bukkit.block.Block> destroyedBlocks = new java.util.ArrayList<org.bukkit.block.Block>();
+      // CraftBukkit end
+
+      for(int k1 = i; k1 <= l; ++k1) {
+         for(int l1 = j; l1 <= i1; ++l1) {
+            for(int i2 = k; i2 <= j1; ++i2) {
+               BlockPos blockpos = new BlockPos(k1, l1, i2);
+               BlockState blockstate = this.level().getBlockState(blockpos);
+               if (!blockstate.isAir() && !blockstate.is(BlockTags.DRAGON_TRANSPARENT)) {
+                  if (net.minecraftforge.common.ForgeHooks.canEntityDestroy(this.level(), blockpos, this) && !blockstate.is(BlockTags.DRAGON_IMMUNE)) {
+                     // CraftBukkit start - Add blocks to list rather than destroying them
+                     // flag1 = this.level.removeBlock(blockposition, false) || flag1;
+                     flag1 = true;
+                     destroyedBlocks.add(CraftBlock.at(level, blockpos));
+                     // CraftBukkit end
+                  } else {
+                     flag = true;
+                  }
+               }
+            }
+         }
+      }
+
+      // CraftBukkit start - Set off an EntityExplodeEvent for the dragon exploding all these blocks
+      // SPIGOT-4882: don't fire event if nothing hit
+      if (!flag1) {
+         return flag;
+      }
+
+      org.bukkit.entity.Entity bukkitEntity = this.getBukkitEntity();
+      EntityExplodeEvent event = new EntityExplodeEvent(bukkitEntity, bukkitEntity.getLocation(), destroyedBlocks, 0F);
+      bukkitEntity.getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         // This flag literally means 'Dragon hit something hard' (Obsidian, White Stone or Bedrock) and will cause the dragon to slow down.
+         // We should consider adding an event extension for it, or perhaps returning true if the event is cancelled.
+         return flag;
+      } else if (event.getYield() == 0F) {
+         // Yield zero ==> no drops
+         for (org.bukkit.block.Block block : event.blockList()) {
+            this.level.removeBlock(new BlockPos(block.getX(), block.getY(), block.getZ()), false);
+         }
+      } else {
+         for (org.bukkit.block.Block block : event.blockList()) {
+            org.bukkit.Material blockId = block.getType();
+            if (blockId.isAir()) {
+               continue;
+            }
+
+            CraftBlock craftBlock = ((CraftBlock) block);
+            BlockPos blockposition = craftBlock.getPosition();
+
+            Block nmsBlock = craftBlock.getNMS().getBlock();
+            if (nmsBlock.dropFromExplosion(explosionSource)) {
+               BlockEntity tileentity = craftBlock.getNMS().hasBlockEntity() ? this.level().getBlockEntity(blockposition) : null;
+               LootParams.Builder loottableinfo_builder = (new LootParams.Builder((ServerLevel) this.level)).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / event.getYield()).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity);
+
+               craftBlock.getNMS().getDrops(loottableinfo_builder).forEach((itemstack) -> {
+                  Block.popResource(this.level(), blockposition, itemstack);
+               });
+               craftBlock.getNMS().spawnAfterBreak((ServerLevel) level, blockposition, ItemStack.EMPTY, false);
+            }
+            nmsBlock.wasExploded(this.level(), blockposition, explosionSource);
+
+            this.level.removeBlock(blockposition, false);
+         }
+      }
+      // CraftBukkit end
+
+      if (flag1) {
+         BlockPos blockpos1 = new BlockPos(i + this.random.nextInt(l - i + 1), j + this.random.nextInt(i1 - j + 1), k + this.random.nextInt(j1 - k + 1));
+         this.level().levelEvent(2008, blockpos1, 0);
+      }
+
+      return flag;
+   }
 
     public boolean hurt(EnderDragonPart p_31121_, DamageSource p_31122_, float p_31123_) {
         if (this.phaseManager.getCurrentPhase().getPhase() == EnderDragonPhase.DYING) {
@@ -570,29 +_,49 @@
         }
 
         if (this.level() instanceof ServerLevel) {
-            if (this.dragonDeathTime > 150 && this.dragonDeathTime % 5 == 0 && flag) {
-                ExperienceOrb.award((ServerLevel)this.level(), this.position(), Mth.floor((float)i * 0.08F));
-            }
-
-            if (this.dragonDeathTime == 1 && !this.isSilent()) {
-                this.level().globalLevelEvent(1028, this.blockPosition(), 0);
-            }
-        }
-
-        this.move(MoverType.SELF, new Vec3(0.0, 0.1F, 0.0));
-        if (this.dragonDeathTime == 200 && this.level() instanceof ServerLevel) {
-            if (flag) {
-                ExperienceOrb.award((ServerLevel)this.level(), this.position(), Mth.floor((float)i * 0.2F));
-            }
-
-            if (this.dragonFight != null) {
-                this.dragonFight.setDragonKilled(this);
-            }
-
-            this.remove(Entity.RemovalReason.KILLED);
-            this.gameEvent(GameEvent.ENTITY_DIE);
-        }
-    }
+         if (this.dragonDeathTime > 150 && this.dragonDeathTime % 5 == 0 && true) {  // CraftBukkit - SPIGOT-2420: Already checked for the game rule when calculating the xp
+            int award = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.unlimitedLastHurtByPlayer, Mth.floor((float)i * 0.08F));
+            ExperienceOrb.award((ServerLevel)this.level(), this.position(), award);
+         }
+
+         if (this.dragonDeathTime == 1 && !this.isSilent()) {
+            // CraftBukkit start - Use relative location for far away sounds
+            // this.level.globalLevelEvent(1028, this.blockPosition(), 0);
+            int viewDistance = this.level.getCraftServer().getViewDistance() * 16;
+            for (net.minecraft.server.level.ServerPlayer player : this.level.getServer().getPlayerList().players) {
+               double deltaX = this.getX() - player.getX();
+               double deltaZ = this.getZ() - player.getZ();
+               double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+               if ( level.spigotConfig.dragonDeathSoundRadius > 0 && distanceSquared > level.spigotConfig.dragonDeathSoundRadius * level.spigotConfig.dragonDeathSoundRadius ) continue; // Spigot
+               if (distanceSquared > viewDistance * viewDistance) {
+                  double deltaLength = Math.sqrt(distanceSquared);
+                  double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
+                  double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
+                  player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1028, new BlockPos((int) relativeX, (int) this.getY(), (int) relativeZ), 0, true));
+               } else {
+                  player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1028, new BlockPos((int) this.getX(), (int) this.getY(), (int) this.getZ()), 0, true));
+               }
+            }
+            // CraftBukkit end
+         }
+      }
+
+      this.move(MoverType.SELF, new Vec3(0.0D, (double)0.1F, 0.0D));
+      if (this.dragonDeathTime == 200 && this.level() instanceof ServerLevel) {
+         if (true) { // CraftBukkit - SPIGOT-2420: Already checked for the game rule when calculating the xp
+            int award = net.minecraftforge.event.ForgeEventFactory.getExperienceDrop(this, this.unlimitedLastHurtByPlayer, Mth.floor((float)i * 0.2F));
+            ExperienceOrb.award((ServerLevel)this.level(), this.position(), award);
+         }
+
+         if (this.dragonFight != null) {
+            this.dragonFight.setDragonKilled(this);
+         }
+
+         this.remove(Entity.RemovalReason.KILLED);
+         this.gameEvent(GameEvent.ENTITY_DIE);
+      }
+
+   }
 
     public int findClosestNode() {
         if (this.nodes[0] == null) {
@@ -916,6 +_,7 @@
     @Override
     public void recreateFromPacket(ClientboundAddEntityPacket p_218825_) {
         super.recreateFromPacket(p_218825_);
+        if (true) return; // Forge: Fix MC-158205: Moved into setId()
         EnderDragonPart[] aenderdragonpart = this.getSubEntities();
 
         for (int i = 0; i < aenderdragonpart.length; i++) {
@@ -931,5 +_,15 @@
     @Override
     protected float sanitizeScale(float p_333905_) {
         return 1.0F;
+    }
+
+    @Override
+    public boolean isMultipartEntity() {
+       return true;
+    }
+
+    @Override
+    public net.minecraftforge.entity.PartEntity<?>[] getParts() {
+       return this.subEntities;
     }
 }
