--- a/net/minecraft/world/damagesource/DamageSource.java
+++ b/net/minecraft/world/damagesource/DamageSource.java
@@ -2,7 +_,6 @@
 
 import javax.annotation.Nullable;
 import net.minecraft.core.Holder;
-import net.minecraft.core.component.DataComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.tags.TagKey;
@@ -13,122 +_,223 @@
 import net.minecraft.world.phys.Vec3;
 
 public class DamageSource {
-    private final Holder<DamageType> type;
-    @Nullable
-    private final Entity causingEntity;
-    @Nullable
-    private final Entity directEntity;
-    @Nullable
-    private final Vec3 damageSourcePosition;
-
-    @Override
-    public String toString() {
-        return "DamageSource (" + this.type().msgId() + ")";
-    }
-
-    public float getFoodExhaustion() {
-        return this.type().exhaustion();
-    }
-
-    public boolean isIndirect() {
-        return this.causingEntity != this.directEntity;
-    }
-
-    public DamageSource(Holder<DamageType> p_270906_, @Nullable Entity p_270796_, @Nullable Entity p_270459_, @Nullable Vec3 p_270623_) {
-        this.type = p_270906_;
-        this.causingEntity = p_270459_;
-        this.directEntity = p_270796_;
-        this.damageSourcePosition = p_270623_;
-    }
-
-    public DamageSource(Holder<DamageType> p_270818_, @Nullable Entity p_270162_, @Nullable Entity p_270115_) {
-        this(p_270818_, p_270162_, p_270115_, null);
-    }
-
-    public DamageSource(Holder<DamageType> p_270690_, Vec3 p_270579_) {
-        this(p_270690_, null, null, p_270579_);
-    }
-
-    public DamageSource(Holder<DamageType> p_270811_, @Nullable Entity p_270660_) {
-        this(p_270811_, p_270660_, p_270660_);
-    }
-
-    public DamageSource(Holder<DamageType> p_270475_) {
-        this(p_270475_, null, null, null);
-    }
-
-    @Nullable
-    public Entity getDirectEntity() {
-        return this.directEntity;
-    }
-
-    @Nullable
-    public Entity getEntity() {
-        return this.causingEntity;
-    }
-
-    public Component getLocalizedDeathMessage(LivingEntity p_19343_) {
-        String s = "death.attack." + this.type().msgId();
-        if (this.causingEntity == null && this.directEntity == null) {
-            LivingEntity livingentity1 = p_19343_.getKillCredit();
-            String s1 = s + ".player";
-            return livingentity1 != null ? Component.translatable(s1, p_19343_.getDisplayName(), livingentity1.getDisplayName()) : Component.translatable(s, p_19343_.getDisplayName());
-        } else {
-            Component component = this.causingEntity == null ? this.directEntity.getDisplayName() : this.causingEntity.getDisplayName();
-            ItemStack itemstack = this.causingEntity instanceof LivingEntity livingentity ? livingentity.getMainHandItem() : ItemStack.EMPTY;
-            return !itemstack.isEmpty() && itemstack.has(DataComponents.CUSTOM_NAME)
-                ? Component.translatable(s + ".item", p_19343_.getDisplayName(), component, itemstack.getDisplayName())
-                : Component.translatable(s, p_19343_.getDisplayName(), component);
-        }
-    }
-
-    public String getMsgId() {
-        return this.type().msgId();
-    }
-
-    public boolean scalesWithDifficulty() {
-        return switch (this.type().scaling()) {
-            case NEVER -> false;
-            case WHEN_CAUSED_BY_LIVING_NON_PLAYER -> this.causingEntity instanceof LivingEntity && !(this.causingEntity instanceof Player);
-            case ALWAYS -> true;
-        };
-    }
-
-    public boolean isCreativePlayer() {
-        if (this.getEntity() instanceof Player player && player.getAbilities().instabuild) {
+   private final Holder<DamageType> type;
+   @Nullable
+   private final Entity causingEntity;
+   @Nullable
+   private final Entity directEntity;
+   @Nullable
+   private final Vec3 damageSourcePosition;
+
+   // CraftBukkit start
+   @Nullable
+   private org.bukkit.block.Block directBlock; // The block that caused the damage. damageSourcePosition is not used for all block damages
+   private boolean withSweep = false;
+   private boolean melting = false;
+   private boolean poison = false;
+   private Entity customCausingEntity = null; // This field is a helper for when causing entity damage is not set by vanilla
+
+   public DamageSource sweep() {
+      this.withSweep  = true;
+      return this;
+   }
+
+   public boolean isSweep() {
+      return this.withSweep;
+   }
+
+   public DamageSource melting() {
+      this.melting = true;
+      return this;
+   }
+
+   public boolean isMelting() {
+      return this.melting;
+   }
+
+   public DamageSource poison() {
+      this.poison = true;
+      return this;
+   }
+
+   public boolean isPoison() {
+      return this.poison;
+   }
+
+   public Entity getCausingEntity() {
+      return (this.customCausingEntity != null) ? this.customCausingEntity : this.causingEntity;
+   }
+
+   public DamageSource customCausingEntity(Entity entity) {
+      // This method is not intended for change the causing entity if is already set
+      // also is only necessary if the entity passed is not the direct entity or different from the current causingEntity
+      if (this.customCausingEntity != null || this.directEntity == entity || this.causingEntity == entity) {
+         return this;
+      }
+      DamageSource damageSource = this.cloneInstance();
+      damageSource.customCausingEntity = entity;
+      return damageSource;
+   }
+
+   public org.bukkit.block.Block getDirectBlock() {
+      return this.directBlock;
+   }
+
+   public DamageSource directBlock(net.minecraft.world.level.Level world, net.minecraft.core.BlockPos blockPosition) {
+      if (blockPosition == null || world == null) {
+         return this;
+      }
+      return directBlock(org.bukkit.craftbukkit.block.CraftBlock.at(world, blockPosition));
+   }
+
+   public DamageSource directBlock(org.bukkit.block.Block block) {
+      if (block == null) {
+         return this;
+      }
+      // Cloning the instance lets us return unique instances of DamageSource without affecting constants defined in DamageSources
+      DamageSource damageSource = this.cloneInstance();
+      damageSource.directBlock = block;
+      return damageSource;
+   }
+
+   private DamageSource cloneInstance() {
+      DamageSource damageSource = new DamageSource(this.type, this.directEntity, this.causingEntity, this.damageSourcePosition);
+      damageSource.directBlock = this.getDirectBlock();
+      damageSource.withSweep = this.isSweep();
+      damageSource.poison = this.isPoison();
+      damageSource.melting = this.isMelting();
+      return damageSource;
+   }
+   // CraftBukkit end
+   
+   public String toString() {
+      return "DamageSource (" + this.type().msgId() + ")";
+   }
+
+   public float getFoodExhaustion() {
+      return this.type().exhaustion();
+   }
+
+   public boolean isIndirect() {
+      return this.causingEntity != this.directEntity;
+   }
+
+   public DamageSource(Holder<DamageType> p_270906_, @Nullable Entity p_270796_, @Nullable Entity p_270459_, @Nullable Vec3 p_270623_) {
+      this.type = p_270906_;
+      this.causingEntity = p_270459_;
+      this.directEntity = p_270796_;
+      this.damageSourcePosition = p_270623_;
+   }
+
+   public DamageSource(Holder<DamageType> p_270818_, @Nullable Entity p_270162_, @Nullable Entity p_270115_) {
+      this(p_270818_, p_270162_, p_270115_, (Vec3)null);
+   }
+
+   public DamageSource(Holder<DamageType> p_270690_, Vec3 p_270579_) {
+      this(p_270690_, (Entity)null, (Entity)null, p_270579_);
+   }
+
+   public DamageSource(Holder<DamageType> p_270811_, @Nullable Entity p_270660_) {
+      this(p_270811_, p_270660_, p_270660_);
+   }
+
+   public DamageSource(Holder<DamageType> p_270475_) {
+      this(p_270475_, (Entity)null, (Entity)null, (Vec3)null);
+   }
+
+   @Nullable
+   public Entity getDirectEntity() {
+      return this.directEntity;
+   }
+
+   @Nullable
+   public Entity getEntity() {
+      return this.causingEntity;
+   }
+
+   public Component getLocalizedDeathMessage(LivingEntity p_19343_) {
+      String s = "death.attack." + this.type().msgId();
+      if (this.causingEntity == null && this.directEntity == null) {
+         LivingEntity livingentity1 = p_19343_.getKillCredit();
+         String s1 = s + ".player";
+         return livingentity1 != null ? Component.translatable(s1, p_19343_.getDisplayName(), livingentity1.getDisplayName()) : Component.translatable(s, p_19343_.getDisplayName());
+      } else {
+         Component component = this.causingEntity == null ? this.directEntity.getDisplayName() : this.causingEntity.getDisplayName();
+         Entity entity = this.causingEntity;
+         ItemStack itemstack1;
+         if (entity instanceof LivingEntity) {
+            LivingEntity livingentity = (LivingEntity)entity;
+            itemstack1 = livingentity.getMainHandItem();
+         } else {
+            itemstack1 = ItemStack.EMPTY;
+         }
+
+         ItemStack itemstack = itemstack1;
+         return !itemstack.isEmpty() && itemstack.hasCustomHoverName() ? Component.translatable(s + ".item", p_19343_.getDisplayName(), component, itemstack.getDisplayName()) : Component.translatable(s, p_19343_.getDisplayName(), component);
+      }
+   }
+
+   public String getMsgId() {
+      return this.type().msgId();
+   }
+
+   public boolean scalesWithDifficulty() {
+      boolean flag;
+      switch (this.type().scaling()) {
+         case NEVER:
+            flag = false;
+            break;
+         case WHEN_CAUSED_BY_LIVING_NON_PLAYER:
+            flag = this.causingEntity instanceof LivingEntity && !(this.causingEntity instanceof Player);
+            break;
+         case ALWAYS:
+            flag = true;
+            break;
+         default:
+            throw new IncompatibleClassChangeError();
+      }
+
+      return flag;
+   }
+
+   public boolean isCreativePlayer() {
+      Entity entity = this.getEntity();
+      if (entity instanceof Player player) {
+         if (player.getAbilities().instabuild) {
             return true;
-        }
-
-        return false;
-    }
-
-    @Nullable
-    public Vec3 getSourcePosition() {
-        if (this.damageSourcePosition != null) {
-            return this.damageSourcePosition;
-        } else {
-            return this.directEntity != null ? this.directEntity.position() : null;
-        }
-    }
-
-    @Nullable
-    public Vec3 sourcePositionRaw() {
-        return this.damageSourcePosition;
-    }
-
-    public boolean is(TagKey<DamageType> p_270890_) {
-        return this.type.is(p_270890_);
-    }
-
-    public boolean is(ResourceKey<DamageType> p_276108_) {
-        return this.type.is(p_276108_);
-    }
-
-    public DamageType type() {
-        return this.type.value();
-    }
-
-    public Holder<DamageType> typeHolder() {
-        return this.type;
-    }
+         }
+      }
+
+      return false;
+   }
+
+   @Nullable
+   public Vec3 getSourcePosition() {
+      if (this.damageSourcePosition != null) {
+         return this.damageSourcePosition;
+      } else {
+         return this.directEntity != null ? this.directEntity.position() : null;
+      }
+   }
+
+   @Nullable
+   public Vec3 sourcePositionRaw() {
+      return this.damageSourcePosition;
+   }
+
+   public boolean is(TagKey<DamageType> p_270890_) {
+      return this.type.is(p_270890_);
+   }
+
+   public boolean is(ResourceKey<DamageType> p_276108_) {
+      return this.type.is(p_276108_);
+   }
+
+   public DamageType type() {
+      return this.type.value();
+   }
+
+   public Holder<DamageType> typeHolder() {
+      return this.type;
+   }
 }
