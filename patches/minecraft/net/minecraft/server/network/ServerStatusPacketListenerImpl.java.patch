--- a/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerStatusPacketListenerImpl.java
@@ -1,5 +_,8 @@
 package net.minecraft.server.network;
 
+import com.mohistmc.mohist.api.event.MohistServerListPingEvent;
+import com.mojang.authlib.GameProfile;
+import net.minecraft.SharedConstants;
 import net.minecraft.network.Connection;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.ping.ClientboundPongResponsePacket;
@@ -8,16 +_,29 @@
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.network.protocol.status.ServerStatusPacketListener;
 import net.minecraft.network.protocol.status.ServerboundStatusRequestPacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+
+import java.util.Collections;
+import java.util.Optional;
 
 public class ServerStatusPacketListenerImpl implements ServerStatusPacketListener {
     private static final Component DISCONNECT_REASON = Component.translatable("multiplayer.status.request_handled");
     private final ServerStatus status;
+    private final @org.jetbrains.annotations.Nullable String statusCache; // FORGE: cache status JSON
     private final Connection connection;
     private boolean hasRequestedStatus;
 
     public ServerStatusPacketListenerImpl(ServerStatus p_272864_, Connection p_273586_) {
+        this(p_272864_, p_273586_, null);
+    }
+
+    public ServerStatusPacketListenerImpl(ServerStatus p_272864_, Connection p_273586_, @org.jetbrains.annotations.Nullable String statusCache) {
         this.status = p_272864_;
         this.connection = p_273586_;
+        this.statusCache = statusCache;
     }
 
     @Override
@@ -35,9 +_,45 @@
             this.connection.disconnect(DISCONNECT_REASON);
         } else {
             this.hasRequestedStatus = true;
-            this.connection.send(new ClientboundStatusResponsePacket(this.status));
+            MohistServerListPingEvent event = new MohistServerListPingEvent(connection, MinecraftServer.getServer());
+            Bukkit.getPluginManager().callEvent(event);
+
+            MinecraftServer server = MinecraftServer.getServer();
+            final Object[] players = event.getPlayers();
+
+            java.util.List<GameProfile> profiles = new java.util.ArrayList<GameProfile>(players.length);
+            for (Object player : players) {
+                if (player != null) {
+                    ServerPlayer entityPlayer = ((ServerPlayer) player);
+                    if (entityPlayer.allowsListing()) {
+                        profiles.add(entityPlayer.getGameProfile());
+                    } else {
+                        profiles.add(MinecraftServer.ANONYMOUS_PLAYER_PROFILE);
+                    }
+                }
+            }
+
+            // Spigot Start
+            if (!server.hidesOnlinePlayers() && !profiles.isEmpty()) {
+                java.util.Collections.shuffle(profiles); // This sucks, its inefficient but we have no simple way of doing it differently
+                profiles = profiles.subList(0, Math.min(profiles.size(), org.spigotmc.SpigotConfig.playerSample)); // Cap the sample to n (or less) displayed players, ie: Vanilla behaviour
+            }
+            // Spigot End
+
+            ServerStatus.Players playerSample = new ServerStatus.Players(event.getMaxPlayers(), event.getNumPlayers(), (server.hidesOnlinePlayers()) ? Collections.emptyList() : profiles);
+
+            ServerStatus ping = new ServerStatus(
+                    CraftChatMessage.fromString(event.getMotd(), true)[0],
+                    Optional.of(playerSample),
+                    Optional.of(new ServerStatus.Version(server.getServerModName() + " " + server.getServerVersion(), SharedConstants.getCurrentVersion().getProtocolVersion())),
+                    (event.icon.value != null) ? Optional.of(new ServerStatus.Favicon(event.icon.value)) : Optional.empty(),
+                    server.enforceSecureProfile(),
+                    this.status.forgeData()
+            );
+            this.connection.send(new ClientboundStatusResponsePacket(ping, this.statusCache));
+            // CraftBukkit end
         }
-    }
+   }
 
     @Override
     public void handlePingRequest(ServerboundPingRequestPacket p_333596_) {
