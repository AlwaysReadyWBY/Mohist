--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2,16 +_,20 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.primitives.Floats;
+import com.mohistmc.mohist.bukkit.inventory.MohistModsInventory;
+import com.mohistmc.mohist.plugins.ban.bans.BanItem;
 import com.mojang.authlib.GameProfile;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
+import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import java.net.SocketAddress;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.EnumSet;
 import java.util.HashMap;
@@ -22,6 +_,7 @@
 import java.util.Set;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
@@ -48,6 +_,7 @@
 import net.minecraft.network.chat.LastSeenMessagesValidator;
 import net.minecraft.network.chat.MessageSignature;
 import net.minecraft.network.chat.MessageSignatureCache;
+import net.minecraft.network.chat.OutgoingChatMessage;
 import net.minecraft.network.chat.PlayerChatMessage;
 import net.minecraft.network.chat.RemoteChatSession;
 import net.minecraft.network.chat.SignableCommand;
@@ -58,6 +_,7 @@
 import net.minecraft.network.protocol.common.ServerboundClientInformationPacket;
 import net.minecraft.network.protocol.common.ServerboundCustomPayloadPacket;
 import net.minecraft.network.protocol.configuration.ConfigurationProtocols;
+import net.minecraft.network.protocol.game.ClientboundAddEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundCommandSuggestionsPacket;
@@ -68,6 +_,8 @@
 import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket;
 import net.minecraft.network.protocol.game.ClientboundSetCarriedItemPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEntityLinkPacket;
+import net.minecraft.network.protocol.game.ClientboundSetEquipmentPacket;
 import net.minecraft.network.protocol.game.ClientboundStartConfigurationPacket;
 import net.minecraft.network.protocol.game.ClientboundSystemChatPacket;
 import net.minecraft.network.protocol.game.ClientboundTagQueryPacket;
@@ -138,9 +_,12 @@
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.HasCustomInventoryScreen;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.MoverType;
 import net.minecraft.world.entity.PlayerRideableJumping;
 import net.minecraft.world.entity.RelativeMovement;
+import net.minecraft.world.entity.animal.Bucketable;
+import net.minecraft.world.entity.animal.allay.Allay;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.ChatVisiblity;
 import net.minecraft.world.entity.player.Inventory;
@@ -148,11 +_,13 @@
 import net.minecraft.world.entity.player.ProfilePublicKey;
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.Boat;
+import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.AnvilMenu;
 import net.minecraft.world.inventory.BeaconMenu;
 import net.minecraft.world.inventory.CrafterMenu;
 import net.minecraft.world.inventory.MerchantMenu;
 import net.minecraft.world.inventory.RecipeBookMenu;
+import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.BucketItem;
 import net.minecraft.world.item.Item;
@@ -163,6 +_,7 @@
 import net.minecraft.world.item.component.WrittenBookContent;
 import net.minecraft.world.item.crafting.RecipeHolder;
 import net.minecraft.world.level.BaseCommandBlock;
+import net.minecraft.world.level.ClipContext;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
@@ -179,10 +_,52 @@
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
+import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftItemType;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.inventory.ClickType;
+import org.bukkit.event.inventory.CraftItemEvent;
+import org.bukkit.event.inventory.InventoryAction;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.event.inventory.InventoryCreativeEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.event.inventory.SmithItemEvent;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerAnimationEvent;
+import org.bukkit.event.player.PlayerAnimationType;
+import org.bukkit.event.player.PlayerChatEvent;
+import org.bukkit.event.player.PlayerCommandPreprocessEvent;
+import org.bukkit.event.player.PlayerInteractAtEntityEvent;
+import org.bukkit.event.player.PlayerInteractEntityEvent;
+import org.bukkit.event.player.PlayerItemHeldEvent;
+import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.event.player.PlayerRespawnEvent;
+import org.bukkit.event.player.PlayerSwapHandItemsEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerToggleFlightEvent;
+import org.bukkit.event.player.PlayerToggleSneakEvent;
+import org.bukkit.event.player.PlayerToggleSprintEvent;
+import org.bukkit.inventory.CraftingInventory;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.InventoryView;
+import org.bukkit.inventory.SmithingInventory;
 import org.slf4j.Logger;
 
 public class ServerGamePacketListenerImpl
@@ -236,16 +_,35 @@
     private boolean waitingForSwitchToConfig;
 
     public ServerGamePacketListenerImpl(MinecraftServer p_9770_, Connection p_9771_, ServerPlayer p_9772_, CommonListenerCookie p_300908_) {
-        super(p_9770_, p_9771_, p_300908_);
+        super(p_9770_, p_9771_, p_300908_, p_9772_); // CraftBukkit
         this.chunkSender = new PlayerChunkSender(p_9771_.isMemoryConnection());
         this.player = p_9772_;
         p_9772_.connection = this;
         p_9772_.getTextFilter().join();
         this.signedMessageDecoder = SignedMessageChain.Decoder.unsigned(p_9772_.getUUID(), p_9770_::enforceSecureProfile);
-        this.chatMessageChain = new FutureChain(p_9770_);
-    }
-
-    @Override
+        this.chatMessageChain = new FutureChain(p_9770_.chatExecutor); // CraftBukkit - async chat
+    }
+
+    // CraftBukkit start - add fields
+    private int lastTick = MinecraftServer.currentTick;
+    private int allowedPlayerTicks = 1;
+    private int lastDropTick = MinecraftServer.currentTick;
+    private int lastBookTick = MinecraftServer.currentTick;
+    private int dropCount = 0;
+
+    private boolean hasMoved = false;
+    private double lastPosX = Double.MAX_VALUE;
+    private double lastPosY = Double.MAX_VALUE;
+    private double lastPosZ = Double.MAX_VALUE;
+    private float lastPitch = Float.MAX_VALUE;
+    private float lastYaw = Float.MAX_VALUE;
+    private boolean justTeleported = false;
+    // CraftBukkit end
+
+    public CraftPlayer getCraftPlayer() {
+        return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
+    }
+
     public void tick() {
         if (this.ackBlockChangesUpTo > -1) {
             this.send(new ClientboundBlockChangedAckPacket(this.ackBlockChangesUpTo));
@@ -305,8 +_,9 @@
         }
 
         if (this.player.getLastActionTime() > 0L
-            && this.server.getPlayerIdleTimeout() > 0
-            && Util.getMillis() - this.player.getLastActionTime() > (long)this.server.getPlayerIdleTimeout() * 1000L * 60L) {
+                && this.server.getPlayerIdleTimeout() > 0
+                && Util.getMillis() - this.player.getLastActionTime() > (long) this.server.getPlayerIdleTimeout() * 1000L * 60L) {
+            this.player.resetLastActionTime(); // CraftBukkit - SPIGOT-854
             this.disconnect(Component.translatable("multiplayer.disconnect.idling"));
         }
     }
@@ -338,8 +_,8 @@
     @Override
     public boolean shouldHandleMessage(Packet<?> p_298646_) {
         return super.shouldHandleMessage(p_298646_)
-            ? true
-            : this.waitingForSwitchToConfig && this.connection.isConnected() && p_298646_ instanceof ServerboundConfigurationAcknowledgedPacket;
+                ? true
+                : this.waitingForSwitchToConfig && this.connection.isConnected() && p_298646_ instanceof ServerboundConfigurationAcknowledgedPacket;
     }
 
     @Override
@@ -353,7 +_,7 @@
                 LOGGER.debug("Ignoring packet due to disconnection");
                 throw new CancellationException("disconnected");
             } else {
-                return (R)p_264862_;
+                return (R) p_264862_;
             }
         });
     }
@@ -393,6 +_,13 @@
             Entity entity = this.player.getRootVehicle();
             if (entity != this.player && entity.getControllingPassenger() == this.player && entity == this.lastVehicle) {
                 ServerLevel serverlevel = this.player.serverLevel();
+                // CraftBukkit - store current player position
+                double prevX = player.getX();
+                double prevY = player.getY();
+                double prevZ = player.getZ();
+                float prevYaw = player.getYRot();
+                float prevPitch = player.getXRot();
+                // CraftBukkit end
                 double d0 = entity.getX();
                 double d1 = entity.getY();
                 double d2 = entity.getZ();
@@ -406,7 +_,33 @@
                 double d8 = d5 - this.vehicleFirstGoodZ;
                 double d9 = entity.getDeltaMovement().lengthSqr();
                 double d10 = d6 * d6 + d7 * d7 + d8 * d8;
-                if (d10 - d9 > 100.0 && !this.isSingleplayerOwner()) {
+
+                // CraftBukkit start - handle custom speeds and skipped ticks
+                this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
+                this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
+                this.lastTick = (int) (System.currentTimeMillis() / 50);
+
+                ++this.receivedMovePacketCount;
+                int i = this.receivedMovePacketCount - this.knownMovePacketCount;
+                if (i > Math.max(this.allowedPlayerTicks, 5)) {
+                    LOGGER.debug(this.player.getScoreboardName() + " is sending move packets too frequently (" + i + " packets since last tick)");
+                    i = 1;
+                }
+
+                if (d10 > 0) {
+                    allowedPlayerTicks -= 1;
+                } else {
+                    allowedPlayerTicks = 20;
+                }
+                double speed;
+                if (player.getAbilities().flying) {
+                    speed = player.getAbilities().flyingSpeed * 20f;
+                } else {
+                    speed = player.getAbilities().walkingSpeed * 10f;
+                }
+                speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
+                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
+                    // CraftBukkit end
                     LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName().getString(), this.player.getName().getString(), d6, d7, d8);
                     this.send(new ClientboundMoveVehiclePacket(entity));
                     return;
@@ -431,26 +_,92 @@
                 d8 = d5 - entity.getZ();
                 d10 = d6 * d6 + d7 * d7 + d8 * d8;
                 boolean flag2 = false;
-                if (d10 > 0.0625) {
+                if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) { // Spigot
                     flag2 = true;
                     LOGGER.warn("{} (vehicle of {}) moved wrongly! {}", entity.getName().getString(), this.player.getName().getString(), Math.sqrt(d10));
                 }
+                Location curPos = this.getCraftPlayer().getLocation(); // Spigot
 
                 entity.absMoveTo(d3, d4, d5, f, f1);
+                this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot()); // Forge - Resync player position on vehicle moving
                 boolean flag3 = serverlevel.noCollision(entity, entity.getBoundingBox().deflate(0.0625));
                 if (flag && (flag2 || !flag3)) {
                     entity.absMoveTo(d0, d1, d2, f, f1);
+                    this.player.absMoveTo(d3, d4, d5, this.player.getYRot(), this.player.getXRot()); // Forge - Resync player position on vehicle moving
                     this.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
+
+                // CraftBukkit start - fire PlayerMoveEvent
+                org.bukkit.entity.Player player = this.getCraftPlayer();
+                if (!hasMoved) {
+                    this.lastPosX = curPos.getX();
+                    this.lastPosY = curPos.getY();
+                    this.lastPosZ = curPos.getZ();
+                    this.lastYaw = curPos.getYaw();
+                    this.lastPitch = curPos.getPitch();
+                    this.hasMoved = true;
+                }
+                // Spigot End
+                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
+                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+
+                // If the packet contains movement information then we update the To location with the correct XYZ.
+                to.setX(p_9876_.getX());
+                to.setY(p_9876_.getY());
+                to.setZ(p_9876_.getZ());
+
+                // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                to.setYaw(p_9876_.getYRot());
+                to.setPitch(p_9876_.getXRot());
+
+                // Prevent 40 event-calls for less than a single pixel of movement >.>
+                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isImmobile()) {
+                    this.lastPosX = to.getX();
+                    this.lastPosY = to.getY();
+                    this.lastPosZ = to.getZ();
+                    this.lastYaw = to.getYaw();
+                    this.lastPitch = to.getPitch();
+
+                    // Skip the first time we do this
+                    Location oldTo = to.clone();
+                    PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                    this.cserver.getPluginManager().callEvent(event);
+
+                    // If the event is cancelled we move the player back to their old location.
+                    if (event.isCancelled()) {
+                        teleport(from);
+                        return;
+                    }
+
+                    // If a Plugin has changed the To destination then we teleport the Player
+                    // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                    // We only do this if the Event was not cancelled.
+                    if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                        this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                        return;
+                    }
+
+                    // Check to see if the Players Location has some how changed during the call of the event.
+                    // This can happen due to a plugin teleporting the player instead of using .setTo()
+                    if (!from.equals(this.getCraftPlayer().getLocation()) && this.justTeleported) {
+                        this.justTeleported = false;
+                        return;
+                    }
+                }
+                // CraftBukkit end
 
                 this.player.serverLevel().getChunkSource().move(this.player);
                 this.player.checkMovementStatistics(this.player.getX() - d0, this.player.getY() - d1, this.player.getZ() - d2);
-                this.clientVehicleIsFloating = d7 >= -0.03125 && !flag1 && !this.server.isFlightAllowed() && !entity.isNoGravity() && this.noBlocksAround(entity);
+                this.clientVehicleIsFloating = d7 >= -0.03125D && !flag1 && !this.server.isFlightAllowed() && !entity.isNoGravity() && this.noBlocksAround(entity);
                 this.vehicleLastGoodX = entity.getX();
                 this.vehicleLastGoodY = entity.getY();
                 this.vehicleLastGoodZ = entity.getZ();
             }
+
         }
     }
 
@@ -476,6 +_,7 @@
             }
 
             this.awaitingPositionFromClient = null;
+            this.player.serverLevel().getChunkSource().move(this.player); // CraftBukkit
         }
     }
 
@@ -488,6 +_,7 @@
     @Override
     public void handleRecipeBookChangeSettingsPacket(ServerboundRecipeBookChangeSettingsPacket p_9895_) {
         PacketUtils.ensureRunningOnSameThread(p_9895_, this, this.player.serverLevel());
+        CraftEventFactory.callRecipeBookSettingsEvent(this.player, p_9895_.getBookType(), p_9895_.isOpen(), p_9895_.isFiltering()); // CraftBukkit
         this.player.getRecipeBook().setBookSetting(p_9895_.getBookType(), p_9895_.isOpen(), p_9895_.isFiltering());
     }
 
@@ -539,7 +_,7 @@
             BlockPos blockpos = p_9911_.getPos();
             BlockEntity blockentity = this.player.level().getBlockEntity(blockpos);
             if (blockentity instanceof CommandBlockEntity) {
-                commandblockentity = (CommandBlockEntity)blockentity;
+                commandblockentity = (CommandBlockEntity) blockentity;
                 basecommandblock = commandblockentity.getCommandBlock();
             }
 
@@ -556,7 +_,7 @@
                     default -> Blocks.COMMAND_BLOCK.defaultBlockState();
                 };
                 BlockState blockstate2 = blockstate1.setValue(CommandBlock.FACING, direction)
-                    .setValue(CommandBlock.CONDITIONAL, Boolean.valueOf(p_9911_.isConditional()));
+                        .setValue(CommandBlock.CONDITIONAL, Boolean.valueOf(p_9911_.isConditional()));
                 if (blockstate2 != blockstate) {
                     this.player.level().setBlock(blockpos, blockstate2, 2);
                     blockentity.setBlockState(blockstate2);
@@ -609,15 +_,15 @@
         PacketUtils.ensureRunningOnSameThread(p_9880_, this, this.player.serverLevel());
         this.player.getInventory().pickSlot(p_9880_.getSlot());
         this.player
-            .connection
-            .send(
-                new ClientboundContainerSetSlotPacket(
-                    -2, 0, this.player.getInventory().selected, this.player.getInventory().getItem(this.player.getInventory().selected)
-                )
-            );
+                .connection
+                .send(
+                        new ClientboundContainerSetSlotPacket(
+                                -2, 0, this.player.getInventory().selected, this.player.getInventory().getItem(this.player.getInventory().selected)
+                        )
+                );
         this.player
-            .connection
-            .send(new ClientboundContainerSetSlotPacket(-2, 0, p_9880_.getSlot(), this.player.getInventory().getItem(p_9880_.getSlot())));
+                .connection
+                .send(new ClientboundContainerSetSlotPacket(-2, 0, p_9880_.getSlot(), this.player.getInventory().getItem(p_9880_.getSlot())));
         this.player.connection.send(new ClientboundSetCarriedItemPacket(this.player.getInventory().selected));
     }
 
@@ -734,7 +_,15 @@
     public void handleSelectTrade(ServerboundSelectTradePacket p_9905_) {
         PacketUtils.ensureRunningOnSameThread(p_9905_, this, this.player.serverLevel());
         int i = p_9905_.getItem();
-        if (this.player.containerMenu instanceof MerchantMenu merchantmenu) {
+        AbstractContainerMenu abstractcontainermenu = this.player.containerMenu;
+        if (abstractcontainermenu instanceof MerchantMenu merchantmenu) {
+            // CraftBukkit start
+            final org.bukkit.event.inventory.TradeSelectEvent tradeSelectEvent = CraftEventFactory.callTradeSelectEvent(this.player, i, merchantmenu);
+            if (tradeSelectEvent.isCancelled()) {
+                this.player.getBukkitEntity().updateInventory();
+                return;
+            }
+            // CraftBukkit end
             if (!merchantmenu.stillValid(this.player)) {
                 LOGGER.debug("Player {} interacted with invalid menu {}", this.player, merchantmenu);
                 return;
@@ -747,6 +_,13 @@
 
     @Override
     public void handleEditBook(ServerboundEditBookPacket p_9862_) {
+        // CraftBukkit start
+        if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+            this.disconnect("Book edited too quickly!");
+            return;
+        }
+        this.lastBookTick = MinecraftServer.currentTick;
+        // CraftBukkit end
         int i = p_9862_.slot();
         if (Inventory.isHotbarSlot(i) || i == 40) {
             List<String> list = Lists.newArrayList();
@@ -761,10 +_,12 @@
     }
 
     private void updateBookContents(List<FilteredText> p_9813_, int p_9814_) {
-        ItemStack itemstack = this.player.getInventory().getItem(p_9814_);
+        ItemStack handItem = this.player.getInventory().getItem(p_9814_);
+        ItemStack itemstack = handItem.copy();
         if (itemstack.is(Items.WRITABLE_BOOK)) {
             List<Filterable<String>> list = p_9813_.stream().map(this::filterableFromOutgoing).toList();
             itemstack.set(DataComponents.WRITABLE_BOOK_CONTENT, new WritableBookContent(list));
+            CraftEventFactory.handleEditBookEvent(player, p_9814_, handItem, itemstack); // CraftBukkit
         }
     }
 
@@ -775,7 +_,8 @@
             itemstack1.remove(DataComponents.WRITABLE_BOOK_CONTENT);
             List<Filterable<Component>> list = p_215210_.stream().map(p_326455_ -> this.filterableFromOutgoing(p_326455_).<Component>map(Component::literal)).toList();
             itemstack1.set(DataComponents.WRITTEN_BOOK_CONTENT, new WrittenBookContent(this.filterableFromOutgoing(p_215209_), this.player.getName().getString(), 0, list, true));
-            this.player.getInventory().setItem(p_215211_, itemstack1);
+            CraftEventFactory.handleEditBookEvent(player, p_215211_, itemstack, itemstack1); // CraftBukkit
+            this.player.getInventory().setItem(p_215211_, itemstack); // CraftBukkit - event factory updates the hand book
         }
     }
 
@@ -783,7 +_,7 @@
         return this.player.isTextFilteringEnabled() ? Filterable.passThrough(p_328315_.filteredOrEmpty()) : Filterable.from(p_328315_);
     }
 
-    @Override
+	@Override
     public void handleEntityTagQuery(ServerboundEntityTagQueryPacket p_328694_) {
         PacketUtils.ensureRunningOnSameThread(p_328694_, this, this.player.serverLevel());
         if (this.player.hasPermissions(2)) {
@@ -822,7 +_,7 @@
             this.disconnect(Component.translatable("multiplayer.disconnect.invalid_player_movement"));
         } else {
             ServerLevel serverlevel = this.player.serverLevel();
-            if (!this.player.wonGame) {
+            if (!this.player.wonGame && !this.player.isImmobile()) { // CraftBukkit
                 if (this.tickCount == 0) {
                     this.resetPosition();
                 }
@@ -832,6 +_,7 @@
                         this.awaitingTeleportTime = this.tickCount;
                         this.teleport(this.awaitingPositionFromClient.x, this.awaitingPositionFromClient.y, this.awaitingPositionFromClient.z, this.player.getYRot(), this.player.getXRot());
                     }
+                    this.allowedPlayerTicks = 20; // CraftBukkit
                 } else {
                     this.awaitingTeleportTime = this.tickCount;
                     double d0 = clampHorizontal(p_9874_.getX(this.player.getX()));
@@ -842,7 +_,15 @@
                     if (this.player.isPassenger()) {
                         this.player.absMoveTo(this.player.getX(), this.player.getY(), this.player.getZ(), f, f1);
                         this.player.serverLevel().getChunkSource().move(this.player);
+                        this.allowedPlayerTicks = 20; // CraftBukkit
                     } else {
+                        // CraftBukkit - Make sure the move is valid but then reset it for plugins to modify
+                        double prevX = player.getX();
+                        double prevY = player.getY();
+                        double prevZ = player.getZ();
+                        float prevYaw = player.getYRot();
+                        float prevPitch = player.getXRot();
+                        // CraftBukkit end
                         double d3 = this.player.getX();
                         double d4 = this.player.getY();
                         double d5 = this.player.getZ();
@@ -860,16 +_,33 @@
                             if (serverlevel.tickRateManager().runsNormally()) {
                                 this.receivedMovePacketCount++;
                                 int i = this.receivedMovePacketCount - this.knownMovePacketCount;
-                                if (i > 5) {
+                                // CraftBukkit start - handle custom speeds and skipped ticks
+                                this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
+                                this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
+                                this.lastTick = (int) (System.currentTimeMillis() / 50);
+
+                                if (i > Math.max(this.allowedPlayerTicks, 5)) {
                                     LOGGER.debug(
                                         "{} is sending move packets too frequently ({} packets since last tick)", this.player.getName().getString(), i
                                     );
                                     i = 1;
                                 }
 
+                                if (p_9874_.hasRot || d10 > 0) {
+                                    allowedPlayerTicks -= 1;
+                                } else {
+                                    allowedPlayerTicks = 20;
+                                }
+                                double speed;
+                                if (player.getAbilities().flying) {
+                                    speed = player.getAbilities().flyingSpeed * 20f;
+                                } else {
+                                    speed = player.getAbilities().walkingSpeed * 10f;
+                                }
+
                                 if (!this.player.isChangingDimension() && (!this.player.level().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !flag)) {
                                     float f2 = flag ? 300.0F : 100.0F;
-                                    if (d10 - d9 > (double)(f2 * (float)i) && !this.isSingleplayerOwner()) {
+                                    if (d10 - d9 > Math.max(f2, Math.pow((double) (10.0F * (float) i * speed), 2))  && !this.isSingleplayerOwner()) {
                                         LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName().getString(), d6, d7, d8);
                                         this.teleport(
                                             this.player.getX(),
@@ -894,6 +_,7 @@
 
                             boolean flag1 = this.player.verticalCollisionBelow;
                             this.player.move(MoverType.PLAYER, new Vec3(d6, d7, d8));
+                            this.player.onGround = p_9874_.isOnGround(); // CraftBukkit - SPIGOT-5810, SPIGOT-5835, SPIGOT-6828: reset by this.player.move
                             d6 = d0 - this.player.getX();
                             d7 = d1 - this.player.getY();
                             if (d7 > -0.5 || d7 < 0.5) {
@@ -915,6 +_,72 @@
                             if (this.player.noPhysics
                                 || this.player.isSleeping()
                                 || (!flag2 || !serverlevel.noCollision(this.player, aabb)) && !this.isPlayerCollidingWithAnythingNew(serverlevel, aabb, d0, d1, d2)) {
+                                // CraftBukkit start - fire PlayerMoveEvent
+                                // Reset to old location first
+                                this.player.absMoveTo(prevX, prevY, prevZ, prevYaw, prevPitch);
+
+                                org.bukkit.entity.Player player = this.getCraftPlayer();
+                                if (!this.hasMoved) {
+                                    this.lastPosX = prevX;
+                                    this.lastPosY = prevY;
+                                    this.lastPosZ = prevZ;
+                                    this.lastYaw = prevYaw;
+                                    this.lastPitch = prevPitch;
+                                    this.hasMoved = true;
+                                }
+                                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
+                                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+
+                                        // If the packet contains movement information then we update the To location with the correct XYZ.
+                                if (p_9874_.hasPos) {
+                                    to.setX(p_9874_.x);
+                                    to.setY(p_9874_.y);
+                                    to.setZ(p_9874_.z);
+                                }
+
+                                // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                                if (p_9874_.hasRot) {
+                                    to.setYaw(p_9874_.yRot);
+                                    to.setPitch(p_9874_.xRot);
+                                }
+
+                                // Prevent 40 event-calls for less than a single pixel of movement >.>
+                                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                                if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isImmobile()) {
+                                    this.lastPosX = to.getX();
+                                    this.lastPosY = to.getY();
+                                    this.lastPosZ = to.getZ();
+                                    this.lastYaw = to.getYaw();
+                                    this.lastPitch = to.getPitch();
+
+                                    Location oldTo = to.clone();
+                                    PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                                    this.cserver.getPluginManager().callEvent(event);
+
+                                    // If the event is cancelled we move the player back to their old location.
+                                    if (event.isCancelled()) {
+                                        teleport(from);
+                                        return;
+                                    }
+
+                                    // If a Plugin has changed the To destination then we teleport the Player
+                                    // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                                    // We only do this if the Event was not cancelled.
+                                    if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                                        this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                                        return;
+                                    }
+
+                                    // Check to see if the Players Location has some how changed during the call of the event.
+                                    // This can happen due to a plugin teleporting the player instead of using .setTo()
+                                    if (!from.equals(this.getCraftPlayer().getLocation()) && this.justTeleported) {
+                                        this.justTeleported = false;
+                                        return;
+                                    }
+                                }
+                                // CraftBukkit end
                                 this.player.absMoveTo(d0, d1, d2, f, f1);
                                 boolean flag3 = this.player.isAutoSpinAttack();
                                 this.clientIsFloating = d7 >= -0.03125
@@ -946,7 +_,7 @@
                                 this.lastGoodY = this.player.getY();
                                 this.lastGoodZ = this.player.getZ();
                             } else {
-                                this.teleport(d3, d4, d5, f, f1);
+                                this.internalTeleport(d3, d4, d5, f, f1, Collections.emptySet()); // CraftBukkit - SPIGOT-1807: Don't call teleport event, when the client thinks the player is falling, because the chunks are not loaded on the client yet.
                                 this.player
                                     .doCheckFallDamage(this.player.getX() - d3, this.player.getY() - d4, this.player.getZ() - d5, p_9874_.isOnGround());
                             }
@@ -959,8 +_,8 @@
 
     private boolean isPlayerCollidingWithAnythingNew(LevelReader p_289008_, AABB p_288986_, double p_288990_, double p_288991_, double p_288967_) {
         AABB aabb = this.player
-            .getBoundingBox()
-            .move(p_288990_ - this.player.getX(), p_288991_ - this.player.getY(), p_288967_ - this.player.getZ());
+                .getBoundingBox()
+                .move(p_288990_ - this.player.getX(), p_288991_ - this.player.getY(), p_288967_ - this.player.getZ());
         Iterable<VoxelShape> iterable = p_289008_.getCollisions(this.player, aabb.deflate(1.0E-5F));
         VoxelShape voxelshape = Shapes.create(p_288986_.deflate(1.0E-5F));
 
@@ -973,41 +_,126 @@
         return false;
     }
 
+    // CraftBukkit start - Delegate to teleport(Location)
     public void teleport(double p_9775_, double p_9776_, double p_9777_, float p_9778_, float p_9779_) {
-        this.teleport(p_9775_, p_9776_, p_9777_, p_9778_, p_9779_, Collections.emptySet());
+        this.teleport(p_9775_, p_9776_, p_9777_, p_9778_, p_9779_, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public void teleport(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
+        this.teleport(d0, d1, d2, f, f1, Collections.emptySet(), cause);
     }
 
     public void teleport(double p_9781_, double p_9782_, double p_9783_, float p_9784_, float p_9785_, Set<RelativeMovement> p_9786_) {
-        double d0 = p_9786_.contains(RelativeMovement.X) ? this.player.getX() : 0.0;
-        double d1 = p_9786_.contains(RelativeMovement.Y) ? this.player.getY() : 0.0;
-        double d2 = p_9786_.contains(RelativeMovement.Z) ? this.player.getZ() : 0.0;
-        float f = p_9786_.contains(RelativeMovement.Y_ROT) ? this.player.getYRot() : 0.0F;
-        float f1 = p_9786_.contains(RelativeMovement.X_ROT) ? this.player.getXRot() : 0.0F;
-        this.awaitingPositionFromClient = new Vec3(p_9781_, p_9782_, p_9783_);
+        this.teleport(p_9781_, p_9782_, p_9783_, p_9784_, p_9785_, p_9786_, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public boolean teleport(double d0, double d1, double d2, float f, float f1, Set<RelativeMovement> set, PlayerTeleportEvent.TeleportCause cause) { // CraftBukkit - Return event status
+        org.bukkit.entity.Player player = this.getCraftPlayer();
+        Location from = player.getLocation();
+
+        double x = d0;
+        double y = d1;
+        double z = d2;
+        float yaw = f;
+        float pitch = f1;
+
+        Location to = new Location(this.getCraftPlayer().getWorld(), x, y, z, yaw, pitch);
+        // SPIGOT-5171: Triggered on join
+        if (from.equals(to)) {
+            this.internalTeleport(d0, d1, d2, f, f1, set);
+            return false; // CraftBukkit - Return event status
+        }
+
+        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled() || !to.equals(event.getTo())) {
+            set.clear(); // Can't relative teleport
+            to = event.isCancelled() ? event.getFrom() : event.getTo();
+            d0 = to.getX();
+            d1 = to.getY();
+            d2 = to.getZ();
+            f = to.getYaw();
+            f1 = to.getPitch();
+        }
+
+        this.internalTeleport(d0, d1, d2, f, f1, set);
+        return event.isCancelled(); // CraftBukkit - Return event status
+    }
+
+    public void teleport(Location dest) {
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.emptySet());
+    }
+
+    private void internalTeleport(double pX, double pY, double pZ, float pYaw, float pPitch, Set<RelativeMovement> pRelativeSet) {
+        // CraftBukkit start
+        if (Float.isNaN(pYaw)) {
+            pYaw = 0;
+        }
+        if (Float.isNaN(pPitch)) {
+            pPitch = 0;
+        }
+
+        this.justTeleported = true;
+        // CraftBukkit end
+        double d0 = pRelativeSet.contains(RelativeMovement.X) ? this.player.getX() : 0.0D;
+        double d1 = pRelativeSet.contains(RelativeMovement.Y) ? this.player.getY() : 0.0D;
+        double d2 = pRelativeSet.contains(RelativeMovement.Z) ? this.player.getZ() : 0.0D;
+        float f = pRelativeSet.contains(RelativeMovement.Y_ROT) ? this.player.getYRot() : 0.0F;
+        float f1 = pRelativeSet.contains(RelativeMovement.X_ROT) ? this.player.getXRot() : 0.0F;
+        this.awaitingPositionFromClient = new Vec3(pX, pY, pZ);
         if (++this.awaitingTeleport == Integer.MAX_VALUE) {
             this.awaitingTeleport = 0;
         }
 
+        // CraftBukkit start - update last location
+        this.lastPosX = this.awaitingPositionFromClient.x;
+        this.lastPosY = this.awaitingPositionFromClient.y;
+        this.lastPosZ = this.awaitingPositionFromClient.z;
+        this.lastYaw = pYaw;
+        this.lastPitch = pPitch;
+        // CraftBukkit end
+
         this.awaitingTeleportTime = this.tickCount;
         this.player.resetCurrentImpulseContext();
-        this.player.absMoveTo(p_9781_, p_9782_, p_9783_, p_9784_, p_9785_);
+        this.player.absMoveTo(pX, pY, pZ, pYaw, pPitch);
         this.player
             .connection
-            .send(new ClientboundPlayerPositionPacket(p_9781_ - d0, p_9782_ - d1, p_9783_ - d2, p_9784_ - f, p_9785_ - f1, p_9786_, this.awaitingTeleport));
+            .send(new ClientboundPlayerPositionPacket(pX - d0, pY - d1, pZ - d2, pYaw - f, pPitch - f1, pRelativeSet, this.awaitingTeleport));
     }
 
     @Override
     public void handlePlayerAction(ServerboundPlayerActionPacket p_9889_) {
         PacketUtils.ensureRunningOnSameThread(p_9889_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         BlockPos blockpos = p_9889_.getPos();
         this.player.resetLastActionTime();
         ServerboundPlayerActionPacket.Action serverboundplayeractionpacket$action = p_9889_.getAction();
         switch (serverboundplayeractionpacket$action) {
             case SWAP_ITEM_WITH_OFFHAND:
                 if (!this.player.isSpectator()) {
-                    ItemStack itemstack = this.player.getItemInHand(InteractionHand.OFF_HAND);
-                    this.player.setItemInHand(InteractionHand.OFF_HAND, this.player.getItemInHand(InteractionHand.MAIN_HAND));
-                    this.player.setItemInHand(InteractionHand.MAIN_HAND, itemstack);
+                    var event = net.minecraftforge.event.ForgeEventFactory.onLivingSwapHandItems(this.player);
+                    if (event.isCanceled()) return;
+
+                    // CraftBukkit start - inspiration taken from DispenserRegistry (See SpigotCraft#394)
+                    CraftItemStack mainHand = CraftItemStack.asCraftMirror(event.getItemSwappedToMainHand());
+                    CraftItemStack offHand = CraftItemStack.asCraftMirror(event.getItemSwappedToOffHand());
+                    PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getCraftPlayer(), mainHand.clone(), offHand.clone());
+                    this.cserver.getPluginManager().callEvent(swapItemsEvent);
+                    if (swapItemsEvent.isCancelled()) {
+                        return;
+                    }
+                    if (swapItemsEvent.getOffHandItem().equals(offHand)) {
+                        this.player.setItemInHand(InteractionHand.OFF_HAND, event.getItemSwappedToOffHand());
+                    } else {
+                        this.player.setItemInHand(InteractionHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
+                    }
+                    if (swapItemsEvent.getMainHandItem().equals(mainHand)) {
+                        this.player.setItemInHand(InteractionHand.MAIN_HAND, event.getItemSwappedToMainHand());
+                    } else {
+                        this.player.setItemInHand(InteractionHand.MAIN_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem()));
+                    }
+                    // CraftBukkit end
                     this.player.stopUsingItem();
                 }
 
@@ -1020,6 +_,21 @@
                 return;
             case DROP_ALL_ITEMS:
                 if (!this.player.isSpectator()) {
+                    // limit how quickly items can be dropped
+                    // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+                    if (this.lastDropTick != MinecraftServer.currentTick) {
+                        this.dropCount = 0;
+                        this.lastDropTick = MinecraftServer.currentTick;
+                    } else {
+                        // Else we increment the drop count and check the amount.
+                        this.dropCount++;
+                        if (this.dropCount >= 20) {
+                            LOGGER.warn(this.player.getScoreboardName() + " dropped their items too quickly!");
+                            this.disconnect("You dropped your items too quickly (Hacking?)");
+                            return;
+                        }
+                    }
+                    // CraftBukkit end
                     this.player.drop(true);
                 }
 
@@ -1049,9 +_,29 @@
         }
     }
 
-    @Override
+    // Spigot start - limit place/interactions
+    private int limitedPackets;
+    private long lastLimitedPacket = -1;
+
+    private boolean checkLimit(long timestamp) {
+        if (this.lastLimitedPacket != -1 && timestamp - this.lastLimitedPacket < 30 && this.limitedPackets++ >= 4) {
+            return false;
+        }
+
+        if (this.lastLimitedPacket == -1 || timestamp - this.lastLimitedPacket >= 30) {
+            this.lastLimitedPacket = timestamp;
+            this.limitedPackets = 0;
+            return true;
+        }
+
+        return true;
+    }
+    // Spigot end
+
     public void handleUseItemOn(ServerboundUseItemOnPacket p_9930_) {
         PacketUtils.ensureRunningOnSameThread(p_9930_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
+        if (!checkLimit(p_9930_.timestamp)) return; // Spigot - check limit
         this.player.connection.ackBlockChangesUpTo(p_9930_.getSequence());
         ServerLevel serverlevel = this.player.serverLevel();
         InteractionHand interactionhand = p_9930_.getHand();
@@ -1104,16 +_,63 @@
     @Override
     public void handleUseItem(ServerboundUseItemPacket p_9932_) {
         PacketUtils.ensureRunningOnSameThread(p_9932_, this, this.player.serverLevel());
-        this.ackBlockChangesUpTo(p_9932_.getSequence());
-        ServerLevel serverlevel = this.player.serverLevel();
+        if (this.player.isImmobile()) return; // CraftBukkit
+        if (!checkLimit(p_9932_.timestamp)) return; // Spigot - check limit
         InteractionHand interactionhand = p_9932_.getHand();
         ItemStack itemstack = this.player.getItemInHand(interactionhand);
+        if (BanItem.check(this.player, itemstack)) return; // Mohist - banitem
+        this.ackBlockChangesUpTo(p_9932_.getSequence());
+        ServerLevel serverlevel = this.player.serverLevel();
         this.player.resetLastActionTime();
         if (!itemstack.isEmpty() && itemstack.isItemEnabled(serverlevel.enabledFeatures())) {
+            // CraftBukkit start
+            // Raytrace to look for 'rogue armswings'
+            float f1 = this.player.getXRot();
+            float f2 = this.player.getYRot();
+            double d0 = this.player.getX();
+            double d1 = this.player.getY() + (double) this.player.getEyeHeight();
+            double d2 = this.player.getZ();
+            Vec3 vec3d = new Vec3(d0, d1, d2);
+
+            float f3 = Mth.cos(-f2 * 0.017453292F - 3.1415927F);
+            float f4 = Mth.sin(-f2 * 0.017453292F - 3.1415927F);
+            float f5 = -Mth.cos(-f1 * 0.017453292F);
+            float f6 = Mth.sin(-f1 * 0.017453292F);
+            float f7 = f4 * f5;
+            float f8 = f3 * f5;
+            double d3 = player.gameMode.getGameModeForPlayer() == GameType.CREATIVE ? 5.0D : 4.5D;
+            Vec3 vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+            HitResult movingobjectposition = this.player.level.clip(new ClipContext(vec3d, vec3d1, ClipContext.Block.OUTLINE, ClipContext.Fluid.NONE, player));
+
+            boolean cancelled;
+            if (movingobjectposition == null || movingobjectposition.getType() != HitResult.Type.BLOCK) {
+                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack, interactionhand);
+                cancelled = event.useItemInHand() == Event.Result.DENY;
+            } else {
+                BlockHitResult movingobjectpositionblock = (BlockHitResult) movingobjectposition;
+                if (player.gameMode.firedInteract && player.gameMode.interactPosition.equals(movingobjectpositionblock.getBlockPos()) && player.gameMode.interactHand == interactionhand && ItemStack.isSameItemSameComponents(player.gameMode.interactItemStack, itemstack)) {
+                    cancelled = player.gameMode.interactResult;
+                } else {
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectpositionblock.getBlockPos(), movingobjectpositionblock.getDirection(), itemstack, true, interactionhand, movingobjectpositionblock.getLocation());
+                    cancelled = event.useItemInHand() == Event.Result.DENY;
+                }
+                player.gameMode.firedInteract = false;
+            }
+
+            if (cancelled) {
+                this.player.getBukkitEntity().updateInventory(); // SPIGOT-2524
+                return;
+            }
+            itemstack = this.player.getItemInHand(interactionhand); // Update in case it was changed in the event
+            if (itemstack.isEmpty()) {
+                return;
+            }
+            // CraftBukkit end
             InteractionResult interactionresult = this.player.gameMode.useItem(this.player, serverlevel, itemstack, interactionhand);
             if (interactionresult.shouldSwing()) {
                 this.player.swing(interactionhand, true);
             }
+
         }
     }
 
@@ -1124,7 +_,7 @@
             for (ServerLevel serverlevel : this.server.getAllLevels()) {
                 Entity entity = p_9928_.getEntity(serverlevel);
                 if (entity != null) {
-                    this.player.teleportTo(serverlevel, entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
+                    this.player.teleportTo(serverlevel, entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
                     return;
                 }
             }
@@ -1141,6 +_,13 @@
 
     @Override
     public void onDisconnect(Component p_9825_) {
+        // CraftBukkit start - Rarely it would send a disconnect line twice
+        if (this.processedDisconnect) {
+            return;
+        } else {
+            this.processedDisconnect = true;
+        }
+        // CraftBukkit end
         LOGGER.info("{} lost connection: {}", this.player.getName().getString(), p_9825_.getString());
         this.removePlayerFromWorld();
         super.onDisconnect(p_9825_);
@@ -1148,10 +_,14 @@
 
     private void removePlayerFromWorld() {
         this.chatMessageChain.close();
-        this.server.invalidateStatus();
-        this.server.getPlayerList().broadcastSystemMessage(Component.translatable("multiplayer.player.left", this.player.getDisplayName()).withStyle(ChatFormatting.YELLOW), false);
+        // this.server.invalidateStatus();
         this.player.disconnect();
         this.server.getPlayerList().remove(this.player);
+        String quitMessage = this.server.getPlayerList().quitMessage;
+        if (!quitMessage.isEmpty()) {
+            this.server.getPlayerList().broadcastMessage(CraftChatMessage.fromString(quitMessage));
+        }
+        // CraftBukkit end
         this.player.getTextFilter().leave();
     }
 
@@ -1166,7 +_,16 @@
     @Override
     public void handleSetCarriedItem(ServerboundSetCarriedItemPacket p_9909_) {
         PacketUtils.ensureRunningOnSameThread(p_9909_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         if (p_9909_.getSlot() >= 0 && p_9909_.getSlot() < Inventory.getSelectionSize()) {
+            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getCraftPlayer(), this.player.getInventory().selected, p_9909_.getSlot());
+            this.cserver.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                this.send(new ClientboundSetCarriedItemPacket(this.player.getInventory().selected));
+                this.player.resetLastActionTime();
+                return;
+            }
+            // CraftBukkit end
             if (this.player.getInventory().selected != p_9909_.getSlot() && this.player.getUsedItemHand() == InteractionHand.MAIN_HAND) {
                 this.player.stopUsingItem();
             }
@@ -1180,9 +_,18 @@
 
     @Override
     public void handleChat(ServerboundChatPacket p_9841_) {
-        Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(p_9841_.lastSeenMessages());
-        if (!optional.isEmpty()) {
-            this.tryHandleChat(p_9841_.message(), () -> {
+        // CraftBukkit start - async chat
+        // SPIGOT-3638
+        if (this.server.isStopped()) {
+            return;
+        }
+        // CraftBukkit end
+        if (isChatMessageIllegal(p_9841_.message())) {
+            this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"));
+        } else {
+            Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(p_9841_.lastSeenMessages());
+            if (optional.isPresent()) {
+                // this.server.submit(() -> { // CraftBukkit - async chat
                 PlayerChatMessage playerchatmessage;
                 try {
                     playerchatmessage = this.getSignedMessage(p_9841_, optional.get());
@@ -1192,24 +_,44 @@
                 }
 
                 CompletableFuture<FilteredText> completablefuture = this.filterTextPacket(playerchatmessage.signedContent());
-                Component component = this.server.getChatDecorator().decorate(this.player, playerchatmessage.decoratedContent());
-                this.chatMessageChain.append(completablefuture, p_296589_ -> {
+                Component component = net.minecraftforge.common.ForgeHooks.onServerChatSubmittedEvent(this.player, playerchatmessage.decoratedContent());
+                this.chatMessageChain.append(completablefuture, (p_296589_) -> {
+                    if (component == null) return;
                     PlayerChatMessage playerchatmessage1 = playerchatmessage.withUnsignedContent(component).filter(p_296589_.mask());
                     this.broadcastChatMessage(playerchatmessage1);
                 });
-            });
+                // }); // CraftBukkit - async chat
+            }
+
         }
     }
 
     @Override
     public void handleChatCommand(ServerboundChatCommandPacket p_215225_) {
         this.tryHandleChat(p_215225_.command(), () -> {
+            // CraftBukkit start - SPIGOT-7346: Prevent disconnected players from executing commands
+            if (player.hasDisconnected()) {
+                return;
+            }
+            // CraftBukkit end
             this.performUnsignedChatCommand(p_215225_.command());
             this.detectRateSpam();
         });
     }
 
     private void performUnsignedChatCommand(String p_334078_) {
+        // CraftBukkit start
+        String command = "/" + p_334078_;
+        LOGGER.info(this.player.getScoreboardName() + " issued server command: " + command);
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(getCraftPlayer(), command, new LazyPlayerSet(server));
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+        p_334078_ = event.getMessage().substring(1);
+        // CraftBukkit end
         ParseResults<CommandSourceStack> parseresults = this.parseCommand(p_334078_);
         if (this.server.enforceSecureProfile() && SignableCommand.hasSignableArguments(parseresults)) {
             LOGGER.error(
@@ -1220,12 +_,17 @@
             this.server.getCommands().performCommand(parseresults, p_334078_);
         }
     }
-
-    @Override
+	
+	@Override
     public void handleSignedChatCommand(ServerboundChatCommandSignedPacket p_330005_) {
         Optional<LastSeenMessages> optional = this.unpackAndApplyLastSeen(p_330005_.lastSeenMessages());
         if (!optional.isEmpty()) {
             this.tryHandleChat(p_330005_.command(), () -> {
+                // CraftBukkit start - SPIGOT-7346: Prevent disconnected players from executing commands
+                if (player.hasDisconnected()) {
+                    return;
+                }
+                // CraftBukkit end
                 this.performSignedChatCommand(p_330005_, optional.get());
                 this.detectRateSpam();
             });
@@ -1233,11 +_,24 @@
     }
 
     private void performSignedChatCommand(ServerboundChatCommandSignedPacket p_335197_, LastSeenMessages p_250484_) {
-        ParseResults<CommandSourceStack> parseresults = this.parseCommand(p_335197_.command());
+        // CraftBukkit start
+        String command = "/" + p_335197_.command();
+        LOGGER.info(this.player.getScoreboardName() + " issued server command: " + command);
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(getCraftPlayer(), command, new LazyPlayerSet(server));
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+        command = event.getMessage().substring(1);
+
+        ParseResults<CommandSourceStack> parseresults = this.parseCommand(command);
+        // CraftBukkit end
 
         Map<String, PlayerChatMessage> map;
         try {
-            map = this.collectSignedArguments(p_335197_, SignableCommand.of(parseresults), p_250484_);
+            map = (p_335197_.command().equals(command)) ? this.collectSignedArguments(p_335197_, SignableCommand.of(parseresults), p_250484_) : Collections.emptyMap(); // CraftBukkit
         } catch (SignedMessageChain.DecodeException signedmessagechain$decodeexception) {
             this.handleMessageDecodeFailure(signedmessagechain$decodeexception);
             return;
@@ -1245,7 +_,7 @@
 
         CommandSigningContext commandsigningcontext = new CommandSigningContext.SignedArguments(map);
         parseresults = Commands.mapSource(parseresults, p_296586_ -> p_296586_.withSigningContext(commandsigningcontext, this.chatMessageChain));
-        this.server.getCommands().performCommand(parseresults, p_335197_.command());
+        this.server.getCommands().performCommand(parseresults, command); // CraftBukkit
     }
 
     private void handleMessageDecodeFailure(SignedMessageChain.DecodeException p_252068_) {
@@ -1294,7 +_,7 @@
     }
 
     private static <S> SignedMessageChain.DecodeException createSignedArgumentMismatchException(
-        String p_328555_, List<ArgumentSignatures.Entry> p_331214_, List<SignableCommand.Argument<S>> p_329273_
+            String p_328555_, List<ArgumentSignatures.Entry> p_331214_, List<SignableCommand.Argument<S>> p_329273_
     ) {
         String s = p_331214_.stream().map(ArgumentSignatures.Entry::name).collect(Collectors.joining(", "));
         String s1 = p_329273_.stream().map(SignableCommand.Argument::name).collect(Collectors.joining(", "));
@@ -1310,7 +_,7 @@
     private void tryHandleChat(String p_334915_, Runnable p_336106_) {
         if (isChatMessageIllegal(p_334915_)) {
             this.disconnect(Component.translatable("multiplayer.disconnect.illegal_characters"));
-        } else if (this.player.getChatVisibility() == ChatVisiblity.HIDDEN) {
+        } else if (this.player.isRemoved() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) {
             this.send(new ClientboundSystemChatPacket(Component.translatable("chat.disabled.options").withStyle(ChatFormatting.RED), false));
         } else {
             this.player.resetLastActionTime();
@@ -1346,7 +_,23 @@
     }
 
     private void broadcastChatMessage(PlayerChatMessage p_243277_) {
-        this.server.getPlayerList().broadcastChatMessage(p_243277_, this.player, ChatType.bind(ChatType.CHAT, this.player));
+        String s = p_243277_.signedContent();
+        if (s.isEmpty()) {
+            LOGGER.warn(this.player.getScoreboardName() + " tried to send an empty message");
+        } else if (getCraftPlayer().isConversing()) {
+            final String conversationInput = s;
+            this.server.processQueue.add(new Runnable() {
+                @Override
+                public void run() {
+                    getCraftPlayer().acceptConversationInput(conversationInput);
+                }
+            });
+        } else if (this.player.getChatVisibility() == ChatVisiblity.SYSTEM) { // Re-add "Command Only" flag check
+            this.send(new ClientboundSystemChatPacket(Component.translatable("chat.cannotSend").withStyle(ChatFormatting.RED), false));
+        } else {
+            this.chat(s, p_243277_, true);
+        }
+        // this.server.getPlayerList().broadcastChatMessage(p_243277_, this.player, ChatType.bind(ChatType.CHAT, this.player));
         this.detectRateSpam();
     }
 
@@ -1370,13 +_,61 @@
     @Override
     public void handleAnimate(ServerboundSwingPacket p_9926_) {
         PacketUtils.ensureRunningOnSameThread(p_9926_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
+        // CraftBukkit start - Raytrace to look for 'rogue armswings'
+        float f1 = this.player.getXRot();
+        float f2 = this.player.getYRot();
+        double d0 = this.player.getX();
+        double d1 = this.player.getY() + (double) this.player.getEyeHeight();
+        double d2 = this.player.getZ();
+        Location origin = new Location(this.player.level.getWorld(), d0, d1, d2, f2, f1);
+
+        double d3 = player.gameMode.getGameModeForPlayer() == GameType.CREATIVE ? 5.0D : 4.5D;
+        // SPIGOT-5607: Only call interact event if no block or entity is being clicked. Use bukkit ray trace method, because it handles blocks and entities at the same time
+        // SPIGOT-7429: Make sure to call PlayerInteractEvent for spectators and non-pickable entities
+        org.bukkit.util.RayTraceResult result = this.player.level().getWorld().rayTrace(origin, origin.getDirection(), d3, org.bukkit.FluidCollisionMode.NEVER, false, 0.1, entity -> {
+            Entity handle = ((CraftEntity) entity).getHandle();
+            return entity != this.player.getBukkitEntity() && this.player.getBukkitEntity().canSee(entity) && !handle.isSpectator() && handle.isPickable() && !handle.isPassengerOfSameVehicle(player);
+        });
+        if (result == null) {
+            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+        }
+
+        // Arm swing animation
+        PlayerAnimationEvent event = new PlayerAnimationEvent(this.getCraftPlayer(), (p_9926_.getHand() == InteractionHand.MAIN_HAND) ? PlayerAnimationType.ARM_SWING : PlayerAnimationType.OFF_ARM_SWING);
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) return;
+        // CraftBukkit end
         this.player.swing(p_9926_.getHand());
     }
 
-    @Override
     public void handlePlayerCommand(ServerboundPlayerCommandPacket p_9891_) {
         PacketUtils.ensureRunningOnSameThread(p_9891_, this, this.player.serverLevel());
+        // CraftBukkit start
+        if (this.player.isRemoved()) return;
+        switch (p_9891_.getAction()) {
+            case PRESS_SHIFT_KEY:
+            case RELEASE_SHIFT_KEY:
+                PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getCraftPlayer(), p_9891_.getAction() == ServerboundPlayerCommandPacket.Action.PRESS_SHIFT_KEY);
+                this.cserver.getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return;
+                }
+                break;
+            case START_SPRINTING:
+            case STOP_SPRINTING:
+                PlayerToggleSprintEvent e2 = new PlayerToggleSprintEvent(this.getCraftPlayer(), p_9891_.getAction() == ServerboundPlayerCommandPacket.Action.START_SPRINTING);
+                this.cserver.getPluginManager().callEvent(e2);
+
+                if (e2.isCancelled()) {
+                    return;
+                }
+                break;
+        }
+        // CraftBukkit end
         this.player.resetLastActionTime();
         switch (p_9891_.getAction()) {
             case PRESS_SHIFT_KEY:
@@ -1438,10 +_,17 @@
             if (i > 4096) {
                 this.disconnect(Component.translatable("multiplayer.disconnect.too_many_pending_chats"));
             }
+
         }
     }
 
     public void sendPlayerChatMessage(PlayerChatMessage p_250321_, ChatType.Bound p_250910_) {
+        // CraftBukkit start - SPIGOT-7262: if hidden we have to send as disguised message. Query whether we should send at all (but changing this may not be expected).
+        if (!getCraftPlayer().canSeePlayer(p_250321_.link().sender())) {
+            sendDisguisedChatMessage(p_250321_.decoratedContent(), p_250910_);
+            return;
+        }
+        // CraftBukkit end
         this.send(
             new ClientboundPlayerChatPacket(
                 p_250321_.link().sender(),
@@ -1464,6 +_,12 @@
         return this.connection.getRemoteAddress();
     }
 
+    // Spigot Start
+    public SocketAddress getRawAddress() {
+        return this.connection.channel.remoteAddress();
+    }
+    // Spigot End
+
     public void switchToConfig() {
         this.waitingForSwitchToConfig = true;
         this.removePlayerFromWorld();
@@ -1479,8 +_,16 @@
     @Override
     public void handleInteract(ServerboundInteractPacket p_9866_) {
         PacketUtils.ensureRunningOnSameThread(p_9866_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
+        if (BanItem.check(player)) return; // Mohist
         final ServerLevel serverlevel = this.player.serverLevel();
         final Entity entity = p_9866_.getTarget(serverlevel);
+        // Spigot Start
+        if (entity == player && !player.isSpectator()) {
+            disconnect("Cannot interact with self!");
+            return;
+        }
+        // Spigot End
         this.player.resetLastActionTime();
         this.player.setShiftKeyDown(p_9866_.isUsingSecondaryAction());
         if (entity != null) {
@@ -1490,14 +_,50 @@
 
             AABB aabb = entity.getBoundingBox();
             if (this.player.canInteractWithEntity(aabb, 1.0)) {
-                p_9866_.dispatch(
-                    new ServerboundInteractPacket.Handler() {
-                        private void performInteraction(InteractionHand p_143679_, ServerGamePacketListenerImpl.EntityInteraction p_143680_) {
-                            ItemStack itemstack = ServerGamePacketListenerImpl.this.player.getItemInHand(p_143679_);
-                            if (itemstack.isItemEnabled(serverlevel.enabledFeatures())) {
-                                ItemStack itemstack1 = itemstack.copy();
-                                InteractionResult interactionresult = p_143680_.run(ServerGamePacketListenerImpl.this.player, entity, p_143679_);
-                                if (interactionresult.consumesAction()) {
+                p_9866_.dispatch(new ServerboundInteractPacket.Handler() {
+                    private void performInteraction(InteractionHand p_143679_, ServerGamePacketListenerImpl.EntityInteraction p_143680_, PlayerInteractEntityEvent event) { // CraftBukkit
+                        ItemStack itemstack = ServerGamePacketListenerImpl.this.player.getItemInHand(p_143679_);
+                        if (itemstack.isItemEnabled(serverlevel.enabledFeatures())) {
+                            ItemStack itemstack1 = itemstack.copy();
+                            // CraftBukkit start
+                            ItemStack itemInHand = ServerGamePacketListenerImpl.this.player.getItemInHand(p_143679_);
+                            boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof Mob;
+                            Item origItem = player.getInventory().getSelected() == null ? null : player.getInventory().getSelected().getItem();
+
+                            cserver.getPluginManager().callEvent(event);
+
+                            // Entity in bucket - SPIGOT-4048 and SPIGOT-6859a
+                            if ((entity instanceof Bucketable && entity instanceof LivingEntity && origItem != null && origItem.asItem() == Items.WATER_BUCKET) && (event.isCancelled() || player.getInventory().getSelected() == null || player.getInventory().getSelected().getItem() != origItem)) {
+                                send(new ClientboundAddEntityPacket(entity));
+                                player.containerMenu.sendAllDataToRemote();
+                            }
+
+                            if (triggerLeashUpdate && (event.isCancelled() || player.getInventory().getSelected() == null || player.getInventory().getSelected().getItem() != origItem)) {
+                                // Refresh the current leash state
+                                send(new ClientboundSetEntityLinkPacket(entity, ((Mob) entity).getLeashHolder()));
+                            }
+
+                            if (event.isCancelled() || player.getInventory().getSelected() == null || player.getInventory().getSelected().getItem() != origItem) {
+                                // Refresh the current entity metadata
+                                entity.refreshEntityData(player);
+                                // SPIGOT-7136 - Allays
+                                if (entity instanceof Allay) {
+                                    send(new ClientboundSetEquipmentPacket(entity.getId(), Arrays.stream(net.minecraft.world.entity.EquipmentSlot.values()).map((slot) -> Pair.of(slot, ((LivingEntity) entity).getItemBySlot(slot).copy())).collect(Collectors.toList())));
+                                    player.containerMenu.sendAllDataToRemote();
+                                }
+                            }
+
+                            if (event.isCancelled()) {
+                                return;
+                            }
+                            // CraftBukkit end
+                            InteractionResult interactionresult = p_143680_.run(ServerGamePacketListenerImpl.this.player, entity, p_143679_);
+                            // CraftBukkit start
+                            if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
+                                player.containerMenu.sendAllDataToRemote();
+                            }
+                            // CraftBukkit end
+                            if (interactionresult.consumesAction()) {
                                     CriteriaTriggers.PLAYER_INTERACTED_WITH_ENTITY
                                         .trigger(
                                             ServerGamePacketListenerImpl.this.player, interactionresult.indicateItemUse() ? itemstack1 : ItemStack.EMPTY, entity
@@ -1509,44 +_,68 @@
                             }
                         }
 
-                        @Override
-                        public void onInteraction(InteractionHand p_143677_) {
-                            this.performInteraction(p_143677_, Player::interactOn);
-                        }
-
-                        @Override
-                        public void onInteraction(InteractionHand p_143682_, Vec3 p_143683_) {
-                            this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> p_143687_.interactAt(p_143686_, p_143683_, p_143688_));
-                        }
-
-                        @Override
-                        public void onAttack() {
-                            label23:
-                            if (!(entity instanceof ItemEntity) && !(entity instanceof ExperienceOrb) && entity != ServerGamePacketListenerImpl.this.player) {
-                                if (entity instanceof AbstractArrow abstractarrow && !abstractarrow.isAttackable()) {
-                                    break label23;
-                                }
-
-                                ItemStack itemstack = ServerGamePacketListenerImpl.this.player.getItemInHand(InteractionHand.MAIN_HAND);
-                                if (!itemstack.isItemEnabled(serverlevel.enabledFeatures())) {
-                                    return;
-                                }
-
+                    public void onInteraction(InteractionHand p_143677_) {
+                        this.performInteraction(p_143677_, Player::interactOn, new PlayerInteractEntityEvent(getCraftPlayer(), entity.getBukkitEntity(), (p_143677_ == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND)); // CraftBukkit
+                    }
+
+                    public void onInteraction(InteractionHand p_143682_, Vec3 p_143683_) {
+                        this.performInteraction(p_143682_, (p_143686_, p_143687_, p_143688_) -> {
+                            return p_143687_.interactAt(p_143686_, p_143683_, p_143688_);
+                        }, new PlayerInteractAtEntityEvent(getCraftPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(p_143683_.x, p_143683_.y, p_143683_.z), (p_143682_ == InteractionHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND)); // CraftBukkit
+                    }
+
+                    public void onAttack() {
+                        // CraftBukkit
+                        if (!(entity instanceof ItemEntity) && !(entity instanceof ExperienceOrb) && !(entity instanceof AbstractArrow) && (entity != ServerGamePacketListenerImpl.this.player || player.isSpectator())) {
+                            ItemStack itemstack = ServerGamePacketListenerImpl.this.player.getItemInHand(InteractionHand.MAIN_HAND);
+                            if (itemstack.isItemEnabled(serverlevel.enabledFeatures())) {
                                 ServerGamePacketListenerImpl.this.player.attack(entity);
-                                return;
+                                // CraftBukkit start
+                                if (!itemstack.isEmpty() && itemstack.getCount() <= -1) {
+                                    player.containerMenu.sendAllDataToRemote();
+                                }
+                                // CraftBukkit end
                             }
-
+                        } else {
                             ServerGamePacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.invalid_entity_attacked"));
-                            ServerGamePacketListenerImpl.LOGGER
-                                .warn("Player {} tried to attack an invalid entity", ServerGamePacketListenerImpl.this.player.getName().getString());
+                            ServerGamePacketListenerImpl.LOGGER.warn("Player {} tried to attack an invalid entity", (Object) ServerGamePacketListenerImpl.this.player.getName().getString());
                         }
                     }
-                );
+                });
             }
         }
-    }
-
-    @Override
+        // Paper start - PlayerUseUnknownEntityEvent
+        else {
+            p_9866_.dispatch(new net.minecraft.network.protocol.game.ServerboundInteractPacket.Handler() {
+                @Override
+                public void onInteraction(net.minecraft.world.InteractionHand hand) {
+                    ServerGamePacketListenerImpl.this.callPlayerUseUnknownEntityEvent(p_9866_, hand, null);
+                }
+
+                @Override
+                public void onInteraction(net.minecraft.world.InteractionHand hand, net.minecraft.world.phys.Vec3 pos) {
+                    ServerGamePacketListenerImpl.this.callPlayerUseUnknownEntityEvent(p_9866_, hand, pos);
+                }
+
+                @Override
+                public void onAttack() {
+                    ServerGamePacketListenerImpl.this.callPlayerUseUnknownEntityEvent(p_9866_, net.minecraft.world.InteractionHand.MAIN_HAND, null);
+                }
+            });
+        }
+    }
+
+    private void callPlayerUseUnknownEntityEvent(ServerboundInteractPacket packet, InteractionHand hand, @Nullable net.minecraft.world.phys.Vec3 vector) {
+        this.cserver.getPluginManager().callEvent(new com.destroystokyo.paper.event.player.PlayerUseUnknownEntityEvent(
+                this.getCraftPlayer(),
+                packet.getEntityId(),
+                packet.isAttack(),
+                hand == InteractionHand.MAIN_HAND ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND,
+                vector != null ? new org.bukkit.util.Vector(vector.x, vector.y, vector.z) : null)
+        );
+    }
+    // Paper end - PlayerUseUnknownEntityEvent
+
     public void handleClientCommand(ServerboundClientCommandPacket p_9843_) {
         PacketUtils.ensureRunningOnSameThread(p_9843_, this, this.player.serverLevel());
         this.player.resetLastActionTime();
@@ -1555,6 +_,7 @@
             case PERFORM_RESPAWN:
                 if (this.player.wonGame) {
                     this.player.wonGame = false;
+                    this.server.getPlayerList().mohist$reason = PlayerRespawnEvent.RespawnReason.END_PORTAL; // Mohist
                     this.player = this.server.getPlayerList().respawn(this.player, true);
                     CriteriaTriggers.CHANGED_DIMENSION.trigger(this.player, Level.END, Level.OVERWORLD);
                 } else {
@@ -1562,10 +_,11 @@
                         return;
                     }
 
+                    this.server.getPlayerList().mohist$reason = PlayerRespawnEvent.RespawnReason.DEATH; // Mohist
                     this.player = this.server.getPlayerList().respawn(this.player, false);
                     if (this.server.isHardcore()) {
                         this.player.setGameMode(GameType.SPECTATOR);
-                        this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS).set(false, this.server);
+                        this.player.level().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS).set(false, this.player.serverLevel()); // CraftBukkit - per-world
                     }
                 }
                 break;
@@ -1577,15 +_,18 @@
     @Override
     public void handleContainerClose(ServerboundContainerClosePacket p_9858_) {
         PacketUtils.ensureRunningOnSameThread(p_9858_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.player.doCloseContainer();
     }
 
     @Override
     public void handleContainerClick(ServerboundContainerClickPacket p_9856_) {
         PacketUtils.ensureRunningOnSameThread(p_9856_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
-        if (this.player.containerMenu.containerId == p_9856_.getContainerId()) {
-            if (this.player.isSpectator()) {
+        if (this.player.containerMenu.containerId == p_9856_.getContainerId() && this.player.containerMenu.stillValid(this.player)) { // CraftBukkit
+            boolean cancelled = this.player.isSpectator(); // CraftBukkit - see below if
+            if (false/*this.player.isSpectator()*/) { // CraftBukkit
                 this.player.containerMenu.sendAllDataToRemote();
             } else if (!this.player.containerMenu.stillValid(this.player)) {
                 LOGGER.debug("Player {} interacted with invalid menu {}", this.player, this.player.containerMenu);
@@ -1598,9 +_,282 @@
                 } else {
                     boolean flag = p_9856_.getStateId() != this.player.containerMenu.getStateId();
                     this.player.containerMenu.suppressRemoteUpdates();
-                    this.player.containerMenu.clicked(i, p_9856_.getButtonNum(), p_9856_.getClickType(), this.player);
-
-                    for (Entry<ItemStack> entry : Int2ObjectMaps.fastIterable(p_9856_.getChangedSlots())) {
+
+                    // CraftBukkit start - Call InventoryClickEvent
+                    if (p_9856_.getSlotNum() < -1 && p_9856_.getSlotNum() != -999) {
+                        return;
+                    }
+
+                    InventoryView inventoryView = this.player.containerMenu.getBukkitView();
+                    if (inventoryView == null) {
+                        org.bukkit.inventory.Inventory inventory = new CraftInventory(new MohistModsInventory(this.player.containerMenu, this.player));
+                        InventoryView newView = new CraftInventoryView(this.player.getBukkitEntity(), inventory, this.player.containerMenu);
+                        inventoryView = newView;
+                        this.player.containerMenu.bukkitView = newView;
+                    }
+                    InventoryType.SlotType type = inventoryView.getSlotType(p_9856_.getSlotNum());
+
+                    InventoryClickEvent event;
+                    ClickType click = ClickType.UNKNOWN;
+                    InventoryAction action = InventoryAction.UNKNOWN;
+
+                    ItemStack itemstack = ItemStack.EMPTY;
+
+                    switch (p_9856_.getClickType()) {
+                        case PICKUP:
+                            if (p_9856_.getButtonNum() == 0) {
+                                click = ClickType.LEFT;
+                            } else if (p_9856_.getButtonNum() == 1) {
+                                click = ClickType.RIGHT;
+                            }
+                            if (p_9856_.getButtonNum() == 0 || p_9856_.getButtonNum() == 1) {
+                                action = InventoryAction.NOTHING; // Don't want to repeat ourselves
+                                if (p_9856_.getSlotNum() == -999) {
+                                    if (!player.containerMenu.getCarried().isEmpty()) {
+                                        action = p_9856_.getButtonNum() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
+                                    }
+                                } else if (p_9856_.getSlotNum() < 0) {
+                                    action = InventoryAction.NOTHING;
+                                } else {
+                                    Slot slot = this.player.containerMenu.getSlot(p_9856_.getSlotNum());
+                                    if (slot != null) {
+                                        ItemStack clickedItem = slot.getItem();
+                                        ItemStack cursor = player.containerMenu.getCarried();
+                                        if (clickedItem.isEmpty()) {
+                                            if (!cursor.isEmpty()) {
+                                                action = p_9856_.getButtonNum() == 0 ? InventoryAction.PLACE_ALL : InventoryAction.PLACE_ONE;
+                                            }
+                                        } else if (slot.mayPickup(player)) {
+                                            if (cursor.isEmpty()) {
+                                                action = p_9856_.getButtonNum() == 0 ? InventoryAction.PICKUP_ALL : InventoryAction.PICKUP_HALF;
+                                            } else if (slot.mayPlace(cursor)) {
+                                                if (ItemStack.isSameItemSameComponents(clickedItem, cursor)) {
+                                                    int toPlace = p_9856_.getButtonNum() == 0 ? cursor.getCount() : 1;
+                                                    toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
+                                                    toPlace = Math.min(toPlace, slot.container.getMaxStackSize() - clickedItem.getCount());
+                                                    if (toPlace == 1) {
+                                                        action = InventoryAction.PLACE_ONE;
+                                                    } else if (toPlace == cursor.getCount()) {
+                                                        action = InventoryAction.PLACE_ALL;
+                                                    } else if (toPlace < 0) {
+                                                        action = toPlace != -1 ? InventoryAction.PICKUP_SOME : InventoryAction.PICKUP_ONE; // this happens with oversized stacks
+                                                    } else if (toPlace != 0) {
+                                                        action = InventoryAction.PLACE_SOME;
+                                                    }
+                                                } else if (cursor.getCount() <= slot.getMaxStackSize()) {
+                                                    action = InventoryAction.SWAP_WITH_CURSOR;
+                                                }
+                                            } else if (ItemStack.isSameItemSameComponents(cursor, clickedItem)) {
+                                                if (clickedItem.getCount() >= 0) {
+                                                    if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
+                                                        // As of 1.5, this is result slots only
+                                                        action = InventoryAction.PICKUP_ALL;
+                                                    }
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                            break;
+                        // TODO check on updates
+                        case QUICK_MOVE:
+                            if (p_9856_.getButtonNum() == 0) {
+                                click = ClickType.SHIFT_LEFT;
+                            } else if (p_9856_.getButtonNum() == 1) {
+                                click = ClickType.SHIFT_RIGHT;
+                            }
+                            if (p_9856_.getButtonNum() == 0 || p_9856_.getButtonNum() == 1) {
+                                if (p_9856_.getSlotNum() < 0) {
+                                    action = InventoryAction.NOTHING;
+                                } else {
+                                    Slot slot = this.player.containerMenu.getSlot(p_9856_.getSlotNum());
+                                    if (slot != null && slot.mayPickup(this.player) && slot.hasItem()) {
+                                        action = InventoryAction.MOVE_TO_OTHER_INVENTORY;
+                                    } else {
+                                        action = InventoryAction.NOTHING;
+                                    }
+                                }
+                            }
+                            break;
+                        case SWAP:
+                            if ((p_9856_.getButtonNum() >= 0 && p_9856_.getButtonNum() < 9) || p_9856_.getButtonNum() == 40) {
+                                click = (p_9856_.getButtonNum() == 40) ? ClickType.SWAP_OFFHAND : ClickType.NUMBER_KEY;
+                                Slot clickedSlot = this.player.containerMenu.getSlot(p_9856_.getSlotNum());
+                                if (clickedSlot.mayPickup(player)) {
+                                    ItemStack hotbar = this.player.getInventory().getItem(p_9856_.getButtonNum());
+                                    boolean canCleanSwap = hotbar.isEmpty() || (clickedSlot.container == player.getInventory() && clickedSlot.mayPlace(hotbar)); // the slot will accept the hotbar item
+                                    if (clickedSlot.hasItem()) {
+                                        if (canCleanSwap) {
+                                            action = InventoryAction.HOTBAR_SWAP;
+                                        } else {
+                                            action = InventoryAction.HOTBAR_MOVE_AND_READD;
+                                        }
+                                    } else if (!clickedSlot.hasItem() && !hotbar.isEmpty() && clickedSlot.mayPlace(hotbar)) {
+                                        action = InventoryAction.HOTBAR_SWAP;
+                                    } else {
+                                        action = InventoryAction.NOTHING;
+                                    }
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                            break;
+                        case CLONE:
+                            if (p_9856_.getButtonNum() == 2) {
+                                click = ClickType.MIDDLE;
+                                if (p_9856_.getSlotNum() < 0) {
+                                    action = InventoryAction.NOTHING;
+                                } else {
+                                    Slot slot = this.player.containerMenu.getSlot(p_9856_.getSlotNum());
+                                    if (slot != null && slot.hasItem() && player.getAbilities().instabuild && player.containerMenu.getCarried().isEmpty()) {
+                                        action = InventoryAction.CLONE_STACK;
+                                    } else {
+                                        action = InventoryAction.NOTHING;
+                                    }
+                                }
+                            } else {
+                                click = ClickType.UNKNOWN;
+                                action = InventoryAction.UNKNOWN;
+                            }
+                            break;
+                        case THROW:
+                            if (p_9856_.getSlotNum() >= 0) {
+                                if (p_9856_.getButtonNum() == 0) {
+                                    click = ClickType.DROP;
+                                    Slot slot = this.player.containerMenu.getSlot(p_9856_.getSlotNum());
+                                    if (slot != null && slot.hasItem() && slot.mayPickup(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.byBlock(Blocks.AIR)) {
+                                        action = InventoryAction.DROP_ONE_SLOT;
+                                    } else {
+                                        action = InventoryAction.NOTHING;
+                                    }
+                                } else if (p_9856_.getButtonNum() == 1) {
+                                    click = ClickType.CONTROL_DROP;
+                                    Slot slot = this.player.containerMenu.getSlot(p_9856_.getSlotNum());
+                                    if (slot != null && slot.hasItem() && slot.mayPickup(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.byBlock(Blocks.AIR)) {
+                                        action = InventoryAction.DROP_ALL_SLOT;
+                                    } else {
+                                        action = InventoryAction.NOTHING;
+                                    }
+                                }
+                            } else {
+                                // Sane default (because this happens when they are holding nothing. Don't ask why.)
+                                click = ClickType.LEFT;
+                                if (p_9856_.getButtonNum() == 1) {
+                                    click = ClickType.RIGHT;
+                                }
+                                action = InventoryAction.NOTHING;
+                            }
+                            break;
+                        case QUICK_CRAFT:
+                            this.player.containerMenu.clicked(p_9856_.getSlotNum(), p_9856_.getButtonNum(), p_9856_.getClickType(), this.player);
+                            break;
+                        case PICKUP_ALL:
+                            click = ClickType.DOUBLE_CLICK;
+                            action = InventoryAction.NOTHING;
+                            if (p_9856_.getSlotNum() >= 0 && !this.player.containerMenu.getCarried().isEmpty()) {
+                                ItemStack cursor = this.player.containerMenu.getCarried();
+                                action = InventoryAction.NOTHING;
+                                // Quick check for if we have any of the item
+                                if (inventoryView.getTopInventory().contains(CraftItemType.minecraftToBukkit(cursor.getItem())) || inventoryView.getBottomInventory().contains(CraftItemType.minecraftToBukkit(cursor.getItem()))) {
+                                    action = InventoryAction.COLLECT_TO_CURSOR;
+                                }
+                            }
+                            break;
+                        default:
+                            break;
+                    }
+
+                    if (p_9856_.getClickType() != net.minecraft.world.inventory.ClickType.QUICK_CRAFT) {
+                        if (click == ClickType.NUMBER_KEY) {
+                            event = new InventoryClickEvent(inventoryView, type, p_9856_.getSlotNum(), click, action, p_9856_.getButtonNum());
+                        } else {
+                            event = new InventoryClickEvent(inventoryView, type, p_9856_.getSlotNum(), click, action);
+                        }
+
+                        org.bukkit.inventory.Inventory top = inventoryView.getTopInventory();
+                        if (p_9856_.getSlotNum() == 0 && top instanceof CraftingInventory) {
+                            org.bukkit.inventory.Recipe recipe = ((CraftingInventory) top).getRecipe();
+                            if (recipe != null) {
+                                if (click == ClickType.NUMBER_KEY) {
+                                    event = new CraftItemEvent(recipe, inventoryView, type, p_9856_.getSlotNum(), click, action, p_9856_.getButtonNum());
+                                } else {
+                                    event = new CraftItemEvent(recipe, inventoryView, type, p_9856_.getSlotNum(), click, action);
+                                }
+                            }
+                        }
+
+                        if (p_9856_.getSlotNum() == 3 && top instanceof SmithingInventory) {
+                            org.bukkit.inventory.ItemStack result = ((SmithingInventory) top).getResult();
+                            if (result != null) {
+                                if (click == ClickType.NUMBER_KEY) {
+                                    event = new SmithItemEvent(inventoryView, type, p_9856_.getSlotNum(), click, action, p_9856_.getButtonNum());
+                                } else {
+                                    event = new SmithItemEvent(inventoryView, type, p_9856_.getSlotNum(), click, action);
+                                }
+                            }
+                        }
+
+                        event.setCancelled(cancelled);
+                        AbstractContainerMenu oldContainer = this.player.containerMenu; // SPIGOT-1224
+                        cserver.getPluginManager().callEvent(event);
+                        if (this.player.containerMenu != oldContainer) {
+                            return;
+                        }
+
+                        switch (event.getResult()) {
+                            case ALLOW:
+                            case DEFAULT:
+                                this.player.containerMenu.clicked(i, p_9856_.getButtonNum(), p_9856_.getClickType(), this.player);
+                                break;
+                            case DENY:
+                                switch (action) {
+                                    // Modified other slots
+                                    case PICKUP_ALL:
+                                    case MOVE_TO_OTHER_INVENTORY:
+                                    case HOTBAR_MOVE_AND_READD:
+                                    case HOTBAR_SWAP:
+                                    case COLLECT_TO_CURSOR:
+                                    case UNKNOWN:
+                                        this.player.containerMenu.sendAllDataToRemote();
+                                        break;
+                                    // Modified cursor and clicked
+                                    case PICKUP_SOME:
+                                    case PICKUP_HALF:
+                                    case PICKUP_ONE:
+                                    case PLACE_ALL:
+                                    case PLACE_SOME:
+                                    case PLACE_ONE:
+                                    case SWAP_WITH_CURSOR:
+                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.player.inventoryMenu.incrementStateId(), this.player.containerMenu.getCarried()));
+                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.containerMenu.containerId, this.player.inventoryMenu.incrementStateId(), p_9856_.getSlotNum(), this.player.containerMenu.getSlot(p_9856_.getSlotNum()).getItem()));
+                                        break;
+                                    // Modified clicked only
+                                    case DROP_ALL_SLOT:
+                                    case DROP_ONE_SLOT:
+                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.containerMenu.containerId, this.player.inventoryMenu.incrementStateId(), p_9856_.getSlotNum(), this.player.containerMenu.getSlot(p_9856_.getSlotNum()).getItem()));
+                                        break;
+                                    // Modified cursor only
+                                    case DROP_ALL_CURSOR:
+                                    case DROP_ONE_CURSOR:
+                                    case CLONE_STACK:
+                                        this.player.connection.send(new ClientboundContainerSetSlotPacket(-1, -1, this.player.inventoryMenu.incrementStateId(), this.player.containerMenu.getCarried()));
+                                        break;
+                                    // Nothing
+                                    case NOTHING:
+                                        break;
+                                }
+                        }
+
+                        if (event instanceof CraftItemEvent || event instanceof SmithItemEvent) {
+                            // Need to update the inventory on crafting to
+                            // correctly support custom recipes
+                            player.containerMenu.sendAllDataToRemote();
+                        }
+                    }
+                    // CraftBukkit end
+
+                    for (Int2ObjectMap.Entry<ItemStack> entry : Int2ObjectMaps.fastIterable(p_9856_.getChangedSlots())) {
                         this.player.containerMenu.setRemoteSlotNoCopy(entry.getIntKey(), entry.getValue());
                     }
 
@@ -1611,6 +_,7 @@
                     } else {
                         this.player.containerMenu.broadcastChanges();
                     }
+
                 }
             }
         }
@@ -1624,10 +_,17 @@
             if (!this.player.containerMenu.stillValid(this.player)) {
                 LOGGER.debug("Player {} interacted with invalid menu {}", this.player, this.player.containerMenu);
             } else {
-                this.server
-                    .getRecipeManager()
-                    .byKey(p_9882_.getRecipe())
-                    .ifPresent(p_296595_ -> ((RecipeBookMenu)this.player.containerMenu).handlePlacement(p_9882_.isShiftDown(), (RecipeHolder<?>)p_296595_, this.player));
+                // CraftBukkit start - implement PlayerRecipeBookClickEvent
+                org.bukkit.inventory.Recipe recipe = this.cserver.getRecipe(CraftNamespacedKey.fromMinecraft(p_9882_.getRecipe()));
+                if (recipe == null) {
+                    return;
+                }
+                org.bukkit.event.player.PlayerRecipeBookClickEvent event = CraftEventFactory.callRecipeBookClickEvent(this.player, recipe, p_9882_.isShiftDown());
+
+                // Cast to keyed should be safe as the recipe will never be a MerchantRecipe.
+                this.server.getRecipeManager().byKey(CraftNamespacedKey.toMinecraft(((org.bukkit.Keyed) event.getRecipe()).getKey())).ifPresent((irecipe) -> {
+                    ((RecipeBookMenu) this.player.containerMenu).handlePlacement(event.isShiftClick(), irecipe, this.player);
+                });
             }
         }
     }
@@ -1635,6 +_,7 @@
     @Override
     public void handleContainerButtonClick(ServerboundContainerButtonClickPacket p_9854_) {
         PacketUtils.ensureRunningOnSameThread(p_9854_, this, this.player.serverLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         if (this.player.containerMenu.containerId == p_9854_.containerId() && !this.player.isSpectator()) {
             if (!this.player.containerMenu.stillValid(this.player)) {
@@ -1671,6 +_,43 @@
 
             boolean flag1 = p_9915_.slotNum() >= 1 && p_9915_.slotNum() <= 45;
             boolean flag2 = itemstack.isEmpty() || itemstack.getCount() <= itemstack.getMaxStackSize();
+            if (flag || (flag1 && !ItemStack.matches(this.player.inventoryMenu.getSlot(p_9915_.slotNum()).getItem(), p_9915_.itemStack()))) { // Insist on valid slot
+                // CraftBukkit start - Call click event
+                InventoryView inventory = this.player.inventoryMenu.getBukkitView();
+                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(p_9915_.itemStack());
+
+                InventoryType.SlotType type = InventoryType.SlotType.QUICKBAR;
+                if (flag) {
+                    type = InventoryType.SlotType.OUTSIDE;
+                } else if (p_9915_.slotNum() < 36) {
+                    if (p_9915_.slotNum() >= 5 && p_9915_.slotNum() < 9) {
+                        type = InventoryType.SlotType.ARMOR;
+                    } else {
+                        type = InventoryType.SlotType.CONTAINER;
+                    }
+                }
+                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type, flag ? -999 : p_9915_.slotNum(), item);
+                cserver.getPluginManager().callEvent(event);
+
+                itemstack = CraftItemStack.asNMSCopy(event.getCursor());
+
+                switch (event.getResult()) {
+                    case ALLOW:
+                        // Plugin cleared the id / stacksize checks
+                        flag2 = true;
+                        break;
+                    case DEFAULT:
+                        break;
+                    case DENY:
+                        // Reset the slot
+                        if (p_9915_.slotNum() >= 0) {
+                            this.player.connection.send(new ClientboundContainerSetSlotPacket(this.player.inventoryMenu.containerId, this.player.inventoryMenu.incrementStateId(), p_9915_.slotNum(), this.player.inventoryMenu.getSlot(p_9915_.slotNum()).getItem()));
+                            this.player.connection.send(new ClientboundContainerSetSlotPacket(-1, this.player.inventoryMenu.incrementStateId(), -1, ItemStack.EMPTY));
+                        }
+                        return;
+                }
+            }
+            // CraftBukkit end
             if (flag1 && flag2) {
                 this.player.inventoryMenu.getSlot(p_9915_.slotNum()).setByPlayer(itemstack);
                 this.player.inventoryMenu.broadcastChanges();
@@ -1679,6 +_,7 @@
                 this.player.drop(itemstack, true);
             }
         }
+
     }
 
     @Override
@@ -1688,6 +_,7 @@
     }
 
     private void updateSignText(ServerboundSignUpdatePacket p_9923_, List<FilteredText> p_9924_) {
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.player.resetLastActionTime();
         ServerLevel serverlevel = this.player.serverLevel();
         BlockPos blockpos = p_9923_.getPos();
@@ -1703,7 +_,17 @@
     @Override
     public void handlePlayerAbilities(ServerboundPlayerAbilitiesPacket p_9887_) {
         PacketUtils.ensureRunningOnSameThread(p_9887_, this, this.player.serverLevel());
-        this.player.getAbilities().flying = p_9887_.isFlying() && this.player.getAbilities().mayfly;
+        // CraftBukkit start
+        if (this.player.getAbilities().mayfly && this.player.getAbilities().flying != p_9887_.isFlying()) {
+            PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.player.getBukkitEntity(), p_9887_.isFlying());
+            this.cserver.getPluginManager().callEvent(event);
+            if (!event.isCancelled()) {
+                this.player.getAbilities().flying = p_9887_.isFlying(); // Actually set the player's flying status
+            } else {
+                this.player.onUpdateAbilities(); // Tell the player their ability was reverted
+            }
+        }
+        // CraftBukkit end
     }
 
     @Override
@@ -1762,7 +_,7 @@
             this.connection
                 .setupInboundProtocol(
                     ConfigurationProtocols.SERVERBOUND,
-                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation()))
+                    new ServerConfigurationPacketListenerImpl(this.server, this.connection, this.createCookie(this.player.clientInformation()), this.player)
                 );
         }
     }
@@ -1783,20 +_,21 @@
         this.chatSession = p_253823_;
         this.signedMessageDecoder = p_253823_.createMessageDecoder(this.player.getUUID());
         this.chatMessageChain
-            .append(
-                () -> {
-                    this.player.setChatSession(p_253823_);
-                    this.server
-                        .getPlayerList()
-                        .broadcastAll(
-                            new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT), List.of(this.player))
-                        );
-                }
-            );
+                .append(
+                        () -> {
+                            this.player.setChatSession(p_253823_);
+                            this.server
+                                    .getPlayerList()
+                                    .broadcastAll(
+                                            new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT), List.of(this.player))
+                                    );
+                        }
+                );
     }
 
     @Override
     public void handleCustomPayload(ServerboundCustomPayloadPacket p_329963_) {
+        net.minecraftforge.common.ForgeHooks.onCustomPayload(p_329963_.payload(), this.connection);
     }
 
     @Override
@@ -1808,4 +_,113 @@
     interface EntityInteraction {
         InteractionResult run(ServerPlayer p_143695_, Entity p_143696_, InteractionHand p_143697_);
     }
+
+    private void handleCommand(String s) {
+        if (org.spigotmc.SpigotConfig.logCommands) // Spigot
+            LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
+
+        CraftPlayer player = this.getCraftPlayer();
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(server));
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        try {
+            if (this.cserver.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
+                return;
+            }
+        } catch (org.bukkit.command.CommandException ex) {
+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(ServerGamePacketListenerImpl.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            return;
+        }
+    }
+    // CraftBukkit end
+
+    // CraftBukkit start - add method
+    public void chat(String s, PlayerChatMessage original, boolean async) {
+        if (s.isEmpty() || this.player.getChatVisibility() == ChatVisiblity.HIDDEN) {
+            return;
+        }
+        OutgoingChatMessage outgoing = OutgoingChatMessage.create(original);
+
+        if (!async && s.startsWith("/")) {
+            this.handleCommand(s);
+        } else if (this.player.getChatVisibility() == ChatVisiblity.SYSTEM) {
+            // Do nothing, this is coming from a plugin
+        } else {
+            org.bukkit.entity.Player player = this.getCraftPlayer();
+            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(server));
+            String originalFormat = event.getFormat(), originalMessage = event.getMessage();
+            Bukkit.getPluginManager().callEvent(event);
+
+            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                // Evil plugins still listening to deprecated event
+                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                queueEvent.setCancelled(event.isCancelled());
+                Waitable waitable = new Waitable() {
+                    @Override
+                    protected Object evaluate() {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+                        if (queueEvent.isCancelled()) {
+                            return null;
+                        }
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
+                            if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) {
+                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                                return null;
+                            }
+
+                            for (ServerPlayer recipient : ServerGamePacketListenerImpl.this.server.getPlayerList().players) {
+                                recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), message);
+                            }
+                        } else {
+                            for (org.bukkit.entity.Player player : queueEvent.getRecipients()) {
+                                player.sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), message);
+                            }
+                        }
+                        ServerGamePacketListenerImpl.this.server.console.sendMessage(message);
+
+                        return null;
+                    }
+                };
+                if (async) {
+                    server.processQueue.add(waitable);
+                } else {
+                    waitable.run();
+                }
+                try {
+                    waitable.get();
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                } catch (ExecutionException e) {
+                    throw new RuntimeException("Exception processing chat event", e.getCause());
+                }
+            } else {
+                if (event.isCancelled()) {
+                    return;
+                }
+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+                if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
+                    if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) {
+                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                        return;
+                    }
+                    for (ServerPlayer recipient : server.getPlayerList().players) {
+                        recipient.getBukkitEntity().sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), s);
+                    }
+                } else {
+                    for (org.bukkit.entity.Player recipient : event.getRecipients()) {
+                        recipient.sendMessage(ServerGamePacketListenerImpl.this.player.getUUID(), s);
+                    }
+                }
+                server.console.sendMessage(s);
+            }
+        }
+    }
+    // CraftBukkit end
 }
