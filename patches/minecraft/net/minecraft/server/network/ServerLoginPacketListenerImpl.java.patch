--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -32,6 +_,7 @@
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.network.protocol.login.ServerboundLoginAcknowledgedPacket;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
@@ -46,7 +_,7 @@
    private static final Component DISCONNECT_UNEXPECTED_QUERY = Component.translatable("multiplayer.disconnect.unexpected_query_response");
    private final byte[] challenge;
    final MinecraftServer server;
-   final Connection connection;
+   public final Connection connection;
    private volatile ServerLoginPacketListenerImpl.State state = ServerLoginPacketListenerImpl.State.HELLO;
    private int tick;
    @Nullable
@@ -55,6 +_,8 @@
    private GameProfile authenticatedProfile;
    private final String serverId = "";
 
+   private ServerPlayer player; // CraftBukkit
+
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.server = p_10027_;
       this.connection = p_10028_;
@@ -80,6 +_,13 @@
       return this.connection.isConnected();
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      disconnect(Component.literal(s));
+   }
+   // CraftBukkit end
+
    public void disconnect(Component p_10054_) {
       try {
          LOGGER.info("Disconnecting {}: {}", this.getUserName(), p_10054_.getString());
@@ -129,9 +_,9 @@
 
    private void verifyLoginAndFinishConnectionSetup(GameProfile p_299507_) {
       PlayerList playerlist = this.server.getPlayerList();
-      Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), p_299507_);
-      if (component != null) {
-         this.disconnect(component);
+      this.player = playerlist.canPlayerLogin(this, p_299507_);
+      if (this.player == null) {
+         // this.disconnect(component);
       } else {
          if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
             this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), PacketSendListener.thenRun(() -> {
@@ -180,7 +_,7 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
          public void run() {
             String s1 = Objects.requireNonNull(ServerLoginPacketListenerImpl.this.requestedUsername, "Player name not initialized");
 
@@ -220,16 +_,22 @@
    }
 
    public void handleCustomQueryPacket(ServerboundCustomQueryAnswerPacket p_297965_) {
+      if (!net.minecraftforge.common.ForgeHooks.onCustomPayload(p_297965_, this.connection))
       this.disconnect(DISCONNECT_UNEXPECTED_QUERY);
    }
 
    public void handleLoginAcknowledgement(ServerboundLoginAcknowledgedPacket p_298815_) {
       Validate.validState(this.state == ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING, "Unexpected login acknowledgement packet");
       CommonListenerCookie commonlistenercookie = CommonListenerCookie.createInitial(Objects.requireNonNull(this.authenticatedProfile));
-      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.server, this.connection, commonlistenercookie);
+      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.server, this.connection, commonlistenercookie, this.player);
       this.connection.setListener(serverconfigurationpacketlistenerimpl);
       serverconfigurationpacketlistenerimpl.startConfiguration();
       this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
+   }
+
+   @Nullable
+   public GameProfile getAuthenticatedProfile() {
+       return this.authenticatedProfile;
    }
 
    protected static GameProfile createOfflineProfile(String p_297551_) {
