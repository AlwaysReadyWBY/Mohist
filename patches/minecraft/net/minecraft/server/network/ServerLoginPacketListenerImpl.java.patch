--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -1,6 +_,7 @@
 package net.minecraft.server.network;
 
 import com.google.common.primitives.Ints;
+import com.mohistmc.mohist.MohistConfig;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import com.mojang.authlib.yggdrasil.ProfileResult;
@@ -32,12 +_,15 @@
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.network.protocol.login.ServerboundLoginAcknowledgedPacket;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.player.Player;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.v1_20_R3.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 import org.slf4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
@@ -47,7 +_,7 @@
    private static final Component DISCONNECT_UNEXPECTED_QUERY = Component.translatable("multiplayer.disconnect.unexpected_query_response");
    private final byte[] challenge;
    final MinecraftServer server;
-   final Connection connection;
+   public final Connection connection;
    private volatile ServerLoginPacketListenerImpl.State state = ServerLoginPacketListenerImpl.State.HELLO;
    private int tick;
    @Nullable
@@ -56,6 +_,9 @@
    private GameProfile authenticatedProfile;
    private final String serverId = "";
 
+   private ServerPlayer player; // CraftBukkit
+   private int velocityLoginMessageId = -1; // Paper - Velocity support
+
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.server = p_10027_;
       this.connection = p_10028_;
@@ -81,6 +_,13 @@
       return this.connection.isConnected();
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      disconnect(Component.literal(s));
+   }
+   // CraftBukkit end
+
    public void disconnect(Component p_10054_) {
       try {
          LOGGER.info("Disconnecting {}: {}", this.getUserName(), p_10054_.getString());
@@ -107,7 +_,7 @@
 
    public void handleHello(ServerboundHelloPacket p_10047_) {
       Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
-      Validate.validState(Player.isValidUsername(p_10047_.name()), "Invalid characters in username");
+      // Validate.validState(Player.isValidUsername(p_10047_.name()), "Invalid characters in username"); // Mohist Chinese and other special characters are allowed
       this.requestedUsername = p_10047_.name();
       GameProfile gameprofile = this.server.getSingleplayerProfile();
       if (gameprofile != null && this.requestedUsername.equalsIgnoreCase(gameprofile.getName())) {
@@ -117,7 +_,29 @@
             this.state = ServerLoginPacketListenerImpl.State.KEY;
             this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge));
          } else {
-            this.startClientVerification(UUIDUtil.createOfflineProfile(this.requestedUsername));
+            // Paper start - Velocity support
+            if (MohistConfig.velocity_enabled) {
+               this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+               net.minecraft.network.FriendlyByteBuf buf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+               buf.writeByte(com.destroystokyo.paper.proxy.VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+               net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket.PlayerInfoChannelPayload(com.destroystokyo.paper.proxy.VelocityProxy.PLAYER_INFO_CHANNEL, buf));
+               this.connection.send(packet1);
+               return;
+            }
+            // Paper end
+            // Spigot start
+            authenticatorPool.execute(() -> {
+               try {
+                  GameProfile gameprofile0 = UUIDUtil.createOfflineProfile(ServerLoginPacketListenerImpl.this.requestedUsername);
+                  ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(gameprofile0);
+                  LOGGER.info("UUID of player {} is {}", gameprofile0.getName(), gameprofile0.getId());
+                  ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile0);
+               } catch (Exception ex) {
+                  disconnect("Failed to verify username!");
+                  server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.requestedUsername, ex);
+               }
+            });
+            // Spigot end
          }
 
       }
@@ -131,6 +_,7 @@
    private void verifyLoginAndFinishConnectionSetup(GameProfile p_299507_) {
       PlayerList playerlist = this.server.getPlayerList();
       Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), p_299507_);
+      this.player = playerlist.entity.get(); // Mohist
       if (component != null) {
          this.disconnect(component);
       } else {
@@ -140,7 +_,7 @@
             }));
          }
 
-         boolean flag = playerlist.disconnectAllPlayersWithProfile(p_299507_);
+         boolean flag = playerlist.disconnectAllPlayersWithProfile(p_299507_, this.player);
          if (flag) {
             this.state = ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT;
          } else {
@@ -175,7 +_,7 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
          public void run() {
             String s1 = Objects.requireNonNull(ServerLoginPacketListenerImpl.this.requestedUsername, "Player name not initialized");
 
@@ -183,6 +_,13 @@
                ProfileResult profileresult = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(s1, s, this.getAddress());
                if (profileresult != null) {
                   GameProfile gameprofile = profileresult.profile();
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!connection.isConnected()) {
+                     return;
+                  }
+
+                  ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(gameprofile);
+                  // CraftBukkit end
                   ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
                   ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
                } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
@@ -200,6 +_,11 @@
                   ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + s1, exception);
+               // CraftBukkit end
             }
 
          }
@@ -214,18 +_,112 @@
       thread.start();
    }
 
+   // CraftBukkit start
+   public void callPlayerPreLoginEvents(GameProfile gameprofile) throws Exception {
+      // Paper start - Velocity support
+      if (ServerLoginPacketListenerImpl.this.velocityLoginMessageId == -1 && MohistConfig.velocity_enabled) {
+         disconnect("This server requires you to connect with Velocity.");
+         return;
+      }
+      // Paper end
+      String playerName = gameprofile.getName();
+      java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
+      java.util.UUID uniqueId = gameprofile.getId();
+      final org.bukkit.craftbukkit.v1_20_R3.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+
+      AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+      server.getPluginManager().callEvent(asyncEvent);
+
+      if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+         final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+         if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+            event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+         }
+         Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+            @Override
+            protected PlayerPreLoginEvent.Result evaluate() {
+               server.getPluginManager().callEvent(event);
+               return event.getResult();
+            }
+         };
+
+         ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+         if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+            disconnect(event.getKickMessage());
+            return;
+         }
+      } else {
+         if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+            disconnect(asyncEvent.getKickMessage());
+            return;
+         }
+      }
+      // CraftBukkit end
+   }
+
    public void handleCustomQueryPacket(ServerboundCustomQueryAnswerPacket p_297965_) {
+      // Paper start - Velocity support
+      if (MohistConfig.velocity_enabled && p_297965_.transactionId() == this.velocityLoginMessageId) {
+         ServerboundCustomQueryAnswerPacket.QueryAnswerPayload payload = (ServerboundCustomQueryAnswerPacket.QueryAnswerPayload)p_297965_.payload();
+         if (payload == null) {
+            this.disconnect("This server requires you to connect with Velocity.");
+            return;
+         }
+
+         net.minecraft.network.FriendlyByteBuf buf = payload.buffer;
+
+         if (!com.destroystokyo.paper.proxy.VelocityProxy.checkIntegrity(buf)) {
+            this.disconnect("Unable to verify player details");
+            return;
+         }
+
+         int version = buf.readVarInt();
+         if (version > com.destroystokyo.paper.proxy.VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION) {
+            throw new IllegalStateException("Unsupported forwarding version " + version + ", wanted upto " + com.destroystokyo.paper.proxy.VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+         }
+
+         java.net.SocketAddress listening = this.connection.getRemoteAddress();
+         int port = 0;
+         if (listening instanceof java.net.InetSocketAddress) {
+            port = ((java.net.InetSocketAddress) listening).getPort();
+         }
+         this.connection.address = new java.net.InetSocketAddress(com.destroystokyo.paper.proxy.VelocityProxy.readAddress(buf), port);
+
+         this.authenticatedProfile = com.destroystokyo.paper.proxy.VelocityProxy.createProfile(buf);
+
+         //TODO Update handling for lazy sessions, might not even have to do anything?
+
+         // Proceed with login
+         authenticatorPool.execute(() -> {
+            try {
+               ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(this.authenticatedProfile);
+            } catch (Exception ex) {
+               disconnect("Failed to verify username!");
+               server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + this.authenticatedProfile.getName(), ex);
+            }
+         });
+         return;
+      }
+      // Paper end
+      if (!net.minecraftforge.common.ForgeHooks.onCustomPayload(p_297965_, this.connection))
       this.disconnect(DISCONNECT_UNEXPECTED_QUERY);
    }
 
    public void handleLoginAcknowledgement(ServerboundLoginAcknowledgedPacket p_298815_) {
       Validate.validState(this.state == ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING, "Unexpected login acknowledgement packet");
       CommonListenerCookie commonlistenercookie = CommonListenerCookie.createInitial(Objects.requireNonNull(this.authenticatedProfile));
-      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.server, this.connection, commonlistenercookie);
+      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.server, this.connection, commonlistenercookie, this.player);
       this.connection.setListener(serverconfigurationpacketlistenerimpl);
       serverconfigurationpacketlistenerimpl.startConfiguration();
       this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
    }
+
+   @Nullable
+   public GameProfile getAuthenticatedProfile() {
+       return this.authenticatedProfile;
+   }
+
+   private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d").setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER)).build()); // Paper - Cache authenticator threads
 
    public void fillListenerSpecificCrashDetails(CrashReportCategory p_310682_) {
       p_310682_.setDetail("Login phase", () -> {
