--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -1,6 +_,7 @@
 package net.minecraft.server.network;
 
 import com.google.common.primitives.Ints;
+import com.mohistmc.mohist.MohistConfig;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import com.mojang.authlib.yggdrasil.ProfileResult;
@@ -34,12 +_,16 @@
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.network.protocol.login.ServerboundLoginAcknowledgedPacket;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringUtil;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 import org.slf4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
@@ -48,7 +_,7 @@
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
     private final byte[] challenge;
     final MinecraftServer server;
-    final Connection connection;
+   	public final Connection connection;
     private volatile ServerLoginPacketListenerImpl.State state = ServerLoginPacketListenerImpl.State.HELLO;
     private int tick;
     @Nullable
@@ -58,6 +_,9 @@
     private final String serverId = "";
     private final boolean transferred;
 
+    private ServerPlayer player; // CraftBukkit
+    private int velocityLoginMessageId = -1; // Paper - Velocity support
+
     public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_, boolean p_332648_) {
         this.server = p_10027_;
         this.connection = p_10028_;
@@ -85,6 +_,13 @@
         return this.connection.isConnected();
     }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      disconnect(Component.literal(s));
+   }
+   // CraftBukkit end
+
     public void disconnect(Component p_10054_) {
         try {
             LOGGER.info("Disconnecting {}: {}", this.getUserName(), p_10054_.getString());
@@ -112,7 +_,7 @@
     @Override
     public void handleHello(ServerboundHelloPacket p_10047_) {
         Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
-        Validate.validState(StringUtil.isValidPlayerName(p_10047_.name()), "Invalid characters in username");
+      	// Validate.validState(Player.isValidUsername(p_10047_.name()), "Invalid characters in username"); // Mohist Chinese and other special characters are allowed
         this.requestedUsername = p_10047_.name();
         GameProfile gameprofile = this.server.getSingleplayerProfile();
         if (gameprofile != null && this.requestedUsername.equalsIgnoreCase(gameprofile.getName())) {
@@ -122,38 +_,74 @@
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
                 this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge, true));
             } else {
-                this.startClientVerification(UUIDUtil.createOfflineProfile(this.requestedUsername));
-            }
-        }
-    }
+            // Paper start - Velocity support
+            if (MohistConfig.velocity_enabled) {
+               this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+               net.minecraft.network.FriendlyByteBuf buf = new net.minecraft.network.FriendlyByteBuf(io.netty.buffer.Unpooled.buffer());
+               buf.writeByte(com.destroystokyo.paper.proxy.VelocityProxy.MAX_SUPPORTED_FORWARDING_VERSION);
+               net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket.PlayerInfoChannelPayload(com.destroystokyo.paper.proxy.VelocityProxy.PLAYER_INFO_CHANNEL, buf));
+               this.connection.send(packet1);
+               return;
+            }
+            // Paper end
+            // Spigot start
+            authenticatorPool.execute(() -> {
+               try {
+                  GameProfile gameprofile0 = UUIDUtil.createOfflineProfile(ServerLoginPacketListenerImpl.this.requestedUsername);
+                  ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(gameprofile0);
+                  LOGGER.info("UUID of player {} is {}", gameprofile0.getName(), gameprofile0.getId());
+                  ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile0);
+               } catch (Exception ex) {
+                  disconnect("Failed to verify username!");
+                  server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + ServerLoginPacketListenerImpl.this.requestedUsername, ex);
+               }
+            });
+            // Spigot end
+         }
+
+      }
+   }
+
+    // Paper start - Cache authenticator threads
+    private static final AtomicInteger threadId = new AtomicInteger(0);
+    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+            r -> {
+                Thread ret = new Thread(r, "User Authenticator #" + threadId.incrementAndGet());
+
+                ret.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+
+                return ret;
+            }
+    );
+    // Paper end
 
     void startClientVerification(GameProfile p_301095_) {
         this.authenticatedProfile = p_301095_;
         this.state = ServerLoginPacketListenerImpl.State.VERIFYING;
     }
 
-    private void verifyLoginAndFinishConnectionSetup(GameProfile p_299507_) {
-        PlayerList playerlist = this.server.getPlayerList();
-        Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), p_299507_);
-        if (component != null) {
-            this.disconnect(component);
-        } else {
-            if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
-                this.connection
-                    .send(
-                        new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()),
-                        PacketSendListener.thenRun(() -> this.connection.setupCompression(this.server.getCompressionThreshold(), true))
-                    );
-            }
-
-            boolean flag = playerlist.disconnectAllPlayersWithProfile(p_299507_);
-            if (flag) {
-                this.state = ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT;
-            } else {
-                this.finishLoginAndWaitForClient(p_299507_);
-            }
-        }
-    }
+   private void verifyLoginAndFinishConnectionSetup(GameProfile p_299507_) {
+      PlayerList playerlist = this.server.getPlayerList();
+      Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), p_299507_);
+      this.player = playerlist.entity.getAndSet(null); // Mohist
+      if (component != null) {
+         this.disconnect(component);
+      } else {
+         if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
+            this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), PacketSendListener.thenRun(() -> {
+               this.connection.setupCompression(this.server.getCompressionThreshold(), true);
+            }));
+         }
+
+         boolean flag = playerlist.disconnectAllPlayersWithProfile(p_299507_, this.player); // CraftBukkit - add player reference
+         if (flag) {
+            this.state = ServerLoginPacketListenerImpl.State.WAITING_FOR_DUPE_DISCONNECT;
+         } else {
+            this.finishLoginAndWaitForClient(p_299507_);
+         }
+      }
+
+   }
 
     private void finishLoginAndWaitForClient(GameProfile p_300150_) {
         this.state = ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING;
@@ -181,34 +_,47 @@
             throw new IllegalStateException("Protocol error", cryptexception);
         }
 
-        Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+        Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
             @Override
             public void run() {
                 String s1 = Objects.requireNonNull(ServerLoginPacketListenerImpl.this.requestedUsername, "Player name not initialized");
 
                 try {
-                    ProfileResult profileresult = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(s1, s, this.getAddress());
-                    if (profileresult != null) {
-                        GameProfile gameprofile = profileresult.profile();
-                        ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
-                        ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
-                    } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
-                        ServerLoginPacketListenerImpl.LOGGER.warn("Failed to verify username but will let them in anyway!");
-                        ServerLoginPacketListenerImpl.this.startClientVerification(UUIDUtil.createOfflineProfile(s1));
-                    } else {
-                        ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.unverified_username"));
-                        ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", s1);
-                    }
-                } catch (AuthenticationUnavailableException authenticationunavailableexception) {
-                    if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
-                        ServerLoginPacketListenerImpl.LOGGER.warn("Authentication servers are down but will let them in anyway!");
-                        ServerLoginPacketListenerImpl.this.startClientVerification(UUIDUtil.createOfflineProfile(s1));
-                    } else {
-                        ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.authservers_down"));
-                        ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
-                    }
-                }
+               ProfileResult profileresult = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(s1, s, this.getAddress());
+               if (profileresult != null) {
+                  GameProfile gameprofile = profileresult.profile();
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!connection.isConnected()) {
+                     return;
+                  }
+
+                  ServerLoginPacketListenerImpl.this.callPlayerPreLoginEvents(gameprofile);
+                  // CraftBukkit end
+                  ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
+                  ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
+               } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
+                  ServerLoginPacketListenerImpl.LOGGER.warn("Failed to verify username but will let them in anyway!");
+                  ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.this.createOfflineProfile(s1));
+               } else {
+                  ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.unverified_username"));
+                  ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", (Object)s1);
+               }
+            } catch (AuthenticationUnavailableException authenticationunavailableexception) {
+               if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
+                  ServerLoginPacketListenerImpl.LOGGER.warn("Authentication servers are down but will let them in anyway!");
+                  ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.this.createOfflineProfile(s1));
+               } else {
+                  ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.authservers_down"));
+                  ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
+               }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + s1, exception);
+               // CraftBukkit end
             }
+
+         }
 
             @Nullable
             private InetAddress getAddress() {
@@ -222,8 +_,46 @@
         thread.start();
     }
 
+    // CraftBukkit start
+    private void callPlayerPreLoginEvents(GameProfile gameprofile) throws Exception {
+        String playerName = gameprofile.getName();
+        java.net.InetAddress address = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress();
+        java.util.UUID uniqueId = gameprofile.getId();
+        final org.bukkit.craftbukkit.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+
+        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId, this.transferred);
+        server.getPluginManager().callEvent(asyncEvent);
+
+        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                @Override
+                protected PlayerPreLoginEvent.Result evaluate() {
+                    server.getPluginManager().callEvent(event);
+                    return event.getResult();
+                }
+            };
+
+            ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                this.disconnect(event.getKickMessage());
+                return;
+            }
+        } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                this.disconnect(asyncEvent.getKickMessage());
+                return;
+            }
+        }
+    }
+    // CraftBukkit end
+
     @Override
     public void handleCustomQueryPacket(ServerboundCustomQueryAnswerPacket p_297965_) {
+        if (!net.minecraftforge.common.ForgeHooks.onCustomPayload(p_297965_, this.connection))
         this.disconnect(ServerCommonPacketListenerImpl.DISCONNECT_UNEXPECTED_QUERY);
     }
 
@@ -233,8 +_,8 @@
         this.connection.setupOutboundProtocol(ConfigurationProtocols.CLIENTBOUND);
         CommonListenerCookie commonlistenercookie = CommonListenerCookie.createInitial(Objects.requireNonNull(this.authenticatedProfile), this.transferred);
         ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(
-            this.server, this.connection, commonlistenercookie
-        );
+            this.server, this.connection, commonlistenercookie, this.player
+        ); // CraftBukkit
         this.connection.setupInboundProtocol(ConfigurationProtocols.SERVERBOUND, serverconfigurationpacketlistenerimpl);
         serverconfigurationpacketlistenerimpl.startConfiguration();
         this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
@@ -250,14 +_,41 @@
         this.disconnect(ServerCommonPacketListenerImpl.DISCONNECT_UNEXPECTED_QUERY);
     }
 
-    static enum State {
-        HELLO,
-        KEY,
-        AUTHENTICATING,
-        NEGOTIATING,
-        VERIFYING,
-        WAITING_FOR_DUPE_DISCONNECT,
-        PROTOCOL_SWITCHING,
-        ACCEPTED;
+    @Nullable
+    public GameProfile getAuthenticatedProfile() {
+        return this.authenticatedProfile;
     }
+
+
+   // Spigot start
+   protected GameProfile createOfflineProfile(String s) {
+      java.util.UUID uuid;
+      if (connection.spoofedUUID != null) {
+         uuid = connection.spoofedUUID;
+      } else {
+         uuid = UUIDUtil.createOfflinePlayerUUID(s);
+      }
+
+      GameProfile gameProfile = new GameProfile(uuid, s);
+
+      if (connection.spoofedProfile != null) {
+         for (com.mojang.authlib.properties.Property property : connection.spoofedProfile) {
+            if (!ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher(property.name()).matches()) continue;
+            gameProfile.getProperties().put(property.name(), property);
+         }
+      }
+      return gameProfile;
+   }
+   // Spigot end
+
+   static enum State {
+      HELLO,
+      KEY,
+      AUTHENTICATING,
+      NEGOTIATING,
+      VERIFYING,
+      WAITING_FOR_DUPE_DISCONNECT,
+      PROTOCOL_SWITCHING,
+      ACCEPTED;
+   }
 }
