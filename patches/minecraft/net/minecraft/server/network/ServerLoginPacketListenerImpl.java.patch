--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -32,11 +_,15 @@
 import net.minecraft.network.protocol.login.ServerboundKeyPacket;
 import net.minecraft.network.protocol.login.ServerboundLoginAcknowledgedPacket;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.players.PlayerList;
 import net.minecraft.util.Crypt;
 import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.v1_20_R2.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 import org.slf4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
@@ -46,7 +_,7 @@
    private static final Component DISCONNECT_UNEXPECTED_QUERY = Component.translatable("multiplayer.disconnect.unexpected_query_response");
    private final byte[] challenge;
    final MinecraftServer server;
-   final Connection connection;
+   public final Connection connection;
    private volatile ServerLoginPacketListenerImpl.State state = ServerLoginPacketListenerImpl.State.HELLO;
    private int tick;
    @Nullable
@@ -55,6 +_,8 @@
    private GameProfile authenticatedProfile;
    private final String serverId = "";
 
+   private ServerPlayer player; // CraftBukkit
+
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.server = p_10027_;
       this.connection = p_10028_;
@@ -80,6 +_,13 @@
       return this.connection.isConnected();
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      disconnect(Component.literal(s));
+   }
+   // CraftBukkit end
+
    public void disconnect(Component p_10054_) {
       try {
          LOGGER.info("Disconnecting {}: {}", this.getUserName(), p_10054_.getString());
@@ -106,7 +_,7 @@
 
    public void handleHello(ServerboundHelloPacket p_10047_) {
       Validate.validState(this.state == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
-      Validate.validState(isValidUsername(p_10047_.name()), "Invalid characters in username");
+      // Validate.validState(isValidUsername(p_10047_.name()), "Invalid characters in username"); // Mohist Chinese and other special characters are allowed
       this.requestedUsername = p_10047_.name();
       GameProfile gameprofile = this.server.getSingleplayerProfile();
       if (gameprofile != null && this.requestedUsername.equalsIgnoreCase(gameprofile.getName())) {
@@ -129,9 +_,9 @@
 
    private void verifyLoginAndFinishConnectionSetup(GameProfile p_299507_) {
       PlayerList playerlist = this.server.getPlayerList();
-      Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), p_299507_);
-      if (component != null) {
-         this.disconnect(component);
+      this.player = playerlist.canPlayerLogin(this, p_299507_);
+      if (this.player == null) {
+         // this.disconnect(component);
       } else {
          if (this.server.getCompressionThreshold() >= 0 && !this.connection.isMemoryConnection()) {
             this.connection.send(new ClientboundLoginCompressionPacket(this.server.getCompressionThreshold()), PacketSendListener.thenRun(() -> {
@@ -180,7 +_,7 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + UNIQUE_THREAD_ID.incrementAndGet()) {
          public void run() {
             String s1 = Objects.requireNonNull(ServerLoginPacketListenerImpl.this.requestedUsername, "Player name not initialized");
 
@@ -188,11 +_,47 @@
                ProfileResult profileresult = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(s1, s, this.getAddress());
                if (profileresult != null) {
                   GameProfile gameprofile = profileresult.profile();
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!connection.isConnected()) {
+                     return;
+                  }
+
+                  String playerName = gameprofile.getName();
+                  java.net.InetAddress address = ((java.net.InetSocketAddress) connection.getRemoteAddress()).getAddress();
+                  java.util.UUID uniqueId = gameprofile.getId();
+                  final org.bukkit.craftbukkit.v1_20_R2.CraftServer server = ServerLoginPacketListenerImpl.this.server.server;
+
+                  AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+                  server.getPluginManager().callEvent(asyncEvent);
+
+                  if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                     final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                     if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                        event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+                     }
+                     Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                                @Override
+                                protected PlayerPreLoginEvent.Result evaluate() {
+                                   server.getPluginManager().callEvent(event);
+                                   return event.getResult();
+                                }};
+                     ServerLoginPacketListenerImpl.this.server.processQueue.add(waitable);
+                     if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                        disconnect(event.getKickMessage());
+                        return;
+                     }
+                  } else {
+                     if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                        disconnect(asyncEvent.getKickMessage());
+                        return;
+                     }
+                  }
+                  // CraftBukkit end
                   ServerLoginPacketListenerImpl.LOGGER.info("UUID of player {} is {}", gameprofile.getName(), gameprofile.getId());
                   ServerLoginPacketListenerImpl.this.startClientVerification(gameprofile);
                } else if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                   ServerLoginPacketListenerImpl.LOGGER.warn("Failed to verify username but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.createOfflineProfile(s1));
+                  ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.this.createOfflineProfile(s1));
                } else {
                   ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.LOGGER.error("Username '{}' tried to join with an invalid session", (Object)s1);
@@ -200,11 +_,16 @@
             } catch (AuthenticationUnavailableException authenticationunavailableexception) {
                if (ServerLoginPacketListenerImpl.this.server.isSingleplayer()) {
                   ServerLoginPacketListenerImpl.LOGGER.warn("Authentication servers are down but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.createOfflineProfile(s1));
+                  ServerLoginPacketListenerImpl.this.startClientVerification(ServerLoginPacketListenerImpl.this.createOfflineProfile(s1));
                } else {
                   ServerLoginPacketListenerImpl.this.disconnect(Component.translatable("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.LOGGER.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + s1, exception);
+               // CraftBukkit end
             }
 
          }
@@ -220,21 +_,41 @@
    }
 
    public void handleCustomQueryPacket(ServerboundCustomQueryAnswerPacket p_297965_) {
+      if (!net.minecraftforge.common.ForgeHooks.onCustomPayload(p_297965_, this.connection))
       this.disconnect(DISCONNECT_UNEXPECTED_QUERY);
    }
 
    public void handleLoginAcknowledgement(ServerboundLoginAcknowledgedPacket p_298815_) {
       Validate.validState(this.state == ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING, "Unexpected login acknowledgement packet");
       CommonListenerCookie commonlistenercookie = CommonListenerCookie.createInitial(Objects.requireNonNull(this.authenticatedProfile));
-      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.server, this.connection, commonlistenercookie);
+      ServerConfigurationPacketListenerImpl serverconfigurationpacketlistenerimpl = new ServerConfigurationPacketListenerImpl(this.server, this.connection, commonlistenercookie, this.player);
       this.connection.setListener(serverconfigurationpacketlistenerimpl);
       serverconfigurationpacketlistenerimpl.startConfiguration();
       this.state = ServerLoginPacketListenerImpl.State.ACCEPTED;
    }
 
-   protected static GameProfile createOfflineProfile(String p_297551_) {
-      UUID uuid = UUIDUtil.createOfflinePlayerUUID(p_297551_);
-      return new GameProfile(uuid, p_297551_);
+   protected GameProfile createOfflineProfile(String p_297551_) {
+      UUID uuid;
+      if ( connection.spoofedUUID != null )
+      {
+         uuid = connection.spoofedUUID;
+      } else
+      {
+         uuid = UUIDUtil.createOfflinePlayerUUID( p_297551_ );
+      }
+
+      GameProfile gameProfile = new GameProfile( uuid, p_297551_ );
+
+      if (connection.spoofedProfile != null)
+      {
+         for ( com.mojang.authlib.properties.Property property : connection.spoofedProfile )
+         {
+            if ( !ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher( property.name()).matches() ) continue;
+            gameProfile.getProperties().put( property.name(), property );
+         }
+      }
+      return gameProfile;
+      // Spigot end
    }
 
    static enum State {
