--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -1,8 +_,11 @@
 package net.minecraft.server.network;
 
+import com.mohistmc.MohistConfig;
+import com.mohistmc.util.VelocityProxy;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.exceptions.AuthenticationUnavailableException;
 import com.mojang.logging.LogUtils;
+import io.netty.buffer.Unpooled;
 import java.math.BigInteger;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
@@ -17,7 +_,9 @@
 import javax.crypto.SecretKey;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.network.Connection;
+import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TextComponent;
 import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.network.protocol.game.ClientboundDisconnectPacket;
 import net.minecraft.network.protocol.login.ClientboundGameProfilePacket;
@@ -35,6 +_,9 @@
 import net.minecraft.world.entity.player.Player;
 import org.apache.commons.lang3.Validate;
 import org.slf4j.Logger;
+import org.bukkit.craftbukkit.v1_18_R2.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener {
    private static final AtomicInteger f_10014_ = new AtomicInteger(0);
@@ -47,10 +_,13 @@
    ServerLoginPacketListenerImpl.State f_10019_ = ServerLoginPacketListenerImpl.State.HELLO;
    private int f_10020_;
    @Nullable
-   public GameProfile f_10021_;
+   public
+   GameProfile f_10021_;
    private final String f_10022_ = "";
    @Nullable
    private ServerPlayer f_10024_;
+   public String hostname = ""; // CraftBukkit - add field
+   private int velocityLoginMessageId = -1; // Paper - Velocity support
 
    public ServerLoginPacketListenerImpl(MinecraftServer p_10027_, Connection p_10028_) {
       this.f_10018_ = p_10027_;
@@ -59,7 +_,13 @@
    }
 
    public void m_10050_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
+      if (this.f_10019_ == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.network.NetworkHooks.tickNegotiation(this, this.f_10013_, this.f_10024_);
+         if (negotiationComplete)
+            this.f_10019_ = State.READY_TO_ACCEPT;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
          this.m_10055_();
       } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
@@ -80,6 +_,13 @@
       return this.f_10013_;
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      m_10053_(new TextComponent(s)); // Mohist
+   }
+   // CraftBukkit end
+
    public void m_10053_(Component p_10054_) {
       try {
          f_10015_.info("Disconnecting {}: {}", this.m_10056_(), p_10054_.getString());
@@ -91,11 +_,36 @@
 
    }
 
+   // Spigot start
+   public void initUUID() {
+      UUID uuid;
+      if (f_10013_.spoofedUUID != null) {
+         uuid = f_10013_.spoofedUUID;
+      } else {
+         uuid = Player.m_36283_(this.f_10021_.getName());
+      }
+
+      this.f_10021_ = new GameProfile(uuid, this.f_10021_.getName());
+
+      if (f_10013_.spoofedProfile != null) {
+         for (com.mojang.authlib.properties.Property property : f_10013_.spoofedProfile) {
+            if (!ServerHandshakePacketListenerImpl.PROP_PATTERN.matcher(property.getName()).matches()) continue;
+            this.f_10021_.getProperties().put(property.getName(), property);
+         }
+      }
+   }
+   // Spigot end
+
    public void m_10055_() {
-      if (!this.f_10021_.isComplete()) {
-         this.f_10021_ = this.m_10038_(this.f_10021_);
+      // Spigot start - Moved to initUUID
+      /*
+      if (!this.gameProfile.isComplete()) {
+         this.gameProfile = this.createFakeProfile(this.gameProfile);
       }
+       */
+      // Spigot end
 
+      this.f_10018_.m_6846_().mohist$putHandler(this);
       Component component = this.f_10018_.m_6846_().m_6418_(this.f_10013_.m_129523_(), this.f_10021_);
       if (component != null) {
          this.m_10053_(component);
@@ -140,15 +_,49 @@
       return this.f_10021_ != null ? this.f_10021_ + " (" + this.f_10013_.m_129523_() + ")" : String.valueOf((Object)this.f_10013_.m_129523_());
    }
 
+   // Paper start - Cache authenticator threads
+   private static final AtomicInteger threadId = new AtomicInteger(0);
+   private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(
+           r -> {
+              Thread ret = new Thread(r, "User Authenticator #" + threadId.incrementAndGet());
+
+              ret.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_10015_));
+
+              return ret;
+           }
+   );
+   // Paper end
+
    public void m_5990_(ServerboundHelloPacket p_10047_) {
       Validate.validState(this.f_10019_ == ServerLoginPacketListenerImpl.State.HELLO, "Unexpected hello packet");
       this.f_10021_ = p_10047_.m_134849_();
-      Validate.validState(m_203792_(this.f_10021_.getName()), "Invalid characters in username");
+      // Validate.validState(isValidUsername(this.gameProfile.getName()), "Invalid characters in username"); // Mohist Chinese and other special characters are allowed
       if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
          this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
          this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_10017_));
       } else {
-         this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+         // Paper start - Velocity support
+         if (MohistConfig.velocity_enabled) {
+            this.velocityLoginMessageId = java.util.concurrent.ThreadLocalRandom.current().nextInt();
+            net.minecraft.network.protocol.login.ClientboundCustomQueryPacket packet1 = new net.minecraft.network.protocol.login.ClientboundCustomQueryPacket(this.velocityLoginMessageId, VelocityProxy.PLAYER_INFO_CHANNEL, new FriendlyByteBuf(Unpooled.EMPTY_BUFFER));
+            this.f_10013_.m_129512_(packet1);
+            return;
+         }
+         // Paper end
+         // this.state = ServerLoginPacketListenerImpl.State.NEGOTIATING;
+         // Spigot start
+         // Paper start - Cache authenticator threads
+         authenticatorPool.execute(() -> {
+               try {
+                  this.initUUID();
+                  new LoginHandler().fireEvents();
+               } catch (Exception ex) {
+                  disconnect("Failed to verify username!");
+                  f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + f_10021_.getName(), ex);
+               }
+         });
+         // Spigot end
+         // Paper end
       }
 
    }
@@ -179,19 +_,23 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginPacketListenerImpl.this.f_10021_;
 
             try {
                ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.m_10064_());
                if (ServerLoginPacketListenerImpl.this.f_10021_ != null) {
-                  ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!f_10013_.m_129536_()) {
+                     return;
+                  }
+
+                  new LoginHandler().fireEvents();
                } else if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Failed to verify username but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.m_10038_(gameprofile);
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING;
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(new TranslatableComponent("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
@@ -199,12 +_,17 @@
             } catch (AuthenticationUnavailableException authenticationunavailableexception) {
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
-                  ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.m_10038_(gameprofile);
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING;
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(new TranslatableComponent("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+               // CraftBukkit end
             }
 
          }
@@ -220,6 +_,43 @@
    }
 
    public void m_7223_(ServerboundCustomQueryPacket p_10045_) {
+      // Paper start - Velocity support
+      if (MohistConfig.velocity_enabled && p_10045_.m_179824_() == this.velocityLoginMessageId) {
+         net.minecraft.network.FriendlyByteBuf buf = p_10045_.m_179825_();
+         if (buf == null) {
+            this.disconnect("This server requires you to connect with Velocity.");
+            return;
+         }
+
+         if (!VelocityProxy.checkIntegrity(buf)) {
+            this.disconnect("Unable to verify player details");
+            return;
+         }
+
+         java.net.SocketAddress listening = this.f_10013_.m_129523_();
+         int port = 0;
+         if (listening instanceof java.net.InetSocketAddress) {
+            port = ((java.net.InetSocketAddress) listening).getPort();
+         }
+         this.f_10013_.f_129469_ = new java.net.InetSocketAddress(VelocityProxy.readAddress(buf), port);
+
+         this.f_10021_ = VelocityProxy.createProfile(buf);
+
+         //TODO Update handling for lazy sessions, might not even have to do anything?
+
+         // Proceed with login
+         authenticatorPool.execute(() -> {
+            try {
+               new LoginHandler().fireEvents();
+            } catch (Exception ex) {
+               disconnect("Failed to verify username!");
+               f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + f_10021_.getName(), ex);
+            }
+         });
+         return;
+      }
+      // Paper end
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_10045_, this.f_10013_))
       this.m_10053_(new TranslatableComponent("multiplayer.disconnect.unexpected_query_response"));
    }
 
@@ -227,6 +_,53 @@
       UUID uuid = Player.m_36283_(p_10039_.getName());
       return new GameProfile(uuid, p_10039_.getName());
    }
+
+   // Spigot start
+   public class LoginHandler {
+      public void fireEvents() throws Exception {
+         // Paper start - Velocity support
+         if (ServerLoginPacketListenerImpl.this.velocityLoginMessageId == -1 && MohistConfig.velocity_enabled) {
+            disconnect("This server requires you to connect with Velocity.");
+            return;
+         }
+         // Paper end
+         String playerName = f_10021_.getName();
+         java.net.InetAddress address = ((java.net.InetSocketAddress) f_10013_.m_129523_()).getAddress();
+         java.util.UUID uniqueId = f_10021_.getId();
+         final org.bukkit.craftbukkit.v1_18_R2.CraftServer server = ServerLoginPacketListenerImpl.this.f_10018_.server;
+
+         AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+         server.getPluginManager().callEvent(asyncEvent);
+
+         if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+               event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+               @Override
+               protected PlayerPreLoginEvent.Result evaluate() {
+                  server.getPluginManager().callEvent(event);
+                  return event.getResult();
+               }};
+
+            ServerLoginPacketListenerImpl.this.f_10018_.processQueue.add(waitable);
+            if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(event.getKickMessage());
+               return;
+            }
+         } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+               disconnect(asyncEvent.getKickMessage());
+               return;
+            }
+         }
+         // CraftBukkit end
+         ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
+         ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING;
+      }
+   }
+   // Spigot end
 
    static enum State {
       HELLO,
