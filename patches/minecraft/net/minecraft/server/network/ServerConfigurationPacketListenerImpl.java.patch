--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -7,6 +_,8 @@
 import java.util.concurrent.ConcurrentLinkedQueue;
 import javax.annotation.Nullable;
 import net.minecraft.core.LayeredRegistryAccess;
+import net.minecraft.core.RegistryAccess;
+import net.minecraft.core.RegistrySynchronization;
 import net.minecraft.network.Connection;
 import net.minecraft.network.RegistryFriendlyByteBuf;
 import net.minecraft.network.TickablePacketListener;
@@ -14,9 +_,11 @@
 import net.minecraft.network.protocol.PacketUtils;
 import net.minecraft.network.protocol.common.ClientboundCustomPayloadPacket;
 import net.minecraft.network.protocol.common.ClientboundDisconnectPacket;
+import net.minecraft.network.protocol.common.ClientboundUpdateTagsPacket;
 import net.minecraft.network.protocol.common.ServerboundClientInformationPacket;
 import net.minecraft.network.protocol.common.ServerboundResourcePackPacket;
 import net.minecraft.network.protocol.common.custom.BrandPayload;
+import net.minecraft.network.protocol.configuration.ClientboundRegistryDataPacket;
 import net.minecraft.network.protocol.configuration.ClientboundUpdateEnabledFeaturesPacket;
 import net.minecraft.network.protocol.configuration.ServerConfigurationPacketListener;
 import net.minecraft.network.protocol.configuration.ServerboundFinishConfigurationPacket;
@@ -32,12 +_,14 @@
 import net.minecraft.server.packs.PackResources;
 import net.minecraft.server.packs.repository.KnownPack;
 import net.minecraft.server.players.PlayerList;
+import net.minecraft.tags.TagNetworkSerialization;
 import net.minecraft.world.flag.FeatureFlags;
 import org.slf4j.Logger;
 
 public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketListenerImpl implements ServerConfigurationPacketListener, TickablePacketListener {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final Component DISCONNECT_REASON_INVALID_DATA = Component.translatable("multiplayer.disconnect.invalid_player_data");
+    private static final ConfigurationTask.Type VANILLA_START = new ConfigurationTask.Type("vanilla_start");
     private final GameProfile gameProfile;
     private final Queue<ConfigurationTask> configurationTasks = new ConcurrentLinkedQueue<>();
     @Nullable
@@ -45,11 +_,13 @@
     private ClientInformation clientInformation;
     @Nullable
     private SynchronizeRegistriesTask synchronizeRegistriesTask;
+    private final net.minecraftforge.network.config.ConfigurationTaskContext taskContext;
 
-    public ServerConfigurationPacketListenerImpl(MinecraftServer p_301415_, Connection p_298106_, CommonListenerCookie p_301309_) {
-        super(p_301415_, p_298106_, p_301309_);
+    public ServerConfigurationPacketListenerImpl(MinecraftServer p_301415_, Connection p_298106_, CommonListenerCookie p_301309_, ServerPlayer player) { // CraftBukkit
+        super(p_301415_, p_298106_, p_301309_, player); // CraftBukkit
         this.gameProfile = p_301309_.gameProfile();
         this.clientInformation = p_301309_.clientInformation();
+        this.taskContext = new net.minecraftforge.network.config.ConfigurationTaskContext(p_298106_, this::send, this::finishCurrentTask);
     }
 
     @Override
@@ -68,13 +_,18 @@
         return this.connection.isConnected();
     }
 
-    public void startConfiguration() {
+    public void vanillaStart() {
         this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
+        this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
+    }
+
+    public void startConfiguration() {
+        net.minecraftforge.event.ForgeEventFactory.gatherLoginConfigTasks(this.connection, this.configurationTasks::add);
         LayeredRegistryAccess<RegistryLayer> layeredregistryaccess = this.server.registries();
         List<KnownPack> list = this.server.getResourceManager().listPacks().flatMap(p_326454_ -> p_326454_.location().knownPackInfo().stream()).toList();
-        this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
         this.synchronizeRegistriesTask = new SynchronizeRegistriesTask(list, layeredregistryaccess);
         this.configurationTasks.add(this.synchronizeRegistriesTask);
+        this.configurationTasks.add(new net.minecraftforge.network.config.SimpleConfigurationTask(VANILLA_START, this::vanillaStart));
         this.addOptionalTasks();
         this.configurationTasks.add(new JoinWorldTask());
         this.startNextTask();
@@ -126,16 +_,16 @@
                 return;
             }
 
-            Component component = playerlist.canPlayerLogin(this.connection.getRemoteAddress(), this.gameProfile);
+            Component component = null; // CraftBukkit - login checks already completed
             if (component != null) {
                 this.disconnect(component);
                 return;
             }
 
-            ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation);
+            ServerPlayer serverplayer = playerlist.getPlayerForLogin(this.gameProfile, this.clientInformation, this.player); // CraftBukkit
             playerlist.placeNewPlayer(this.connection, serverplayer, this.createCookie(this.clientInformation));
         } catch (Exception exception) {
-            LOGGER.error("Couldn't place player in world", (Throwable)exception);
+            LOGGER.error("Couldn't place player in world", (Throwable) exception);
             this.connection.send(new ClientboundDisconnectPacket(DISCONNECT_REASON_INVALID_DATA));
             this.connection.disconnect(DISCONNECT_REASON_INVALID_DATA);
         }
@@ -153,7 +_,7 @@
             ConfigurationTask configurationtask = this.configurationTasks.poll();
             if (configurationtask != null) {
                 this.currentTask = configurationtask;
-                configurationtask.start(this::send);
+                configurationtask.start(this.taskContext);
             }
         }
     }
