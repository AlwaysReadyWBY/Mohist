--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -2,7 +_,10 @@
 
 import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
+import java.nio.charset.StandardCharsets;
+import java.util.concurrent.ExecutionException;
 import javax.annotation.Nullable;
+import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -19,10 +_,21 @@
 import net.minecraft.network.protocol.common.ServerboundKeepAlivePacket;
 import net.minecraft.network.protocol.common.ServerboundPongPacket;
 import net.minecraft.network.protocol.common.ServerboundResourcePackPacket;
-import net.minecraft.network.protocol.cookie.ServerboundCookieResponsePacket;
+import net.minecraft.network.protocol.common.custom.DiscardedPayload;
+import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
+import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ClientInformation;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.util.StringUtil;
 import net.minecraft.util.VisibleForDebug;
+import net.minecraftforge.server.ServerLifecycleHooks;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.player.PlayerKickEvent;
+import org.bukkit.event.player.PlayerResourcePackStatusEvent;
 import org.slf4j.Logger;
 
 public abstract class ServerCommonPacketListenerImpl implements ServerCommonPacketListener {
@@ -32,7 +_,7 @@
     private static final Component TIMEOUT_DISCONNECTION_MESSAGE = Component.translatable("disconnect.timeout");
     static final Component DISCONNECT_UNEXPECTED_QUERY = Component.translatable("multiplayer.disconnect.unexpected_query_response");
     protected final MinecraftServer server;
-    protected final Connection connection;
+    public final Connection connection;
     private final boolean transferred;
     private long keepAliveTime;
     private boolean keepAlivePending;
@@ -42,13 +_,25 @@
     private int latency;
     private volatile boolean suspendFlushingOnServerThread = false;
 
-    public ServerCommonPacketListenerImpl(MinecraftServer p_299469_, Connection p_300872_, CommonListenerCookie p_300277_) {
-        this.server = p_299469_;
-        this.connection = p_300872_;
-        this.keepAliveTime = Util.getMillis();
-        this.latency = p_300277_.latency();
-        this.transferred = p_300277_.transferred();
-    }
+   public ServerCommonPacketListenerImpl(MinecraftServer p_299469_, Connection p_300872_, CommonListenerCookie p_300277_, ServerPlayer player) {
+      this.server = p_299469_;
+      this.connection = p_300872_;
+      this.keepAliveTime = Util.getMillis();
+      this.latency = p_300277_.latency();
+	  this.transferred = p_300277_.transferred();
+      // CraftBukkit start - add fields and methods
+      this.player = player;
+      this.cserver = p_299469_.server;
+   }
+
+   protected final ServerPlayer player;
+   protected final org.bukkit.craftbukkit.CraftServer cserver;
+   public boolean processedDisconnect;
+
+   public CraftPlayer getCraftPlayer() {
+      return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
+      // CraftBukkit end
+   }
 
     private void close() {
         if (!this.closed) {
@@ -67,6 +_,7 @@
 
     @Override
     public void handleKeepAlive(ServerboundKeepAlivePacket p_299975_) {
+      	PacketUtils.ensureRunningOnSameThread(p_299975_, this, this.player.serverLevel()); // CraftBukkit
         if (this.keepAlivePending && p_299975_.getId() == this.keepAliveChallenge) {
             int i = (int)(Util.getMillis() - this.keepAliveTime);
             this.latency = (this.latency * 3 + i) / 4;
@@ -80,17 +_,71 @@
     public void handlePong(ServerboundPongPacket p_299461_) {
     }
 
-    @Override
-    public void handleCustomPayload(ServerboundCustomPayloadPacket p_300164_) {
-    }
-
-    @Override
+   	// CraftBukkit start
+   	private static final ResourceLocation CUSTOM_REGISTER = new ResourceLocation("register");
+   	private static final ResourceLocation CUSTOM_UNREGISTER = new ResourceLocation("unregister");
+   	@Override
+   	public void handleCustomPayload(ServerboundCustomPayloadPacket p_300164_) {
+      if (p_300164_.payload() instanceof DiscardedPayload payload && payload.data() != null) {
+         var readerIndex = payload.data().readerIndex();
+         var buf = new byte[payload.data().readableBytes()];
+         payload.data().readBytes(buf);
+         payload.data().readerIndex(readerIndex);
+         ServerLifecycleHooks.getCurrentServer().executeIfPossible(() -> {
+            if (ServerLifecycleHooks.getCurrentServer().hasStopped() || processedDisconnect) {
+               return;
+            }
+            if (this.connection.isConnected()) {
+               if (payload.id().equals(CUSTOM_REGISTER)) {
+                  try {
+                     String channels = new String(buf, StandardCharsets.UTF_8);
+                     for (String channel : channels.split("\0")) {
+                        if (!StringUtil.isNullOrEmpty(channel)) {
+                           this.getCraftPlayer().addChannel(channel);
+                        }
+                     }
+                  } catch (Exception ex) {
+                     LOGGER.error("Couldn't register custom payload", ex);
+                     this.disconnect("Invalid payload REGISTER!");
+                  }
+               } else if (payload.id().equals(CUSTOM_UNREGISTER)) {
+                  try {
+                     final String channels = new String(buf, StandardCharsets.UTF_8);
+                     for (String channel : channels.split("\0")) {
+                        if (!StringUtil.isNullOrEmpty(channel)) {
+                           this.getCraftPlayer().removeChannel(channel);
+                        }
+                     }
+                  } catch (Exception ex) {
+                     LOGGER.error("Couldn't unregister custom payload", ex);
+                     this.disconnect("Invalid payload UNREGISTER!");
+                  }
+               } else {
+                  try {
+                     this.cserver.getMessenger().dispatchIncomingMessage(this.player.getBukkitEntity(), payload.id().toString(), buf);
+                  } catch (Exception ex) {
+                     LOGGER.error("Couldn't dispatch custom payload", ex);
+                     this.disconnect("Invalid custom payload!");
+                  }
+               }
+            }
+         });
+      }
+      net.minecraftforge.common.ForgeHooks.onCustomPayload(p_300164_, this.connection);
+   }
+
+   public final boolean isDisconnected() {
+      return !this.player.joining && !this.connection.isConnected();
+   }
+   // CraftBukkit end
+
     public void handleResourcePackResponse(ServerboundResourcePackPacket p_300656_) {
         PacketUtils.ensureRunningOnSameThread(p_300656_, this, this.server);
         if (p_300656_.action() == ServerboundResourcePackPacket.Action.DECLINED && this.server.isResourcePackRequired()) {
             LOGGER.info("Disconnecting {} due to resource pack {} rejection", this.playerProfile().getName(), p_300656_.id());
             this.disconnect(Component.translatable("multiplayer.requiredTexturePrompt.disconnect"));
         }
+      	this.cserver.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getCraftPlayer(), p_300656_.id(), PlayerResourcePackStatusEvent.Status.values()[p_300656_.action().ordinal()])); // CraftBukkit
     }
 
     @Override
@@ -101,7 +_,7 @@
     protected void keepConnectionAlive() {
         this.server.getProfiler().push("keepAlive");
         long i = Util.getMillis();
-        if (!this.isSingleplayerOwner() && i - this.keepAliveTime >= 15000L) {
+        if (!this.isSingleplayerOwner() && i - this.keepAliveTime >= 25000L) { // CraftBukkit
             if (this.keepAlivePending) {
                 this.disconnect(TIMEOUT_DISCONNECTION_MESSAGE);
             } else if (this.checkIfClosed(i)) {
@@ -141,6 +_,13 @@
     }
 
     public void send(Packet<?> p_300325_, @Nullable PacketSendListener p_301165_) {
+      	// CraftBukkit start
+      	if (p_300325_ == null) {
+         return;
+      	} else if (p_300325_ instanceof ClientboundSetDefaultSpawnPositionPacket packet6) {
+         	this.player.compassTarget = CraftLocation.toBukkit(packet6.pos, this.getCraftPlayer().getWorld());
+      	}
+      	// CraftBukkit end
         if (p_300325_.isTerminal()) {
             this.close();
         }
@@ -157,11 +_,63 @@
         }
     }
 
-    public void disconnect(Component p_299122_) {
-        this.connection.send(new ClientboundDisconnectPacket(p_299122_), PacketSendListener.thenRun(() -> this.connection.disconnect(p_299122_)));
-        this.connection.setReadOnly();
-        this.server.executeBlocking(this.connection::handleDisconnection);
-    }
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(Component p_299122_) {
+      disconnect(CraftChatMessage.fromComponent(p_299122_));
+   }
+    // CraftBukkit end
+
+   public void disconnect(String s) {
+      // CraftBukkit start - fire PlayerKickEvent
+      if (this.processedDisconnect) {
+         return;
+      }
+      if (!this.cserver.isPrimaryThread()) {
+         Waitable waitable = new Waitable() {
+            @Override
+            protected Object evaluate() {
+               ServerCommonPacketListenerImpl.this.disconnect(s);
+               return null;
+            }
+         };
+
+         this.server.processQueue.add(waitable);
+
+         try {
+            waitable.get();
+         } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+         } catch (ExecutionException e) {
+            throw new RuntimeException(e);
+         }
+         return;
+      }
+
+      String leaveMessage = ChatFormatting.YELLOW + this.player.getScoreboardName() + " left the game.";
+
+      PlayerKickEvent event = new PlayerKickEvent(this.player.getBukkitEntity(), s, leaveMessage);
+
+      if (this.cserver.getServer().isRunning()) {
+         this.cserver.getPluginManager().callEvent(event);
+      }
+
+      if (event.isCancelled()) {
+         // Do not kick the player
+         return;
+      }
+      this.player.kickLeaveMessage = event.getLeaveMessage(); // CraftBukkit - SPIGOT-3034: Forward leave message to PlayerQuitEvent
+      // Send the possibly modified leave message
+      final Component ichatbasecomponent = CraftChatMessage.fromString(event.getReason(), true)[0];
+      // CraftBukkit end
+      this.connection.send(new ClientboundDisconnectPacket(ichatbasecomponent), PacketSendListener.thenRun(() -> {
+         this.connection.disconnect(ichatbasecomponent);
+      }));
+      this.onDisconnect(ichatbasecomponent); // CraftBukkit - fire quit instantly
+      this.connection.setReadOnly();
+      // CraftBukkit - Don't wait
+      this.server.wrapRunnable(this.connection::handleDisconnection);
+   }
 
     protected boolean isSingleplayerOwner() {
         return this.server.isSingleplayerOwner(this.playerProfile());
@@ -180,5 +_,9 @@
 
     protected CommonListenerCookie createCookie(ClientInformation p_297318_) {
         return new CommonListenerCookie(this.playerProfile(), this.latency, p_297318_, this.transferred);
+    }
+
+    public Connection getConnection() {
+        return this.connection;
     }
 }
