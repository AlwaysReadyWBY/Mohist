--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,6 +_,8 @@
 package net.minecraft.server.dedicated;
 
 import com.google.common.collect.Lists;
+import com.mohistmc.Metrics;
+import com.mohistmc.MohistConfig;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
@@ -51,6 +_,12 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_20_R2.util.ForwardLogHandler;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 import org.slf4j.Logger;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -60,7 +_,7 @@
    public final List<ConsoleInput> consoleInput = Collections.synchronizedList(Lists.newArrayList());
    @Nullable
    private QueryThreadGs4 queryThreadGs4;
-   public final RconConsoleSource rconConsoleSource;
+   // public final RconConsoleSource rconConsoleSource; // CraftBukkit - remove field // Mohist TODO
    @Nullable
    private RconThread rconThread;
    public DedicatedServerSettings settings;
@@ -68,23 +_,48 @@
    private MinecraftServerGui gui;
    @Nullable
    private final TextFilterClient textFilterClient;
+   @Nullable
+   private net.minecraft.client.server.LanServerPinger dediLanPinger;
 
    public DedicatedServer(Thread p_214789_, LevelStorageSource.LevelStorageAccess p_214790_, PackRepository p_214791_, WorldStem p_214792_, DedicatedServerSettings p_214793_, DataFixer p_214794_, Services p_214795_, ChunkProgressListenerFactory p_214796_) {
       super(p_214789_, p_214790_, p_214791_, p_214792_, Proxy.NO_PROXY, p_214794_, p_214795_, p_214796_);
       this.settings = p_214793_;
-      this.rconConsoleSource = new RconConsoleSource(this);
       this.textFilterClient = TextFilterClient.createFromConfig(p_214793_.getProperties().textFilteringConfig);
    }
 
    public boolean initServer() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            // CraftBukkit start
             BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
 
-            String s1;
-            try {
-               while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.handleConsoleInput(s1, DedicatedServer.this.createCommandSourceStack());
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
+            String s;
+            try {
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                  s = bufferedreader.readLine();
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.handleConsoleInput(s, DedicatedServer.this.createCommandSourceStack());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.LOGGER.error("Exception handling console input", (Throwable)ioexception1);
@@ -92,6 +_,19 @@
 
          }
       };
+
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+      global.addHandler(new ForwardLogHandler());
+      final org.apache.logging.log4j.Logger logger = LogManager.getRootLogger();
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
       thread.start();
@@ -153,14 +_,29 @@
          return false;
       } else {
          this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));
+         // Spigot start
+         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+         org.spigotmc.SpigotConfig.registerCommands();
+         // Spigot end
+         // Mohsit start
+         MohistConfig.init((java.io.File) options.valueOf("mohist-settings"));
+         MohistConfig.registerCommands();
+         // Mohist end
+         // CraftBukkit start
+         server.loadPlugins();
+         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+         // CraftBukkit end
          long i = Util.getNanos();
          SkullBlockEntity.setup(this.services, this);
          GameProfileCache.setUsesAuthentication(this.usesAuthentication());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          LOGGER.info("Preparing level \"{}\"", (Object)this.getLevelIdName());
          this.loadLevel();
          long j = Util.getNanos() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          LOGGER.info("Done ({})! For help, type \"help\"", (Object)s);
+         Metrics.MohistMetrics.startMetrics();
+         this.nextTickTime = Util.getMillis(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.announcePlayerAchievements != null) {
             this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(dedicatedserverproperties.announcePlayerAchievements, this);
          }
@@ -175,7 +_,7 @@
             this.rconThread = RconThread.create(this);
          }
 
-         if (this.getMaxTickLength() > 0L) {
+         if (false && this.getMaxTickLength() > 0L) { // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(LOGGER));
             thread1.setName("Server Watchdog");
@@ -188,7 +_,12 @@
             LOGGER.info("JMX monitoring enabled");
          }
 
-         return true;
+         if (net.minecraftforge.common.ForgeConfig.SERVER.advertiseDedicatedServerToLan.get()) {
+            this.dediLanPinger = new net.minecraft.client.server.LanServerPinger(this.getMotd(), String.valueOf(this.getServerPort()));
+            this.dediLanPinger.start();
+         }
+
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -263,6 +_,12 @@
          this.queryThreadGs4.stop();
       }
 
+      if (this.dediLanPinger != null) {
+         this.dediLanPinger.interrupt();
+         this.dediLanPinger = null;
+      }
+
+      Runtime.getRuntime().halt(0);
    }
 
    public void tickChildren(BooleanSupplier p_139661_) {
@@ -281,7 +_,16 @@
    public void handleConsoleInputs() {
       while(!this.consoleInput.isEmpty()) {
          ConsoleInput consoleinput = this.consoleInput.remove(0);
-         this.getCommands().performPrefixedCommand(consoleinput.source, consoleinput.msg);
+
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, consoleinput.msg);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         consoleinput = new ConsoleInput(event.getCommand(), consoleinput.source);
+
+         // this.getCommands().performCommand(servercommand.source, servercommand.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, consoleinput);
+         // CraftBukkit end
       }
 
    }
@@ -395,8 +_,7 @@
    }
 
    public boolean enforceSecureProfile() {
-      DedicatedServerProperties dedicatedserverproperties = this.getProperties();
-      return dedicatedserverproperties.enforceSecureProfile && dedicatedserverproperties.onlineMode && this.services.profileKeySignatureValidator() != null;
+      return false; // Mohist chat verify
    }
 
    public boolean logIPs() {
@@ -478,15 +_,49 @@
    }
 
    public String getPluginNames() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String runCommand(String p_139644_) {
-      this.rconConsoleSource.prepareForCommand();
+      // CraftBukkit start - fire RemoteServerCommandEvent
+      throw new UnsupportedOperationException("Not supported - remote source required.");
+   }
+
+   public String runCommand(RconConsoleSource rconConsoleSource, String pCommand) {
+      rconConsoleSource.prepareForCommand();
       this.executeBlocking(() -> {
-         this.getCommands().performPrefixedCommand(this.rconConsoleSource.createCommandSourceStack(), p_139644_);
+         CommandSourceStack wrapper = rconConsoleSource.createCommandSourceStack();
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(rconConsoleSource.getBukkitSender(wrapper), pCommand);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
+         server.dispatchServerCommand(event.getSender(), serverCommand);
       });
-      return this.rconConsoleSource.getCommandResponse();
+      return rconConsoleSource.getCommandResponse();
    }
 
    public void storeUsingWhiteList(boolean p_139689_) {
@@ -496,7 +_,12 @@
    }
 
    public void stopServer() {
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
       super.stopServer();
+      if (this.dediLanPinger != null) {
+         this.dediLanPinger.interrupt();
+         this.dediLanPinger = null;
+      }
       Util.shutdownExecutors();
       SkullBlockEntity.clear();
    }
@@ -528,5 +_,15 @@
 
    public Optional<MinecraftServer.ServerResourcePackInfo> getServerResourcePack() {
       return this.settings.getProperties().serverResourcePackInfo;
+   }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.getProperties().debug;
+   }
+
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
    }
 }
