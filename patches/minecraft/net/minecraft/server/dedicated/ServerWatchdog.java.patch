--- a/net/minecraft/server/dedicated/ServerWatchdog.java
+++ b/net/minecraft/server/dedicated/ServerWatchdog.java
@@ -14,7 +_,6 @@
 import net.minecraft.CrashReportCategory;
 import net.minecraft.Util;
 import net.minecraft.server.Bootstrap;
-import net.minecraft.util.TimeUtil;
 import net.minecraft.world.level.GameRules;
 import org.slf4j.Logger;
 
@@ -23,25 +_,25 @@
    private static final long MAX_SHUTDOWN_TIME = 10000L;
    private static final int SHUTDOWN_STATUS = 1;
    private final DedicatedServer server;
-   private final long maxTickTimeNanos;
+   private final long maxTickTime;
 
    public ServerWatchdog(DedicatedServer p_139786_) {
       this.server = p_139786_;
-      this.maxTickTimeNanos = p_139786_.getMaxTickLength() * TimeUtil.NANOSECONDS_PER_MILLISECOND;
+      this.maxTickTime = p_139786_.getMaxTickLength();
    }
 
    public void run() {
       while(this.server.isRunning()) {
          long i = this.server.getNextTickTime();
-         long j = Util.getNanos();
+         long j = Util.getMillis();
          long k = j - i;
-         if (k > this.maxTickTimeNanos) {
-            LOGGER.error(LogUtils.FATAL_MARKER, "A single server tick took {} seconds (should be max {})", String.format(Locale.ROOT, "%.2f", (float)k / (float)TimeUtil.NANOSECONDS_PER_SECOND), String.format(Locale.ROOT, "%.2f", this.server.tickRateManager().millisecondsPerTick() / (float)TimeUtil.MILLISECONDS_PER_SECOND));
+         if (k > this.maxTickTime) {
+            LOGGER.error(LogUtils.FATAL_MARKER, "A single server tick took {} seconds (should be max {})", String.format(Locale.ROOT, "%.2f", (float)k / 1000.0F), String.format(Locale.ROOT, "%.2f", 0.05F));
             LOGGER.error(LogUtils.FATAL_MARKER, "Considering it to be crashed, server will forcibly shutdown.");
             ThreadMXBean threadmxbean = ManagementFactory.getThreadMXBean();
             ThreadInfo[] athreadinfo = threadmxbean.dumpAllThreads(true, true);
             StringBuilder stringbuilder = new StringBuilder();
-            Error error = new Error("Watchdog");
+            Error error = new Error(String.format(java.util.Locale.ENGLISH, "ServerHangWatchdog detected that a single server tick took %.2f seconds (should be max 0.05)", k / 1000F)); // Forge: don't just make a crash report with a seemingly-inexplicable Error
 
             for(ThreadInfo threadinfo : athreadinfo) {
                if (threadinfo.getThreadId() == this.server.getRunningThread().getId()) {
@@ -61,8 +_,8 @@
                return this.server.getWorldData().getGameRules().getRule(GameRules.RULE_RANDOMTICKING).toString();
             });
             crashreportcategory1.setDetail("Level stats", () -> {
-               return Streams.stream(this.server.getAllLevels()).map((p_308935_) -> {
-                  return p_308935_.dimension() + ": " + p_308935_.getWatchdogStats();
+               return Streams.stream(this.server.getAllLevels()).map((p_288758_) -> {
+                  return p_288758_.dimension() + ": " + p_288758_.getWatchdogStats();
                }).collect(Collectors.joining(",\n"));
             });
             Bootstrap.realStdoutPrintln("Crash report:\n" + crashreport.getFriendlyReport());
@@ -77,7 +_,7 @@
          }
 
          try {
-            Thread.sleep((i + this.maxTickTimeNanos - j) / TimeUtil.NANOSECONDS_PER_MILLISECOND);
+            Thread.sleep(i + this.maxTickTime - j);
          } catch (InterruptedException interruptedexception) {
          }
       }
