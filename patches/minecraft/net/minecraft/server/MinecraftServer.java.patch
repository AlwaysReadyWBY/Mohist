--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -6,11 +_,16 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.google.gson.Gson;
+import com.mohistmc.mohist.MohistConfig;
+import com.mohistmc.mohist.forge.ForgeInjectBukkit;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import com.mojang.serialization.JsonOps;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectArraySet;
@@ -22,6 +_,8 @@
 import java.lang.management.ManagementFactory;
 import java.lang.management.ThreadInfo;
 import java.lang.management.ThreadMXBean;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
 import java.net.Proxy;
 import java.nio.file.Files;
 import java.nio.file.Path;
@@ -35,19 +_,26 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Queue;
+import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import joptsimple.OptionSet;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -81,6 +_,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.level.ServerPlayerGameMode;
+import net.minecraft.server.level.TicketType;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.level.progress.ChunkProgressListenerFactory;
 import net.minecraft.server.network.ServerConnectionListener;
@@ -101,6 +_,7 @@
 import net.minecraft.util.ModCheck;
 import net.minecraft.util.Mth;
 import net.minecraft.util.NativeModuleLister;
+import net.minecraft.util.ProgressListener;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.SignatureValidator;
 import net.minecraft.util.TimeUtil;
@@ -122,6 +_,7 @@
 import net.minecraft.util.thread.ReentrantBlockableEventLoop;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.RandomSequences;
+import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
 import net.minecraft.world.entity.npc.WanderingTraderSpawner;
@@ -160,10 +_,24 @@
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.common.world.ForgeChunkManager;
+import net.minecraftforge.event.level.LevelEvent;
+import net.minecraftforge.server.ServerLifecycleHooks;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.ConsoleCommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
+import org.bukkit.event.server.ServerLoadEvent;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.plugin.PluginLoadOrder;
 import org.slf4j.Logger;
+import org.spigotmc.SpigotConfig;
+import org.spigotmc.WatchdogThread;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, CommandSource, AutoCloseable {
-    public static final Logger LOGGER = LogUtils.getLogger();
+   	public static final Logger LOGGER = LogUtils.getLogger();
     public static final String VANILLA_BRAND = "vanilla";
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
@@ -183,8 +_,8 @@
         "Demo World", GameType.SURVIVAL, false, Difficulty.NORMAL, false, new GameRules(), WorldDataConfiguration.DEFAULT
     );
     public static final GameProfile ANONYMOUS_PLAYER_PROFILE = new GameProfile(Util.NIL_UUID, "Anonymous Player");
-    public final LevelStorageSource.LevelStorageAccess storageSource;
-    public final PlayerDataStorage playerDataStorage;
+   	public final LevelStorageSource.LevelStorageAccess storageSource;
+   	public final PlayerDataStorage playerDataStorage;
     private final List<Runnable> tickables = Lists.newArrayList();
     private MetricsRecorder metricsRecorder = InactiveMetricsRecorder.INSTANCE;
     private ProfilerFiller profiler = this.metricsRecorder.getProfiler();
@@ -195,18 +_,18 @@
     @Nullable
     private MinecraftServer.TimeProfiler debugCommandProfiler;
     private boolean debugCommandProfilerDelayStart;
-    private final ServerConnectionListener connection;
-    private final ChunkProgressListenerFactory progressListenerFactory;
+    private ServerConnectionListener connection;
+    public final ChunkProgressListenerFactory progressListenerFactory;
     @Nullable
     private ServerStatus status;
     @Nullable
     private ServerStatus.Favicon statusIcon;
     private final RandomSource random = RandomSource.create();
-    public final DataFixer fixerUpper;
+    private final DataFixer fixerUpper;
     private String localIp;
     private int port = -1;
     private final LayeredRegistryAccess<RegistryLayer> registries;
-    public final Map<ResourceKey<Level>, ServerLevel> levels = Maps.newLinkedHashMap();
+    private final Map<ResourceKey<Level>, ServerLevel> levels = Maps.newLinkedHashMap();
     private PlayerList playerList;
     private volatile boolean running = true;
     private boolean stopped;
@@ -246,7 +_,7 @@
     private final ServerFunctionManager functionManager;
     private boolean enforceWhitelist;
     private float smoothedTickTimeMillis;
-    private final Executor executor;
+    public final Executor executor;
     @Nullable
     private String serverId;
     public MinecraftServer.ReloadableResources resources;
@@ -256,12 +_,30 @@
     private final PotionBrewing potionBrewing;
     private volatile boolean isSaving;
 
+   // CraftBukkit start
+   public static WorldLoader.DataLoadContext worldLoader;
+   public CraftServer server;
+   public static OptionSet options;
+   public ConsoleCommandSender console;
+   public static int currentTick = 0; // Paper - Further improve tick loop
+   public Queue<Runnable> processQueue = new ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+   // CraftBukkit end
+   // Spigot start
+   public static final int TPS = 20;
+   public static final int TICK_TIME = 1000000000 / TPS;
+   private static final int SAMPLE_INTERVAL = 20; // Paper
+   public final double[] recentTps = new double[ 4 ]; // Purpur
+   // Spigot end
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> p_129873_) {
         AtomicReference<S> atomicreference = new AtomicReference<>();
-        Thread thread = new Thread(() -> atomicreference.get().runServer(), "Server thread");
+        Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, () -> atomicreference.get().runServer(), "Server thread");
         thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> LOGGER.error("Uncaught exception in server thread", p_177910_));
         if (Runtime.getRuntime().availableProcessors() > 4) {
-            thread.setPriority(8);
+         thread.setPriority(MohistConfig.yml.getInt("threadpriority.server_thread", 8));
         }
 
         S s = (S)p_129873_.apply(thread);
@@ -283,7 +_,7 @@
         super("Server");
         this.registries = p_236726_.registries();
         this.worldData = p_236726_.worldData();
-        if (!this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) {
+      	if (false && !this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) {
             throw new IllegalStateException("Missing Overworld dimension data");
         } else {
             this.proxy = p_236727_;
@@ -294,7 +_,7 @@
                 p_236729_.profileCache().setExecutor(this);
             }
 
-            this.connection = new ServerConnectionListener(this);
+         	// this.connection = new ServerConnectionListener(this); // Spigot
             this.tickRateManager = new ServerTickRateManager(this);
             this.progressListenerFactory = p_236730_;
             this.storageSource = p_236724_;
@@ -305,7 +_,9 @@
             this.structureTemplateManager = new StructureTemplateManager(p_236726_.resourceManager(), p_236724_, p_236728_, holdergetter);
             this.serverThread = p_236723_;
             this.executor = Util.backgroundExecutor();
-            this.potionBrewing = PotionBrewing.bootstrap(this.worldData.enabledFeatures());
+			this.potionBrewing = PotionBrewing.bootstrap(this.worldData.enabledFeatures());
+         	// CraftBukkit start
+         	this.vanillaCommandDispatcher = p_236726_.dataPackResources().commands;
         }
     }
 
@@ -325,7 +_,6 @@
         ChunkProgressListener chunkprogresslistener = this.progressListenerFactory.create(this.worldData.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS));
         this.createLevels(chunkprogresslistener);
         this.forceDifficulty();
-        this.prepareLevels(chunkprogresslistener);
         if (profiledduration != null) {
             profiledduration.finish();
         }
@@ -356,11 +_,14 @@
         ServerLevel serverlevel = new ServerLevel(
             this, this.executor, this.storageSource, serverleveldata, Level.OVERWORLD, levelstem, p_129816_, flag, j, list, true, null
         );
+		this.initWorld(serverlevel, serverleveldata, worldData, worldoptions); // CraftBukkit
         this.levels.put(Level.OVERWORLD, serverlevel);
         DimensionDataStorage dimensiondatastorage = serverlevel.getDataStorage();
         this.readScoreboard(dimensiondatastorage);
+      	this.server.scoreboardManager = new CraftScoreboardManager(this, serverlevel.getScoreboard());
         this.commandStorage = new CommandStorage(dimensiondatastorage);
         WorldBorder worldborder = serverlevel.getWorldBorder();
+        net.minecraftforge.event.ForgeEventFactory.onLevelLoad(levels.get(Level.OVERWORLD));
         if (!serverleveldata.isInitialized()) {
             try {
                 setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
@@ -387,41 +_,74 @@
             this.getCustomBossEvents().load(this.worldData.getCustomBossEvents(), this.registryAccess());
         }
 
-        RandomSequences randomsequences = serverlevel.getRandomSequences();
+      RandomSequences randomsequences = serverlevel.getRandomSequences();
 
-        for (Entry<ResourceKey<LevelStem>, LevelStem> entry : registry.entrySet()) {
-            ResourceKey<LevelStem> resourcekey = entry.getKey();
-            if (resourcekey != LevelStem.OVERWORLD) {
-                ResourceKey<Level> resourcekey1 = ResourceKey.create(Registries.DIMENSION, resourcekey.location());
-                DerivedLevelData derivedleveldata = new DerivedLevelData(this.worldData, serverleveldata);
-                ServerLevel serverlevel1 = new ServerLevel(
-                    this,
-                    this.executor,
-                    this.storageSource,
-                    derivedleveldata,
-                    resourcekey1,
-                    entry.getValue(),
-                    p_129816_,
-                    flag,
-                    j,
-                    ImmutableList.of(),
-                    false,
-                    randomsequences
-                );
-                worldborder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.getWorldBorder()));
-                this.levels.put(resourcekey1, serverlevel1);
+      for(Map.Entry<ResourceKey<LevelStem>, LevelStem> entry : registry.entrySet()) {
+         ResourceKey<LevelStem> resourcekey = entry.getKey();
+         if (resourcekey != LevelStem.OVERWORLD) {
+            ResourceKey<Level> resourcekey1 = ResourceKey.create(Registries.DIMENSION, resourcekey.location());
+            DerivedLevelData derivedleveldata = new DerivedLevelData(this.worldData, serverleveldata);
+            String name = resourcekey == LevelStem.NETHER ? "DIM1" : "DIM-1";
+            if (resourcekey == LevelStem.NETHER) {
+               if (!this.isNetherEnabled()) {
+                  continue;
+               }
+            } else if (resourcekey == LevelStem.END) {
+               if (!this.server.getAllowEnd()) {
+                  continue;
+               }
             }
-        }
-
-        worldborder.applySettings(serverleveldata.getWorldBorder());
-    }
+            Level.craftWorldData(this.server.getGenerator(name), ForgeInjectBukkit.environment.get(resourcekey), this.server.getBiomeProvider(name));
+            // Mohist start - split calculate for ServerLeverl Preparing
+            ChunkProgressListener mohist$progressListener = this.progressListenerFactory.create(11);
+            ServerLevel serverlevel1 = new ServerLevel(this, this.executor, this.storageSource, derivedleveldata, resourcekey1, entry.getValue(), mohist$progressListener, flag, j, ImmutableList.of(), false, randomsequences);
+            this.initWorld(serverlevel1, derivedleveldata, worldData, worldoptions); // CraftBukkit
+            // Mohist end
+            worldborder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.getWorldBorder()));
+            this.levels.put(resourcekey1, serverlevel1);
+            MinecraftForge.EVENT_BUS.post(new LevelEvent.Load(levels.get(resourcekey)));
+         }
+      }
+
+      worldborder.applySettings(serverleveldata.getWorldBorder());
+
+      for (ServerLevel worldserver : this.getAllLevels()) {
+         mohist$prepareWorld(worldserver);
+      }
+
+      this.server.enablePlugins(PluginLoadOrder.POSTWORLD);
+      this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+      this.connection.acceptConnections();
+   }
+
+   private void mohist$prepareWorld(ServerLevel worldserver) {
+      this.prepareLevels(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
+      worldserver.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API
+      this.server.getPluginManager().callEvent(new WorldLoadEvent(worldserver.getWorld()));
+   }
 
     private static void setInitialSpawn(ServerLevel p_177897_, ServerLevelData p_177898_, boolean p_177899_, boolean p_177900_) {
         if (p_177900_) {
             p_177898_.setSpawn(BlockPos.ZERO.above(80), 0.0F);
         } else {
             ServerChunkCache serverchunkcache = p_177897_.getChunkSource();
+            if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
             ChunkPos chunkpos = new ChunkPos(serverchunkcache.randomState().sampler().findSpawnPosition());
+         // CraftBukkit start
+         if (p_177897_.generator != null) {
+            Random rand = new Random(p_177897_.getSeed());
+            Location spawn = p_177897_.generator.getFixedSpawnLocation(p_177897_.getWorld(), rand);
+
+            if (spawn != null) {
+               if (spawn.getWorld() != p_177897_.getWorld()) {
+                  throw new IllegalStateException("Cannot set spawn point for " + p_177898_.getLevelName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+               } else {
+                  p_177898_.setSpawn(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()), spawn.getYaw());
+                  return;
+               }
+            }
+         }
+         // CraftBukkit end
             int i = serverchunkcache.getGenerator().getSpawnHeight(p_177897_);
             if (i < p_177897_.getMinBuildHeight()) {
                 BlockPos blockpos = chunkpos.getWorldPosition();
@@ -473,43 +_,85 @@
         serverleveldata.setGameType(GameType.SPECTATOR);
     }
 
-    private void prepareLevels(ChunkProgressListener p_129941_) {
-        ServerLevel serverlevel = this.overworld();
-        LOGGER.info("Preparing start region for dimension {}", serverlevel.dimension().location());
-        BlockPos blockpos = serverlevel.getSharedSpawnPos();
-        p_129941_.updateSpawnPos(new ChunkPos(blockpos));
-        ServerChunkCache serverchunkcache = serverlevel.getChunkSource();
-        this.nextTickTimeNanos = Util.getNanos();
-        serverlevel.setDefaultSpawnPos(blockpos, serverlevel.getSharedSpawnAngle());
-        int i = this.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS);
-        int j = i > 0 ? Mth.square(ChunkProgressListener.calculateDiameter(i)) : 0;
-
-        while (serverchunkcache.getTickingGenerated() < j) {
-            this.nextTickTimeNanos = Util.getNanos() + PREPARE_LEVELS_DEFAULT_DELAY_NANOS;
-            this.waitUntilNextTick();
-        }
-
-        this.nextTickTimeNanos = Util.getNanos() + PREPARE_LEVELS_DEFAULT_DELAY_NANOS;
-        this.waitUntilNextTick();
-
-        for (ServerLevel serverlevel1 : this.levels.values()) {
-            ForcedChunksSavedData forcedchunkssaveddata = serverlevel1.getDataStorage().get(ForcedChunksSavedData.factory(), "chunks");
-            if (forcedchunkssaveddata != null) {
-                LongIterator longiterator = forcedchunkssaveddata.getChunks().iterator();
-
-                while (longiterator.hasNext()) {
-                    long k = longiterator.nextLong();
-                    ChunkPos chunkpos = new ChunkPos(k);
-                    serverlevel1.getChunkSource().updateChunkForced(chunkpos, true);
-                }
-            }
-        }
-
-        this.nextTickTimeNanos = Util.getNanos() + PREPARE_LEVELS_DEFAULT_DELAY_NANOS;
-        this.waitUntilNextTick();
-        p_129941_.stop();
-        this.updateMobSpawningFlags();
-    }
+   // CraftBukkit start
+   public void initWorld(ServerLevel serverlevel, ServerLevelData serverleveldata, WorldData saveData,  WorldOptions worldoptions) {
+      boolean flag = saveData.isDebugWorld();
+      // CraftBukkit start
+      if (serverlevel.generator != null) {
+         serverlevel.getWorld().getPopulators().addAll(serverlevel.generator.getDefaultPopulators(serverlevel.getWorld()));
+      }
+      WorldBorder worldborder = serverlevel.getWorldBorder();
+      worldborder.applySettings(serverleveldata.getWorldBorder()); // CraftBukkit - move up so that WorldBorder is set during WorldInitEvent
+
+      if (!serverleveldata.isInitialized()) {
+         try {
+            setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
+            serverleveldata.setInitialized(true);
+            if (flag) {
+               this.setupDebugLevel(this.worldData);
+            }
+         } catch (Throwable throwable1) {
+            CrashReport crashreport = CrashReport.forThrowable(throwable1, "Exception initializing level");
+
+            try {
+               serverlevel.fillReportDetails(crashreport);
+            } catch (Throwable throwable) {
+            }
+
+            throw new ReportedException(crashreport);
+         }
+
+         serverleveldata.setInitialized(true);
+      }
+   }
+   // CraftBukkit end
+
+   public AtomicReference<ServerLevel> prepareLevels$serverlevel = new AtomicReference<>(this.overworld());
+
+   public void prepareLevels(ChunkProgressListener pListener, ServerLevel serverlevel) {
+      prepareLevels$serverlevel.set(serverlevel);
+      prepareLevels(pListener);
+   }
+
+   public void prepareLevels(ChunkProgressListener p_129941_) {
+      this.markWorldsDirty();
+      ServerLevel serverlevel = prepareLevels$serverlevel.getAndSet(this.overworld());
+      MinecraftForge.EVENT_BUS.post(new LevelEvent.Load(serverlevel));
+      this.forceTicks = true;
+      LOGGER.info("Preparing start region for dimension {}", (Object)serverlevel.dimension().location());
+      BlockPos blockpos = serverlevel.getSharedSpawnPos();
+      p_129941_.updateSpawnPos(new ChunkPos(blockpos));
+      ServerChunkCache serverchunkcache = serverlevel.getChunkSource();
+      this.nextTickTimeNanos = Util.getNanos();
+      if (serverlevel.getWorld().getKeepSpawnInMemory()) {
+         serverchunkcache.addRegionTicket(TicketType.START, new ChunkPos(blockpos), 11, Unit.INSTANCE);
+         while (serverchunkcache.getTickingGenerated() != 441) {
+            this.executeModerately();
+         }
+      }
+      this.executeModerately();
+      if (true) {
+         ForcedChunksSavedData forcedchunkssaveddata = serverlevel.getDataStorage().get(ForcedChunksSavedData.factory(), "chunks");
+         if (forcedchunkssaveddata != null) {
+            LongIterator longiterator = forcedchunkssaveddata.getChunks().iterator();
+
+            while (longiterator.hasNext()) {
+               long i = longiterator.nextLong();
+               ChunkPos chunkpos = new ChunkPos(i);
+               serverlevel.getChunkSource().updateChunkForced(chunkpos, true);
+            }
+            ForgeChunkManager.reinstatePersistentChunks(serverlevel, forcedchunkssaveddata);
+         }
+      }
+      // CraftBukkit start
+      this.executeModerately();
+      // CraftBukkit end
+      p_129941_.stop();
+      // CraftBukkit start
+      serverlevel.setSpawnSettings(this.isSpawningMonsters(), this.isSpawningAnimals());
+      this.forceTicks = false;
+      // CraftBukkit end
+   }
 
     public GameType getDefaultGameType() {
         return this.worldData.getGameType();
@@ -542,6 +_,13 @@
         serverleveldata.setWorldBorder(serverlevel2.getWorldBorder().createSettings());
         this.worldData.setCustomBossEvents(this.getCustomBossEvents().save(this.registryAccess()));
         this.storageSource.saveDataTag(this.registryAccess(), this.worldData, this.getPlayerList().getSingleplayerData());
+      	for (ServerLevel world : this.getAllLevels()) {
+         	if (world.convertable != this.storageSource) {
+            	world.K.setWorldBorder(world.getWorldBorder().createSettings());
+            	world.K.setCustomBossEvents(this.getCustomBossEvents().save());
+            	world.convertable.saveDataTag(this.registryAccess(), world.K, this.getPlayerList().getSingleplayerData());
+         	}
+      	}
         if (p_129887_) {
             for (ServerLevel serverlevel1 : this.getAllLevels()) {
                 LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", serverlevel1.getChunkSource().chunkMap.getStorageName());
@@ -571,7 +_,24 @@
         this.stopServer();
     }
 
-    public void stopServer() {
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // CraftBukkit end
+
+   public void stopServer() {
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized(stopLock) {
+         if (hasStopped) return;
+         hasStopped = true;
+      }
+      // CraftBukkit end
+
         if (this.metricsRecorder.isRecording()) {
             this.cancelRecordingMetrics();
         }
@@ -609,6 +_,7 @@
         for (ServerLevel serverlevel2 : this.getAllLevels()) {
             if (serverlevel2 != null) {
                 try {
+                    net.minecraftforge.event.ForgeEventFactory.onLevelUnload(serverlevel2);
                     serverlevel2.close();
                 } catch (IOException ioexception1) {
                     LOGGER.error("Exception closing the level", (Throwable)ioexception1);
@@ -624,7 +_,13 @@
         } catch (IOException ioexception) {
             LOGGER.error("Failed to unlock level {}", this.storageSource.getLevelId(), ioexception);
         }
-    }
+      	// Spigot start
+      	if (SpigotConfig.saveUserCacheOnStopOnly) {
+         	LOGGER.info("Saving usercache.json");
+         	this.getProfileCache().save();
+      	}
+      	// Spigot end
+   	}
 
     public String getLocalIp() {
         return this.localIp;
@@ -649,39 +_,128 @@
         }
     }
 
-    protected void runServer() {
-        try {
-            if (!this.initServer()) {
-                throw new IllegalStateException("Failed to initialize server");
-            }
-
-            this.nextTickTimeNanos = Util.getNanos();
-            this.statusIcon = this.loadStatusIcon().orElse(null);
-            this.status = this.buildServerStatus();
-
-            while (this.running) {
-                long i;
-                if (!this.isPaused() && this.tickRateManager.isSprinting() && this.tickRateManager.checkShouldSprintThisTick()) {
-                    i = 0L;
-                    this.nextTickTimeNanos = Util.getNanos();
-                    this.lastOverloadWarningNanos = this.nextTickTimeNanos;
-                } else {
-                    i = this.tickRateManager.nanosecondsPerTick();
-                    long k = Util.getNanos() - this.nextTickTimeNanos;
-                    if (k > OVERLOADED_THRESHOLD_NANOS + 20L * i && this.nextTickTimeNanos - this.lastOverloadWarningNanos >= OVERLOADED_WARNING_INTERVAL_NANOS + 100L * i) {
-                        long j = k / i;
-                        LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", k / TimeUtil.NANOSECONDS_PER_MILLISECOND, j);
-                        this.nextTickTimeNanos += j * i;
-                        this.lastOverloadWarningNanos = this.nextTickTimeNanos;
-                    }
-                }
-
-                boolean flag = i == 0L;
-                if (this.debugCommandProfilerDelayStart) {
-                    this.debugCommandProfilerDelayStart = false;
-                    this.debugCommandProfiler = new MinecraftServer.TimeProfiler(Util.getNanos(), this.tickCount);
-                }
-
+   // Spigot Start
+   private static double calcTps(double avg, double exp, double tps)
+    {
+       return ( avg * exp ) + ( tps * ( 1 - exp ) );
+    }
+
+   // Paper start - Further improve server tick loop
+   private static final long SEC_IN_NANO = 1000000000;
+   private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+   private long lastTick = 0;
+   private long catchupTime = 0;
+   public final RollingAverage tps5s = new RollingAverage(5); // Purpur
+   public final RollingAverage tps1 = new RollingAverage(60);
+   public final RollingAverage tps5 = new RollingAverage(60 * 5);
+   public final RollingAverage tps15 = new RollingAverage(60 * 15);
+
+   public static class RollingAverage {
+      private final int size;
+      private long time;
+      private BigDecimal total;
+      private int index = 0;
+      private final BigDecimal[] samples;
+      private final long[] times;
+
+      RollingAverage(int size) {
+         this.size = size;
+         this.time = size * SEC_IN_NANO;
+         this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
+         this.samples = new BigDecimal[size];
+         this.times = new long[size];
+         for (int i = 0; i < size; i++) {
+            this.samples[i] = dec(TPS);
+            this.times[i] = SEC_IN_NANO;
+         }
+      }
+
+      private static BigDecimal dec(long t) {
+         return new BigDecimal(t);
+      }
+      public void add(BigDecimal x, long t) {
+         time -= times[index];
+         total = total.subtract(samples[index].multiply(dec(times[index])));
+         samples[index] = x;
+         times[index] = t;
+         time += t;
+         total = total.add(x.multiply(dec(t)));
+         if (++index == size) {
+            index = 0;
+         }
+      }
+
+      public double getAverage() {
+         return total.divide(dec(time), 30, RoundingMode.HALF_UP).doubleValue();
+      }
+   }
+   private static final BigDecimal TPS_BASE = new BigDecimal(1E9).multiply(new BigDecimal(SAMPLE_INTERVAL));
+   // Paper End
+   // Spigot End
+
+   protected void runServer() {
+      try {
+         if (!this.initServer()) {
+            throw new IllegalStateException("Failed to initialize server");
+         }
+
+         ServerLifecycleHooks.handleServerStarted(this);
+         this.nextTickTimeNanos = Util.getNanos();
+         this.statusIcon = this.loadStatusIcon().orElse((ServerStatus.Favicon)null);
+         this.status = this.buildServerStatus();
+         resetStatusCache(status);
+
+         // Spigot start
+         Arrays.fill( recentTps, 20 );
+         long tickSection = Util.getNanos(), curTime, tickCount = 1; // Paper
+         while(this.running) {
+            long i;
+            if (!this.isPaused() && this.tickRateManager.isSprinting() && this.tickRateManager.checkShouldSprintThisTick()) {
+               i = 0L;
+               this.nextTickTimeNanos = Util.getNanos();
+               this.lastOverloadWarningNanos = this.nextTickTimeNanos;
+            } else {
+               i = this.tickRateManager.nanosecondsPerTick();
+               long k = Util.getNanos() - this.nextTickTimeNanos;
+               if (k > OVERLOADED_THRESHOLD_NANOS + 20L * i && this.nextTickTimeNanos - this.lastOverloadWarningNanos >= OVERLOADED_WARNING_INTERVAL_NANOS + 100L * i) {
+                  long j = k / i;
+                  if (server.getWarnOnOverload()) // CraftBukkit
+                  LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", k / TimeUtil.NANOSECONDS_PER_MILLISECOND, j);
+                  this.nextTickTimeNanos += j * i;
+                  this.lastOverloadWarningNanos = this.nextTickTimeNanos;
+               }
+            }
+
+            if ( ++MinecraftServer.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0 )
+            {
+               // Paper start
+               curTime = Util.getNanos();
+               final long diff = curTime - tickSection;
+               BigDecimal currentTps = TPS_BASE.divide(new BigDecimal(diff), 30, RoundingMode.HALF_UP);
+               tps5s.add(currentTps, diff); // Purpur
+               tps1.add(currentTps, diff);
+               tps5.add(currentTps, diff);
+               tps15.add(currentTps, diff);
+               // Backwards compat with bad plugins
+               // Purpur start
+               this.recentTps[0] = tps5s.getAverage();
+               this.recentTps[1] = tps1.getAverage();
+               this.recentTps[2] = tps5.getAverage();
+               this.recentTps[3] = tps15.getAverage();
+               // Purpur end
+               // Paper end
+               tickSection = curTime;
+            } else curTime = Util.getNanos(); // Paper
+            // Spigot end
+
+            boolean flag = i == 0L;
+            if (this.debugCommandProfilerDelayStart) {
+               this.debugCommandProfilerDelayStart = false;
+               this.debugCommandProfiler = new MinecraftServer.TimeProfiler(Util.getNanos(), this.tickCount);
+            }
+
+            // MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
+            lastTick = curTime; // Paper
                 this.nextTickTimeNanos += i;
                 this.startMetricsRecordingTick();
                 this.profiler.push("tick");
@@ -702,6 +_,8 @@
                 this.isReady = true;
                 JvmProfiler.INSTANCE.onServerTick(this.smoothedTickTimeMillis);
             }
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
         } catch (Throwable throwable1) {
             LOGGER.error("Encountered an unexpected exception", throwable1);
             CrashReport crashreport = constructOrExtractCrashReport(throwable1);
@@ -713,6 +_,7 @@
                 LOGGER.error("We were unable to save this crash report to disk.");
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
             this.onServerCrash(crashreport);
         } finally {
             try {
@@ -725,6 +_,8 @@
                     this.services.profileCache().clearExecutor();
                 }
 
+                net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
+            	WatchdogThread.doStop(); // Spigot
                 this.onServerExit();
             }
         }
@@ -754,38 +_,47 @@
         }
     }
 
-    private static CrashReport constructOrExtractCrashReport(Throwable p_206569_) {
-        ReportedException reportedexception = null;
-
-        for (Throwable throwable = p_206569_; throwable != null; throwable = throwable.getCause()) {
-            if (throwable instanceof ReportedException reportedexception1) {
-                reportedexception = reportedexception1;
-            }
-        }
-
-        CrashReport crashreport;
-        if (reportedexception != null) {
-            crashreport = reportedexception.getReport();
-            if (reportedexception != p_206569_) {
-                crashreport.addCategory("Wrapped in").setDetailError("Wrapping exception", p_206569_);
-            }
-        } else {
-            crashreport = new CrashReport("Exception in server tick loop", p_206569_);
-        }
-
-        return crashreport;
-    }
-
-    private boolean haveTime() {
-        return this.runningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
-    }
+   private static CrashReport constructOrExtractCrashReport(Throwable p_206569_) {
+      ReportedException reportedexception = null;
+
+      for(Throwable throwable = p_206569_; throwable != null; throwable = throwable.getCause()) {
+         if (throwable instanceof ReportedException reportedexception1) {
+            reportedexception = reportedexception1;
+         }
+      }
+
+      CrashReport crashreport;
+      if (reportedexception != null) {
+         crashreport = reportedexception.getReport();
+         if (reportedexception != p_206569_) {
+            crashreport.addCategory("Wrapped in").setDetailError("Wrapping exception", p_206569_);
+         }
+      } else {
+         crashreport = new CrashReport("Exception in server tick loop", p_206569_);
+      }
+
+      return crashreport;
+   }
+
+   private boolean haveTime() {
+      return this.forceTicks || this.runningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
+   }
+
+   private void executeModerately() {
+      this.runAllTasks();
+      while (!processQueue.isEmpty()) {
+         processQueue.remove().run();
+      }
+      LockSupport.parkNanos("executing tasks", 1000L);
+   }
+   // CraftBukkit end
 
     protected void waitUntilNextTick() {
         this.runAllTasks();
         this.managedBlock(() -> !this.haveTime());
     }
-
-    @Override
+   
+	@Override
     public void waitForTasks() {
         boolean flag = this.isTickTimeLoggingEnabled();
         long i = flag ? Util.getNanos() : 0L;
@@ -795,13 +_,13 @@
         }
     }
 
-    protected TickTask wrapRunnable(Runnable p_129852_) {
+    public TickTask wrapRunnable(Runnable p_129852_) {
         return new TickTask(this.tickCount, p_129852_);
     }
 
-    protected boolean shouldRun(TickTask p_129883_) {
-        return p_129883_.getTick() + 3 < this.tickCount || this.haveTime();
-    }
+   protected boolean shouldRun(TickTask p_129883_) {
+      return p_129883_.getTick() + 3 < this.tickCount || this.haveTime();
+   }
 
     @Override
     public boolean pollTask() {
@@ -870,12 +_,14 @@
 
     public void tickServer(BooleanSupplier p_129871_) {
         long i = Util.getNanos();
+        net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_, this);
         this.tickCount++;
         this.tickRateManager.tick();
         this.tickChildren(p_129871_);
         if (i - this.lastServerStatus >= STATUS_EXPIRE_TIME_NANOS) {
             this.lastServerStatus = i;
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
         }
 
         this.ticksUntilAutosave--;
@@ -897,7 +_,9 @@
         this.smoothedTickTimeMillis = this.smoothedTickTimeMillis * 0.8F + (float)j / (float)TimeUtil.NANOSECONDS_PER_MILLISECOND * 0.19999999F;
         this.logTickMethodTime(i);
         this.profiler.pop();
-    }
+      	WatchdogThread.tick(); // Spigot
+      	 net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_, this);
+   }
 
     private void logTickMethodTime(long p_331549_) {
         if (this.isTickTimeLoggingEnabled()) {
@@ -936,7 +_,8 @@
             Optional.of(serverstatus$players),
             Optional.of(ServerStatus.Version.current()),
             Optional.ofNullable(this.statusIcon),
-            this.enforceSecureProfile()
+            this.enforceSecureProfile(),
+            Optional.of(new net.minecraftforge.network.ServerStatusPing())
         );
     }
 
@@ -960,13 +_,23 @@
         }
     }
 
-    public void tickChildren(BooleanSupplier p_129954_) {
-        this.getPlayerList().getPlayers().forEach(p_326187_ -> p_326187_.connection.suspendFlushing());
-        this.profiler.push("commandFunctions");
-        this.getFunctions().tick();
-        this.profiler.popPush("levels");
-
-        for (ServerLevel serverlevel : this.getAllLevels()) {
+   public void tickChildren(BooleanSupplier p_129954_) {
+      this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // CraftBukkit
+	  this.getPlayerList().getPlayers().forEach(p_326187_ -> p_326187_.connection.suspendFlushing());
+      this.profiler.push("commandFunctions");
+      this.getFunctions().tick();
+      this.profiler.popPush("levels");
+
+      // Send time updates to everyone, it will get the right time from the world the player is in.
+      if (this.tickCount % 20 == 0) {
+         for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
+            ServerPlayer entityplayer = (ServerPlayer) this.getPlayerList().players.get(i);
+            entityplayer.connection.send(new ClientboundSetTimePacket(entityplayer.level.getGameTime(), entityplayer.getPlayerTime(), entityplayer.level.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT))); // Add support for per player time
+         }
+      }
+
+        for (ServerLevel serverlevel : this.getWorldArray()) {
+            long tickStart = Util.getNanos();
             this.profiler.push(() -> serverlevel + " " + serverlevel.dimension().location());
             if (this.tickCount % 20 == 0) {
                 this.profiler.push("timeSync");
@@ -975,6 +_,7 @@
             }
 
             this.profiler.push("tick");
+            net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(serverlevel, p_129954_);
 
             try {
                 serverlevel.tick(p_129954_);
@@ -983,16 +_,18 @@
                 serverlevel.fillReportDetails(crashreport);
                 throw new ReportedException(crashreport);
             }
+            net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(serverlevel, p_129954_);
 
             this.profiler.pop();
             this.profiler.pop();
+            perWorldTickTimes.computeIfAbsent(serverlevel.dimension(), k -> new long[100])[this.tickCount % 100] = Util.getNanos() - tickStart;
         }
 
         this.profiler.popPush("connection");
         this.getConnection().tick();
         this.profiler.popPush("players");
         this.playerList.tick();
-        if (SharedConstants.IS_RUNNING_IN_IDE && this.tickRateManager.runsNormally()) {
+        if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled() && this.tickRateManager.runsNormally()) {
             GameTestTicker.SINGLETON.tick();
         }
 
@@ -1059,6 +_,16 @@
         return this.levels.get(p_129881_);
     }
 
+   // CraftBukkit start
+   public void addLevel(ServerLevel level) {
+      this.levels.put(level.dimension(), level); // Mohist
+   }
+
+   public void removeLevel(ServerLevel level) {
+      this.levels.remove(level.dimension()); // Mohist
+   }
+    // CraftBukkit end
+
     public Set<ResourceKey<Level>> levelKeys() {
         return this.levels.keySet();
     }
@@ -1088,7 +_,7 @@
 
     @DontObfuscate
     public String getServerModName() {
-        return "vanilla";
+        return net.minecraftforge.internal.BrandingControl.getServerBranding();
     }
 
     public SystemReport fillSystemReport(SystemReport p_177936_) {
@@ -1282,7 +_,7 @@
     }
 
     public ServerConnectionListener getConnection() {
-        return this.connection;
+      return this.connection == null ? this.connection = new ServerConnectionListener(this) : this.connection; // Spigot
     }
 
     public boolean isReady() {
@@ -1435,6 +_,7 @@
             .thenAcceptAsync(p_326181_ -> {
                 this.resources.close();
                 this.resources = p_326181_;
+         		this.server.syncCommands(); // SPIGOT-5884: Lost on reload
                 this.packRepository.setSelected(p_129862_);
                 WorldDataConfiguration worlddataconfiguration = new WorldDataConfiguration(getSelectedPacks(this.packRepository, true), this.worldData.enabledFeatures());
                 this.worldData.setDataConfiguration(worlddataconfiguration);
@@ -1443,6 +_,7 @@
                 this.getPlayerList().reloadResources();
                 this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
                 this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
+                this.getPlayerList().getPlayers().forEach(this.getPlayerList()::sendPlayerPermissionLevel); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
             }, this);
         if (this.isSameThread()) {
             this.managedBlock(completablefuture::isDone);
@@ -1452,12 +_,15 @@
     }
 
     public static WorldDataConfiguration configurePackRepository(PackRepository p_248681_, WorldDataConfiguration p_331931_, boolean p_249869_, boolean p_330480_) {
+        net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_248681_, false);
         DataPackConfig datapackconfig = p_331931_.dataPacks();
         FeatureFlagSet featureflagset = p_249869_ ? FeatureFlagSet.of() : p_331931_.enabledFeatures();
         FeatureFlagSet featureflagset1 = p_249869_ ? FeatureFlags.REGISTRY.allFlags() : p_331931_.enabledFeatures();
         p_248681_.reload();
+        DataPackConfig.DEFAULT.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+        datapackconfig.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
         if (p_330480_) {
-            return configureRepositoryWithSelection(p_248681_, List.of("vanilla"), featureflagset, false);
+            return configureRepositoryWithSelection(p_248681_, net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), featureflagset, false);
         } else {
             Set<String> set = Sets.newLinkedHashSet();
 
@@ -1898,6 +_,11 @@
         }
     }
 
+   // CraftBukkit start
+   public final ExecutorService chatExecutor = Executors.newCachedThreadPool(
+           new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").build());
+   // CraftBukkit end
+
     public ChatDecorator getChatDecorator() {
         return ChatDecorator.PLAIN;
     }
@@ -1923,6 +_,48 @@
         return this.potionBrewing;
     }
 
+    private static final com.google.gson.Gson GSON = new com.google.gson.Gson();
+    private String cachedServerStatus; // FORGE: cache the server status json in case a client spams requests
+    private void resetStatusCache(ServerStatus status) {
+       this.cachedServerStatus = GSON.toJson(ServerStatus.CODEC.encodeStart(com.mojang.serialization.JsonOps.INSTANCE, status).result().orElseThrow());
+    }
+
+    public String getStatusJson() {
+       return cachedServerStatus;
+    }
+
+    private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+    @Nullable
+    public long[] getTickTime(ResourceKey<Level> dim) {
+        return perWorldTickTimes.get(dim);
+    }
+
+    @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+    public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+        return this.levels;
+    }
+
+    private int worldArrayMarker = 0;
+    private int worldArrayLast = -1;
+    private ServerLevel[] worldArray;
+
+    @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+    public synchronized void markWorldsDirty() {
+        worldArrayMarker++;
+    }
+
+    private ServerLevel[] getWorldArray() {
+        if (worldArrayMarker == worldArrayLast && worldArray != null)
+           return worldArray;
+        worldArray = this.levels.values().stream().toArray(ServerLevel[]::new);
+        worldArrayLast = worldArrayMarker;
+        return worldArray;
+    }
+
+    public MinecraftServer.ReloadableResources getServerResources() {
+        return resources;
+    }
+
     public static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         @Override
         public void close() {
@@ -1981,4 +_,14 @@
             };
         }
     }
+
+   // CraftBukkit start
+   public static MinecraftServer getServer() {
+      return ( Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+   }
+
+   public boolean isDebugging() {
+      return false;
+   }
+   // CraftBukkit end
 }
