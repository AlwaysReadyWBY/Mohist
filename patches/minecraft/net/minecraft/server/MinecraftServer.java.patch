--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -6,6 +_,9 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mohistmc.mohist.MohistConfig;
+import com.mohistmc.mohist.forge.ForgeInjectBukkit;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
@@ -16,6 +_,7 @@
 import it.unimi.dsi.fastutil.objects.ObjectArraySet;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
+import java.io.File;
 import java.io.IOException;
 import java.io.Writer;
 import java.lang.management.ManagementFactory;
@@ -35,19 +_,26 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Queue;
+import java.util.Random;
 import java.util.Set;
 import java.util.UUID;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import joptsimple.OptionSet;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.FileUtil;
@@ -165,7 +_,20 @@
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.phys.Vec3;
+import net.minecraftforge.common.MinecraftForge;
+import net.minecraftforge.event.level.LevelEvent;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.command.ConsoleCommandSender;
+import org.bukkit.craftbukkit.CraftRegistry;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
+import org.bukkit.event.server.ServerLoadEvent;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.plugin.PluginLoadOrder;
 import org.slf4j.Logger;
+import org.spigotmc.SpigotConfig;
+import org.spigotmc.WatchdogThread;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, ChunkIOErrorReporter, CommandSource, AutoCloseable {
     public static final Logger LOGGER = LogUtils.getLogger();
@@ -200,18 +_,18 @@
     @Nullable
     private MinecraftServer.TimeProfiler debugCommandProfiler;
     private boolean debugCommandProfilerDelayStart;
-    private final ServerConnectionListener connection;
-    private final ChunkProgressListenerFactory progressListenerFactory;
+    private ServerConnectionListener connection;
+    public final ChunkProgressListenerFactory progressListenerFactory;
     @Nullable
     private ServerStatus status;
     @Nullable
     private ServerStatus.Favicon statusIcon;
     private final RandomSource random = RandomSource.create();
-    public final DataFixer fixerUpper;
+    private final DataFixer fixerUpper;
     private String localIp;
     private int port = -1;
     private final LayeredRegistryAccess<RegistryLayer> registries;
-    public final Map<ResourceKey<Level>, ServerLevel> levels = Maps.newLinkedHashMap();
+    private final Map<ResourceKey<Level>, ServerLevel> levels = Maps.newLinkedHashMap();
     private PlayerList playerList;
     private volatile boolean running = true;
     private boolean stopped;
@@ -251,7 +_,7 @@
     private final ServerFunctionManager functionManager;
     private boolean enforceWhitelist;
     private float smoothedTickTimeMillis;
-    private final Executor executor;
+    public final Executor executor;
     @Nullable
     private String serverId;
     public MinecraftServer.ReloadableResources resources;
@@ -262,12 +_,30 @@
     private volatile boolean isSaving;
     private static final AtomicReference<RuntimeException> fatalException = new AtomicReference<>();
 
+    // CraftBukkit start
+    public static WorldLoader.DataLoadContext worldLoader;
+    public CraftServer server;
+    public static OptionSet options;
+    public ConsoleCommandSender console;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public Queue<Runnable> processQueue = new ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    public Commands vanillaCommandDispatcher;
+    private boolean forceTicks;
+    // CraftBukkit end
+    // Spigot start
+    public static final int TPS = 20;
+    public static final int TICK_TIME = 1000000000 / TPS;
+    private static final int SAMPLE_INTERVAL = 100;
+    public final double[] recentTps = new double[ 3 ];
+    // Spigot end
+
     public static <S extends MinecraftServer> S spin(Function<Thread, S> p_129873_) {
         AtomicReference<S> atomicreference = new AtomicReference<>();
-        Thread thread = new Thread(() -> atomicreference.get().runServer(), "Server thread");
+        Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, () -> atomicreference.get().runServer(), "Server thread");
         thread.setUncaughtExceptionHandler((p_177909_, p_177910_) -> LOGGER.error("Uncaught exception in server thread", p_177910_));
         if (Runtime.getRuntime().availableProcessors() > 4) {
-            thread.setPriority(8);
+            thread.setPriority(MohistConfig.yml.getInt("threadpriority.server_thread", 8));
         }
 
         S s = (S)p_129873_.apply(thread);
@@ -289,7 +_,7 @@
         super("Server");
         this.registries = p_236726_.registries();
         this.worldData = p_236726_.worldData();
-        if (!this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) {
+        if (false && !this.registries.compositeAccess().registryOrThrow(Registries.LEVEL_STEM).containsKey(LevelStem.OVERWORLD)) {
             throw new IllegalStateException("Missing Overworld dimension data");
         } else {
             this.proxy = p_236727_;
@@ -300,7 +_,7 @@
                 p_236729_.profileCache().setExecutor(this);
             }
 
-            this.connection = new ServerConnectionListener(this);
+            // this.connection = new ServerConnectionListener(this); // Spigot
             this.tickRateManager = new ServerTickRateManager(this);
             this.progressListenerFactory = p_236730_;
             this.storageSource = p_236724_;
@@ -312,6 +_,8 @@
             this.serverThread = p_236723_;
             this.executor = Util.backgroundExecutor();
             this.potionBrewing = PotionBrewing.bootstrap(this.worldData.enabledFeatures());
+            // CraftBukkit start
+            this.vanillaCommandDispatcher = p_236726_.dataPackResources().commands;
         }
     }
 
@@ -331,7 +_,6 @@
         ChunkProgressListener chunkprogresslistener = this.progressListenerFactory.create(this.worldData.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS));
         this.createLevels(chunkprogresslistener);
         this.forceDifficulty();
-        this.prepareLevels(chunkprogresslistener);
         if (profiledduration != null) {
             profiledduration.finish();
         }
@@ -362,11 +_,14 @@
         ServerLevel serverlevel = new ServerLevel(
             this, this.executor, this.storageSource, serverleveldata, Level.OVERWORLD, levelstem, p_129816_, flag, j, list, true, null
         );
+        this.initWorld(serverlevel, serverleveldata, worldData, worldoptions); // CraftBukkit
         this.levels.put(Level.OVERWORLD, serverlevel);
         DimensionDataStorage dimensiondatastorage = serverlevel.getDataStorage();
         this.readScoreboard(dimensiondatastorage);
+        this.server.scoreboardManager = new CraftScoreboardManager(this, serverlevel.getScoreboard());
         this.commandStorage = new CommandStorage(dimensiondatastorage);
         WorldBorder worldborder = serverlevel.getWorldBorder();
+        net.minecraftforge.event.ForgeEventFactory.onLevelLoad(levels.get(Level.OVERWORLD));
         if (!serverleveldata.isInitialized()) {
             try {
                 setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
@@ -400,26 +_,56 @@
             if (resourcekey != LevelStem.OVERWORLD) {
                 ResourceKey<Level> resourcekey1 = ResourceKey.create(Registries.DIMENSION, resourcekey.location());
                 DerivedLevelData derivedleveldata = new DerivedLevelData(this.worldData, serverleveldata);
+                String name = resourcekey == LevelStem.NETHER ? "DIM1" : "DIM-1";
+                if (resourcekey == LevelStem.NETHER) {
+                    if (!this.server.getAllowNether()) {
+                        continue;
+                    }
+                } else if (resourcekey == LevelStem.END) {
+                    if (!this.server.getAllowEnd()) {
+                        continue;
+                    }
+                }
+                Level.craftWorldData(this.server.getGenerator(name), ForgeInjectBukkit.environment.get(resourcekey), this.server.getBiomeProvider(name));
+                // Mohist start - split calculate for ServerLeverl Preparing
+                ChunkProgressListener mohist$progressListener = this.progressListenerFactory.create(11);
                 ServerLevel serverlevel1 = new ServerLevel(
-                    this,
-                    this.executor,
-                    this.storageSource,
-                    derivedleveldata,
-                    resourcekey1,
-                    entry.getValue(),
-                    p_129816_,
-                    flag,
-                    j,
-                    ImmutableList.of(),
-                    false,
-                    randomsequences
+                        this,
+                        this.executor,
+                        this.storageSource,
+                        derivedleveldata,
+                        resourcekey1,
+                        entry.getValue(),
+                        mohist$progressListener,
+                        flag,
+                        j,
+                        ImmutableList.of(),
+                        false,
+                        randomsequences
                 );
+                this.initWorld(serverlevel1, derivedleveldata, worldData, worldoptions); // CraftBukkit
+                // Mohist end
                 worldborder.addListener(new BorderChangeListener.DelegateBorderChangeListener(serverlevel1.getWorldBorder()));
                 this.levels.put(resourcekey1, serverlevel1);
+                net.minecraftforge.event.ForgeEventFactory.onLevelLoad(serverlevel1);
             }
         }
 
         worldborder.applySettings(serverleveldata.getWorldBorder());
+
+        for (ServerLevel worldserver : this.getAllLevels()) {
+            mohist$prepareWorld(worldserver);
+        }
+
+        this.server.enablePlugins(PluginLoadOrder.POSTWORLD);
+        this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+        this.connection.acceptConnections();
+    }
+
+    private void mohist$prepareWorld(ServerLevel worldserver) {
+        this.prepareLevels(worldserver.getChunkSource().chunkMap.progressListener, worldserver);
+        worldserver.entityManager.tick(); // SPIGOT-6526: Load pending entities so they are available to the API
+        this.server.getPluginManager().callEvent(new WorldLoadEvent(worldserver.getWorld()));
     }
 
     private static void setInitialSpawn(ServerLevel p_177897_, ServerLevelData p_177898_, boolean p_177899_, boolean p_177900_) {
@@ -427,7 +_,23 @@
             p_177898_.setSpawn(BlockPos.ZERO.above(80), 0.0F);
         } else {
             ServerChunkCache serverchunkcache = p_177897_.getChunkSource();
+            if (net.minecraftforge.event.ForgeEventFactory.onCreateWorldSpawn(p_177897_, p_177898_)) return;
             ChunkPos chunkpos = new ChunkPos(serverchunkcache.randomState().sampler().findSpawnPosition());
+            // CraftBukkit start
+            if (p_177897_.generator != null) {
+                Random rand = new Random(p_177897_.getSeed());
+                Location spawn = p_177897_.generator.getFixedSpawnLocation(p_177897_.getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != p_177897_.getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + p_177898_.getLevelName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        p_177898_.setSpawn(new BlockPos(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()), spawn.getYaw());
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
             int i = serverchunkcache.getGenerator().getSpawnHeight(p_177897_);
             if (i < p_177897_.getMinBuildHeight()) {
                 BlockPos blockpos = chunkpos.getWorldPosition();
@@ -479,24 +_,64 @@
         serverleveldata.setGameType(GameType.SPECTATOR);
     }
 
-    private void prepareLevels(ChunkProgressListener p_129941_) {
-        ServerLevel serverlevel = this.overworld();
+    // CraftBukkit start
+    public void initWorld(ServerLevel serverlevel, ServerLevelData serverleveldata, WorldData saveData, WorldOptions worldoptions) {
+        boolean flag = saveData.isDebugWorld();
+        // CraftBukkit start
+        if (serverlevel.generator != null) {
+            serverlevel.getWorld().getPopulators().addAll(serverlevel.generator.getDefaultPopulators(serverlevel.getWorld()));
+        }
+        WorldBorder worldborder = serverlevel.getWorldBorder();
+        worldborder.applySettings(serverleveldata.getWorldBorder()); // CraftBukkit - move up so that WorldBorder is set during WorldInitEvent
+
+        if (!serverleveldata.isInitialized()) {
+            try {
+                setInitialSpawn(serverlevel, serverleveldata, worldoptions.generateBonusChest(), flag);
+                serverleveldata.setInitialized(true);
+                if (flag) {
+                    this.setupDebugLevel(this.worldData);
+                }
+            } catch (Throwable throwable1) {
+                CrashReport crashreport = CrashReport.forThrowable(throwable1, "Exception initializing level");
+
+                try {
+                    serverlevel.fillReportDetails(crashreport);
+                } catch (Throwable throwable) {
+                }
+
+                throw new ReportedException(crashreport);
+            }
+
+            serverleveldata.setInitialized(true);
+        }
+    }
+    // CraftBukkit end
+
+    public AtomicReference<ServerLevel> prepareLevels$serverlevel = new AtomicReference<>(this.overworld());
+
+    public void prepareLevels(ChunkProgressListener pListener, ServerLevel serverlevel) {
+        prepareLevels$serverlevel.set(serverlevel);
+        prepareLevels(pListener);
+    }
+
+    public void prepareLevels(ChunkProgressListener p_129941_) {
+        this.markWorldsDirty();
+        ServerLevel serverlevel = prepareLevels$serverlevel.getAndSet(this.overworld());
+        MinecraftForge.EVENT_BUS.post(new LevelEvent.Load(serverlevel));
+        this.forceTicks = true;
         LOGGER.info("Preparing start region for dimension {}", serverlevel.dimension().location());
         BlockPos blockpos = serverlevel.getSharedSpawnPos();
         p_129941_.updateSpawnPos(new ChunkPos(blockpos));
         ServerChunkCache serverchunkcache = serverlevel.getChunkSource();
         this.nextTickTimeNanos = Util.getNanos();
-        serverlevel.setDefaultSpawnPos(blockpos, serverlevel.getSharedSpawnAngle());
-        int i = this.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS);
+		serverlevel.setDefaultSpawnPos(blockpos, serverlevel.getSharedSpawnAngle());
+		int i = serverlevel.getGameRules().getInt(GameRules.RULE_SPAWN_CHUNK_RADIUS); // CraftBukkit - per-world
         int j = i > 0 ? Mth.square(ChunkProgressListener.calculateDiameter(i)) : 0;
-
-        while (serverchunkcache.getTickingGenerated() < j) {
-            this.nextTickTimeNanos = Util.getNanos() + PREPARE_LEVELS_DEFAULT_DELAY_NANOS;
-            this.waitUntilNextTick();
+        while (serverchunkcache.getTickingGenerated()  < j) {
+        	this.executeModerately();
         }
-
-        this.nextTickTimeNanos = Util.getNanos() + PREPARE_LEVELS_DEFAULT_DELAY_NANOS;
-        this.waitUntilNextTick();
+        
+        this.executeModerately();
 
         for (ServerLevel serverlevel1 : this.levels.values()) {
             ForcedChunksSavedData forcedchunkssaveddata = serverlevel1.getDataStorage().get(ForcedChunksSavedData.factory(), "chunks");
@@ -508,13 +_,17 @@
                     ChunkPos chunkpos = new ChunkPos(k);
                     serverlevel1.getChunkSource().updateChunkForced(chunkpos, true);
                 }
+                net.minecraftforge.common.world.ForgeChunkManager.reinstatePersistentChunks(serverlevel1, forcedchunkssaveddata);
             }
         }
-
-        this.nextTickTimeNanos = Util.getNanos() + PREPARE_LEVELS_DEFAULT_DELAY_NANOS;
-        this.waitUntilNextTick();
+        // CraftBukkit start
+        this.executeModerately();
+        // CraftBukkit end
         p_129941_.stop();
-        this.updateMobSpawningFlags();
+        // CraftBukkit start
+        serverlevel.setSpawnSettings(this.isSpawningMonsters(), this.isSpawningAnimals());
+        this.forceTicks = false;
+        // CraftBukkit end
     }
 
     public GameType getDefaultGameType() {
@@ -545,9 +_,16 @@
 
         ServerLevel serverlevel2 = this.overworld();
         ServerLevelData serverleveldata = this.worldData.overworldData();
-        serverleveldata.setWorldBorder(serverlevel2.getWorldBorder().createSettings());
+        if (serverlevel2 != null) serverleveldata.setWorldBorder(serverlevel2.getWorldBorder().createSettings());
         this.worldData.setCustomBossEvents(this.getCustomBossEvents().save(this.registryAccess()));
         this.storageSource.saveDataTag(this.registryAccess(), this.worldData, this.getPlayerList().getSingleplayerData());
+        for (ServerLevel world : this.getAllLevels()) {
+            if (world.convertable != this.storageSource) {
+                world.K.setWorldBorder(world.getWorldBorder().createSettings());
+                world.K.setCustomBossEvents(this.getCustomBossEvents().save(this.registryAccess()));
+                world.convertable.saveDataTag(this.registryAccess(), world.K, this.getPlayerList().getSingleplayerData());
+            }
+        }
         if (p_129887_) {
             for (ServerLevel serverlevel1 : this.getAllLevels()) {
                 LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", serverlevel1.getChunkSource().chunkMap.getStorageName());
@@ -577,12 +_,35 @@
         this.stopServer();
     }
 
+    // CraftBukkit start
+    private boolean hasStopped = false;
+    private final Object stopLock = new Object();
+
+    public final boolean hasStopped() {
+        synchronized (stopLock) {
+            return hasStopped;
+        }
+    }
+    // CraftBukkit end
+
     public void stopServer() {
+        // CraftBukkit start - prevent double stopping on multiple threads
+        synchronized (stopLock) {
+            if (hasStopped) return;
+            hasStopped = true;
+        }
+        // CraftBukkit end
+
         if (this.metricsRecorder.isRecording()) {
             this.cancelRecordingMetrics();
         }
 
         LOGGER.info("Stopping server");
+        // CraftBukkit start
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
+        // CraftBukkit end
         this.getConnection().stop();
         this.isSaving = true;
         if (this.playerList != null) {
@@ -615,6 +_,7 @@
         for (ServerLevel serverlevel2 : this.getAllLevels()) {
             if (serverlevel2 != null) {
                 try {
+                    net.minecraftforge.event.ForgeEventFactory.onLevelUnload(serverlevel2);
                     serverlevel2.close();
                 } catch (IOException ioexception1) {
                     LOGGER.error("Exception closing the level", (Throwable)ioexception1);
@@ -630,6 +_,12 @@
         } catch (IOException ioexception) {
             LOGGER.error("Failed to unlock level {}", this.storageSource.getLevelId(), ioexception);
         }
+        // Spigot start
+        if (SpigotConfig.saveUserCacheOnStopOnly) {
+            LOGGER.info("Saving usercache.json");
+            this.getProfileCache().save();
+        }
+        // Spigot end
     }
 
     public String getLocalIp() {
@@ -655,16 +_,27 @@
         }
     }
 
+    // Spigot Start
+    private static double calcTps(double avg, double exp, double tps) {
+        return (avg * exp) + (tps * (1 - exp));
+    }
+    // Spigot End
+
     protected void runServer() {
         try {
             if (!this.initServer()) {
                 throw new IllegalStateException("Failed to initialize server");
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStarted(this);
             this.nextTickTimeNanos = Util.getNanos();
             this.statusIcon = this.loadStatusIcon().orElse(null);
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
 
+            // Spigot start
+            Arrays.fill(recentTps, 20);
+            long tickSection = Util.getMillis(), tickCount = 1;
             while (this.running) {
                 long i;
                 if (!this.isPaused() && this.tickRateManager.isSprinting() && this.tickRateManager.checkShouldSprintThisTick()) {
@@ -676,18 +_,30 @@
                     long k = Util.getNanos() - this.nextTickTimeNanos;
                     if (k > OVERLOADED_THRESHOLD_NANOS + 20L * i && this.nextTickTimeNanos - this.lastOverloadWarningNanos >= OVERLOADED_WARNING_INTERVAL_NANOS + 100L * i) {
                         long j = k / i;
-                        LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", k / TimeUtil.NANOSECONDS_PER_MILLISECOND, j);
+                        if (server.getWarnOnOverload()) // CraftBukkit
+                            LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", k / TimeUtil.NANOSECONDS_PER_MILLISECOND, j);
                         this.nextTickTimeNanos += j * i;
                         this.lastOverloadWarningNanos = this.nextTickTimeNanos;
                     }
                 }
 
+                if ( tickCount++ % SAMPLE_INTERVAL == 0 ) {
+                    long curTime = Util.getMillis();
+                    double currentTps = 1E3 / ( curTime - tickSection ) * SAMPLE_INTERVAL;
+                    recentTps[0] = calcTps( recentTps[0], 0.92, currentTps ); // 1/exp(5sec/1min)
+                    recentTps[1] = calcTps( recentTps[1], 0.9835, currentTps ); // 1/exp(5sec/5min)
+                    recentTps[2] = calcTps( recentTps[2], 0.9945, currentTps ); // 1/exp(5sec/15min)
+                    tickSection = curTime;
+                }
+                // Spigot end
+
                 boolean flag = i == 0L;
                 if (this.debugCommandProfilerDelayStart) {
                     this.debugCommandProfilerDelayStart = false;
                     this.debugCommandProfiler = new MinecraftServer.TimeProfiler(Util.getNanos(), this.tickCount);
                 }
 
+                MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
                 this.nextTickTimeNanos += i;
                 this.startMetricsRecordingTick();
                 this.profiler.push("tick");
@@ -708,6 +_,8 @@
                 this.isReady = true;
                 JvmProfiler.INSTANCE.onServerTick(this.smoothedTickTimeMillis);
             }
+            net.minecraftforge.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
         } catch (Throwable throwable1) {
             LOGGER.error("Encountered an unexpected exception", throwable1);
             CrashReport crashreport = constructOrExtractCrashReport(throwable1);
@@ -719,6 +_,7 @@
                 LOGGER.error("We were unable to save this crash report to disk.");
             }
 
+            net.minecraftforge.server.ServerLifecycleHooks.expectServerStopped(); // Forge: Has to come before MinecraftServer#onServerCrash to avoid race conditions
             this.onServerCrash(crashreport);
         } finally {
             try {
@@ -731,6 +_,8 @@
                     this.services.profileCache().clearExecutor();
                 }
 
+                net.minecraftforge.server.ServerLifecycleHooks.handleServerStopped(this);
+                WatchdogThread.doStop(); // Spigot
                 this.onServerExit();
             }
         }
@@ -783,9 +_,18 @@
     }
 
     private boolean haveTime() {
-        return this.runningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
+        return this.forceTicks || this.runningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
     }
 
+    private void executeModerately() {
+        this.runAllTasks();
+        while (!processQueue.isEmpty()) {
+            processQueue.remove().run();
+        }
+        LockSupport.parkNanos("executing tasks", 1000L);
+    }
+    // CraftBukkit end
+	
     public static boolean throwIfFatalException() {
         RuntimeException runtimeexception = fatalException.get();
         if (runtimeexception != null) {
@@ -819,7 +_,7 @@
         }
     }
 
-    protected TickTask wrapRunnable(Runnable p_129852_) {
+    public TickTask wrapRunnable(Runnable p_129852_) {
         return new TickTask(this.tickCount, p_129852_);
     }
 
@@ -894,12 +_,14 @@
 
     public void tickServer(BooleanSupplier p_129871_) {
         long i = Util.getNanos();
+        net.minecraftforge.event.ForgeEventFactory.onPreServerTick(p_129871_, this);
         this.tickCount++;
         this.tickRateManager.tick();
         this.tickChildren(p_129871_);
         if (i - this.lastServerStatus >= STATUS_EXPIRE_TIME_NANOS) {
             this.lastServerStatus = i;
             this.status = this.buildServerStatus();
+            resetStatusCache(status);
         }
 
         this.ticksUntilAutosave--;
@@ -921,6 +_,8 @@
         this.smoothedTickTimeMillis = this.smoothedTickTimeMillis * 0.8F + (float)j / (float)TimeUtil.NANOSECONDS_PER_MILLISECOND * 0.19999999F;
         this.logTickMethodTime(i);
         this.profiler.pop();
+        WatchdogThread.tick(); // Spigot
+        net.minecraftforge.event.ForgeEventFactory.onPostServerTick(p_129871_, this);
     }
 
     private void logTickMethodTime(long p_331549_) {
@@ -960,7 +_,8 @@
             Optional.of(serverstatus$players),
             Optional.of(ServerStatus.Version.current()),
             Optional.ofNullable(this.statusIcon),
-            this.enforceSecureProfile()
+            this.enforceSecureProfile(),
+            Optional.of(new net.minecraftforge.network.ServerStatusPing())
         );
     }
 
@@ -985,12 +_,22 @@
     }
 
     public void tickChildren(BooleanSupplier p_129954_) {
+        this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // CraftBukkit
         this.getPlayerList().getPlayers().forEach(p_326187_ -> p_326187_.connection.suspendFlushing());
         this.profiler.push("commandFunctions");
         this.getFunctions().tick();
         this.profiler.popPush("levels");
 
-        for (ServerLevel serverlevel : this.getAllLevels()) {
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.tickCount % 20 == 0) {
+            for (int i = 0; i < this.getPlayerList().players.size(); ++i) {
+                ServerPlayer entityplayer = (ServerPlayer) this.getPlayerList().players.get(i);
+                entityplayer.connection.send(new ClientboundSetTimePacket(entityplayer.level.getGameTime(), entityplayer.getPlayerTime(), entityplayer.level.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT))); // Add support for per player time
+            }
+        }
+
+        for (ServerLevel serverlevel : this.getWorldArray()) {
+            long tickStart = Util.getNanos();
             this.profiler.push(() -> serverlevel + " " + serverlevel.dimension().location());
             if (this.tickCount % 20 == 0) {
                 this.profiler.push("timeSync");
@@ -999,6 +_,7 @@
             }
 
             this.profiler.push("tick");
+            net.minecraftforge.event.ForgeEventFactory.onPreLevelTick(serverlevel, p_129954_);
 
             try {
                 serverlevel.tick(p_129954_);
@@ -1007,16 +_,18 @@
                 serverlevel.fillReportDetails(crashreport);
                 throw new ReportedException(crashreport);
             }
+            net.minecraftforge.event.ForgeEventFactory.onPostLevelTick(serverlevel, p_129954_);
 
             this.profiler.pop();
             this.profiler.pop();
+            perWorldTickTimes.computeIfAbsent(serverlevel.dimension(), k -> new long[100])[this.tickCount % 100] = Util.getNanos() - tickStart;
         }
 
         this.profiler.popPush("connection");
         this.getConnection().tick();
         this.profiler.popPush("players");
         this.playerList.tick();
-        if (SharedConstants.IS_RUNNING_IN_IDE && this.tickRateManager.runsNormally()) {
+        if (net.minecraftforge.gametest.ForgeGameTestHooks.isGametestEnabled() && this.tickRateManager.runsNormally()) {
             GameTestTicker.SINGLETON.tick();
         }
 
@@ -1083,6 +_,16 @@
         return this.levels.get(p_129881_);
     }
 
+    // CraftBukkit start
+    public void addLevel(ServerLevel level) {
+        this.levels.put(level.dimension(), level); // Mohist
+    }
+
+    public void removeLevel(ServerLevel level) {
+        this.levels.remove(level.dimension()); // Mohist
+    }
+    // CraftBukkit end
+
     public Set<ResourceKey<Level>> levelKeys() {
         return this.levels.keySet();
     }
@@ -1112,7 +_,7 @@
 
     @DontObfuscate
     public String getServerModName() {
-        return "vanilla";
+        return net.minecraftforge.internal.BrandingControl.getServerBranding();
     }
 
     public SystemReport fillSystemReport(SystemReport p_177936_) {
@@ -1306,7 +_,7 @@
     }
 
     public ServerConnectionListener getConnection() {
-        return this.connection;
+        return this.connection == null ? this.connection = new ServerConnectionListener(this) : this.connection; // Spigot
     }
 
     public boolean isReady() {
@@ -1459,6 +_,7 @@
             .thenAcceptAsync(p_326181_ -> {
                 this.resources.close();
                 this.resources = p_326181_;
+                this.server.syncCommands(); // SPIGOT-5884: Lost on reload
                 this.packRepository.setSelected(p_129862_);
                 WorldDataConfiguration worlddataconfiguration = new WorldDataConfiguration(getSelectedPacks(this.packRepository, true), this.worldData.enabledFeatures());
                 this.worldData.setDataConfiguration(worlddataconfiguration);
@@ -1467,6 +_,7 @@
                 this.getPlayerList().reloadResources();
                 this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
                 this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
+                this.getPlayerList().getPlayers().forEach(this.getPlayerList()::sendPlayerPermissionLevel); //Forge: Fix newly added/modified commands not being sent to the client when commands reload.
             }, this);
         if (this.isSameThread()) {
             this.managedBlock(completablefuture::isDone);
@@ -1476,12 +_,15 @@
     }
 
     public static WorldDataConfiguration configurePackRepository(PackRepository p_248681_, WorldDataConfiguration p_331931_, boolean p_249869_, boolean p_330480_) {
+        net.minecraftforge.resource.ResourcePackLoader.loadResourcePacks(p_248681_, false);
         DataPackConfig datapackconfig = p_331931_.dataPacks();
         FeatureFlagSet featureflagset = p_249869_ ? FeatureFlagSet.of() : p_331931_.enabledFeatures();
         FeatureFlagSet featureflagset1 = p_249869_ ? FeatureFlags.REGISTRY.allFlags() : p_331931_.enabledFeatures();
         p_248681_.reload();
+        DataPackConfig.DEFAULT.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
+        datapackconfig.addModPacks(net.minecraftforge.common.ForgeHooks.getModPacks());
         if (p_330480_) {
-            return configureRepositoryWithSelection(p_248681_, List.of("vanilla"), featureflagset, false);
+            return configureRepositoryWithSelection(p_248681_, net.minecraftforge.common.ForgeHooks.getModPacksWithVanilla(), featureflagset, false);
         } else {
             Set<String> set = Sets.newLinkedHashSet();
 
@@ -1922,6 +_,11 @@
         }
     }
 
+    // CraftBukkit start
+    public final ExecutorService chatExecutor = Executors.newCachedThreadPool(
+            new ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Chat Thread - #%d").build());
+    // CraftBukkit end
+
     public ChatDecorator getChatDecorator() {
         return ChatDecorator.PLAIN;
     }
@@ -1984,6 +_,48 @@
         return ServerLinks.EMPTY;
     }
 
+    private static final com.google.gson.Gson GSON = new com.google.gson.Gson();
+    private String cachedServerStatus; // FORGE: cache the server status json in case a client spams requests
+    private void resetStatusCache(ServerStatus status) {
+       this.cachedServerStatus = GSON.toJson(ServerStatus.CODEC.encodeStart(com.mojang.serialization.JsonOps.INSTANCE, status).result().orElseThrow());
+    }
+
+    public String getStatusJson() {
+       return cachedServerStatus;
+    }
+
+    private Map<ResourceKey<Level>, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+    @Nullable
+    public long[] getTickTime(ResourceKey<Level> dim) {
+        return perWorldTickTimes.get(dim);
+    }
+
+    @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+    public synchronized Map<ResourceKey<Level>, ServerLevel> forgeGetWorldMap() {
+        return this.levels;
+    }
+
+    private int worldArrayMarker = 0;
+    private int worldArrayLast = -1;
+    private ServerLevel[] worldArray;
+
+    @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+    public synchronized void markWorldsDirty() {
+        worldArrayMarker++;
+    }
+
+    private ServerLevel[] getWorldArray() {
+        if (worldArrayMarker == worldArrayLast && worldArray != null)
+           return worldArray;
+        worldArray = this.levels.values().stream().toArray(ServerLevel[]::new);
+        worldArrayLast = worldArrayMarker;
+        return worldArray;
+    }
+
+    public MinecraftServer.ReloadableResources getServerResources() {
+        return resources;
+    }
+
     public static record ReloadableResources(CloseableResourceManager resourceManager, ReloadableServerResources managers) implements AutoCloseable {
         @Override
         public void close() {
@@ -2042,4 +_,19 @@
             };
         }
     }
+
+    // CraftBukkit start
+    public static MinecraftServer getServer() {
+        return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+    }
+
+    @Deprecated
+    public static RegistryAccess getDefaultRegistryAccess() {
+        return CraftRegistry.getMinecraftRegistry();
+    }
+
+    public boolean isDebugging() {
+        return false;
+    }
+    // CraftBukkit end
 }
