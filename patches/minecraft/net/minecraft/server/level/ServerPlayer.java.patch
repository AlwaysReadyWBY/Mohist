--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1,6 +_,8 @@
 package net.minecraft.server.level;
 
 import com.google.common.net.InetAddresses;
+import com.mohistmc.mohist.bukkit.inventory.MohistModsInventory;
+import com.mohistmc.mohist.plugins.KeepInventory;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.util.Either;
 import com.mojang.logging.LogUtils;
@@ -11,8 +_,11 @@
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import net.minecraft.BlockUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -38,7 +_,6 @@
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.OutgoingChatMessage;
 import net.minecraft.network.chat.RemoteChatSession;
-import net.minecraft.network.chat.Style;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundAnimatePacket;
 import net.minecraft.network.protocol.game.ClientboundBlockEntityDataPacket;
@@ -52,6 +_,7 @@
 import net.minecraft.network.protocol.game.ClientboundGameEventPacket;
 import net.minecraft.network.protocol.game.ClientboundHorseScreenOpenPacket;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
+import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
 import net.minecraft.network.protocol.game.ClientboundMerchantOffersPacket;
 import net.minecraft.network.protocol.game.ClientboundOpenBookPacket;
 import net.minecraft.network.protocol.game.ClientboundOpenScreenPacket;
@@ -93,6 +_,7 @@
 import net.minecraft.world.Container;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.MenuProvider;
+import net.minecraft.world.damagesource.CombatTracker;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
@@ -104,7 +_,6 @@
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.NeutralMob;
-import net.minecraft.world.entity.Pose;
 import net.minecraft.world.entity.RelativeMovement;
 import net.minecraft.world.entity.ai.attributes.AttributeInstance;
 import net.minecraft.world.entity.ai.attributes.AttributeModifier;
@@ -121,10 +_,12 @@
 import net.minecraft.world.entity.projectile.AbstractArrow;
 import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import net.minecraft.world.entity.vehicle.Boat;
+import net.minecraft.world.food.FoodData;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.ContainerListener;
 import net.minecraft.world.inventory.ContainerSynchronizer;
 import net.minecraft.world.inventory.HorseInventoryMenu;
+import net.minecraft.world.inventory.InventoryMenu;
 import net.minecraft.world.inventory.ResultSlot;
 import net.minecraft.world.inventory.Slot;
 import net.minecraft.world.item.ComplexItem;
@@ -144,6 +_,8 @@
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.BedBlock;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.HorizontalDirectionalBlock;
 import net.minecraft.world.level.block.RespawnAnchorBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
@@ -158,11 +_,37 @@
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.ScoreAccess;
 import net.minecraft.world.scores.ScoreHolder;
+import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.Team;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.WeatherType;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.CraftWorldBorder;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.BlockStateListPopulator;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.CraftLocation;
+import org.bukkit.event.player.PlayerBedLeaveEvent;
+import org.bukkit.event.player.PlayerChangedMainHandEvent;
+import org.bukkit.event.player.PlayerChangedWorldEvent;
+import org.bukkit.event.player.PlayerLocaleChangeEvent;
+import org.bukkit.event.player.PlayerPortalEvent;
+import org.bukkit.event.player.PlayerSpawnChangeEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
+import org.bukkit.event.player.PlayerToggleSneakEvent;
+import org.bukkit.inventory.MainHand;
 import org.slf4j.Logger;
 
-public class ServerPlayer extends Player {
+public class ServerPlayer extends Player implements net.minecraftforge.common.extensions.IForgeServerPlayer {
+    public static final String PERSISTED_NBT_TAG = "PlayerPersisted";
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_XZ = 32;
     private static final int NEUTRAL_MOB_DEATH_NOTIFICATION_RADII_Y = 10;
@@ -203,7 +_,7 @@
     private int levitationStartTime;
     private boolean disconnected;
     private int requestedViewDistance = 2;
-    private String language = "en_us";
+   public String language = "en_us";
     @Nullable
     private Vec3 startingToFallPosition;
     @Nullable
@@ -276,62 +_,128 @@
     public int containerCounter;
     public boolean wonGame;
 
-    public ServerPlayer(MinecraftServer p_254143_, ServerLevel p_254435_, GameProfile p_253651_, ClientInformation p_299301_) {
-        super(p_254435_, p_254435_.getSharedSpawnPos(), p_254435_.getSharedSpawnAngle(), p_253651_);
-        this.textFilter = p_254143_.createTextFilterForPlayer(this);
-        this.gameMode = p_254143_.createGameModeForPlayer(this);
-        this.server = p_254143_;
-        this.stats = p_254143_.getPlayerList().getPlayerStats(this);
-        this.advancements = p_254143_.getPlayerList().getPlayerAdvancements(this);
-        this.moveTo(this.adjustSpawnLocation(p_254435_, p_254435_.getSharedSpawnPos()).getBottomCenter(), 0.0F, 0.0F);
-        this.updateOptions(p_299301_);
-        this.object = null;
-    }
-
-    @Override
-    public BlockPos adjustSpawnLocation(ServerLevel p_343805_, BlockPos p_344752_) {
-        AABB aabb = this.getDimensions(Pose.STANDING).makeBoundingBox(Vec3.ZERO);
-        BlockPos blockpos = p_344752_;
-        if (p_343805_.dimensionType().hasSkyLight() && p_343805_.getServer().getWorldData().getGameType() != GameType.ADVENTURE) {
-            int i = Math.max(0, this.server.getSpawnRadius(p_343805_));
-            int j = Mth.floor(p_343805_.getWorldBorder().getDistanceToBorder((double)p_344752_.getX(), (double)p_344752_.getZ()));
-            if (j < i) {
-                i = j;
-            }
-
-            if (j <= 1) {
-                i = 1;
-            }
-
-            long k = (long)(i * 2 + 1);
-            long l = k * k;
-            int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int)l;
-            int j1 = this.getCoprime(i1);
-            int k1 = RandomSource.create().nextInt(i1);
-
-            for (int l1 = 0; l1 < i1; l1++) {
-                int i2 = (k1 + j1 * l1) % i1;
-                int j2 = i2 % (i * 2 + 1);
-                int k2 = i2 / (i * 2 + 1);
-                blockpos = PlayerRespawnLogic.getOverworldRespawnPos(p_343805_, p_344752_.getX() + j2 - i, p_344752_.getZ() + k2 - i);
-                if (blockpos != null && p_343805_.noCollision(this, aabb.move(blockpos.getBottomCenter()))) {
-                    return blockpos;
-                }
-            }
-
-            blockpos = p_344752_;
-        }
-
-        while (!p_343805_.noCollision(this, aabb.move(blockpos.getBottomCenter())) && blockpos.getY() < p_343805_.getMaxBuildHeight() - 1) {
-            blockpos = blockpos.above();
-        }
-
-        while (p_343805_.noCollision(this, aabb.move(blockpos.below().getBottomCenter())) && blockpos.getY() > p_343805_.getMinBuildHeight() + 1) {
-            blockpos = blockpos.below();
-        }
-
-        return blockpos;
-    }
+   // CraftBukkit start
+   public CraftPlayer.TransferCookieConnection transferCookieConnection;
+   public String displayName;
+   public Component listName;
+   public org.bukkit.Location compassTarget;
+   public int newExp = 0;
+   public int newLevel = 0;
+   public int newTotalExp = 0;
+   public boolean keepLevel = false;
+   public double maxHealthCache;
+   public boolean joining = true;
+   public boolean sentListPacket = false;
+   public String kickLeaveMessage = null; // SPIGOT-3034: Forward leave message to PlayerQuitEvent
+   // CraftBukkit end
+
+   public boolean initialized = false; // Mohist
+
+   public ServerPlayer(MinecraftServer p_254143_, ServerLevel p_254435_, GameProfile p_253651_, ClientInformation p_299301_) {
+      super(p_254435_, p_254435_.getSharedSpawnPos(), p_254435_.getSharedSpawnAngle(), p_253651_);
+      this.textFilter = p_254143_.createTextFilterForPlayer(this);
+      this.gameMode = p_254143_.createGameModeForPlayer(this);
+      this.server = p_254143_;
+      this.stats = p_254143_.getPlayerList().getPlayerStats(this);
+      this.advancements = p_254143_.getPlayerList().getPlayerAdvancements(this);
+      this.fudgeSpawnLocation(p_254435_);
+      this.updateOptions(p_299301_);
+      this.object = null;
+
+      // CraftBukkit start
+      this.displayName = this.getScoreboardName();
+      this.bukkitPickUpLoot = true;
+      this.maxHealthCache = this.getMaxHealth();
+      initialized = true;
+   }
+
+   // Use method to resend items in hands in case of client desync, because the item use got cancelled.
+   // For example, when cancelling the leash event
+   public void resendItemInHands() {
+      this.containerMenu.findSlot(this.getInventory(), this.getInventory().selected).ifPresent(s -> {
+         this.containerSynchronizer.sendSlotChange(this.containerMenu, s, this.getMainHandItem());
+      });
+      this.containerSynchronizer.sendSlotChange(this.inventoryMenu, InventoryMenu.SHIELD_SLOT, this.getOffhandItem());
+   }
+
+   // Yes, this doesn't match Vanilla, but it's the best we can do for now.
+   // If this is an issue, PRs are welcome
+   public final BlockPos getSpawnPoint(ServerLevel worldserver) {
+      BlockPos blockposition = worldserver.getSharedSpawnPos();
+
+      if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
+         int i = Math.max(0, this.server.getSpawnRadius(worldserver));
+         int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+
+         if (j < i) {
+            i = j;
+         }
+
+         if (j <= 1) {
+            i = 1;
+         }
+
+         long k = (long) (i * 2 + 1);
+         long l = k * k;
+         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.getCoprime(i1);
+         int k1 = RandomSource.create().nextInt(i1);
+
+         for (int l1 = 0; l1 < i1; ++l1) {
+            int i2 = (k1 + j1 * l1) % i1;
+            int j2 = i2 % (i * 2 + 1);
+            int k2 = i2 / (i * 2 + 1);
+            BlockPos blockposition1 = PlayerRespawnLogic.getOverworldRespawnPos(worldserver, blockposition.getX() + j2 - i, blockposition.getZ() + k2 - i);
+
+            if (blockposition1 != null) {
+               return blockposition1;
+            }
+         }
+      }
+
+      return blockposition;
+   }
+   // CraftBukkit end
+
+   private void fudgeSpawnLocation(ServerLevel p_9202_) {
+      BlockPos blockpos = p_9202_.getSharedSpawnPos();
+      if (p_9202_.dimensionType().hasSkyLight() && p_9202_.K.getGameType() != GameType.ADVENTURE) {
+         int i = Math.max(0, this.server.getSpawnRadius(p_9202_));
+         int j = Mth.floor(p_9202_.getWorldBorder().getDistanceToBorder((double) blockpos.getX(), (double) blockpos.getZ()));
+         if (j < i) {
+            i = j;
+         }
+
+         if (j <= 1) {
+            i = 1;
+         }
+
+         long k = (long) (i * 2 + 1);
+         long l = k * k;
+         int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
+         int j1 = this.getCoprime(i1);
+         int k1 = RandomSource.create().nextInt(i1);
+
+         for (int l1 = 0; l1 < i1; l1++) {
+            int i2 = (k1 + j1 * l1) % i1;
+            int j2 = i2 % (i * 2 + 1);
+            int k2 = i2 / (i * 2 + 1);
+            BlockPos blockpos1 = PlayerRespawnLogic.getOverworldRespawnPos(p_9202_, blockpos.getX() + j2 - i, blockpos.getZ() + k2 - i);
+            if (blockpos1 != null) {
+               this.moveTo(blockpos1, 0.0F, 0.0F);
+               if (p_9202_.noCollision(this)) {
+                  break;
+               }
+            }
+         }
+      } else {
+         this.moveTo(blockpos, 0.0F, 0.0F);
+
+         while (!p_9202_.noCollision(this) && this.getY() < (double) (p_9202_.getMaxBuildHeight() - 1)) {
+            this.setPos(this.getX(), this.getY() + 1.0, this.getZ());
+         }
+      }
+   }
 
     private int getCoprime(int p_9238_) {
         return p_9238_ <= 16 ? p_9238_ - 1 : 17;
@@ -356,11 +_,20 @@
         if (p_9131_.contains("recipeBook", 10)) {
             this.recipeBook.fromNbt(p_9131_.getCompound("recipeBook"), this.server.getRecipeManager());
         }
+      	this.getBukkitEntity().readExtraData(p_9131_); // CraftBukkit
 
         if (this.isSleeping()) {
             this.stopSleeping();
         }
 
+      // CraftBukkit start
+      String spawnWorld = p_9131_.getString("SpawnWorld");
+      CraftWorld oldWorld = (CraftWorld) Bukkit.getWorld(spawnWorld);
+      if (oldWorld != null) {
+         this.respawnDimension = oldWorld.getHandle().dimension();
+      }
+      // CraftBukkit end
+
         if (p_9131_.contains("SpawnX", 99) && p_9131_.contains("SpawnY", 99) && p_9131_.contains("SpawnZ", 99)) {
             this.respawnPosition = new BlockPos(p_9131_.getInt("SpawnX"), p_9131_.getInt("SpawnY"), p_9131_.getInt("SpawnZ"));
             this.respawnForced = p_9131_.getBoolean("SpawnForced");
@@ -399,7 +_,20 @@
 
         Entity entity1 = this.getRootVehicle();
         Entity entity = this.getVehicle();
-        if (entity != null && entity1 != this && entity1.hasExactlyOnePlayerPassenger()) {
+      // CraftBukkit start - handle non-persistent vehicles
+      boolean persistVehicle = true;
+      if (entity != null) {
+         Entity vehicle;
+         for (vehicle = entity; vehicle != null; vehicle = vehicle.getVehicle()) {
+            if (!vehicle.persist) {
+               persistVehicle = false;
+               break;
+            }
+         }
+      }
+
+      if (persistVehicle && entity != null && entity1 != this && entity1.hasExactlyOnePlayerPassenger()) {
+         // CraftBukkit end
             CompoundTag compoundtag1 = new CompoundTag();
             CompoundTag compoundtag2 = new CompoundTag();
             entity1.save(compoundtag2);
@@ -421,6 +_,7 @@
                 .resultOrPartial(LOGGER::error)
                 .ifPresent(p_248207_ -> p_9197_.put("SpawnDimension", p_248207_));
         }
+      this.getBukkitEntity().setExtraData(p_9197_); // CraftBukkit
 
         p_9197_.putBoolean("spawn_extra_particles_on_fall", this.spawnExtraParticlesOnFall);
         if (this.raidOmenPosition != null) {
@@ -431,6 +_,29 @@
         }
     }
 
+   // CraftBukkit start - World fallback code, either respawn location or global spawn
+   public void spawnIn(Level world) {
+      this.level = world;
+      if (world == null) {
+         this.unsetRemoved();
+         Vec3 position = null;
+         if (this.respawnDimension != null) {
+            world = this.server.getLevel(this.respawnDimension);
+            if (world != null && this.getRespawnPosition() != null) {
+               position = ServerPlayer.findRespawnAndUseSpawnBlock((ServerLevel) world, this.getRespawnPosition(), this.getRespawnAngle(), false, false).orElse(null);
+            }
+         }
+         if (world == null || position == null) {
+            world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
+            position = Vec3.atCenterOf(world.getSharedSpawnPos());
+         }
+         this.level = world;
+         this.setPos(position);
+      }
+      this.gameMode.setLevel((ServerLevel) world);
+   }
+   // CraftBukkit end
+
     public void setExperiencePoints(int p_8986_) {
         float f = (float)this.getXpNeededForNextLevel();
         float f1 = (f - 1.0F) / f;
@@ -488,6 +_,11 @@
 
     @Override
     public void tick() {
+      // CraftBukkit start
+      if (this.joining) {
+         this.joining = false;
+      }
+      // CraftBukkit end
         this.gameMode.tick();
         this.wardenSpawnTracker.tick();
         this.spawnInvulnerableTime--;
@@ -562,7 +_,7 @@
             }
 
             if (this.getHealth() != this.lastSentHealth || this.lastSentFood != this.foodData.getFoodLevel() || this.foodData.getSaturationLevel() == 0.0F != this.lastFoodSaturationZero) {
-                this.connection.send(new ClientboundSetHealthPacket(this.getHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel()));
+            this.connection.send(new ClientboundSetHealthPacket(this.getBukkitEntity().getScaledHealth(), this.foodData.getFoodLevel(), this.foodData.getSaturationLevel())); // CraftBukkit
                 this.lastSentHealth = this.getHealth();
                 this.lastSentFood = this.foodData.getFoodLevel();
                 this.lastFoodSaturationZero = this.foodData.getSaturationLevel() == 0.0F;
@@ -593,6 +_,12 @@
                 this.updateScoreForCriteria(ObjectiveCriteria.EXPERIENCE, Mth.ceil((float)this.lastRecordedExperience));
             }
 
+         	// CraftBukkit start - Force max health updates
+         	if (this.maxHealthCache != this.getMaxHealth()) {
+            	this.getBukkitEntity().updateScaledHealth();
+         	}
+         	// CraftBukkit end
+
             if (this.experienceLevel != this.lastRecordedLevel) {
                 this.lastRecordedLevel = this.experienceLevel;
                 this.updateScoreForCriteria(ObjectiveCriteria.LEVEL, Mth.ceil((float)this.lastRecordedLevel));
@@ -606,6 +_,21 @@
             if (this.tickCount % 20 == 0) {
                 CriteriaTriggers.LOCATION.trigger(this);
             }
+
+         	// CraftBukkit start - initialize oldLevel, fire PlayerLevelChangeEvent, and tick client-sided world border
+         	if (this.oldLevel == -1) {
+            	this.oldLevel = this.experienceLevel;
+         	}
+
+         	if (this.oldLevel != this.experienceLevel) {
+            	CraftEventFactory.callPlayerLevelChangeEvent(this.getBukkitEntity(), this.oldLevel, this.experienceLevel);
+            	this.oldLevel = this.experienceLevel;
+         	}
+
+         	if (this.getBukkitEntity().hasClientWorldBorder()) {
+            	((CraftWorldBorder) this.getBukkitEntity().getWorldBorder()).getHandle().tick();
+         	}
+         	// CraftBukkit end
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.forThrowable(throwable, "Ticking player");
             CrashReportCategory crashreportcategory = crashreport.addCategory("Player being ticked");
@@ -653,10 +_,46 @@
 
     @Override
     public void die(DamageSource p_9035_) {
+        if (net.minecraftforge.event.ForgeEventFactory.onLivingDeath(this, p_9035_)) return;
         this.gameEvent(GameEvent.ENTITY_DIE);
         boolean flag = this.level().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES);
-        if (flag) {
-            Component component = this.getCombatTracker().getDeathMessage();
+        // CraftBukkit start - fire PlayerDeathEvent
+        if (this.isRemoved()) {
+            return;
+        }
+
+        java.util.List<org.bukkit.inventory.ItemStack> loot = new java.util.ArrayList<>(this.getInventory().getContainerSize());
+        boolean keepInventory = this.level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || this.isSpectator();
+
+        if (!keepInventory) {
+            Collection<ItemEntity> drops = this.captureDrops(null);
+            if (drops != null) {
+                for (ItemEntity entity : drops) {
+                    CraftItemStack craftItemStack = CraftItemStack.asCraftMirror(entity.getItem());
+                    loot.add(craftItemStack);
+                }
+            }
+        }
+
+        Component defaultMessage = this.getCombatTracker().getDeathMessage();
+        String deathmessage = defaultMessage.getString();
+
+        keepLevel = keepInventory; // SPIGOT-2222: pre-set keepLevel
+        org.bukkit.event.entity.PlayerDeathEvent event = CraftEventFactory.callPlayerDeathEvent(this, p_9035_, loot, deathmessage, keepInventory);
+
+        // SPIGOT-943 - only call if they have an inventory open
+        if (this.containerMenu != this.inventoryMenu) {
+            this.closeContainer();
+        }
+
+        String deathMessage = event.getDeathMessage();
+        if (deathMessage != null && deathMessage.length() > 0 && flag) { // TODO: allow plugins to override?
+            Component component;
+            if (deathMessage.equals(deathmessage)) {
+                component = this.getCombatTracker().getDeathMessage();
+            } else {
+                component = CraftChatMessage.fromStringOrNull(deathMessage);
+            }
             this.connection
                 .send(
                     new ClientboundPlayerCombatKillPacket(this.getId(), component),
@@ -688,11 +_,16 @@
             this.tellNeutralMobsThatIDied();
         }
 
-        if (!this.isSpectator()) {
-            this.dropAllDeathLoot(this.serverLevel(), p_9035_);
+        // we clean the player's inventory after the EntityDeathEvent is called so plugins can get the exact state of the inventory.
+        if (!event.getKeepInventory()) {
+            dropAllDeathLoot(p_9035_);
         }
 
-        this.getScoreboard().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this, ScoreAccess::increment);
+        this.setCamera(this); // Remove spectated target
+        // CraftBukkit end
+
+        // CraftBukkit - Get our scores instead
+        this.level.getCraftServer().getScoreboardManager().forAllObjectives(ObjectiveCriteria.DEATH_COUNT, this, ScoreAccess::increment);
         LivingEntity livingentity = this.getKillCredit();
         if (livingentity != null) {
             this.awardStat(Stats.ENTITY_KILLED_BY.get(livingentity.getType()));
@@ -725,10 +_,12 @@
         if (p_9050_ != this) {
             super.awardKillScore(p_9050_, p_9051_, p_9052_);
             this.increaseScore(p_9051_);
-            this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_ALL, this, ScoreAccess::increment);
+            // CraftBukkit - Get our scores instead
+            this.level.getCraftServer().getScoreboardManager().forAllObjectives(ObjectiveCriteria.KILL_COUNT_ALL, this, ScoreAccess::increment);
             if (p_9050_ instanceof Player) {
                 this.awardStat(Stats.PLAYER_KILLS);
-                this.getScoreboard().forAllObjectives(ObjectiveCriteria.KILL_COUNT_PLAYERS, this, ScoreAccess::increment);
+                // CraftBukkit - Get our scores instead
+                this.level.getCraftServer().getScoreboardManager().forAllObjectives(ObjectiveCriteria.KILL_COUNT_PLAYERS, this, ScoreAccess::increment);
             } else {
                 this.awardStat(Stats.MOB_KILLS);
             }
@@ -744,7 +_,8 @@
         if (playerteam != null) {
             int i = playerteam.getColor().getId();
             if (i >= 0 && i < p_9127_.length) {
-                this.getScoreboard().forAllObjectives(p_9127_[i], p_312242_, ScoreAccess::increment);
+            	// CraftBukkit - Get our scores instead
+            	this.level.getCraftServer().getScoreboardManager().forAllObjectives(p_9127_[i], p_312242_, ScoreAccess::increment);
             }
         }
     }
@@ -777,9 +_,9 @@
         return !this.isPvpAllowed() ? false : super.canHarmPlayer(p_9064_);
     }
 
-    private boolean isPvpAllowed() {
-        return this.server.isPvpAllowed();
-    }
+   private boolean isPvpAllowed() {
+      return this.level().pvpMode;
+   }
 
     public DimensionTransition findRespawnPositionAndUseSpawnBlock(boolean p_342433_, DimensionTransition.PostDimensionTransition p_343860_) {
         BlockPos blockpos = this.getRespawnPosition();
@@ -849,6 +_,7 @@
     @Nullable
     @Override
     public Entity changeDimension(DimensionTransition p_344993_) {
+        if (net.minecraftforge.event.ForgeEventFactory.onTravelToDimension(this, p_344993_.newLevel().dimension())) return null;
         if (this.isRemoved()) {
             return null;
         } else {
@@ -879,7 +_,7 @@
                 PlayerList playerlist = this.server.getPlayerList();
                 playerlist.sendPlayerPermissionLevel(this);
                 serverlevel1.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
-                this.unsetRemoved();
+                this.revive();
                 serverlevel1.getProfiler().push("moving");
                 if (resourcekey == Level.OVERWORLD && serverlevel.dimension() == Level.NETHER) {
                     this.enteredNetherPosition = this.position();
@@ -908,12 +_,13 @@
                 this.lastSentExp = -1;
                 this.lastSentHealth = -1.0F;
                 this.lastSentFood = -1;
+                net.minecraftforge.event.ForgeEventFactory.onPlayerChangedDimension(this, resourcekey, p_344993_.newLevel().dimension());
                 return this;
             }
         }
     }
 
-    private void triggerDimensionChangeTriggers(ServerLevel p_9210_) {
+   public void triggerDimensionChangeTriggers(ServerLevel p_9210_) {
         ResourceKey<Level> resourcekey = p_9210_.dimension();
         ResourceKey<Level> resourcekey1 = this.level().dimension();
         CriteriaTriggers.CHANGED_DIMENSION.trigger(this, resourcekey, resourcekey1);
@@ -941,57 +_,72 @@
         this.containerMenu.broadcastChanges();
     }
 
-    @Override
-    public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
-        Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
-        if (this.isSleeping() || !this.isAlive()) {
-            return Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
-        } else if (!this.level().dimensionType().natural()) {
-            return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
-        } else if (!this.bedInRange(p_9115_, direction)) {
-            return Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
-        } else if (this.bedBlocked(p_9115_, direction)) {
-            return Either.left(Player.BedSleepingProblem.OBSTRUCTED);
-        } else {
-            this.setRespawnPosition(this.level().dimension(), p_9115_, this.getYRot(), false, true);
-            if (this.level().isDay()) {
-                return Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
+   public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos p_9115_) {
+      boolean force = startSleepInBed_force.getAndSet(false);
+      java.util.Optional<BlockPos> optAt = java.util.Optional.of(p_9115_);
+      Player.BedSleepingProblem ret = net.minecraftforge.event.ForgeEventFactory.onPlayerSleepInBed(this, optAt);
+      Either<Player.BedSleepingProblem, Unit> bedResult = null;
+      if (ret != null) return Either.left(ret);
+      Direction direction = this.level().getBlockState(p_9115_).getValue(HorizontalDirectionalBlock.FACING);
+      if (!this.isSleeping() && this.isAlive()) {
+         if (!this.level().dimensionType().natural() || !this.level().dimensionType().bedWorks()) {
+            bedResult = Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_HERE);
+         } else if (!this.bedInRange(p_9115_, direction)) {
+            bedResult = Either.left(Player.BedSleepingProblem.TOO_FAR_AWAY);
+         } else if (this.bedBlocked(p_9115_, direction)) {
+            bedResult = Either.left(Player.BedSleepingProblem.OBSTRUCTED);
+         } else {
+            this.setRespawnPosition(this.level().dimension(), p_9115_, this.getYRot(), false, true, PlayerSpawnChangeEvent.Cause.BED); // CraftBukkit
+            if (!net.minecraftforge.event.ForgeEventFactory.onSleepingTimeCheck(this, optAt)) {
+               bedResult = Either.left(Player.BedSleepingProblem.NOT_POSSIBLE_NOW);
             } else {
-                if (!this.isCreative()) {
-                    double d0 = 8.0;
-                    double d1 = 5.0;
-                    Vec3 vec3 = Vec3.atBottomCenterOf(p_9115_);
-                    List<Monster> list = this.level()
-                        .getEntitiesOfClass(
-                            Monster.class,
-                            new AABB(
-                                vec3.x() - 8.0,
-                                vec3.y() - 5.0,
-                                vec3.z() - 8.0,
-                                vec3.x() + 8.0,
-                                vec3.y() + 5.0,
-                                vec3.z() + 8.0
-                            ),
-                            p_9062_ -> p_9062_.isPreventingPlayerRest(this)
-                        );
-                    if (!list.isEmpty()) {
-                        return Either.left(Player.BedSleepingProblem.NOT_SAFE);
-                    }
-                }
-
-                Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight(p_9029_ -> {
-                    this.awardStat(Stats.SLEEP_IN_BED);
-                    CriteriaTriggers.SLEPT_IN_BED.trigger(this);
-                });
-                if (!this.serverLevel().canSleepThroughNights()) {
-                    this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
-                }
-
-                ((ServerLevel)this.level()).updateSleepingPlayerList();
-                return either;
+               if (!this.isCreative()) {
+                  double d0 = 8.0D;
+                  double d1 = 5.0D;
+                  Vec3 vec3 = Vec3.atBottomCenterOf(p_9115_);
+                  List<Monster> list = this.level().getEntitiesOfClass(Monster.class, new AABB(vec3.x() - 8.0D, vec3.y() - 5.0D, vec3.z() - 8.0D, vec3.x() + 8.0D, vec3.y() + 5.0D, vec3.z() + 8.0D), (p_9062_) -> {
+                     return p_9062_.isPreventingPlayerRest(this);
+                  });
+                  if (!list.isEmpty()) {
+                     bedResult = Either.left(Player.BedSleepingProblem.NOT_SAFE);
+                  }
+               }
+
+               if (bedResult == null) {
+                  bedResult = Either.right(Unit.INSTANCE);
+               }
             }
-        }
-    }
+         }
+      } else {
+         bedResult = Either.left(Player.BedSleepingProblem.OTHER_PROBLEM);
+      }
+
+      if (bedResult.left().orElse(null) == Player.BedSleepingProblem.OTHER_PROBLEM) {
+         return bedResult; // return immediately if the result is not bypassable by plugins
+      }
+
+      if (force) {
+         bedResult = Either.right(Unit.INSTANCE);
+      }
+
+      bedResult = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerBedEnterEvent(this, p_9115_, bedResult);
+      if (bedResult.left().isPresent()) {
+         return bedResult;
+      }
+
+
+      Either<Player.BedSleepingProblem, Unit> either = super.startSleepInBed(p_9115_).ifRight(p_9029_ -> {
+         this.awardStat(Stats.SLEEP_IN_BED);
+         CriteriaTriggers.SLEPT_IN_BED.trigger(this);
+      });
+      if (!this.serverLevel().canSleepThroughNights()) {
+         this.displayClientMessage(Component.translatable("sleep.not_possible"), true);
+      }
+
+      ((ServerLevel) this.level()).updateSleepingPlayerList();
+      return either;
+
+   }
 
     @Override
     public void startSleeping(BlockPos p_9190_) {
@@ -1000,6 +_,7 @@
     }
 
     private boolean bedInRange(BlockPos p_9117_, Direction p_9118_) {
+        if (p_9118_ == null) return false;
         return this.isReachableBedBlock(p_9117_) || this.isReachableBedBlock(p_9117_.relative(p_9118_.getOpposite()));
     }
 
@@ -1015,28 +_,46 @@
         return !this.freeAt(blockpos) || !this.freeAt(blockpos.relative(p_9193_.getOpposite()));
     }
 
-    @Override
-    public void stopSleepInBed(boolean p_9165_, boolean p_9166_) {
-        if (this.isSleeping()) {
-            this.serverLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(this, 2));
-        }
-
-        super.stopSleepInBed(p_9165_, p_9166_);
-        if (this.connection != null) {
-            this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-        }
-    }
-
-    @Override
-    public void dismountTo(double p_143389_, double p_143390_, double p_143391_) {
-        this.removeVehicle();
-        this.setPos(p_143389_, p_143390_, p_143391_);
-    }
-
-    @Override
-    public boolean isInvulnerableTo(DamageSource p_9182_) {
-        return super.isInvulnerableTo(p_9182_) || this.isChangingDimension();
-    }
+   @Override
+   public void stopSleepInBed(boolean p_9165_, boolean p_9166_) {
+      if (!this.isSleeping()) return; // CraftBukkit - Can't leave bed if not in one!
+      // CraftBukkit start - fire PlayerBedLeaveEvent
+      CraftPlayer player = this.getBukkitEntity();
+      BlockPos bedPosition = this.getSleepingPos().orElse(null);
+
+      org.bukkit.block.Block bed;
+      if (bedPosition != null) {
+         bed = this.level().getWorld().getBlockAt(bedPosition.getX(), bedPosition.getY(), bedPosition.getZ());
+      } else {
+         bed = this.level().getWorld().getBlockAt(player.getLocation());
+      }
+
+      PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed, true);
+      this.level().getCraftServer().getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return;
+      }
+      // CraftBukkit end
+      if (this.isSleeping()) {
+         this.serverLevel().getChunkSource().broadcastAndSend(this, new ClientboundAnimatePacket(this, 2));
+      }
+
+      super.stopSleepInBed(p_9165_, p_9166_);
+      if (this.connection != null) {
+         this.connection.teleport(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot(), PlayerTeleportEvent.TeleportCause.EXIT_BED); // CraftBukkit
+      }
+   }
+
+   @Override
+   public void dismountTo(double p_143389_, double p_143390_, double p_143391_) {
+      this.removeVehicle();
+      this.setPos(p_143389_, p_143390_, p_143391_);
+   }
+
+   @Override
+   public boolean isInvulnerableTo(DamageSource p_9182_) {
+      return super.isInvulnerableTo(p_9182_) || this.isChangingDimension();
+   }
 
     @Override
     protected void checkFallDamage(double p_8976_, boolean p_8977_, BlockState p_8978_, BlockPos p_8979_) {
@@ -1093,49 +_,96 @@
         this.containerCounter = this.containerCounter % 100 + 1;
     }
 
-    @Override
-    public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
-        if (p_9033_ == null) {
+   public int nextContainerCounterInt() {
+      this.containerCounter = this.containerCounter % 100 + 1;
+      return containerCounter; // CraftBukkit
+   }
+
+   public OptionalInt openMenu(@Nullable MenuProvider p_9033_) {
+      if (p_9033_ == null) {
+         return OptionalInt.empty();
+      } else {
+         // CraftBukkit start - SPIGOT-6552: Handle inventory closing in CraftEventFactory#callInventoryOpenEvent(...)
+         /*
+         if (this.containerMenu != this.inventoryMenu) {
+            this.closeContainer();
+         }
+         */
+         // CraftBukkit end
+
+         this.nextContainerCounter();
+         AbstractContainerMenu abstractcontainermenu = p_9033_.createMenu(this.containerCounter, this.getInventory(), this);
+
+         // CraftBukkit start - Inventory open hook
+         if (abstractcontainermenu != null) {
+            abstractcontainermenu.setTitle(p_9033_.getDisplayName());
+
+            // Mohist start - Custom Container compatible with mods
+            if (abstractcontainermenu.getBukkitView() == null) {
+               org.bukkit.inventory.Inventory inventory = new CraftInventory(new MohistModsInventory(abstractcontainermenu, this));
+               // inventory.getType().setMods(true); // TODO Mohist
+               abstractcontainermenu.bukkitView = new CraftInventoryView(this.getBukkitEntity(), inventory, abstractcontainermenu);
+            }
+            // Mohist end
+
+            boolean cancelled = false;
+            abstractcontainermenu = CraftEventFactory.callInventoryOpenEvent(this, abstractcontainermenu, cancelled);
+            if (abstractcontainermenu == null && !cancelled) { // Let pre-cancelled events fall through
+               // SPIGOT-5263 - close chest if cancelled
+               if (p_9033_ instanceof Container) {
+                  ((Container) p_9033_).stopOpen(this);
+               } else if (p_9033_ instanceof ChestBlock.DoubleInventory) {
+                  // SPIGOT-5355 - double chests too :(
+                  ((ChestBlock.DoubleInventory) p_9033_).inventorylargechest.stopOpen(this);
+               }
+               return OptionalInt.empty();
+            }
+         }
+         // CraftBukkit end
+
+         if (abstractcontainermenu == null) {
+            if (this.isSpectator()) {
+               this.displayClientMessage(Component.translatable("container.spectatorCantOpen").withStyle(ChatFormatting.RED), true);
+            }
+
             return OptionalInt.empty();
-        } else {
-            if (this.containerMenu != this.inventoryMenu) {
-                this.closeContainer();
-            }
-
-            this.nextContainerCounter();
-            AbstractContainerMenu abstractcontainermenu = p_9033_.createMenu(this.containerCounter, this.getInventory(), this);
-            if (abstractcontainermenu == null) {
-                if (this.isSpectator()) {
-                    this.displayClientMessage(Component.translatable("container.spectatorCantOpen").withStyle(ChatFormatting.RED), true);
-                }
-
-                return OptionalInt.empty();
-            } else {
-                this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), p_9033_.getDisplayName()));
-                this.initMenu(abstractcontainermenu);
-                this.containerMenu = abstractcontainermenu;
-                return OptionalInt.of(this.containerCounter);
-            }
-        }
-    }
-
-    @Override
-    public void sendMerchantOffers(int p_8988_, MerchantOffers p_8989_, int p_8990_, int p_8991_, boolean p_8992_, boolean p_8993_) {
-        this.connection.send(new ClientboundMerchantOffersPacket(p_8988_, p_8989_, p_8990_, p_8991_, p_8992_, p_8993_));
-    }
-
-    @Override
-    public void openHorseInventory(AbstractHorse p_9059_, Container p_9060_) {
-        if (this.containerMenu != this.inventoryMenu) {
-            this.closeContainer();
-        }
-
-        this.nextContainerCounter();
-        int i = p_9059_.getInventoryColumns();
-        this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, i, p_9059_.getId()));
-        this.containerMenu = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_, i);
-        this.initMenu(this.containerMenu);
-    }
+         } else {
+            this.containerMenu = abstractcontainermenu; // CraftBukkit
+            this.connection.send(new ClientboundOpenScreenPacket(abstractcontainermenu.containerId, abstractcontainermenu.getType(), abstractcontainermenu.getTitle()));
+            this.initMenu(abstractcontainermenu);
+            net.minecraftforge.event.ForgeEventFactory.onPlayerOpenContainer(this, this.containerMenu);
+            return OptionalInt.of(this.containerCounter);
+         }
+      }
+   }
+
+   @Override
+   public void sendMerchantOffers(int p_8988_, MerchantOffers p_8989_, int p_8990_, int p_8991_, boolean p_8992_, boolean p_8993_) {
+      this.connection.send(new ClientboundMerchantOffersPacket(p_8988_, p_8989_, p_8990_, p_8991_, p_8992_, p_8993_));
+   }
+
+   public void openHorseInventory(AbstractHorse p_9059_, Container p_9060_) {
+      // CraftBukkit start - Inventory open hook
+      this.nextContainerCounter();
+      AbstractContainerMenu container = new HorseInventoryMenu(this.containerCounter, this.getInventory(), p_9060_, p_9059_);
+      container.setTitle(p_9059_.getDisplayName());
+      container = CraftEventFactory.callInventoryOpenEvent(this, container);
+
+      if (container == null) {
+         p_9060_.stopOpen(this);
+         return;
+      }
+      // CraftBukkit end
+      if (this.containerMenu != this.inventoryMenu) {
+         this.closeContainer();
+      }
+
+      // this.nextContainerCounter(); // CraftBukkit - moved up
+      this.connection.send(new ClientboundHorseScreenOpenPacket(this.containerCounter, p_9060_.getContainerSize(), p_9059_.getId()));
+      this.containerMenu = container; // CraftBukkit
+      this.initMenu(this.containerMenu);
+      net.minecraftforge.event.ForgeEventFactory.onPlayerOpenContainer(this, this.containerMenu);
+   }
 
     @Override
     public void openItemGui(ItemStack p_9082_, InteractionHand p_9083_) {
@@ -1163,6 +_,7 @@
     public void doCloseContainer() {
         this.containerMenu.removed(this);
         this.inventoryMenu.transferState(this.containerMenu);
+        net.minecraftforge.event.ForgeEventFactory.onPlayerCloseContainer(this, this.containerMenu);
         this.containerMenu = this.inventoryMenu;
     }
 
@@ -1177,6 +_,16 @@
             }
 
             this.jumping = p_8983_;
+         // CraftBukkit start
+         if (p_8984_ != this.isShiftKeyDown()) {
+            PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getBukkitEntity(), p_8984_);
+            this.server.server.getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+               return;
+            }
+         }
+         // CraftBukkit end
             this.setShiftKeyDown(p_8984_);
         }
     }
@@ -1326,6 +_,7 @@
 
     public void resetSentInfo() {
         this.lastSentHealth = -1.0E8F;
+      this.lastSentExp = -1; // CraftBukkit - Added to reset
     }
 
     @Override
@@ -1364,21 +_,18 @@
             this.getInventory().replaceWith(p_9016_.getInventory());
             this.setHealth(p_9016_.getHealth());
             this.foodData = p_9016_.foodData;
-
-            for (MobEffectInstance mobeffectinstance : p_9016_.getActiveEffects()) {
-                this.addEffect(new MobEffectInstance(mobeffectinstance));
-            }
-
             this.experienceLevel = p_9016_.experienceLevel;
             this.totalExperience = p_9016_.totalExperience;
             this.experienceProgress = p_9016_.experienceProgress;
             this.setScore(p_9016_.getScore());
             this.portalProcess = p_9016_.portalProcess;
-        } else if (this.level().getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) || p_9016_.isSpectator()) {
-            this.getInventory().replaceWith(p_9016_.getInventory());
+      } else if (KeepInventory.inventory(p_9016_) || p_9016_.isSpectator()) {
+         this.getInventory().replaceWith(p_9016_.getInventory());
+         if (KeepInventory.exp(p_9016_) || this.keepLevel) {
             this.experienceLevel = p_9016_.experienceLevel;
             this.totalExperience = p_9016_.totalExperience;
             this.experienceProgress = p_9016_.experienceProgress;
+         }
             this.setScore(p_9016_.getScore());
         }
 
@@ -1388,13 +_,22 @@
         this.lastSentExp = -1;
         this.lastSentHealth = -1.0F;
         this.lastSentFood = -1;
-        this.recipeBook.copyOverData(p_9016_.recipeBook);
+      // this.recipeBook.copyOverData(p_9016_.recipeBook); // CraftBukkit
         this.seenCredits = p_9016_.seenCredits;
         this.enteredNetherPosition = p_9016_.enteredNetherPosition;
         this.chunkTrackingView = p_9016_.chunkTrackingView;
         this.setShoulderEntityLeft(p_9016_.getShoulderEntityLeft());
         this.setShoulderEntityRight(p_9016_.getShoulderEntityRight());
         this.setLastDeathLocation(p_9016_.getLastDeathLocation());
+
+        //Copy over a section of the Entity Data from the old player.
+        //Allows mods to specify data that persists after players respawn.
+        CompoundTag old = p_9016_.getPersistentData();
+        if (old.contains(PERSISTED_NBT_TAG))
+            getPersistentData().put(PERSISTED_NBT_TAG, old.get(PERSISTED_NBT_TAG));
+        net.minecraftforge.event.ForgeEventFactory.onPlayerClone(this, p_9016_, !p_9017_);
+        this.tabListHeader = p_9016_.tabListHeader;
+        this.tabListFooter = p_9016_.tabListFooter;
     }
 
     @Override
@@ -1445,26 +_,28 @@
             );
     }
 
-    @Override
-    public boolean teleportTo(
-        ServerLevel p_265564_, double p_265424_, double p_265680_, double p_265312_, Set<RelativeMovement> p_265192_, float p_265059_, float p_265266_
-    ) {
-        ChunkPos chunkpos = new ChunkPos(BlockPos.containing(p_265424_, p_265680_, p_265312_));
-        p_265564_.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkpos, 1, this.getId());
-        this.stopRiding();
-        if (this.isSleeping()) {
-            this.stopSleepInBed(true, true);
-        }
-
-        if (p_265564_ == this.level()) {
-            this.connection.teleport(p_265424_, p_265680_, p_265312_, p_265059_, p_265266_, p_265192_);
-        } else {
-            this.teleportTo(p_265564_, p_265424_, p_265680_, p_265312_, p_265059_, p_265266_);
-        }
-
-        this.setYHeadRot(p_265059_);
-        return true;
-    }
+   public boolean teleportTo(ServerLevel p_265564_, double p_265424_, double p_265680_, double p_265312_, Set<RelativeMovement> p_265192_, float p_265059_, float p_265266_) {
+      // CraftBukkit start
+      return teleportTo(p_265564_, p_265424_, p_265680_, p_265312_, p_265192_, p_265059_, p_265266_, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   public boolean teleportTo(ServerLevel pLevel, double pX, double pY, double pZ, Set<RelativeMovement> pRelativeMovements, float pYRot, float pXRot, PlayerTeleportEvent.TeleportCause cause) {
+      ChunkPos chunkpos = new ChunkPos(BlockPos.containing(pX, pY, pZ));
+      pLevel.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkpos, 1, this.getId());
+      this.stopRiding();
+      if (this.isSleeping()) {
+         this.stopSleepInBed(true, true);
+      }
+
+      if (pLevel == this.level()) {
+         this.connection.teleport(pX, pY, pZ, pYRot, pXRot, pRelativeMovements, cause); // CraftBukkit
+      } else {
+         this.teleportTo(pLevel, pX, pY, pZ, pYRot, pXRot, cause); // CraftBukkit
+      }
+
+      this.setYHeadRot(pYRot);
+      return true;
+   }
 
     @Override
     public void moveTo(double p_9171_, double p_9172_, double p_9173_) {
@@ -1496,6 +_,7 @@
 
     public boolean setGameMode(GameType p_143404_) {
         boolean flag = this.isSpectator();
+        p_143404_ = net.minecraftforge.common.ForgeHooks.onChangeGameType(this, this.gameMode.getGameModeForPlayer(), p_143404_);
         if (!this.gameMode.changeGameModeForPlayer(p_143404_)) {
             return false;
         } else {
@@ -1567,7 +_,17 @@
             : "<unknown>";
     }
 
-    public void updateOptions(ClientInformation p_297843_) {
+   public void updateOptions(ClientInformation p_297843_) {
+      // CraftBukkit start
+      if (getMainArm() != p_297843_.mainHand()) {
+         PlayerChangedMainHandEvent event = new PlayerChangedMainHandEvent(getBukkitEntity(), getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT);
+         this.server.server.getPluginManager().callEvent(event);
+      }
+      if (!this.language.equals(p_297843_.language())) {
+         PlayerLocaleChangeEvent event = new PlayerLocaleChangeEvent(getBukkitEntity(), p_297843_.language());
+         this.server.server.getPluginManager().callEvent(event);
+      }
+      // CraftBukkit end
         this.language = p_297843_.language();
         this.requestedViewDistance = p_297843_.viewDistance();
         this.chatVisibility = p_297843_.chatVisibility();
@@ -1642,6 +_,9 @@
     public void setCamera(@Nullable Entity p_9214_) {
         Entity entity = this.getCamera();
         this.camera = (Entity)(p_9214_ == null ? this : p_9214_);
+        while (this.camera instanceof net.minecraftforge.entity.PartEntity<?> partEntity) {
+            this.camera = partEntity.getParent(); // FORGE: fix MC-46486
+        }
         if (entity != this.camera) {
             if (this.camera.level() instanceof ServerLevel serverlevel) {
                 this.teleportTo(
@@ -1680,7 +_,11 @@
 
     @Nullable
     public Component getTabListDisplayName() {
-        return null;
+        if (!this.hasTabListName) {
+            this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName(this);
+            this.hasTabListName = true;
+        }
+        return this.tabListDisplayName;
     }
 
     @Override
@@ -1701,15 +_,42 @@
         return this.advancements;
     }
 
-    public void teleportTo(ServerLevel p_9000_, double p_9001_, double p_9002_, double p_9003_, float p_9004_, float p_9005_) {
-        this.setCamera(this);
-        this.stopRiding();
-        if (p_9000_ == this.level()) {
-            this.connection.teleport(p_9001_, p_9002_, p_9003_, p_9004_, p_9005_);
-        } else {
-            this.changeDimension(new DimensionTransition(p_9000_, new Vec3(p_9001_, p_9002_, p_9003_), Vec3.ZERO, p_9004_, p_9005_, DimensionTransition.DO_NOTHING));
-        }
-    }
+   // CraftBukkit start
+   public void teleportTo(ServerLevel p_9000_, double p_9001_, double p_9002_, double p_9003_, float p_9004_, float p_9005_) {
+      this.teleportTo(p_9000_, p_9001_, p_9002_, p_9003_, p_9004_, p_9005_, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN);
+   }
+
+   public void teleportTo(ServerLevel pNewLevel, double pX, double pY, double pZ, float pYaw, float pPitch, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+      this.setCamera(this);
+      this.stopRiding();
+
+      if (cause != PlayerTeleportEvent.TeleportCause.UNKNOWN) {
+         this.getBukkitEntity().teleport(new Location(pNewLevel.getWorld(), pX, pY, pZ, pYaw, pPitch), cause);
+         return;
+      }
+      if (pNewLevel == this.level()) {
+         this.connection.teleport(pX, pY, pZ, pYaw, pPitch);
+      } else {
+         if (net.minecraftforge.event.ForgeEventFactory.onTravelToDimension(this, pNewLevel.dimension())) return;
+         ServerLevel serverlevel = this.serverLevel();
+         LevelData leveldata = pNewLevel.getLevelData();
+         this.connection.send(new ClientboundRespawnPacket(this.createCommonSpawnInfo(pNewLevel), (byte) 3));
+         this.connection.send(new ClientboundChangeDifficultyPacket(leveldata.getDifficulty(), leveldata.isDifficultyLocked()));
+         this.server.getPlayerList().sendPlayerPermissionLevel(this);
+         serverlevel.removePlayerImmediately(this, Entity.RemovalReason.CHANGED_DIMENSION);
+         this.revive();
+         this.moveTo(pX, pY, pZ, pYaw, pPitch);
+         this.setServerLevel(pNewLevel);
+         pNewLevel.addDuringCommandTeleport(this);
+         this.triggerDimensionChangeTriggers(serverlevel);
+         this.connection.teleport(pX, pY, pZ, pYaw, pPitch);
+         this.gameMode.setLevel(pNewLevel);
+         this.server.getPlayerList().sendLevelInfo(this, pNewLevel);
+         this.server.getPlayerList().sendAllPlayerInfo(this);
+         net.minecraftforge.event.ForgeEventFactory.onPlayerChangedDimension(this, serverlevel.dimension(), pNewLevel.dimension());
+      }
+
+   }
 
     @Nullable
     public BlockPos getRespawnPosition() {
@@ -1728,11 +_,38 @@
         return this.respawnForced;
     }
 
-    public void copyRespawnPosition(ServerPlayer p_344968_) {
-        this.setRespawnPosition(p_344968_.getRespawnDimension(), p_344968_.getRespawnPosition(), p_344968_.getRespawnAngle(), p_344968_.isRespawnForced(), false);
+
+    public PlayerSpawnChangeEvent.Cause cause = PlayerSpawnChangeEvent.Cause.UNKNOWN;
+
+    public void setRespawnPosition(ResourceKey<Level> resourcekey, @Nullable BlockPos blockposition, float f, boolean flag, boolean flag1, PlayerSpawnChangeEvent.Cause cause) {
+       this.cause = cause;
+       this.setRespawnPosition(resourcekey, blockposition, f, flag, flag1);
     }
 
     public void setRespawnPosition(ResourceKey<Level> p_9159_, @Nullable BlockPos p_9160_, float p_9161_, boolean p_9162_, boolean p_9163_) {
+        if (net.minecraftforge.event.ForgeEventFactory.onPlayerSpawnSet(this, p_9160_ == null ? Level.OVERWORLD : p_9159_, p_9160_, p_9162_))
+            return;
+        ServerLevel newWorld = this.server.getLevel(p_9159_);
+        Location newSpawn = (p_9160_ != null) ? CraftLocation.toBukkit(p_9160_, newWorld.getWorld(), p_9161_, 0) : null;
+
+        PlayerSpawnChangeEvent event = new PlayerSpawnChangeEvent(this.getBukkitEntity(), newSpawn, p_9162_, cause);
+        Bukkit.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        newSpawn = event.getNewSpawn();
+        p_9162_ = event.isForced();
+
+        if (newSpawn != null) {
+            p_9159_ = ((CraftWorld) newSpawn.getWorld()).getHandle().dimension();
+            p_9160_ = BlockPos.containing(newSpawn.getX(), newSpawn.getY(), newSpawn.getZ());
+            p_9161_ = newSpawn.getYaw();
+        } else {
+            p_9159_ = Level.OVERWORLD;
+            p_9160_ = null;
+            p_9161_ = 0.0F;
+        }
+        // CraftBukkit end
         if (p_9160_ != null) {
             boolean flag = p_9160_.equals(this.respawnPosition) && p_9159_.equals(this.respawnDimension);
             if (p_9163_ && !flag) {
@@ -1790,6 +_,9 @@
         if (itementity == null) {
             return null;
         } else {
+            if (captureDrops() != null)
+                captureDrops().add(itementity);
+            else
             this.level().addFreshEntity(itementity);
             ItemStack itemstack = itementity.getItem();
             if (p_9087_) {
@@ -1861,9 +_,12 @@
 
     public boolean drop(boolean p_182295_) {
         Inventory inventory = this.getInventory();
+        ItemStack selected = inventory.getSelected();
+        if (selected.isEmpty() || !selected.onDroppedByPlayer(this)) return false;
+        if (isUsingItem() && getUsedItemHand() == InteractionHand.MAIN_HAND && (p_182295_ || selected.getCount() == 1)) stopUsingItem(); // Forge: fix MC-231097 on the serverside
         ItemStack itemstack = inventory.removeFromSelected(p_182295_);
         this.containerMenu.findSlot(inventory, inventory.selected).ifPresent(p_287377_ -> this.containerMenu.setRemoteSlot(p_287377_, inventory.getSelected()));
-        return this.drop(itemstack, false, true) != null;
+        return net.minecraftforge.common.ForgeHooks.onPlayerTossEvent(this, itemstack, true) != null;
     }
 
     public boolean allowsListing() {
@@ -1957,35 +_,250 @@
         return this.raidOmenPosition;
     }
 
-    @Override
-    public Vec3 getKnownMovement() {
-        Entity entity = this.getVehicle();
-        return entity != null && entity.getControllingPassenger() != this ? entity.getKnownMovement() : this.lastKnownClientMovement;
-    }
-
-    public void setKnownMovement(Vec3 p_342348_) {
-        this.lastKnownClientMovement = p_342348_;
-    }
-
-    @Override
-    protected float getEnchantedDamage(Entity p_344113_, float p_344852_, DamageSource p_343579_) {
-        return EnchantmentHelper.modifyDamage(this.serverLevel(), this.getWeaponItem(), p_344113_, p_343579_, p_344852_);
-    }
-
-    @Override
-    public void onEquippedItemBroken(Item p_344553_, EquipmentSlot p_343482_) {
-        super.onEquippedItemBroken(p_344553_, p_343482_);
-        this.awardStat(Stats.ITEM_BROKEN.get(p_344553_));
-    }
-
-    static record RespawnPosAngle(Vec3 position, float yaw) {
-        public static ServerPlayer.RespawnPosAngle of(Vec3 p_342971_, BlockPos p_343580_) {
-            return new ServerPlayer.RespawnPosAngle(p_342971_, calculateLookAtYaw(p_342971_, p_343580_));
-        }
-
-        private static float calculateLookAtYaw(Vec3 p_344384_, BlockPos p_344719_) {
-            Vec3 vec3 = Vec3.atBottomCenterOf(p_344719_).subtract(p_344384_).normalize();
-            return (float)Mth.wrapDegrees(Mth.atan2(vec3.z, vec3.x) * 180.0F / (float)Math.PI - 90.0);
-        }
-    }
+    /**
+     * Returns the language last reported by the player as their local language.
+     * Defaults to en_us if the value is unknown.
+     */
+    public String getLanguage() {
+       return this.language;
+    }
+
+    private Component tabListHeader = Component.empty();
+    private Component tabListFooter = Component.empty();
+
+    public Component getTabListHeader() {
+        return this.tabListHeader;
+    }
+
+    /**
+     * Set the tab list header while preserving the footer.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeader(final Component header) {
+        this.setTabListHeaderFooter(header, this.tabListFooter);
+    }
+
+    public Component getTabListFooter() {
+        return this.tabListFooter;
+    }
+
+    /**
+     * Set the tab list footer while preserving the header.
+     *
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListFooter(final Component footer) {
+        this.setTabListHeaderFooter(this.tabListHeader, footer);
+    }
+
+    /**
+     * Set the tab list header and footer at once.
+     *
+     * @param header the new header, or {@link Component#empty()} to clear
+     * @param footer the new footer, or {@link Component#empty()} to clear
+     */
+    public void setTabListHeaderFooter(final Component header, final Component footer) {
+        if (java.util.Objects.equals(header, this.tabListHeader)
+            && java.util.Objects.equals(footer, this.tabListFooter)) {
+            return;
+        }
+
+        this.tabListHeader = java.util.Objects.requireNonNull(header, "header");
+        this.tabListFooter = java.util.Objects.requireNonNull(footer, "footer");
+
+        this.connection.send(new net.minecraft.network.protocol.game.ClientboundTabListPacket(header, footer));
+    }
+
+    // We need this as tablistDisplayname may be null even if the event was fired.
+    private boolean hasTabListName = false;
+    private Component tabListDisplayName = null;
+    /**
+     * Force the name displayed in the tab list to refresh, by firing {@link net.minecraftforge.event.entity.player.PlayerEvent.TabListNameFormat}.
+     */
+    public void refreshTabListName() {
+        Component oldName = this.tabListDisplayName;
+        this.tabListDisplayName = net.minecraftforge.event.ForgeEventFactory.getPlayerTabListDisplayName(this);
+        if (!java.util.Objects.equals(oldName, this.tabListDisplayName)) {
+            this.getServer().getPlayerList().broadcastAll(new net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket(net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this));
+        }
+    }
+
+   @Override
+   public Vec3 getKnownMovement() {
+      Entity entity = this.getVehicle();
+      return entity != null && entity.getControllingPassenger() != this ? entity.getKnownMovement() : this.lastKnownClientMovement;
+   }
+
+   public void setKnownMovement(Vec3 p_342348_) {
+      this.lastKnownClientMovement = p_342348_;
+   }
+
+   @Override
+   protected float getEnchantedDamage(Entity p_344113_, float p_344852_, DamageSource p_343579_) {
+      return EnchantmentHelper.modifyDamage(this.serverLevel(), this.getWeaponItem(), p_344113_, p_343579_, p_344852_);
+   }
+
+   @Override
+   public void onEquippedItemBroken(Item p_344553_, EquipmentSlot p_343482_) {
+      super.onEquippedItemBroken(p_344553_, p_343482_);
+      this.awardStat(Stats.ITEM_BROKEN.get(p_344553_));
+   }
+
+   static record RespawnPosAngle(Vec3 position, float yaw) {
+      public static ServerPlayer.RespawnPosAngle of(Vec3 p_342971_, BlockPos p_343580_) {
+         return new ServerPlayer.RespawnPosAngle(p_342971_, calculateLookAtYaw(p_342971_, p_343580_));
+      }
+
+      private static float calculateLookAtYaw(Vec3 p_344384_, BlockPos p_344719_) {
+         Vec3 vec3 = Vec3.atBottomCenterOf(p_344719_).subtract(p_344384_).normalize();
+         return (float)Mth.wrapDegrees(Mth.atan2(vec3.z, vec3.x) * 180.0F / (float)Math.PI - 90.0);
+      }
+   }
+
+
+   // CraftBukkit start - Add per-player time and weather.
+   public long timeOffset = 0;
+   public boolean relativeTime = true;
+
+   public long getPlayerTime() {
+      if (this.relativeTime) {
+         // Adds timeOffset to the current server time.
+         return this.level().getDayTime() + this.timeOffset;
+      } else {
+         // Adds timeOffset to the beginning of this day.
+         return this.level().getDayTime() - (this.level().getDayTime() % 24000) + this.timeOffset;
+      }
+   }
+
+   public WeatherType weather = null;
+
+   public WeatherType getPlayerWeather() {
+      return this.weather;
+   }
+
+   public void setPlayerWeather(WeatherType type, boolean plugin) {
+      if (!plugin && this.weather != null) {
+         return;
+      }
+
+      if (plugin) {
+         this.weather = type;
+      }
+
+      if (type == WeatherType.DOWNFALL) {
+         this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.STOP_RAINING, 0));
+      } else {
+         this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.START_RAINING, 0));
+      }
+   }
+
+   private float pluginRainPosition;
+   private float pluginRainPositionPrevious;
+
+   public void updateWeather(float oldRain, float newRain, float oldThunder, float newThunder) {
+      if (this.weather == null) {
+         // Vanilla
+         if (oldRain != newRain) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, newRain));
+         }
+      } else {
+         // Plugin
+         if (pluginRainPositionPrevious != pluginRainPosition) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.RAIN_LEVEL_CHANGE, pluginRainPosition));
+         }
+      }
+
+      if (oldThunder != newThunder) {
+         if (weather == WeatherType.DOWNFALL || weather == null) {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, newThunder));
+         } else {
+            this.connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.THUNDER_LEVEL_CHANGE, 0));
+         }
+      }
+   }
+
+   public void tickWeather() {
+      if (this.weather == null) return;
+
+      pluginRainPositionPrevious = pluginRainPosition;
+      if (weather == WeatherType.DOWNFALL) {
+         pluginRainPosition += 0.01;
+      } else {
+         pluginRainPosition -= 0.01;
+      }
+
+      pluginRainPosition = Mth.clamp(pluginRainPosition, 0.0F, 1.0F);
+   }
+
+   public void resetPlayerWeather() {
+      this.weather = null;
+      this.setPlayerWeather(this.level.getLevelData().isRaining() ? WeatherType.DOWNFALL : WeatherType.CLEAR, false);
+   }
+
+   @Override
+   public String toString() {
+      return super.toString() + "(" + this.getScoreboardName() + " at " + this.getX() + "," + this.getY() + "," + this.getZ() + ")";
+   }
+
+   // SPIGOT-1903, MC-98153
+   public void forceSetPositionRotation(double x, double y, double z, float yaw, float pitch) {
+      this.moveTo(x, y, z, yaw, pitch);
+      this.connection.resetPosition();
+   }
+
+   @Override
+   public boolean isImmobile() {
+      return super.isImmobile() || !getBukkitEntity().isOnline();
+   }
+
+   @Override
+   public Scoreboard getScoreboard() {
+      return getBukkitEntity().getScoreboard().getHandle();
+   }
+
+   @Override
+   public CraftPlayer getBukkitEntity() {
+      return (CraftPlayer) super.getBukkitEntity();
+   }
+
+   public void reset() {
+      float exp = 0;
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         exp = this.experienceProgress;
+         this.newTotalExp = this.totalExperience;
+         this.newLevel = this.experienceLevel;
+      }
+
+      this.setHealth(this.getMaxHealth());
+      this.stopUsingItem(); // CraftBukkit - SPIGOT-6682: Clear active item on reset
+      this.setRemainingFireTicks(0);
+      this.fallDistance = 0;
+      this.foodData = new FoodData(this);
+      this.experienceLevel = this.newLevel;
+      this.totalExperience = this.newTotalExp;
+      this.experienceProgress = 0;
+      this.deathTime = 0;
+      this.setArrowCount(0, true); // CraftBukkit - ArrowBodyCountChangeEvent
+      this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.DEATH);
+      this.effectsDirty = true;
+      this.containerMenu = this.inventoryMenu;
+      this.lastHurtByPlayer = null;
+      this.lastHurtByMob = null;
+      this.combatTracker = new CombatTracker(this);
+      this.lastSentExp = -1;
+      if (this.keepLevel) { // CraftBukkit - SPIGOT-6687: Only use keepLevel (was pre-set with RULE_KEEPINVENTORY value in PlayerDeathEvent)
+         this.experienceProgress = exp;
+      } else {
+         this.giveExperiencePoints(this.newExp);
+      }
+      this.keepLevel = false;
+      this.setDeltaMovement(0, 0, 0); // CraftBukkit - SPIGOT-6948: Reset velocity on death
+      this.skipDropExperience = false; // CraftBukkit - SPIGOT-7462: Reset experience drop skip, so that further deaths drop xp
+   }
+
+   public void setTabListDisplayName(Component tabListDisplayName) {
+      this.tabListDisplayName = tabListDisplayName;
+   }
+   // CraftBukkit end
 }
