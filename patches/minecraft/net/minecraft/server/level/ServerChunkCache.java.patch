--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -3,10 +_,13 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
@@ -25,6 +_,7 @@
 import net.minecraft.util.thread.BlockableEventLoop;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
@@ -43,6 +_,7 @@
 import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
+import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
 
 public class ServerChunkCache extends ChunkSource {
@@ -94,6 +_,16 @@
         this.clearCache();
     }
 
+    // CraftBukkit start - properly implement isChunkLoaded
+    public boolean isChunkLoaded(int chunkX, int chunkZ) {
+        ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+        if (chunk == null) {
+            return false;
+        }
+        return chunk.getFullChunkNow() != null;
+    }
+    // CraftBukkit end
+
     public ThreadedLevelLightEngine getLightEngine() {
         return this.lightEngine;
     }
@@ -132,7 +_,7 @@
             for (int j = 0; j < 4; j++) {
                 if (i == this.lastChunkPos[j] && p_334940_ == this.lastChunkStatus[j]) {
                     ChunkAccess chunkaccess = this.lastChunk[j];
-                    if (chunkaccess != null || !p_8363_) {
+                    if (chunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
                         return chunkaccess;
                     }
                 }
@@ -172,6 +_,10 @@
             if (chunkholder == null) {
                 return null;
             } else {
+                // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
+                if (chunkholder.currentlyLoading != null) {
+                    return chunkholder.currentlyLoading;
+                }
                 ChunkAccess chunkaccess1 = chunkholder.getChunkIfPresent(ChunkStatus.FULL);
                 if (chunkaccess1 != null) {
                     this.storeInCache(i, chunkaccess1, ChunkStatus.FULL);
@@ -212,7 +_,16 @@
         long i = chunkpos.toLong();
         int j = ChunkLevel.byStatus(p_334479_);
         ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-        if (p_8460_) {
+
+        // CraftBukkit start - don't add new ticket for currently unloading chunk
+        boolean currentlyUnloading = false;
+        if (chunkholder != null) {
+            FullChunkStatus oldChunkState = ChunkLevel.fullStatus(chunkholder.oldTicketLevel);
+            FullChunkStatus currentChunkState = ChunkLevel.fullStatus(chunkholder.getTicketLevel());
+            currentlyUnloading = (oldChunkState.isOrAfter(FullChunkStatus.FULL) && !currentChunkState.isOrAfter(FullChunkStatus.FULL));
+        }
+        if (p_8460_ && !currentlyUnloading) {
+            // CraftBukkit end
             this.distanceManager.addTicket(TicketType.UNKNOWN, chunkpos, j, chunkpos);
             if (this.chunkAbsent(chunkholder, j)) {
                 ProfilerFiller profilerfiller = this.level.getProfiler();
@@ -284,7 +_,15 @@
 
     @Override
     public void close() throws IOException {
-        this.save(true);
+        // CraftBukkit start
+        close(true);
+    }
+
+    public void close(boolean save) throws IOException {
+        if (save) {
+            this.save(true);
+        }
+        // CraftBukkit end
         this.lightEngine.close();
         this.chunkMap.close();
     }
@@ -342,7 +_,7 @@
                 for (ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
                     LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
                     ChunkPos chunkpos = levelchunk1.getPos();
-                    if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
+                    if ((this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) || this.distanceManager.shouldForceTicks(chunkpos.toLong())) {
                         levelchunk1.incrementInhabitedTime(j);
                         if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
                             NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag);
@@ -421,11 +_,19 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-        this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
+        addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+    }
+
+    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+       this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
     }
 
     public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-        this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
+        removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+    }
+
+    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+       this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
     }
 
     @Override
@@ -495,6 +_,18 @@
         this.distanceManager.removeTicketsOnClosing();
     }
 
+    // CraftBukkit start - modelled on below
+    public void purgeUnload() {
+        this.level.getProfiler().push("purge");
+        this.distanceManager.purgeStaleTickets();
+        this.runDistanceManagerUpdates();
+        this.level.getProfiler().popPush("unload");
+        this.chunkMap.tick(() -> true);
+        this.level.getProfiler().pop();
+        this.clearCache();
+    }
+    // CraftBukkit end
+
     static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
     }
 
@@ -536,12 +_,18 @@
 
         @Override
         public boolean pollTask() {
-            if (ServerChunkCache.this.runDistanceManagerUpdates()) {
-                return true;
-            } else {
-                ServerChunkCache.this.lightEngine.tryScheduleUpdate();
-                return super.pollTask();
+            // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
+            try {
+                if (ServerChunkCache.this.runDistanceManagerUpdates()) {
+                    return true;
+                } else {
+                    ServerChunkCache.this.lightEngine.tryScheduleUpdate();
+                    return super.pollTask();
+                }
+            } finally {
+                chunkMap.callbackExecutor.run();
             }
+            // CraftBukkit end
         }
     }
 }
