--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -3,10 +_,13 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
+import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
@@ -24,6 +_,7 @@
 import net.minecraft.util.thread.BlockableEventLoop;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
@@ -42,6 +_,7 @@
 import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
+import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
 
 public class ServerChunkCache extends ChunkSource {
@@ -54,8 +_,8 @@
     public final ChunkMap chunkMap;
     private final DimensionDataStorage dataStorage;
     private long lastInhabitedUpdate;
-    public boolean spawnEnemies = true;
-    public boolean spawnFriendlies = true;
+   	public boolean spawnEnemies = true;
+   	public boolean spawnFriendlies = true;
     private static final int CACHE_SIZE = 4;
     private final long[] lastChunkPos = new long[4];
     private final ChunkStatus[] lastChunkStatus = new ChunkStatus[4];
@@ -93,12 +_,22 @@
         this.clearCache();
     }
 
+   // CraftBukkit start - properly implement isChunkLoaded
+   public boolean isChunkLoaded(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+      if (chunk == null) {
+         return false;
+      }
+      return chunk.getFullChunkNow() != null;
+   }
+   // CraftBukkit end
+
     public ThreadedLevelLightEngine getLightEngine() {
         return this.lightEngine;
     }
 
-    @Nullable
-    public ChunkHolder getVisibleChunkIfPresent(long p_8365_) {
+   	@Nullable
+   	public ChunkHolder getVisibleChunkIfPresent(long p_8365_) {
         return this.chunkMap.getVisibleChunkIfPresent(p_8365_);
     }
 
@@ -171,6 +_,10 @@
             if (chunkholder == null) {
                 return null;
             } else {
+                // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
+                if (chunkholder.currentlyLoading != null) {
+                    return chunkholder.currentlyLoading;
+                }
                 ChunkResult<ChunkAccess> chunkresult = chunkholder.getFutureIfPresent(ChunkStatus.FULL).getNow(null);
                 if (chunkresult == null) {
                     return null;
@@ -303,9 +_,16 @@
         this.chunkMap.saveAllChunks(p_8420_);
     }
 
-    @Override
-    public void close() throws IOException {
-        this.save(true);
+   public void close() throws IOException {
+      // CraftBukkit start
+      close(true);
+   }
+
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.save(true);
+      }
+      // CraftBukkit end
         this.lightEngine.close();
         this.chunkMap.close();
     }
@@ -363,7 +_,7 @@
                 for (ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
                     LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
                     ChunkPos chunkpos = levelchunk1.getPos();
-                    if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
+                    if ((this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) || this.distanceManager.shouldForceTicks(chunkpos.toLong())) {
                         levelchunk1.incrementInhabitedTime(j);
                         if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
                             NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag);
@@ -442,11 +_,19 @@
     }
 
     public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-        this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
+        addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+    }
+
+    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+       this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
     }
 
     public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-        this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
+        removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+    }
+
+    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+       this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
     }
 
     @Override
@@ -515,6 +_,18 @@
     public void removeTicketsOnClosing() {
         this.distanceManager.removeTicketsOnClosing();
     }
+
+   // CraftBukkit start - modelled on below
+   public void purgeUnload() {
+      this.level.getProfiler().push("purge");
+      this.distanceManager.purgeStaleTickets();
+      this.runDistanceManagerUpdates();
+      this.level.getProfiler().popPush("unload");
+      this.chunkMap.tick(() -> true);
+      this.level.getProfiler().pop();
+      this.clearCache();
+   }
+   // CraftBukkit end
 
     static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
     }
