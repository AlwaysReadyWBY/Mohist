--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -7,6 +_,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
@@ -25,6 +_,7 @@
 import net.minecraft.util.thread.BlockableEventLoop;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
+import net.minecraft.world.level.BlockGetter;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.Level;
@@ -43,6 +_,7 @@
 import net.minecraft.world.level.levelgen.RandomState;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
+import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.level.storage.LevelStorageSource;
 
 public class ServerChunkCache extends ChunkSource {
@@ -79,6 +_,16 @@
       this.clearCache();
    }
 
+   // CraftBukkit start - properly implement isChunkLoaded
+   public boolean isChunkLoaded(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.chunkMap.getUpdatingChunkIfPresent(ChunkPos.asLong(chunkX, chunkZ));
+      if (chunk == null) {
+         return false;
+      }
+      return chunk.getFullChunkNow() != null;
+   }
+   // CraftBukkit end
+
    public ThreadedLevelLightEngine getLightEngine() {
       return this.lightEngine;
    }
@@ -118,12 +_,16 @@
          for(int j = 0; j < 4; ++j) {
             if (i == this.lastChunkPos[j] && p_8362_ == this.lastChunkStatus[j]) {
                ChunkAccess chunkaccess = this.lastChunk[j];
-               if (chunkaccess != null || !p_8363_) {
+               if (chunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
                   return chunkaccess;
                }
             }
          }
 
+         ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
+         if (chunkholder != null && chunkholder.currentlyLoading != null)
+            return chunkholder.currentlyLoading; // Neo: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
+
          profilerfiller.incrementCounter("getChunkCacheMiss");
          CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.getChunkFutureMainThread(p_8360_, p_8361_, p_8362_, p_8363_);
          this.mainThreadProcessor.managedBlock(completablefuture::isDone);
@@ -160,6 +_,7 @@
          if (chunkholder == null) {
             return null;
          } else {
+            if (chunkholder.currentlyLoading != null) return chunkholder.currentlyLoading; // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
             Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.getFutureIfPresent(ChunkStatus.FULL).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
             if (either == null) {
                return null;
@@ -206,7 +_,15 @@
       long i = chunkpos.toLong();
       int j = ChunkLevel.byStatus(p_8459_);
       ChunkHolder chunkholder = this.getVisibleChunkIfPresent(i);
-      if (p_8460_) {
+      // CraftBukkit start - don't add new ticket for currently unloading chunk
+      boolean currentlyUnloading = false;
+      if (chunkholder != null) {
+         FullChunkStatus oldChunkState = ChunkLevel.fullStatus(chunkholder.oldTicketLevel);
+         FullChunkStatus currentChunkState = ChunkLevel.fullStatus(chunkholder.getTicketLevel());
+         currentlyUnloading = (oldChunkState.isOrAfter(FullChunkStatus.FULL) && !currentChunkState.isOrAfter(FullChunkStatus.FULL));
+      }
+      if (p_8460_ && !currentlyUnloading) {
+         // CraftBukkit end
          this.distanceManager.addTicket(TicketType.UNKNOWN, chunkpos, j, chunkpos);
          if (this.chunkAbsent(chunkholder, j)) {
             ProfilerFiller profilerfiller = this.level.getProfiler();
@@ -224,7 +_,7 @@
    }
 
    private boolean chunkAbsent(@Nullable ChunkHolder p_8417_, int p_8418_) {
-      return p_8417_ == null || p_8417_.getTicketLevel() > p_8418_;
+      return p_8417_ == null || p_8417_.oldTicketLevel > p_8418_; // CraftBukkit using oldTicketLevel for isLoaded checks
    }
 
    public boolean hasChunk(int p_8429_, int p_8430_) {
@@ -295,6 +_,15 @@
    }
 
    public void close() throws IOException {
+      // CraftBukkit start
+      close(true);
+   }
+
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.save(true);
+      }
+      // CraftBukkit end
       this.save(true);
       this.lightEngine.close();
       this.chunkMap.close();
@@ -307,7 +_,6 @@
       this.level.getProfiler().popPush("chunks");
       if (p_201914_) {
          this.tickChunks();
-         this.chunkMap.tick();
       }
 
       this.level.getProfiler().popPush("unload");
@@ -320,11 +_,21 @@
       long i = this.level.getGameTime();
       long j = i - this.lastInhabitedUpdate;
       this.lastInhabitedUpdate = i;
-      if (!this.level.isDebug()) {
+      boolean flag = this.level.isDebug();
+      if (flag) {
+         this.chunkMap.tick();
+      } else {
+         LevelData leveldata = this.level.getLevelData();
          ProfilerFiller profilerfiller = this.level.getProfiler();
          profilerfiller.push("pollingChunks");
-         profilerfiller.push("filteringLoadedChunks");
-         List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(this.chunkMap.size());
+         int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
+         boolean flag1 = level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && leveldata.getGameTime() % level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
+         profilerfiller.push("naturalSpawnCount");
+         int l = this.distanceManager.getNaturalSpawnChunkCount();
+         NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.createState(l, this.level.getAllEntities(), this::getFullChunk, new LocalMobCapCalculator(this.chunkMap));
+         this.lastSpawnState = naturalspawner$spawnstate;
+         profilerfiller.popPush("filteringLoadedChunks");
+         List<ServerChunkCache.ChunkAndHolder> list = Lists.newArrayListWithCapacity(l);
 
          for(ChunkHolder chunkholder : this.chunkMap.getChunks()) {
             LevelChunk levelchunk = chunkholder.getTickingChunk();
@@ -333,36 +_,28 @@
             }
          }
 
-         if (this.level.getServer().tickRateManager().runsNormally()) {
-            profilerfiller.popPush("naturalSpawnCount");
-            int l = this.distanceManager.getNaturalSpawnChunkCount();
-            NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.createState(l, this.level.getAllEntities(), this::getFullChunk, new LocalMobCapCalculator(this.chunkMap));
-            this.lastSpawnState = naturalspawner$spawnstate;
-            profilerfiller.popPush("spawnAndTick");
-            boolean flag1 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING);
-            Util.shuffle(list, this.level.random);
-            int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
-            boolean flag = this.level.getLevelData().getGameTime() % 400L == 0L;
-
-            for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
-               LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
-               ChunkPos chunkpos = levelchunk1.getPos();
-               if (this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) {
-                  levelchunk1.incrementInhabitedTime(j);
-                  if (flag1 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos)) {
-                     NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag);
-                  }
-
-                  if (this.level.shouldTickBlocksAt(chunkpos.toLong())) {
-                     this.level.tickChunk(levelchunk1, k);
-                  }
-               }
-            }
-
-            profilerfiller.popPush("customSpawners");
-            if (flag1) {
-               this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
-            }
+         profilerfiller.popPush("spawnAndTick");
+         boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !level.players().isEmpty(); // CraftBukkit
+         Collections.shuffle(list);
+
+         for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
+            LevelChunk levelchunk1 = serverchunkcache$chunkandholder.chunk;
+            ChunkPos chunkpos = levelchunk1.getPos();
+            if ((this.level.isNaturalSpawningAllowed(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos)) || this.distanceManager.shouldForceTicks(chunkpos.toLong())) {
+               levelchunk1.incrementInhabitedTime(j);
+               if (flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkpos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(chunkpos, true)) { // Spigot
+                  NaturalSpawner.spawnForChunk(this.level, levelchunk1, naturalspawner$spawnstate, this.spawnFriendlies, this.spawnEnemies, flag1);
+               }
+
+               if (this.level.shouldTickBlocksAt(chunkpos.toLong())) {
+                  this.level.tickChunk(levelchunk1, k);
+               }
+            }
+         }
+
+         profilerfiller.popPush("customSpawners");
+         if (flag2) {
+            this.level.tickCustomSpawners(this.spawnEnemies, this.spawnFriendlies);
          }
 
          profilerfiller.popPush("broadcast");
@@ -371,6 +_,7 @@
          });
          profilerfiller.pop();
          profilerfiller.pop();
+         this.chunkMap.tick();
       }
    }
 
@@ -428,11 +_,17 @@
    }
 
    public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-      this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_);
+      addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+      this.distanceManager.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
    }
 
    public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-      this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_);
+      removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+   }
+   public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+      this.distanceManager.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
    }
 
    public void updateChunkForced(ChunkPos p_8400_, boolean p_8401_) {
@@ -501,7 +_,19 @@
       this.distanceManager.removeTicketsOnClosing();
    }
 
-   static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
+   // CraftBukkit start - modelled on below
+   public void purgeUnload() {
+      this.level.getProfiler().push("purge");
+      this.distanceManager.purgeStaleTickets();
+      this.runDistanceManagerUpdates();
+      this.level.getProfiler().popPush("unload");
+      this.chunkMap.tick(() -> true);
+      this.level.getProfiler().pop();
+      this.clearCache();
+   }
+   // CraftBukkit end
+
+    static record ChunkAndHolder(LevelChunk chunk, ChunkHolder holder) {
    }
 
    final class MainThreadExecutor extends BlockableEventLoop<Runnable> {
@@ -531,12 +_,17 @@
       }
 
       public boolean pollTask() {
+         try {
          if (ServerChunkCache.this.runDistanceManagerUpdates()) {
             return true;
          } else {
             ServerChunkCache.this.lightEngine.tryScheduleUpdate();
             return super.pollTask();
          }
+         } finally {
+            chunkMap.callbackExecutor.run();
+         }
+         // CraftBukkit end
       }
    }
 }
