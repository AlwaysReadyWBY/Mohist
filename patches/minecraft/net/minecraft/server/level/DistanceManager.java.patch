--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -12,6 +_,7 @@
 import it.unimi.dsi.fastutil.longs.Long2IntMaps;
 import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
@@ -52,7 +_,9 @@
    final LongSet ticketsToRelease = new LongOpenHashSet();
    final Executor mainThreadExecutor;
    private long ticketTickCounter;
-   private int simulationDistance = 10;
+   public int simulationDistance = 10;
+
+   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> forcedTickets = new Long2ObjectOpenHashMap<>();
 
    protected DistanceManager(Executor p_140774_, Executor p_140775_) {
       ProcessorHandle<Runnable> processorhandle = ProcessorHandle.of("player ticket throttler", p_140775_::execute);
@@ -159,6 +_,25 @@
          this.ticketTracker.update(p_140785_, p_140786_.getTicketLevel(), true);
       }
 
+      if (p_140786_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(p_140785_, e -> SortedArraySet.create(4));
+          tickets.addOrGet(ticket);
+      }
+   }
+
+   boolean addTicketCB(long pChunkPos, Ticket<?> pTicket) {
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(pChunkPos);
+      int i = getTicketLevelAt(sortedarrayset);
+      Ticket<?> ticket = sortedarrayset.addOrGet(pTicket);
+      ticket.setCreatedTick(this.ticketTickCounter);
+      if (pTicket.getTicketLevel() < i) {
+         this.ticketTracker.update(pChunkPos, pTicket.getTicketLevel(), true);
+      }
+      if (pTicket.isForceTicks()) {
+         SortedArraySet<Ticket<?>> tickets = forcedTickets.computeIfAbsent(pChunkPos, e -> SortedArraySet.create(4));
+         tickets.addOrGet(ticket);
+      }
+      return pTicket == ticket; // CraftBukkit
    }
 
    void removeTicket(long p_140819_, Ticket<?> p_140820_) {
@@ -171,26 +_,71 @@
       }
 
       this.ticketTracker.update(p_140819_, getTicketLevelAt(sortedarrayset), false);
+
+      if (p_140820_.isForceTicks()) {
+          SortedArraySet<Ticket<?>> tickets = forcedTickets.get(p_140819_);
+          if (tickets != null) {
+              tickets.remove(p_140820_);
+          }
+      }
+   }
+
+   boolean removeTicketCB(long pChunkPos, Ticket<?> pTicket) {
+      SortedArraySet<Ticket<?>> sortedarrayset = this.getTickets(pChunkPos);
+      if (sortedarrayset.remove(pTicket)) {
+      }
+      boolean removed = false; // CraftBukkit
+      if (sortedarrayset.isEmpty()) {
+         this.tickets.remove(pChunkPos);
+         removed = true; // CraftBukkit
+      }
+
+      this.ticketTracker.update(pChunkPos, getTicketLevelAt(sortedarrayset), false);
+
+      if (pTicket.isForceTicks()) {
+         SortedArraySet<Ticket<?>> tickets = forcedTickets.get(pChunkPos);
+         if (tickets != null) {
+            tickets.remove(pTicket);
+         }
+      }
+      return removed; // CraftBukkit
    }
 
    public <T> void addTicket(TicketType<T> p_140793_, ChunkPos p_140794_, int p_140795_, T p_140796_) {
       this.addTicket(p_140794_.toLong(), new Ticket<>(p_140793_, p_140795_, p_140796_));
    }
 
+   public <T> boolean addRegionTicketAtDistance(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      return this.addTicketCB(chunkcoordintpair.toLong(), new Ticket<>(ticketType, level, identifier));
+      // CraftBukkit end
+   }
+
    public <T> void removeTicket(TicketType<T> p_140824_, ChunkPos p_140825_, int p_140826_, T p_140827_) {
       Ticket<T> ticket = new Ticket<>(p_140824_, p_140826_, p_140827_);
       this.removeTicket(p_140825_.toLong(), ticket);
    }
 
+   public <T> boolean removeRegionTicketAtDistance(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      Ticket<T> ticket = new Ticket<>(ticketType, level, identifier);
+      return this.removeTicketCB(chunkcoordintpair.toLong(), ticket);
+      // CraftBukkit end
+   }
+   
    public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_) {
-      Ticket<T> ticket = new Ticket<>(p_140841_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140843_, p_140844_);
+      addRegionTicket(p_140841_, p_140842_, p_140843_, p_140844_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_140841_, ChunkPos p_140842_, int p_140843_, T p_140844_, boolean forceTicks) {
+      Ticket<T> ticket = new Ticket<>(p_140841_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140843_, p_140844_, forceTicks);
       long i = p_140842_.toLong();
       this.addTicket(i, ticket);
       this.tickingTicketsTracker.addTicket(i, ticket);
    }
 
    public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_) {
-      Ticket<T> ticket = new Ticket<>(p_140850_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140852_, p_140853_);
+      removeRegionTicket(p_140850_, p_140851_, p_140852_, p_140853_, false);
+   }
+   public <T> void removeRegionTicket(TicketType<T> p_140850_, ChunkPos p_140851_, int p_140852_, T p_140853_, boolean forceTicks) {
+      Ticket<T> ticket = new Ticket<>(p_140850_, ChunkLevel.byStatus(FullChunkStatus.FULL) - p_140852_, p_140853_, forceTicks);
       long i = p_140851_.toLong();
       this.removeTicket(i, ticket);
       this.tickingTicketsTracker.removeTicket(i, ticket);
@@ -230,6 +_,7 @@
       ChunkPos chunkpos = p_140829_.chunk();
       long i = chunkpos.toLong();
       ObjectSet<ServerPlayer> objectset = this.playersPerChunk.get(i);
+      if (objectset == null) return; // CraftBukkit - SPIGOT-6208
       objectset.remove(p_140830_);
       if (objectset.isEmpty()) {
          this.playersPerChunk.remove(i);
@@ -283,6 +_,11 @@
       return this.ticketThrottler.getDebugStatus();
    }
 
+   public boolean shouldForceTicks(long chunkPos) {
+       SortedArraySet<Ticket<?>> tickets = forcedTickets.get(chunkPos);
+       return tickets != null && !tickets.isEmpty();
+   }
+
    private void dumpTickets(String p_143208_) {
       try (FileOutputStream fileoutputstream = new FileOutputStream(new File(p_143208_))) {
          for(Long2ObjectMap.Entry<SortedArraySet<Ticket<?>>> entry : this.tickets.long2ObjectEntrySet()) {
@@ -302,6 +_,26 @@
    TickingTracker tickingTracker() {
       return this.tickingTicketsTracker;
    }
+
+   // CraftBukkit start
+   public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+      Ticket<T> target = new Ticket<>(ticketType, ticketLevel, ticketIdentifier);
+
+      for (java.util.Iterator<Entry<SortedArraySet<Ticket<?>>>> iterator = this.tickets.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+         Entry<SortedArraySet<Ticket<?>>> entry = iterator.next();
+         SortedArraySet<Ticket<?>> tickets = entry.getValue();
+         if (tickets.remove(target)) {
+            // copied from removeTicket
+            this.ticketTracker.update(entry.getLongKey(), getTicketLevelAt(tickets), false);
+
+            // can't use entry after it's removed
+            if (tickets.isEmpty()) {
+               iterator.remove();
+            }
+         }
+      }
+   }
+   // CraftBukkit end
 
    public void removeTicketsOnClosing() {
       ImmutableSet<TicketType<?>> immutableset = ImmutableSet.of(TicketType.UNKNOWN, TicketType.POST_TELEPORT, TicketType.LIGHT);
