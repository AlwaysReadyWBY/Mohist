--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -1,5 +_,7 @@
 package net.minecraft.server.level;
 
+import com.mohistmc.mohist.api.ItemAPI;
+import com.mohistmc.mohist.plugins.ban.bans.BanItem;
 import com.mojang.logging.LogUtils;
 import java.util.Objects;
 import javax.annotation.Nullable;
@@ -9,24 +_,33 @@
 import net.minecraft.network.protocol.game.ClientboundBlockUpdatePacket;
 import net.minecraft.network.protocol.game.ClientboundPlayerInfoUpdatePacket;
 import net.minecraft.network.protocol.game.ServerboundPlayerActionPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.InteractionResultHolder;
 import net.minecraft.world.ItemInteractionResult;
 import net.minecraft.world.MenuProvider;
-import net.minecraft.world.entity.EquipmentSlot;
-import net.minecraft.world.item.Item;
+import net.minecraft.world.item.DoubleHighBlockItem;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.context.UseOnContext;
-import net.minecraft.world.item.enchantment.EnchantmentHelper;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.CakeBlock;
+import net.minecraft.world.level.block.DoorBlock;
 import net.minecraft.world.level.block.GameMasterBlock;
+import net.minecraft.world.level.block.TrapDoorBlock;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.block.state.properties.DoubleBlockHalf;
 import net.minecraft.world.phys.BlockHitResult;
-import net.minecraft.world.phys.Vec3;
+import org.bukkit.GameMode;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerGameModeChangeEvent;
+import org.bukkit.event.player.PlayerInteractEvent;
 import org.slf4j.Logger;
 
 public class ServerPlayerGameMode {
@@ -54,6 +_,13 @@
         if (p_143474_ == this.gameModeForPlayer) {
             return false;
         } else {
+            // CraftBukkit start
+            PlayerGameModeChangeEvent event = new PlayerGameModeChangeEvent(player.getBukkitEntity(), GameMode.getByValue(p_143474_.getId()));
+            level.getCraftServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return false;
+            }
+            // CraftBukkit end
             this.setGameModeForPlayer(p_143474_, this.previousGameModeForPlayer);
             this.player.onUpdateAbilities();
             this.player
@@ -93,7 +_,7 @@
     }
 
     public void tick() {
-        this.gameTicks++;
+      this.gameTicks = MinecraftServer.currentTick; // CraftBukkit;
         if (this.hasDelayedDestroy) {
             BlockState blockstate = this.level.getBlockState(this.delayedDestroyPos);
             if (blockstate.isAir()) {
@@ -132,100 +_,163 @@
     private void debugLogging(BlockPos p_215126_, boolean p_215127_, int p_215128_, String p_215129_) {
     }
 
-    public void handleBlockBreakAction(BlockPos p_215120_, ServerboundPlayerActionPacket.Action p_215121_, Direction p_215122_, int p_215123_, int p_215124_) {
-        if (!this.player.canInteractWithBlock(p_215120_, 1.0)) {
-            this.debugLogging(p_215120_, false, p_215124_, "too far");
-        } else if (p_215120_.getY() >= p_215123_) {
-            this.player.connection.send(new ClientboundBlockUpdatePacket(p_215120_, this.level.getBlockState(p_215120_)));
-            this.debugLogging(p_215120_, false, p_215124_, "too high");
-        } else {
-            if (p_215121_ == ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK) {
-                if (!this.level.mayInteract(this.player, p_215120_)) {
-                    this.player.connection.send(new ClientboundBlockUpdatePacket(p_215120_, this.level.getBlockState(p_215120_)));
-                    this.debugLogging(p_215120_, false, p_215124_, "may not interact");
-                    return;
-                }
-
-                if (this.isCreative()) {
-                    this.destroyAndAck(p_215120_, p_215124_, "creative destroy");
-                    return;
-                }
-
-                if (this.player.blockActionRestricted(this.level, p_215120_, this.gameModeForPlayer)) {
-                    this.player.connection.send(new ClientboundBlockUpdatePacket(p_215120_, this.level.getBlockState(p_215120_)));
-                    this.debugLogging(p_215120_, false, p_215124_, "block action restricted");
-                    return;
-                }
-
-                this.destroyProgressStart = this.gameTicks;
-                float f = 1.0F;
-                BlockState blockstate = this.level.getBlockState(p_215120_);
-                if (!blockstate.isAir()) {
-                    EnchantmentHelper.onHitBlock(
-                        this.level,
-                        this.player.getMainHandItem(),
-                        this.player,
-                        this.player,
-                        EquipmentSlot.MAINHAND,
-                        Vec3.atCenterOf(p_215120_),
-                        blockstate,
-                        p_343810_ -> this.player.onEquippedItemBroken(p_343810_, EquipmentSlot.MAINHAND)
-                    );
-                    blockstate.attack(this.level, p_215120_, this.player);
-                    f = blockstate.getDestroyProgress(this.player, this.player.level(), p_215120_);
-                }
-
-                if (!blockstate.isAir() && f >= 1.0F) {
-                    this.destroyAndAck(p_215120_, p_215124_, "insta mine");
-                } else {
-                    if (this.isDestroyingBlock) {
-                        this.player.connection.send(new ClientboundBlockUpdatePacket(this.destroyPos, this.level.getBlockState(this.destroyPos)));
-                        this.debugLogging(p_215120_, false, p_215124_, "abort destroying since another started (client insta mine, server disagreed)");
-                    }
-
-                    this.isDestroyingBlock = true;
-                    this.destroyPos = p_215120_.immutable();
-                    int i = (int)(f * 10.0F);
-                    this.level.destroyBlockProgress(this.player.getId(), p_215120_, i);
-                    this.debugLogging(p_215120_, true, p_215124_, "actual start of destroying");
-                    this.lastSentState = i;
-                }
-            } else if (p_215121_ == ServerboundPlayerActionPacket.Action.STOP_DESTROY_BLOCK) {
-                if (p_215120_.equals(this.destroyPos)) {
-                    int j = this.gameTicks - this.destroyProgressStart;
-                    BlockState blockstate1 = this.level.getBlockState(p_215120_);
-                    if (!blockstate1.isAir()) {
-                        float f1 = blockstate1.getDestroyProgress(this.player, this.player.level(), p_215120_) * (float)(j + 1);
-                        if (f1 >= 0.7F) {
-                            this.isDestroyingBlock = false;
-                            this.level.destroyBlockProgress(this.player.getId(), p_215120_, -1);
-                            this.destroyAndAck(p_215120_, p_215124_, "destroyed");
-                            return;
-                        }
-
-                        if (!this.hasDelayedDestroy) {
-                            this.isDestroyingBlock = false;
-                            this.hasDelayedDestroy = true;
-                            this.delayedDestroyPos = p_215120_;
-                            this.delayedTickStart = this.destroyProgressStart;
-                        }
-                    }
-                }
-
-                this.debugLogging(p_215120_, true, p_215124_, "stopped destroying");
-            } else if (p_215121_ == ServerboundPlayerActionPacket.Action.ABORT_DESTROY_BLOCK) {
-                this.isDestroyingBlock = false;
-                if (!Objects.equals(this.destroyPos, p_215120_)) {
-                    LOGGER.warn("Mismatch in destroy block pos: {} {}", this.destroyPos, p_215120_);
-                    this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
-                    this.debugLogging(p_215120_, true, p_215124_, "aborted mismatched destroying");
-                }
-
-                this.level.destroyBlockProgress(this.player.getId(), p_215120_, -1);
-                this.debugLogging(p_215120_, true, p_215124_, "aborted destroying");
-            }
-        }
-    }
+   public void handleBlockBreakAction(BlockPos p_215120_, ServerboundPlayerActionPacket.Action p_215121_, Direction p_215122_, int p_215123_, int p_215124_) {
+       if (BanItem.check(player)) {
+           this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+           return;
+       }
+       var event = net.minecraftforge.event.ForgeEventFactory.onLeftClickBlock(player, p_215120_, p_215122_, p_215121_);
+       if (event.isCanceled() || (!this.isCreative() && event.getResult() == net.minecraftforge.eventbus.api.Event.Result.DENY)) {
+           return;
+       }
+       if (!this.player.canInteractWithBlock(p_215120_, 1.0)) {
+           this.debugLogging(p_215120_, false, p_215124_, "too far");
+       } else if (p_215120_.getY() >= p_215123_) {
+           this.player.connection.send(new ClientboundBlockUpdatePacket(p_215120_, this.level.getBlockState(p_215120_)));
+           this.debugLogging(p_215120_, false, p_215124_, "too high");
+       } else {
+           if (p_215121_ == ServerboundPlayerActionPacket.Action.START_DESTROY_BLOCK) {
+               if (!this.level.mayInteract(this.player, p_215120_)) {
+                   // CraftBukkit start - fire PlayerInteractEvent
+                   CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, p_215120_, p_215122_, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+                   this.player.connection.send(new ClientboundBlockUpdatePacket(p_215120_, this.level.getBlockState(p_215120_)));
+                   this.debugLogging(p_215120_, false, p_215124_, "may not interact");
+                   // Update any tile entity data for this block
+                   BlockEntity tileentity = level.getBlockEntity(p_215120_);
+                   if (tileentity != null) {
+                       this.player.connection.send(tileentity.getUpdatePacket());
+                   }
+                   // CraftBukkit end
+                   return;
+               }
+
+               // CraftBukkit start
+               PlayerInteractEvent eventCB = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, p_215120_, p_215122_, this.player.getInventory().getSelected(), InteractionHand.MAIN_HAND);
+               if (eventCB.isCancelled()) {
+                   // Let the client know the block still exists
+                   this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+                   // Update any tile entity data for this block
+                   BlockEntity tileentity = this.level.getBlockEntity(p_215120_);
+                   if (tileentity != null) {
+                       this.player.connection.send(tileentity.getUpdatePacket());
+                   }
+                   return;
+               }
+               // CraftBukkit end
+
+               if (this.isCreative()) {
+                   this.destroyAndAck(p_215120_, p_215124_, "creative destroy");
+                   return;
+               }
+
+               // Spigot start - handle debug stick left click for non-creative
+               if (this.player.getMainHandItem().is(net.minecraft.world.item.Items.DEBUG_STICK)
+                       && ((net.minecraft.world.item.DebugStickItem) net.minecraft.world.item.Items.DEBUG_STICK).handleInteraction(this.player, this.level.getBlockState(p_215120_), this.level, p_215120_, false, this.player.getMainHandItem())) {
+                   this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+                   return;
+               }
+               // Spigot end
+
+               if (this.player.blockActionRestricted(this.level, p_215120_, this.gameModeForPlayer)) {
+                   this.player.connection.send(new ClientboundBlockUpdatePacket(p_215120_, this.level.getBlockState(p_215120_)));
+                   this.debugLogging(p_215120_, false, p_215124_, "block action restricted");
+                   return;
+               }
+
+               this.destroyProgressStart = this.gameTicks;
+               float f = 1.0F;
+               BlockState blockstate = this.level.getBlockState(p_215120_);
+               // CraftBukkit start - Swings at air do *NOT* exist.
+               if (eventCB.useInteractedBlock() == Event.Result.DENY) {
+                   // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                   BlockState data = this.level.getBlockState(p_215120_);
+                   if (data.getBlock() instanceof DoorBlock) {
+                       // For some reason *BOTH* the bottom/top part have to be marked updated.
+                       boolean bottom = data.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER;
+                       this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+                       this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, bottom ? p_215120_.above() : p_215120_.below()));
+                   } else if (data.getBlock() instanceof TrapDoorBlock) {
+                       this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+                   }
+               } else if (!blockstate.isAir()) {
+                   if (event.getUseBlock() != net.minecraftforge.eventbus.api.Event.Result.DENY)
+                       blockstate.attack(this.level, p_215120_, this.player);
+                   f = blockstate.getDestroyProgress(this.player, this.player.level(), p_215120_);
+               }
+
+               if (eventCB.useItemInHand() == Event.Result.DENY) {
+                   // If we 'insta destroyed' then the client needs to be informed.
+                   if (f > 1.0f) {
+                       this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+                   }
+                   return;
+               }
+               org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, p_215120_, this.player.getInventory().getSelected(), f >= 1.0f);
+
+               if (blockEvent.isCancelled()) {
+                   // Let the client know the block still exists
+                   this.player.connection.send(new ClientboundBlockUpdatePacket(this.level, p_215120_));
+                   return;
+               }
+               if (blockEvent.getInstaBreak()) {
+                   f = 2.0f;
+               }
+               // CraftBukkit end
+
+               if (!blockstate.isAir() && f >= 1.0F) {
+                   this.destroyAndAck(p_215120_, p_215124_, "insta mine");
+               } else {
+                   if (this.isDestroyingBlock) {
+                       this.player.connection.send(new ClientboundBlockUpdatePacket(this.destroyPos, this.level.getBlockState(this.destroyPos)));
+                       this.debugLogging(p_215120_, false, p_215124_, "abort destroying since another started (client insta mine, server disagreed)");
+                   }
+
+                   this.isDestroyingBlock = true;
+                   this.destroyPos = p_215120_.immutable();
+                   int i = (int) (f * 10.0F);
+                   this.level.destroyBlockProgress(this.player.getId(), p_215120_, i);
+                   this.debugLogging(p_215120_, true, p_215124_, "actual start of destroying");
+                   this.lastSentState = i;
+               }
+           } else if (p_215121_ == ServerboundPlayerActionPacket.Action.STOP_DESTROY_BLOCK) {
+               if (p_215120_.equals(this.destroyPos)) {
+                   int j = this.gameTicks - this.destroyProgressStart;
+                   BlockState blockstate1 = this.level.getBlockState(p_215120_);
+                   if (!blockstate1.isAir()) {
+                       float f1 = blockstate1.getDestroyProgress(this.player, this.player.level(), p_215120_) * (float) (j + 1);
+                       if (f1 >= 0.7F) {
+                           this.isDestroyingBlock = false;
+                           this.level.destroyBlockProgress(this.player.getId(), p_215120_, -1);
+                           this.destroyAndAck(p_215120_, p_215124_, "destroyed");
+                           return;
+                       }
+
+                       if (!this.hasDelayedDestroy) {
+                           this.isDestroyingBlock = false;
+                           this.hasDelayedDestroy = true;
+                           this.delayedDestroyPos = p_215120_;
+                           this.delayedTickStart = this.destroyProgressStart;
+                       }
+                   }
+               }
+
+               this.debugLogging(p_215120_, true, p_215124_, "stopped destroying");
+           } else if (p_215121_ == ServerboundPlayerActionPacket.Action.ABORT_DESTROY_BLOCK) {
+               this.isDestroyingBlock = false;
+               if (!Objects.equals(this.destroyPos, p_215120_)) {
+                   LOGGER.debug("Mismatch in destroy block pos: {} {}", this.destroyPos, p_215120_); // CraftBukkit - SPIGOT-5457 sent by client when interact event cancelled
+                   this.level.destroyBlockProgress(this.player.getId(), this.destroyPos, -1);
+                   this.debugLogging(p_215120_, true, p_215124_, "aborted mismatched destroying");
+               }
+
+               this.level.destroyBlockProgress(this.player.getId(), p_215120_, -1);
+               this.debugLogging(p_215120_, true, p_215124_, "aborted destroying");
+
+               CraftEventFactory.callBlockDamageAbortEvent(this.player, p_215120_, this.player.getInventory().getSelected()); // CraftBukkit
+           }
+
+       }
+   }
 
     public void destroyAndAck(BlockPos p_215117_, int p_215118_, String p_215119_) {
         if (this.destroyBlock(p_215117_)) {
@@ -236,9 +_,13 @@
         }
     }
 
-    public boolean destroyBlock(BlockPos p_9281_) {
+   public boolean destroyBlock(BlockPos p_9281_) {
+      if (BanItem.check(player)) {
+         return false;
+      }
         BlockState blockstate1 = this.level.getBlockState(p_9281_);
-        if (!this.player.getMainHandItem().getItem().canAttackBlock(blockstate1, this.level, p_9281_, this.player)) {
+        int exp = net.minecraftforge.common.ForgeHooks.onBlockBreakEvent(level, gameModeForPlayer, player, p_9281_);
+        if (exp == -1) {
             return false;
         } else {
             BlockEntity blockentity = this.level.getBlockEntity(p_9281_);
@@ -246,30 +_,47 @@
             if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks()) {
                 this.level.sendBlockUpdated(p_9281_, blockstate1, blockstate1, 3);
                 return false;
+            } else if (player.getMainHandItem().onBlockStartBreak(p_9281_, player)) {
+               return false;
             } else if (this.player.blockActionRestricted(this.level, p_9281_, this.gameModeForPlayer)) {
                 return false;
             } else {
-                BlockState blockstate = block.playerWillDestroy(this.level, p_9281_, blockstate1, this.player);
-                boolean flag1 = this.level.removeBlock(p_9281_, false);
-                if (flag1) {
-                    block.destroy(this.level, p_9281_, blockstate);
-                }
-
+                BlockState blockstate = blockstate1;
                 if (this.isCreative()) {
+                    removeBlock(p_9281_, false);
                     return true;
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
-                    boolean flag = this.player.hasCorrectToolForDrops(blockstate);
+                    boolean flag = blockstate.canHarvestBlock(this.level, p_9281_, this.player); // previously player.hasCorrectToolForDrops(blockstate)
                     itemstack.mineBlock(this.level, blockstate, p_9281_, this.player);
+
+                    if (itemstack.isEmpty() && !itemstack1.isEmpty()) {
+                        net.minecraftforge.event.ForgeEventFactory.onPlayerDestroyItem(this.player, itemstack1, InteractionHand.MAIN_HAND);
+                    }
+                    boolean flag1 = removeBlock(p_9281_, flag);
+
                     if (flag1 && flag) {
                         block.playerDestroy(this.level, this.player, p_9281_, blockstate, blockentity, itemstack1);
                     }
 
+                    if (flag && exp > 0) {
+                        blockstate1.getBlock().popExperience(level, p_9281_, exp);
+                    }
+
                     return true;
                 }
             }
         }
+    }
+
+    private boolean removeBlock(BlockPos p_180235_1_, boolean canHarvest) {
+        BlockState state = this.level.getBlockState(p_180235_1_);
+        boolean removed = state.onDestroyedByPlayer(this.level, p_180235_1_, this.player, canHarvest, this.level.getFluidState(p_180235_1_));
+        if (removed) {
+             state.getBlock().destroy(this.level, p_180235_1_, state);
+        }
+        return removed;
     }
 
     public InteractionResult useItem(ServerPlayer p_9262_, Level p_9263_, ItemStack p_9264_, InteractionHand p_9265_) {
@@ -278,6 +_,8 @@
         } else if (p_9262_.getCooldowns().isOnCooldown(p_9264_.getItem())) {
             return InteractionResult.PASS;
         } else {
+            InteractionResult cancelResult = net.minecraftforge.common.ForgeHooks.onItemRightClick(p_9262_, p_9265_);
+            if (cancelResult != null) return cancelResult;
             int i = p_9264_.getCount();
             int j = p_9264_.getDamageValue();
             InteractionResultHolder<ItemStack> interactionresultholder = p_9264_.use(p_9263_, p_9262_, p_9265_);
@@ -304,41 +_,97 @@
         }
     }
 
-    public InteractionResult useItemOn(ServerPlayer p_9266_, Level p_9267_, ItemStack p_9268_, InteractionHand p_9269_, BlockHitResult p_9270_) {
-        BlockPos blockpos = p_9270_.getBlockPos();
-        BlockState blockstate = p_9267_.getBlockState(blockpos);
-        if (!blockstate.getBlock().isEnabled(p_9267_.enabledFeatures())) {
-            return InteractionResult.FAIL;
-        } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
-            MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
-            if (menuprovider != null) {
-                p_9266_.openMenu(menuprovider);
-                return InteractionResult.SUCCESS;
-            } else {
-                return InteractionResult.PASS;
-            }
-        } else {
-            boolean flag = !p_9266_.getMainHandItem().isEmpty() || !p_9266_.getOffhandItem().isEmpty();
-            boolean flag1 = p_9266_.isSecondaryUseActive() && flag;
-            ItemStack itemstack = p_9268_.copy();
-            if (!flag1) {
-                ItemInteractionResult iteminteractionresult = blockstate.useItemOn(p_9266_.getItemInHand(p_9269_), p_9267_, p_9266_, p_9269_, p_9270_);
-                if (iteminteractionresult.consumesAction()) {
-                    CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
-                    return iteminteractionresult.result();
-                }
-
-                if (iteminteractionresult == ItemInteractionResult.PASS_TO_DEFAULT_BLOCK_INTERACTION && p_9269_ == InteractionHand.MAIN_HAND) {
-                    InteractionResult interactionresult = blockstate.useWithoutItem(p_9267_, p_9266_, p_9270_);
-                    if (interactionresult.consumesAction()) {
-                        CriteriaTriggers.DEFAULT_BLOCK_USE.trigger(p_9266_, blockpos);
-                        return interactionresult;
-                    }
-                }
-            }
-
-            if (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_.getItem())) {
-                UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
+
+   // CraftBukkit start - whole method
+   public boolean interactResult = false;
+   public boolean firedInteract = false;
+   public BlockPos interactPosition;
+   public InteractionHand interactHand;
+   public ItemStack interactItemStack;
+   public InteractionResult useItemOn(ServerPlayer p_9266_, Level p_9267_, ItemStack p_9268_, InteractionHand p_9269_, BlockHitResult p_9270_) {
+       if (BanItem.check(p_9266_, p_9268_)) return InteractionResult.FAIL;
+       BlockPos blockpos = p_9270_.getBlockPos();
+       BlockState blockstate = p_9267_.getBlockState(blockpos);
+       if (BanItem.check(p_9266_, ItemAPI.toNMSItem(CraftBlock.at(p_9267_, blockpos).getType())))
+           return InteractionResult.FAIL; // Block
+       InteractionResult enuminteractionresult = InteractionResult.PASS;
+       boolean cancelledBlock = false;
+       boolean cancelledItem = false; // Paper - correctly handle items on cooldown
+
+       if (!blockstate.getBlock().isEnabled(p_9267_.enabledFeatures())) {
+           return InteractionResult.FAIL;
+       }
+       var event = net.minecraftforge.event.ForgeEventFactory.onRightClickBlock(p_9266_, p_9269_, blockpos, p_9270_);
+       if (event.isCanceled()) return event.getCancellationResult();
+       if (this.gameModeForPlayer == GameType.SPECTATOR) {
+           MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
+           cancelledBlock = !(menuprovider instanceof MenuProvider);
+       }
+
+       if (p_9266_.getCooldowns().isOnCooldown(p_9268_.getItem())) {
+           cancelledItem = true; // Paper - correctly handle items on cooldown
+       }
+
+       PlayerInteractEvent eventCB = CraftEventFactory.callPlayerInteractEvent(p_9266_, Action.RIGHT_CLICK_BLOCK, blockpos, p_9270_.getDirection(), p_9268_, cancelledBlock, p_9269_, p_9270_.getLocation());
+       firedInteract = true;
+       interactResult = eventCB.useItemInHand() == Event.Result.DENY;
+       interactPosition = blockpos.immutable();
+       interactHand = p_9269_;
+       interactItemStack = p_9268_.copy();
+
+       if (eventCB.useInteractedBlock() == Event.Result.DENY) {
+           // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+           if (blockstate.getBlock() instanceof DoorBlock) {
+               boolean bottom = blockstate.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER;
+               p_9266_.connection.send(new ClientboundBlockUpdatePacket(p_9267_, bottom ? blockpos.above() : blockpos.below()));
+           } else if (blockstate.getBlock() instanceof CakeBlock) {
+               p_9266_.getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
+           } else if (interactItemStack.getItem() instanceof DoubleHighBlockItem) {
+               // send a correcting update to the client, as it already placed the upper half of the bisected item
+               p_9266_.connection.send(new ClientboundBlockUpdatePacket(p_9267_, blockpos.relative(p_9270_.getDirection()).above()));
+
+               // send a correcting update to the client for the block above as well, this because of replaceable blocks (such as grass, sea grass etc)
+               p_9266_.connection.send(new ClientboundBlockUpdatePacket(p_9267_, blockpos.above()));
+           }
+           p_9266_.getBukkitEntity().updateInventory(); // SPIGOT-2867
+           enuminteractionresult = (eventCB.useItemInHand() != Event.Result.ALLOW) ? InteractionResult.SUCCESS : InteractionResult.PASS;
+       } else if (this.gameModeForPlayer == GameType.SPECTATOR) {
+           MenuProvider menuprovider = blockstate.getMenuProvider(p_9267_, blockpos);
+
+           if (menuprovider != null) {
+               p_9266_.openMenu(menuprovider);
+               return InteractionResult.SUCCESS;
+           } else {
+               return InteractionResult.PASS;
+           }
+       } else {
+           UseOnContext useoncontext = new UseOnContext(p_9266_, p_9269_, p_9270_);
+           if (event.getUseItem() != net.minecraftforge.eventbus.api.Event.Result.DENY) {
+               InteractionResult result = p_9268_.onItemUseFirst(useoncontext);
+               if (result != InteractionResult.PASS) return result;
+           }
+           boolean flag = !p_9266_.getMainHandItem().isEmpty() || !p_9266_.getOffhandItem().isEmpty();
+           boolean flag1 = p_9266_.isSecondaryUseActive() && flag;
+           flag1 &= !(p_9266_.getMainHandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_) && p_9266_.getOffhandItem().doesSneakBypassUse(p_9267_, blockpos, p_9266_));
+           ItemStack itemstack = p_9268_.copy();
+           if (event.getUseBlock() == net.minecraftforge.eventbus.api.Event.Result.ALLOW || (event.getUseBlock() != net.minecraftforge.eventbus.api.Event.Result.DENY && !flag1)) {
+               ItemInteractionResult iteminteractionresult = blockstate.useItemOn(p_9266_.getItemInHand(p_9269_), p_9267_, p_9266_, p_9269_, p_9270_);
+               if (iteminteractionresult.consumesAction()) {
+                   CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
+                   return iteminteractionresult.result();
+               }
+
+               if (iteminteractionresult == ItemInteractionResult.PASS_TO_DEFAULT_BLOCK_INTERACTION && p_9269_ == InteractionHand.MAIN_HAND) {
+                   InteractionResult interactionresult = blockstate.useWithoutItem(p_9267_, p_9266_, p_9270_);
+                   if (interactionresult.consumesAction()) {
+                       CriteriaTriggers.DEFAULT_BLOCK_USE.trigger(p_9266_, blockpos);
+                       return interactionresult;
+                   }
+               }
+           }
+
+            if (event.getUseItem() == net.minecraftforge.eventbus.api.Event.Result.ALLOW || (!p_9268_.isEmpty() && !p_9266_.getCooldowns().isOnCooldown(p_9268_.getItem()))) {
+                if (event.getUseItem() == net.minecraftforge.eventbus.api.Event.Result.DENY) return InteractionResult.PASS;
                 InteractionResult interactionresult1;
                 if (this.isCreative()) {
                     int i = p_9268_.getCount();
@@ -348,16 +_,15 @@
                     interactionresult1 = p_9268_.useOn(useoncontext);
                 }
 
-                if (interactionresult1.consumesAction()) {
-                    CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
-                }
+               if (interactionresult1.consumesAction()) {
+                   CriteriaTriggers.ITEM_USED_ON_BLOCK.trigger(p_9266_, blockpos, itemstack);
+               }
 
-                return interactionresult1;
-            } else {
-                return InteractionResult.PASS;
-            }
-        }
-    }
+               return interactionresult1;
+           }
+       }
+       return enuminteractionresult;
+   }
 
     public void setLevel(ServerLevel p_9261_) {
         this.level = p_9261_;
