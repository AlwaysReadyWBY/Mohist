--- a/net/minecraft/server/level/ServerEntity.java
+++ b/net/minecraft/server/level/ServerEntity.java
@@ -28,6 +_,7 @@
 import net.minecraft.network.protocol.game.ClientboundUpdateAttributesPacket;
 import net.minecraft.network.protocol.game.VecDeltaCodec;
 import net.minecraft.network.syncher.SynchedEntityData;
+import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EquipmentSlot;
@@ -42,6 +_,8 @@
 import net.minecraft.world.level.saveddata.maps.MapId;
 import net.minecraft.world.level.saveddata.maps.MapItemSavedData;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.entity.Player;
+import org.bukkit.event.player.PlayerVelocityEvent;
 import org.slf4j.Logger;
 
 public class ServerEntity {
@@ -67,8 +_,12 @@
     private boolean wasOnGround;
     @Nullable
     private List<SynchedEntityData.DataValue<?>> trackedDataValues;
+    // CraftBukkit start
+    private final Set<ServerPlayerConnection> trackedPlayers;
 
-    public ServerEntity(ServerLevel p_8528_, Entity p_8529_, int p_8530_, boolean p_8531_, Consumer<Packet<?>> p_8532_) {
+    public ServerEntity(ServerLevel p_8528_, Entity p_8529_, int p_8530_, boolean p_8531_, Consumer<Packet<?>> p_8532_, Set<ServerPlayerConnection> trackedPlayers) {
+        this.trackedPlayers = trackedPlayers;
+        // CraftBukkit end
         this.level = p_8528_;
         this.broadcast = p_8532_;
         this.entity = p_8529_;
@@ -216,7 +_,27 @@
 
         this.tickCount++;
         if (this.entity.hurtMarked) {
-            this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
+            // CraftBukkit start - Create PlayerVelocity event
+            boolean cancelled = false;
+
+            if (this.entity instanceof ServerPlayer) {
+                Player player = (Player) this.entity.getBukkitEntity();
+                org.bukkit.util.Vector velocity = player.getVelocity();
+
+                PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
+                this.entity.level().getCraftServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    cancelled = true;
+                } else if (!velocity.equals(event.getVelocity())) {
+                    player.setVelocity(event.getVelocity());
+                }
+            }
+
+            if (!cancelled) {
+                this.broadcastAndSend(new ClientboundSetEntityMotionPacket(this.entity));
+            }
+            // CraftBukkit end
             if (this.entity instanceof AbstractHurtingProjectile abstracthurtingprojectile) {
                 this.broadcastAndSend(
                     new ClientboundProjectilePowerPacket(
@@ -239,6 +_,7 @@
     public void removePairing(ServerPlayer p_8535_) {
         this.entity.stopSeenByPlayer(p_8535_);
         p_8535_.connection.send(new ClientboundRemoveEntitiesPacket(this.entity.getId()));
+        net.minecraftforge.event.ForgeEventFactory.onStopEntityTracking(this.entity, p_8535_);
     }
 
     public void addPairing(ServerPlayer p_8542_) {
@@ -246,11 +_,15 @@
         this.sendPairingData(p_8542_, list::add);
         p_8542_.connection.send(new ClientboundBundlePacket(list));
         this.entity.startSeenByPlayer(p_8542_);
+        net.minecraftforge.event.ForgeEventFactory.onStartEntityTracking(this.entity, p_8542_);
     }
 
     public void sendPairingData(ServerPlayer p_289562_, Consumer<Packet<ClientGamePacketListener>> p_289563_) {
         if (this.entity.isRemoved()) {
-            LOGGER.warn("Fetching packet for removed entity {}", this.entity);
+            // CraftBukkit start - Remove useless error spam, just return
+            // LOGGER.warn("Fetching packet for removed entity {}", (Object)this.entity);
+            return;
+            // CraftBukkit end
         }
 
         Packet<ClientGamePacketListener> packet = this.entity.getAddEntityPacket();
@@ -262,12 +_,17 @@
 
         boolean flag = this.trackDelta;
         if (this.entity instanceof LivingEntity) {
-            Collection<AttributeInstance> collection = ((LivingEntity)this.entity).getAttributes().getSyncableAttributes();
+            Collection<AttributeInstance> collection = ((LivingEntity) this.entity).getAttributes().getSyncableAttributes();
+            // CraftBukkit start - If sending own attributes send scaled health instead of current maximum health
+            if (this.entity.getId() == p_289562_.getId()) {
+                ((ServerPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(collection, false);
+            }
+            // CraftBukkit end
             if (!collection.isEmpty()) {
                 p_289563_.accept(new ClientboundUpdateAttributesPacket(this.entity.getId(), collection));
             }
 
-            if (((LivingEntity)this.entity).isFallFlying()) {
+            if (((LivingEntity) this.entity).isFallFlying()) {
                 flag = true;
             }
         }
@@ -290,7 +_,8 @@
             if (!list.isEmpty()) {
                 p_289563_.accept(new ClientboundSetEquipmentPacket(this.entity.getId(), list));
             }
-        }
+         	((LivingEntity) this.entity).detectEquipmentUpdates(); // CraftBukkit - SPIGOT-3789: sync again immediately after sending
+      	}
 
         if (!this.entity.getPassengers().isEmpty()) {
             p_289563_.accept(new ClientboundSetPassengersPacket(this.entity));
@@ -316,6 +_,11 @@
         if (this.entity instanceof LivingEntity) {
             Set<AttributeInstance> set = ((LivingEntity)this.entity).getAttributes().getDirtyAttributes();
             if (!set.isEmpty()) {
+                // CraftBukkit start - Send scaled max health
+                if (this.entity instanceof ServerPlayer) {
+                    ((ServerPlayer) this.entity).getBukkitEntity().injectScaledMaxHealth(set, false);
+                }
+                // CraftBukkit end
                 this.broadcastAndSend(new ClientboundUpdateAttributesPacket(this.entity.getId(), set));
             }
 
