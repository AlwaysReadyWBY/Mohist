
 
                             this.player.absMoveTo(d0, d1, d2, f, f1);
                             if (!this.player.noPhysics && !this.player.isSleeping() && (flag2 && worldserver.noCollision(this.player, axisalignedbb) || this.isPlayerCollidingWithAnythingNew(worldserver, axisalignedbb))) {
-                                this.teleport(d3, d4, d5, f, f1);
+                                this.internalTeleport(d3, d4, d5, f, f1, Collections.emptySet(), false); // CraftBukkit - SPIGOT-1807: Don't call teleport event, when the client thinks the player is falling, because the chunks are not loaded on the client yet.
                             } else {
+                                // CraftBukkit start - fire PlayerMoveEvent
+                                // Rest to old location first
+                                this.player.absMoveTo(prevX, prevY, prevZ, prevYaw, prevPitch);
+
+                                Player player = this.getCraftPlayer();
+                                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
+                                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+
+                                // If the packet contains movement information then we update the To location with the correct XYZ.
+                                if (packetplayinflying.hasPos) {
+                                    to.setX(packetplayinflying.x);
+                                    to.setY(packetplayinflying.y);
+                                    to.setZ(packetplayinflying.z);
+                                }
+
+                                // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                                if (packetplayinflying.hasRot) {
+                                    to.setYaw(packetplayinflying.yRot);
+                                    to.setPitch(packetplayinflying.xRot);
+                                }
+
+                                // Prevent 40 event-calls for less than a single pixel of movement >.>
+                                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                                if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isImmobile()) {
+                                    this.lastPosX = to.getX();
+                                    this.lastPosY = to.getY();
+                                    this.lastPosZ = to.getZ();
+                                    this.lastYaw = to.getYaw();
+                                    this.lastPitch = to.getPitch();
+
+                                    // Skip the first time we do this
+                                    if (from.getX() != Double.MAX_VALUE) {
+                                        Location oldTo = to.clone();
+                                        PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                                        this.cserver.getPluginManager().callEvent(event);
+
+                                        // If the event is cancelled we move the player back to their old location.
+                                        if (event.isCancelled()) {
+                                            teleport(from);
+                                            return;
+                                        }
+
+                                        // If a Plugin has changed the To destination then we teleport the Player
+                                        // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                                        // We only do this if the Event was not cancelled.
+                                        if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.PLUGIN);
+                                            return;
+                                        }
+
+                                        // Check to see if the Players Location has some how changed during the call of the event.
+                                        // This can happen due to a plugin teleporting the player instead of using .setTo()
+                                        if (!from.equals(this.getCraftPlayer().getLocation()) && this.justTeleported) {
+                                            this.justTeleported = false;
+                                            return;
+                                        }
+                                    }
+                                }
+                                this.player.absMoveTo(d0, d1, d2, f, f1); // Copied from above
+                                // CraftBukkit end
+
                                 this.clientIsFloating = d12 >= -0.03125D && !flag1 && this.player.gameMode.getGameModeForPlayer() != EnumGamemode.SPECTATOR && !this.server.isFlightAllowed() && !this.player.getAbilities().mayfly && !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.isFallFlying() && !this.player.isAutoSpinAttack() && this.noBlocksAround(this.player);
                                 this.player.getLevel().getChunkSource().move(this.player);
                                 this.player.doCheckFallDamage(this.player.getY() - d6, packetplayinflying.isOnGround());
@@ -1058,19 +1400,80 @@
         return true;
     }
 
+    // CraftBukkit start - Delegate to teleport(Location)
     public void dismount(double d0, double d1, double d2, float f, float f1) {
-        this.teleport(d0, d1, d2, f, f1, Collections.emptySet(), true);
+        this.dismount(d0, d1, d2, f, f1, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public void dismount(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
+        this.teleport(d0, d1, d2, f, f1, Collections.emptySet(), true, cause);
     }
 
     public void teleport(double d0, double d1, double d2, float f, float f1) {
-        this.teleport(d0, d1, d2, f, f1, Collections.emptySet(), false);
+        this.teleport(d0, d1, d2, f, f1, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public void teleport(double d0, double d1, double d2, float f, float f1, PlayerTeleportEvent.TeleportCause cause) {
+        this.teleport(d0, d1, d2, f, f1, Collections.emptySet(), false, cause);
     }
 
     public void teleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
-        this.teleport(d0, d1, d2, f, f1, set, false);
+        this.teleport(d0, d1, d2, f, f1, set, PlayerTeleportEvent.TeleportCause.UNKNOWN);
     }
 
-    public void teleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, boolean flag) {
+    public void teleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, PlayerTeleportEvent.TeleportCause cause) {
+        this.teleport(d0, d1, d2, f, f1, set, false, cause);
+    }
+
+    public boolean teleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, boolean flag, PlayerTeleportEvent.TeleportCause cause) { // CraftBukkit - Return event status
+        Player player = this.getCraftPlayer();
+        Location from = player.getLocation();
+
+        double x = d0;
+        double y = d1;
+        double z = d2;
+        float yaw = f;
+        float pitch = f1;
+
+        Location to = new Location(this.getCraftPlayer().getWorld(), x, y, z, yaw, pitch);
+        // SPIGOT-5171: Triggered on join
+        if (from.equals(to)) {
+            this.internalTeleport(d0, d1, d2, f, f1, set, flag);
+            return false; // CraftBukkit - Return event status
+        }
+
+        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled() || !to.equals(event.getTo())) {
+            set.clear(); // Can't relative teleport
+            to = event.isCancelled() ? event.getFrom() : event.getTo();
+            d0 = to.getX();
+            d1 = to.getY();
+            d2 = to.getZ();
+            f = to.getYaw();
+            f1 = to.getPitch();
+        }
+
+        this.internalTeleport(d0, d1, d2, f, f1, set, flag);
+        return event.isCancelled(); // CraftBukkit - Return event status
+    }
+
+    public void teleport(Location dest) {
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet(), true);
+    }
+
+    private void internalTeleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, boolean flag) {
+        // CraftBukkit start
+        if (Float.isNaN(f)) {
+            f = 0;
+        }
+        if (Float.isNaN(f1)) {
+            f1 = 0;
+        }
+
+        this.justTeleported = true;
+        // CraftBukkit end
         double d3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ? this.player.getX() : 0.0D;
         double d4 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ? this.player.getY() : 0.0D;
         double d5 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ? this.player.getZ() : 0.0D;
@@ -1082,6 +1485,14 @@
             this.awaitingTeleport = 0;
         }
 
+        // CraftBukkit start - update last location
+        this.lastPosX = this.awaitingPositionFromClient.x;
+        this.lastPosY = this.awaitingPositionFromClient.y;
+        this.lastPosZ = this.awaitingPositionFromClient.z;
+        this.lastYaw = f;
+        this.lastPitch = f1;
+        // CraftBukkit end
+
         this.awaitingTeleportTime = this.tickCount;
         this.player.absMoveTo(d0, d1, d2, f, f1);
         this.player.connection.send(new PacketPlayOutPosition(d0 - d3, d1 - d4, d2 - d5, f - f2, f1 - f3, set, this.awaitingTeleport, flag));
@@ -1090,6 +1501,7 @@
     @Override
     public void handlePlayerAction(PacketPlayInBlockDig packetplayinblockdig) {
         PlayerConnectionUtils.ensureRunningOnSameThread(packetplayinblockdig, this, this.player.getLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         BlockPosition blockposition = packetplayinblockdig.getPos();
 
         this.player.resetLastActionTime();
@@ -1100,14 +1512,46 @@
                 if (!this.player.isSpectator()) {
                     ItemStack itemstack = this.player.getItemInHand(EnumHand.OFF_HAND);
 
-                    this.player.setItemInHand(EnumHand.OFF_HAND, this.player.getItemInHand(EnumHand.MAIN_HAND));
-                    this.player.setItemInHand(EnumHand.MAIN_HAND, itemstack);
+                    // CraftBukkit start - inspiration taken from DispenserRegistry (See SpigotCraft#394)
+                    CraftItemStack mainHand = CraftItemStack.asCraftMirror(itemstack);
+                    CraftItemStack offHand = CraftItemStack.asCraftMirror(this.player.getItemInHand(EnumHand.MAIN_HAND));
+                    PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getCraftPlayer(), mainHand.clone(), offHand.clone());
+                    this.cserver.getPluginManager().callEvent(swapItemsEvent);
+                    if (swapItemsEvent.isCancelled()) {
+                        return;
+                    }
+                    if (swapItemsEvent.getOffHandItem().equals(offHand)) {
+                        this.player.setItemInHand(EnumHand.OFF_HAND, this.player.getItemInHand(EnumHand.MAIN_HAND));
+                    } else {
+                        this.player.setItemInHand(EnumHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
+                    }
+                    if (swapItemsEvent.getMainHandItem().equals(mainHand)) {
+                        this.player.setItemInHand(EnumHand.MAIN_HAND, itemstack);
+                    } else {
+                        this.player.setItemInHand(EnumHand.MAIN_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem()));
+                    }
+                    // CraftBukkit end
                     this.player.stopUsingItem();
                 }
 
                 return;
             case DROP_ITEM:
                 if (!this.player.isSpectator()) {
+                    // limit how quickly items can be dropped
+                    // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+                    if (this.lastDropTick != MinecraftServer.currentTick) {
+                        this.dropCount = 0;
+                        this.lastDropTick = MinecraftServer.currentTick;
+                    } else {
+                        // Else we increment the drop count and check the amount.
+                        this.dropCount++;
+                        if (this.dropCount >= 20) {
+                            LOGGER.warn(this.player.getScoreboardName() + " dropped their items too quickly!");
+                            this.disconnect("You dropped your items too quickly (Hacking?)");
+                            return;
+                        }
+                    }
+                    // CraftBukkit end
                     this.player.drop(false);
                 }
 
@@ -1145,6 +1589,7 @@
     @Override
     public void handleUseItemOn(PacketPlayInUseItem packetplayinuseitem) {
         PlayerConnectionUtils.ensureRunningOnSameThread(packetplayinuseitem, this, this.player.getLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.player.connection.ackBlockChangesUpTo(packetplayinuseitem.getSequence());
         WorldServer worldserver = this.player.getLevel();
         EnumHand enumhand = packetplayinuseitem.getHand();
@@ -1166,6 +1611,7 @@
 
                 if (blockposition.getY() < i) {
                     if (this.awaitingPositionFromClient == null && this.player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && worldserver.mayInteract(this.player, blockposition)) {
+                        this.player.stopUsingItem(); // CraftBukkit - SPIGOT-4706
                         EnumInteractionResult enuminteractionresult = this.player.gameMode.useItemOn(this.player, worldserver, itemstack, enumhand, movingobjectpositionblock);
 
                         if (enumdirection == EnumDirection.UP && !enuminteractionresult.consumesAction() && blockposition.getY() >= i - 1 && wasBlockPlacementAttempt(this.player, itemstack)) {
@@ -1193,6 +1639,7 @@
     @Override
     public void handleUseItem(PacketPlayInBlockPlace packetplayinblockplace) {
         PlayerConnectionUtils.ensureRunningOnSameThread(packetplayinblockplace, this, this.player.getLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         this.ackBlockChangesUpTo(packetplayinblockplace.getSequence());
         WorldServer worldserver = this.player.getLevel();
         EnumHand enumhand = packetplayinblockplace.getHand();
@@ -1200,6 +1647,49 @@
 
         this.player.resetLastActionTime();
         if (!itemstack.isEmpty()) {
+            // CraftBukkit start
+            // Raytrace to look for 'rogue armswings'
+            float f1 = this.player.getXRot();
+            float f2 = this.player.getYRot();
+            double d0 = this.player.getX();
+            double d1 = this.player.getY() + (double) this.player.getEyeHeight();
+            double d2 = this.player.getZ();
+            Vec3D vec3d = new Vec3D(d0, d1, d2);
+
+            float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+            float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+            float f6 = MathHelper.sin(-f1 * 0.017453292F);
+            float f7 = f4 * f5;
+            float f8 = f3 * f5;
+            double d3 = player.gameMode.getGameModeForPlayer()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+            Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+            MovingObjectPosition movingobjectposition = this.player.level.clip(new RayTrace(vec3d, vec3d1, RayTrace.BlockCollisionOption.OUTLINE, RayTrace.FluidCollisionOption.NONE, player));
+
+            boolean cancelled;
+            if (movingobjectposition == null || movingobjectposition.getType() != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack, enumhand);
+                cancelled = event.useItemInHand() == Event.Result.DENY;
+            } else {
+                MovingObjectPositionBlock movingobjectpositionblock = (MovingObjectPositionBlock) movingobjectposition;
+                if (player.gameMode.firedInteract && player.gameMode.interactPosition.equals(movingobjectpositionblock.getBlockPos()) && player.gameMode.interactHand == enumhand && ItemStack.tagMatches(player.gameMode.interactItemStack, itemstack)) {
+                    cancelled = player.gameMode.interactResult;
+                } else {
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectpositionblock.getBlockPos(), movingobjectpositionblock.getDirection(), itemstack, true, enumhand);
+                    cancelled = event.useItemInHand() == Event.Result.DENY;
+                }
+                player.gameMode.firedInteract = false;
+            }
+
+            if (cancelled) {
+                this.player.getBukkitEntity().updateInventory(); // SPIGOT-2524
+                return;
+            }
+            itemstack = this.player.getItemInHand(enumhand); // Update in case it was changed in the event
+            if (itemstack.isEmpty()) {
+                return;
+            }
+            // CraftBukkit end
             EnumInteractionResult enuminteractionresult = this.player.gameMode.useItem(this.player, worldserver, itemstack, enumhand);
 
             if (enuminteractionresult.shouldSwing()) {
@@ -1220,7 +1710,7 @@
                 Entity entity = packetplayinspectate.getEntity(worldserver);
 
                 if (entity != null) {
-                    this.player.teleportTo(worldserver, entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
+                    this.player.teleportTo(worldserver, entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot(), org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.SPECTATE); // CraftBukkit
                     return;
                 }
             }
@@ -1235,6 +1725,7 @@
             PlayerConnection.LOGGER.info("Disconnecting {} due to resource pack rejection", this.player.getName());
             this.disconnect(IChatBaseComponent.translatable("multiplayer.requiredTexturePrompt.disconnect"));
         }
+        this.cserver.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getCraftPlayer(), PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.action.ordinal()])); // CraftBukkit
 
     }
 
@@ -1254,11 +1745,26 @@
 
     @Override
     public void onDisconnect(IChatBaseComponent ichatbasecomponent) {
+        // CraftBukkit start - Rarely it would send a disconnect line twice
+        if (this.processedDisconnect) {
+            return;
+        } else {
+            this.processedDisconnect = true;
+        }
+        // CraftBukkit end
         PlayerConnection.LOGGER.info("{} lost connection: {}", this.player.getName().getString(), ichatbasecomponent.getString());
+        // CraftBukkit start - Replace vanilla quit message handling with our own.
+        /*
         this.server.invalidateStatus();
         this.server.getPlayerList().broadcastSystemMessage(IChatBaseComponent.translatable("multiplayer.player.left", this.player.getDisplayName()).withStyle(EnumChatFormat.YELLOW), false);
+        */
+
         this.player.disconnect();
-        this.server.getPlayerList().remove(this.player);
+        String quitMessage = this.server.getPlayerList().remove(this.player);
+        if ((quitMessage != null) && (quitMessage.length() > 0)) {
+            this.server.getPlayerList().broadcastMessage(CraftChatMessage.fromString(quitMessage));
+        }
+        // CraftBukkit end
         this.player.getTextFilter().leave();
         if (this.isSingleplayerOwner()) {
             PlayerConnection.LOGGER.info("Stopping singleplayer server as player logged out");
@@ -1281,6 +1787,15 @@
     }
 
     public void send(Packet<?> packet, @Nullable PacketSendListener packetsendlistener) {
+        // CraftBukkit start
+        if (packet == null) {
+            return;
+        } else if (packet instanceof PacketPlayOutSpawnPosition) {
+            PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
+            this.player.compassTarget = new Location(this.getCraftPlayer().getWorld(), packet6.pos.getX(), packet6.pos.getY(), packet6.pos.getZ());
+        }
+        // CraftBukkit end
+
         try {
             this.connection.send(packet, packetsendlistener);
         } catch (Throwable throwable) {
@@ -1297,7 +1812,16 @@
     @Override
     public void handleSetCarriedItem(PacketPlayInHeldItemSlot packetplayinhelditemslot) {
         PlayerConnectionUtils.ensureRunningOnSameThread(packetplayinhelditemslot, this, this.player.getLevel());
+        if (this.player.isImmobile()) return; // CraftBukkit
         if (packetplayinhelditemslot.getSlot() >= 0 && packetplayinhelditemslot.getSlot() < PlayerInventory.getSelectionSize()) {
+            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getCraftPlayer(), this.player.getInventory().selected, packetplayinhelditemslot.getSlot());
+            this.cserver.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                this.send(new PacketPlayOutHeldItemSlot(this.player.getInventory().selected));
+                this.player.resetLastActionTime();
+                return;
+            }
+            // CraftBukkit end
             if (this.player.getInventory().selected != packetplayinhelditemslot.getSlot() && this.player.getUsedItemHand() == EnumHand.MAIN_HAND) {
                 this.player.stopUsingItem();
             }
@@ -1306,16 +1830,23 @@
             this.player.resetLastActionTime();
         } else {
             PlayerConnection.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName().getString());
+            this.disconnect("Invalid hotbar selection (Hacking?)"); // CraftBukkit
         }
     }
 
     @Override
     public void handleChat(PacketPlayInChat packetplayinchat) {
+        // CraftBukkit start - async chat
+        // SPIGOT-3638
+        if (this.server.isStopped()) {
+            return;
+        }
+        // CraftBukkit end
         if (isChatMessageIllegal(packetplayinchat.message())) {
             this.disconnect(IChatBaseComponent.translatable("multiplayer.disconnect.illegal_characters"));
         } else {
             if (this.tryHandleChat(packetplayinchat.message(), packetplayinchat.timeStamp(), packetplayinchat.lastSeenMessages())) {
-                this.server.submit(() -> {
+                // this.server.submit(() -> { // CraftBukkit - async chat
                     PlayerChatMessage playerchatmessage = this.getSignedMessage(packetplayinchat);
 
                     if (this.verifyChatMessage(playerchatmessage)) {
@@ -1328,10 +1859,10 @@
                                 PlayerChatMessage playerchatmessage1 = ((PlayerChatMessage) completablefuture1.join()).filter(filtermask);
 
                                 this.broadcastChatMessage(playerchatmessage1);
-                            }, this.server);
+                            }, this.server.chatExecutor); // CraftBukkit - async chat
                         });
                     }
-                });
+                // }); // CraftBukkit - async chat
             }
 
         }
@@ -1353,8 +1884,21 @@
     }
 
     private void performChatCommand(ServerboundChatCommandPacket serverboundchatcommandpacket) {
-        ParseResults<CommandListenerWrapper> parseresults = this.parseCommand(serverboundchatcommandpacket.command());
-        Map<String, PlayerChatMessage> map = this.collectSignedArguments(serverboundchatcommandpacket, PreviewableCommand.of(parseresults));
+        // CraftBukkit start
+        String command = "/" + serverboundchatcommandpacket.command();
+        PlayerConnection.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + command);
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(getCraftPlayer(), command, new LazyPlayerSet(server));
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+        command = event.getMessage().substring(1);
+
+        ParseResults<CommandListenerWrapper> parseresults = this.parseCommand(command);
+        Map<String, PlayerChatMessage> map = (serverboundchatcommandpacket.command().equals(command)) ? this.collectSignedArguments(serverboundchatcommandpacket, PreviewableCommand.of(parseresults)) : Collections.emptyMap();
+        // CraftBukkit end
         Iterator iterator = map.values().iterator();
 
         PlayerChatMessage playerchatmessage;
@@ -1366,7 +1910,7 @@
                 parseresults = CommandDispatcher.mapSource(parseresults, (commandlistenerwrapper) -> {
                     return commandlistenerwrapper.withSigningContext(commandsigningcontext_a);
                 });
-                this.server.getCommands().performCommand(parseresults, serverboundchatcommandpacket.command());
+                this.server.getCommands().performCommand(parseresults, command); // CraftBukkit
                 return;
             }
 
@@ -1415,7 +1959,7 @@
             PlayerConnection.LOGGER.warn("{} sent out-of-order chat: '{}'", this.player.getName().getString(), s);
             this.disconnect(IChatBaseComponent.translatable("multiplayer.disconnect.out_of_order_chat"));
             return false;
-        } else if (this.player.getChatVisibility() == EnumChatVisibility.HIDDEN) {
+        } else if (this.player.isRemoved() || this.player.getChatVisibility() == EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
             this.send(new ClientboundSystemChatPacket(IChatBaseComponent.translatable("chat.disabled.options").withStyle(EnumChatFormat.RED), false));
             return false;
         } else {
@@ -1459,6 +2003,135 @@
         return false;
     }
 
+    // CraftBukkit start - add method
+    public void chat(String s, PlayerChatMessage original, boolean async) {
+        if (s.isEmpty() || this.player.getChatVisibility() == EnumChatVisibility.HIDDEN) {
+            return;
+        }
+        OutgoingPlayerChatMessage outgoing = OutgoingPlayerChatMessage.create(original);
+
+        if (!async && s.startsWith("/")) {
+            this.handleCommand(s);
+        } else if (this.player.getChatVisibility() == EnumChatVisibility.SYSTEM) {
+            // Do nothing, this is coming from a plugin
+        } else {
+            Player player = this.getCraftPlayer();
+            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(server));
+            String originalFormat = event.getFormat(), originalMessage = event.getMessage();
+            this.cserver.getPluginManager().callEvent(event);
+
+            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                // Evil plugins still listening to deprecated event
+                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                queueEvent.setCancelled(event.isCancelled());
+                Waitable waitable = new Waitable() {
+                    @Override
+                    protected Object evaluate() {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+
+                        if (queueEvent.isCancelled()) {
+                            if (outgoing != null) {
+                                outgoing.sendHeadersToRemainingPlayers(PlayerConnection.this.server.getPlayerList());
+                            }
+                            return null;
+                        }
+
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
+                            if (originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) {
+                                PlayerConnection.this.server.getPlayerList().broadcastChatMessage(original, PlayerConnection.this.player, ChatMessageType.bind(ChatMessageType.CHAT, (Entity) PlayerConnection.this.player));
+                                return null;
+                            } else if (CraftChatMessage.fromComponent(original.serverContent()).equals(message)) {
+                                PlayerConnection.this.server.getPlayerList().broadcastChatMessage(original, PlayerConnection.this.player, ChatMessageType.bind(ChatMessageType.RAW, (Entity) PlayerConnection.this.player));
+                                return null;
+                            }
+
+                            for (EntityPlayer recipient : server.getPlayerList().players) {
+                                recipient.getBukkitEntity().sendMessage(PlayerConnection.this.player.getUUID(), message);
+                            }
+                        } else {
+                            for (Player player : queueEvent.getRecipients()) {
+                                player.sendMessage(PlayerConnection.this.player.getUUID(), message);
+                            }
+                        }
+                        PlayerConnection.this.server.console.sendMessage(message);
+
+                        if (outgoing != null) {
+                            outgoing.sendHeadersToRemainingPlayers(PlayerConnection.this.server.getPlayerList());
+                        }
+                        return null;
+                    }};
+                if (async) {
+                    server.processQueue.add(waitable);
+                } else {
+                    waitable.run();
+                }
+                try {
+                    waitable.get();
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                } catch (ExecutionException e) {
+                    throw new RuntimeException("Exception processing chat event", e.getCause());
+                }
+            } else {
+                if (event.isCancelled()) {
+                    if (outgoing != null) {
+                        outgoing.sendHeadersToRemainingPlayers(PlayerConnection.this.server.getPlayerList());
+                    }
+                    return;
+                }
+
+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+                if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
+                    if (originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) {
+                        PlayerConnection.this.server.getPlayerList().broadcastChatMessage(original, PlayerConnection.this.player, ChatMessageType.bind(ChatMessageType.CHAT, (Entity) PlayerConnection.this.player));
+                        return;
+                    } else if (CraftChatMessage.fromComponent(original.serverContent()).equals(s)) {
+                        PlayerConnection.this.server.getPlayerList().broadcastChatMessage(original, PlayerConnection.this.player, ChatMessageType.bind(ChatMessageType.RAW, (Entity) PlayerConnection.this.player));
+                        return;
+                    }
+
+                    for (EntityPlayer recipient : server.getPlayerList().players) {
+                        recipient.getBukkitEntity().sendMessage(PlayerConnection.this.player.getUUID(), s);
+                    }
+                } else {
+                    for (Player recipient : event.getRecipients()) {
+                        recipient.sendMessage(PlayerConnection.this.player.getUUID(), s);
+                    }
+                }
+                server.console.sendMessage(s);
+
+                if (outgoing != null) {
+                    outgoing.sendHeadersToRemainingPlayers(PlayerConnection.this.server.getPlayerList());
+                }
+            }
+        }
+    }
+
+    private void handleCommand(String s) {
+        this.LOGGER.info(this.player.getScoreboardName() + " issued server command: " + s);
+
+        CraftPlayer player = this.getCraftPlayer();
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(server));
+        this.cserver.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        try {
+            if (this.cserver.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
+                return;
+            }
+        } catch (org.bukkit.command.CommandException ex) {
+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            return;
+        }
+    }
+    // CraftBukkit end
+
     private PlayerChatMessage getSignedMessage(PacketPlayInChat packetplayinchat) {
         MessageSigner messagesigner = packetplayinchat.getSigner(this.player);
         SignedMessageChain.c signedmessagechain_c = new SignedMessageChain.c(packetplayinchat.signature());
@@ -1475,7 +2148,28 @@
     }
 
     private void broadcastChatMessage(PlayerChatMessage playerchatmessage) {
-        this.server.getPlayerList().broadcastChatMessage(playerchatmessage, this.player, ChatMessageType.bind(ChatMessageType.CHAT, (Entity) this.player));
+        // CraftBukkit start
+        String s = playerchatmessage.signedContent().plain();
+        if (s.isEmpty()) {
+            LOGGER.warn(this.player.getScoreboardName() + " tried to send an empty message");
+        } else if (getCraftPlayer().isConversing()) {
+            OutgoingPlayerChatMessage outgoing = OutgoingPlayerChatMessage.create(playerchatmessage);
+            outgoing.sendHeadersToRemainingPlayers(this.server.getPlayerList());
+
+            final String conversationInput = s;
+            this.server.processQueue.add(new Runnable() {
+                @Override
+                public void run() {
+                    getCraftPlayer().acceptConversationInput(conversationInput);
+                }
+            });
+        } else if (this.player.getChatVisibility() == EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
+            this.send(new ClientboundSystemChatPacket(IChatBaseComponent.translatable("chat.cannotSend").withStyle(EnumChatFormat.RED), false));
+        } else {
+            this.chat(s, playerchatmessage, true);
+        }
+        // this.server.getPlayerList().broadcastChatMessage(playerchatmessage, this.player, ChatMessageType.bind(ChatMessageType.CHAT, (Entity) this.player));
+        // CraftBukkit end
         this.detectRateSpam();
     }